steps:
  - task: UseDotNet@2
    displayName: 'Use .NET Core sdk 8.0.x'
    inputs:
      version: 8.0.x
      includePreviewVersions: true
      performMultiLevelLookup: true

  - task: DotNetCoreCLI@2
    displayName: 'Datahub Function Unit Tests'
    condition: succeededOrFailed()
    inputs:
      command: 'test'
      projects: 'Portal/test/Datahub.Functions.UnitTests/Datahub.Functions.UnitTests.csproj'
      testRunTitle: 'Datahub Function Unit Tests'
      arguments:  '--collect "Code coverage"'

  - task: DotNetCoreCLI@2
    displayName: 'Datahub Infrastructure Unit Tests'
    condition: succeededOrFailed()
    inputs:
      command: 'test'
      projects: 'Portal/test/Datahub.Infrastructure.UnitTests/Datahub.Infrastructure.UnitTests.csproj'
      testRunTitle: 'Datahub Infrastructure Unit Tests'
      arguments:  '--collect "Code coverage"'

  - task: DotNetCoreCLI@2
    displayName: 'Datahub Specflow Tests'
    condition: succeededOrFailed()
    inputs:
      command: 'test'
      projects: 'Portal/test/Datahub.SpecflowTests/Datahub.SpecflowTests.csproj'
      testRunTitle: 'Datahub Specflow Tests'
      arguments:  '--collect "Code coverage"'

  - task: DotNetCoreCLI@2
    displayName: 'Datahub Specs Tests'
    condition: succeededOrFailed()
    inputs:
      command: 'test'
      projects: 'Portal/test/Datahub.Specs/Datahub.Specs.csproj'
      testRunTitle: 'Datahub Specs Tests'
      arguments:  '--collect "Code coverage"'

  - task: DotNetCoreCLI@2
    displayName: 'Datahub Unit Tests'
    condition: succeededOrFailed()
    inputs:
      command: 'test'
      projects: 'Portal/test/Datahub.Tests/Datahub.Tests.csproj'
      testRunTitle: 'Datahub Unit Tests'
      arguments: '--configuration $(buildConfiguration) --collect:"XPlat Code Coverage"'
      
  - script: |
        dotnet tool install -g dotnet-reportgenerator-globaltool
        reportgenerator -reports:$(Agent.WorkFolder)/**/coverage.cobertura.xml -targetdir:$(Build.SourcesDirectory)/Portal/test/CodeCoverage -reporttypes:'HtmlInline_AzurePipelines;Cobertura'
        # IMPORTANT - set `disable.coverage.autogenerate` to true if you want to use older reportgenerator version
        echo "##vso[task.setvariable variable=disable.coverage.autogenerate;]true"
    displayName: Create code coverage report
      
  - task: PublishCodeCoverageResults@1
    displayName: 'Publish code coverage report'
    inputs:
      codeCoverageTool: 'Cobertura'
      summaryFileLocation: '$(Build.SourcesDirectory)/Portal/test/CodeCoverage/Cobertura.xml'
      reportDirectory: '$(Build.SourcesDirectory)/Portal/test/CodeCoverage'