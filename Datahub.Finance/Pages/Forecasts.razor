@inject IStringLocalizer Localizer
@implements IDisposable
@inject IDbContextFactory<FinanceDBContext> DbFactory
@inject NavigationManager NavigationManager
@inject IJSRuntime JsInterop
@inject ServiceAuthManager ServiceAuthManager
@inject IUserInformationService UserInformationService
@inject IDatahubAuditingService AuditingService
@inject IDialogService DialogService
@page "/finance/forecasts/{fundcenterId}"
@using System.Linq.Expressions
@using MudBlazor

@if (!string.IsNullOrEmpty(_branch))
{
    <Datahub.Finance.Components.AccessControl Branch="@_branch" Email="@_user.Mail" IsValid=@AllowAccess></Datahub.Finance.Components.AccessControl>
}

@if (_isAuthorized)
{
    <MudCard>    
        <MudCardContent>
            <MudTable Items="@_fundCenters" Hover="true" Loading="@_isLoading">
                <ToolBarContent>
                    <MudText Typo="Typo.h6">@Localizer["FC Details"]</MudText>
                </ToolBarContent>
                <HeaderContent>
                    <MudTh>@Localizer["Sector"]</MudTh>
                    <MudTh>@Localizer["Branch"]</MudTh>
                    <MudTh>@Localizer["Division"]</MudTh>
                    <MudTh>@Localizer["AttritionRate"]</MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd>@context.Sector?.FundCenterModifiedEnglish</MudTd>
                    <MudTd>@context.Branch?.FundCenterModifiedEnglish</MudTd>
                    <MudTd>@context.Division?.FundCenterModifiedEnglish</MudTd>
                    <MudTd>@Localizer[($"{context.AttritionRate.ToString()}%")]</MudTd>
                </RowTemplate>
            </MudTable>
        </MudCardContent>
    </MudCard>

    <Datahub.Core.Components.Form.MudFormTemplate T="Forecast"
                                         U="FinanceDBContext"
        Metadata="@_formMetadata" 
        HandleSubmit="HandleValidSubmit"
        OnConfigureForms="OnConfigure"
        OnChangeForms="OnChange"
        CreateNewRecord="CreateNewProject"
        SelectedRecord="@_forecast"
        SetFormEditRecord="SetFormEdit"    
        HandleFilterChange="HandleFilterChange"
        SortAccessors="@_sortAccessors"
        Context=@Context
        DeleteRecord="DeleteRecord"
        @key="@_formMetadata"/>


    <MudCard>
        <MudCardContent>
            <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="@(() => NavigationManager.NavigateTo("finance/fundcenters"))">Back</MudButton>
            <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="@(() => NavigationManager.NavigateTo($"finance/summaryforecasts/{_fundCenters[0].FundCenter_ID}"))">Next</MudButton>
        </MudCardContent>
    </MudCard>
}

@code {

    [Parameter]
    public string fundcenterId { get; set; }

    private const string PROJECTACRONYM = "FINGC";

    private bool _isAuthorized = false;
    private string _branch = string.Empty;    

    private FinanceDBContext Context;
    private Microsoft.Graph.User _user = null!;
    private bool _isUserAdmin;
    private bool _isLoading = true;
    private string _searchFilter = string.Empty;
    private int _lastClicked = 0;

    private List<FundCenter> _fundCenters;
    private List<Forecast> _forecasts;
    private Forecast _forecast;
    private Dictionary<string, Func<Forecast, string>> _sortAccessors = new();
    private FormMetadata<Forecast> _formMetadata = new();
    private List<string> _headers = new();

    private void OnPageClick(int pageIndex)
    {
        _lastClicked = pageIndex;
    }

    protected override async Task OnInitializedAsync()
    {
        // load projects
        Context = DbFactory.CreateDbContext();
        LoadSortExpressions();
        _user = await UserInformationService.GetCurrentGraphUserAsync();
        _isUserAdmin = await ServiceAuthManager.IsProjectAdmin(_user.Id, PROJECTACRONYM);
        _headers = new List<string>
        {
            Localizer["Planned Staffing"],
            Localizer["Position Number"],
            Localizer["Last Name"], 
            Localizer["First Name"], 
            Localizer["Indeterminate"], 
            Localizer["Classification"], 
            Localizer["Fund"], 
            Localizer["Start Date"], 
            Localizer["End Date"], 
            Localizer["FTE"], 
            Localizer["Salary"], 
            Localizer["Incremental_Replacement"], 
            Localizer["Potential_Hiring_Process"]
        };
        LoadData(_searchFilter);
        _isLoading = false;
    }

    private void LoadData(string searchfilter)
    {
        _fundCenters = Context.FundCenters.Include(f => f.Sector).Include(f => f.Branch).Include(f => f.Division).Where(f => f.FundCenter_ID.ToString() == fundcenterId).ToList();
        _branch = _fundCenters[0].Branch.FCCode;
        _forecasts = Context.Forecasts.Where(f => f.FundCenter == _fundCenters[0] && !f.Is_Deleted).ToList();
        _forecasts.ForEach(c => { if (c.Potential_Hiring_Process != null && c.Potential_Hiring_Process.GetValueOrDefault() > 0) { c.PHP_Values = Finance_Constants.Potential_Hiring_Process.Where(p => p.Id == c.Potential_Hiring_Process.GetValueOrDefault()).SingleOrDefault(); } });
        _forecasts.ForEach(c => { if (c.Incremental_Replacement != null && c.Incremental_Replacement.GetValueOrDefault() > 0) { c.IR_Values = Finance_Constants.Incremental_Replacements.Where(p => p.Id == c.Incremental_Replacement.GetValueOrDefault()).SingleOrDefault(); } });
        _forecasts.ForEach(c => { if (c.FTE_Accomodations_Location != null && c.FTE_Accomodations_Location.GetValueOrDefault() > 0) { c.FTE_Accomodations_Location_Values = Finance_Constants.FTE_Intended_Location.Where(p => p.Id == c.FTE_Accomodations_Location.GetValueOrDefault()).SingleOrDefault(); } });
        _forecasts.ForEach(c => { if (c.FTE_Accomodations_Requirements != null && c.FTE_Accomodations_Requirements.GetValueOrDefault() > 0) { c.FTE_Accomodations_Req_Values = Finance_Constants.FTE_Accomodation_Requirements.Where(p => p.Id == c.FTE_Accomodations_Requirements.GetValueOrDefault()).SingleOrDefault(); } });
        _forecasts.ForEach(c => { if (c.Position_Workspace_Type != null && c.Position_Workspace_Type.GetValueOrDefault() > 0) { c.Position_Workspace_Type_Values = Finance_Constants.Position_Workspace_Type.Where(p => p.Id == c.Position_Workspace_Type.GetValueOrDefault()).SingleOrDefault(); } });

        _formMetadata.Header = string.Empty;
        _formMetadata.SubHeader = Localizer["SFT Details"];
        _formMetadata.DataSet = _forecasts; //change when filters added
        _formMetadata.AccessorFunctions = accessorFunctions;
        _formMetadata.Headers = _headers;
        _formMetadata.AllowDelete = true;
        _formMetadata.NavigateUrls = new List<Func<Forecast, (string, string)>>();
        _formMetadata.IsSubmitEnabled = true;
    }

    private void AllowAccess(bool isChecked)
    {
        _branch = string.Empty;
        _isAuthorized = true;
    }

    private async Task DeleteRecord(Forecast forecast)
    {
        var fund = forecast.Fund;
        var summaryForecast = Context.Forecasts.Where(f => f == forecast).SingleOrDefault();
        if (summaryForecast is not null)
        {
            summaryForecast.Is_Deleted = true;
            await Context.TrackSaveChangesAsync(AuditingService);
        }
        _forecast = forecast;
        await UpdateSummaryForecasts();
        _forecast = null;
        LoadData(_searchFilter);
        StateHasChanged();
    }

    private List<Func<Forecast, string>> accessorFunctions = new List<Func<Forecast, string>>
    {
        new Func<Forecast, string>(p => { return p.Employee_Planned_Staffing ?? ""; }),
        new Func<Forecast, string>(p => { return p.Employee_Position_Number?.ToString() ?? ""; }),
        new Func<Forecast, string>(p => { return p.Employee_Last_Name ?? ""; }),
        new Func<Forecast, string>(p => { return p.Employee_First_Name ?? ""; }),
        new Func<Forecast, string>(p => { return p.Is_Indeterminate ? "True" : "False"; }),
        new Func<Forecast, string>(p => { return p.Classification; }),
        new Func<Forecast, string>(p => { return p.Fund; }),
        new Func<Forecast, string>(p => { return p.Start_Date.ToShortDateString(); }),
        new Func<Forecast, string>(p => { return p.End_Date.ToShortDateString(); }),
        new Func<Forecast, string>(p => { return p.FTE.ToString(); }),
        new Func<Forecast, string>(p => { return p.Salary.Value.ToString("C"); }),
        new Func<Forecast, string>(p => { return p.IR_Values?.EnglishText ?? "N/A"; }),
        new Func<Forecast, string>(p => { return p.PHP_Values?.EnglishText ?? "N/A"; }),
    };

    private void LoadSortExpressions()
    { 
        //_sortAccessors.Add("branch", t => t.Branch.FundCenterNameEnglish);
        //_sortAccessors.Add("sector", t => t.Sector.FundCenterNameEnglish);
        //_sortAccessors.Add("division", t => t.Division.FundCenterNameEnglish);
    }

    private void SetFormEdit(Forecast project)
    {
        _forecast = project;
        StateHasChanged();
    }

    private void CreateNewProject()
    {        
        _forecast = new Forecast() { Last_Updated_DT = DateTime.Now, Created_DT = DateTime.Now, Created_UserId = _user.Mail, FundCenter = _fundCenters[0], Start_Date = DateTime.Now, End_Date = DateTime.Now };
        StateHasChanged();
    }

    private async Task HandleValidSubmit()
    {

        if (_forecast != null && IsValidSubmission())
        {
            if (_forecast.Forecast_ID == 0)
            {
                _forecast = Context.Forecasts.Add(_forecast).Entity;
            }
            _forecast.Last_Updated_DT = DateTime.Now;
            _forecast.Potential_Hiring_Process = _forecast.PHP_Values?.Id ?? null;
            _forecast.Incremental_Replacement = _forecast.IR_Values?.Id ?? null;
            _forecast.FTE_Accomodations_Location = _forecast.FTE_Accomodations_Location_Values?.Id ?? null;
            _forecast.FTE_Accomodations_Requirements = _forecast.FTE_Accomodations_Req_Values?.Id ?? null;
            _forecast.Position_Workspace_Type = _forecast.Position_Workspace_Type_Values?.Id ?? null;

            await Context.TrackSaveChangesAsync(AuditingService);
            await UpdateSummaryForecasts();
            LoadData(_searchFilter); ;
            _forecast = null;
        }


        StateHasChanged();
    }



    private bool IsValidSubmission()
    {
        return true;
    }

    private async Task UpdateSummaryForecasts(Forecast forecast = null)
    {
        var sum = Context.Forecasts.Where(f => f.FundCenter == _fundCenters[0] && !f.Is_Deleted).Select(t => t.Salary ?? 0).Sum();
        var fteSum = Context.Forecasts.Where(f => f.FundCenter == _fundCenters[0] && !f.Is_Deleted).Select(t => t.FTE ?? 0).Sum();
        var fund = Context.SummaryForecasts.Where(f => f.Fund == _forecast.Fund && f.FundCenter == _forecast.FundCenter && !f.Is_Deleted).FirstOrDefault();


        var attritionRate = Context.FundCenters.Where(f => f.FundCenter_ID.ToString() == fundcenterId).Select(a => a.AttritionRate).FirstOrDefault() ?? 0;
        if (fund is not null)
        {
            fund.SFT_Forecast = sum * ((100 - attritionRate) / 100);
            fund.SFT_Forecast_Gross = sum;
            fund.FTE_Sum = fteSum;
        }
        else
        {
            var newFund = new SummaryForecast()
                {
                    Fund = _forecast.Fund,
                    SFT_Forecast_Gross = _forecast.Salary,
                    SFT_Forecast = (_forecast.Salary * ((100 - attritionRate) / 100)),
                    FTE_Sum = _forecast.FTE,
                    Last_Updated_DT = DateTime.Now,
                    Created_DT = DateTime.Now,
                    Created_UserId = _user.Mail,
                    FundCenter = _fundCenters[0]
                };

            Context.SummaryForecasts.Add(newFund);
        }
        await Context.SaveChangesAsync();
    }

    private async Task<Forecast> ClearForm()
    {
        _forecast = null;
        StateHasChanged();
        return await Task.FromResult((Forecast)null);
    }

    private void OnConfigure(MudBlazor.Forms.IModelFormContext context)
    {
        context.RegisterOptionValueProperty<Forecast, DropDownContainer>(l => l.PHP_Values, p => p?.EnglishText ?? "-", () => Finance_Constants.Potential_Hiring_Process);
        context.RegisterOptionValueProperty<Forecast, DropDownContainer>(l => l.IR_Values, p => p?.EnglishText ?? "-", () => Finance_Constants.Incremental_Replacements);
        context.RegisterOptionValueProperty<Forecast, DropDownContainer>(l => l.FTE_Accomodations_Location_Values, p => p?.EnglishText ?? "-", () => Finance_Constants.FTE_Intended_Location);
        context.RegisterOptionValueProperty<Forecast, DropDownContainer>(l => l.FTE_Accomodations_Req_Values, p => p?.EnglishText ?? "-", () => Finance_Constants.FTE_Accomodation_Requirements);
        context.RegisterOptionValueProperty<Forecast, DropDownContainer>(l => l.Position_Workspace_Type_Values, p => p?.EnglishText ?? "-", () => Finance_Constants.Position_Workspace_Type);

        context.SetVisible<Forecast>(p => p.Other_Locations, _forecast.FTE_Accomodations_Location_Values?.EnglishText == "Other");
    }


    private async void HandleFilterChange(string selection)
    {
        _searchFilter = selection;
        LoadData(_searchFilter);
        await InvokeAsync(StateHasChanged);
    }

    private void OnChange(ModelFormChangeArgs args)
    {
        OnConfigure(args.Context);
    }

    public void Dispose() 
    { 
        Context.Dispose(); 
    }
}
