@inject IStringLocalizer DataLocalizer
@implements IDisposable
@inject IDbContextFactory<FinanceDBContext> DbFactory
@inject NavigationManager NavigationManager
@inject IJSRuntime JsInterop
@inject ServiceAuthManager ServiceAuthManager
@inject IUserInformationService UserInformationService
@page "/finance/forecasts/{fundcenterId}"
@using System.Linq.Expressions

<Datahub.Core.Components.MudFormTemplate T="Forecast"
                                         U="FinanceDBContext"
        Metadata="@_formMetadata" 
        HandleSubmit="HandleValidSubmit"
        OnConfigureForms="OnConfigure"
        OnChangeForms="OnChange"
        CreateNewRecord="CreateNewProject"
        SelectedRecord="@_forecast"
        SetFormEditRecord="SetFormEdit"    
        HandleFilterChange="HandleFilterChange"
        SortAccessors="@_sortAccessors"
        Context=@Context/>

@code {

    [Parameter]
    public int fundcenterId { get; set; }

    private const string PROJECTACRONYM = "FINGC";

    private FinanceDBContext Context;
    private Microsoft.Graph.User _user = null!;
    private bool _isUserAdmin;
    private string _searchFilter = string.Empty;
    private int _lastClicked = 0;


    private List<Forecast> _forecasts;
    private Forecast _forecast;
    private Dictionary<string, Func<Forecast, string>> _sortAccessors = new();
    private FormMetadata<Forecast> _formMetadata = new();


    private void OnPageClick(int pageIndex)
    {
        _lastClicked = pageIndex;
    }

    protected override async Task OnInitializedAsync()
    {
        // load projects
        Context = DbFactory.CreateDbContext();
        LoadSortExpressions();
        _user = await UserInformationService.GetUserAsync();
        _isUserAdmin = await ServiceAuthManager.IsProjectAdmin(_user.Id, PROJECTACRONYM);

        LoadData(_searchFilter);
    }

    private void LoadData(string searchfilter)
    {
        _forecasts = Context.Forecasts.ToList();
        //var fundcenters = _forecasts;
        //if (!string.IsNullOrWhiteSpace(searchfilter))
        //{
        //    fundcenters = _forecasts.Where(fundcenter =>
        //    {
        //        if (string.IsNullOrWhiteSpace(searchfilter))
        //            return true;
        //        if (fundcenter.Division.FundCenterModifiedEnglish.Contains(searchfilter, StringComparison.OrdinalIgnoreCase))
        //            return true;
        //        if (fundcenter.Branch.FundCenterModifiedEnglish.Contains(searchfilter, StringComparison.OrdinalIgnoreCase))
        //            return true;
        //        if (fundcenter.Sector.FundCenterModifiedEnglish.Contains(searchfilter, StringComparison.OrdinalIgnoreCase))
        //            return true;
        //        return false;
        //    }).ToList();
        //}
        _formMetadata.Header = "Finance Forms";
        _formMetadata.SubHeader = "Salary Forecasts";
        _formMetadata.DataSet = _forecasts; //change when filters added
        _formMetadata.AccessorFunctions = accessorFunctions;
        _formMetadata.Headers = headers;
        _formMetadata.IsSubmitEnabled = true;
    }

    private async Task GoToNextSheet()
    {
        await HandleValidSubmit();
        // NavigationManager.NavigateTo($"/finance/budgets/{sector.SectorBranch_ID}");
    }

    private List<Func<Forecast, string>> accessorFunctions = new List<Func<Forecast, string>>
    {
        new Func<Forecast, string>(p => { return p.Employee_Planned_Staffing ?? ""; }),
        new Func<Forecast, string>(p => { return p.Employee_Last_Name ?? ""; }),
        new Func<Forecast, string>(p => { return p.Employee_First_Name ?? ""; }),
        new Func<Forecast, string>(p => { return p.Is_Indeterminate ? "True" : "False"; }),
        new Func<Forecast, string>(p => { return p.Classification; }),
        new Func<Forecast, string>(p => { return p.Fund; }),
        new Func<Forecast, string>(p => { return p.Start_Date.ToShortDateString(); }),
        new Func<Forecast, string>(p => { return p.End_Date.ToShortDateString(); }),
        new Func<Forecast, string>(p => { return p.FTE.ToString(); }),
        new Func<Forecast, string>(p => { return p.Salary.ToString(); }),
    };

    private void LoadSortExpressions()
    { 
        //_sortAccessors.Add("branch", t => t.Branch.FundCenterNameEnglish);
        //_sortAccessors.Add("sector", t => t.Sector.FundCenterNameEnglish);
        //_sortAccessors.Add("division", t => t.Division.FundCenterNameEnglish);
    }

    private List<string> headers = new List<string>
    {
        "Planned Staffing", "Last Name", "First Name", "Indeterminate", "Classification", "Fund", "Start Date", "End Date", "FTE", "Salary"
    };

    private void SetFormEdit(Forecast project)
    {
        _forecast = project;
        StateHasChanged();
    }

    private void CreateNewProject()
    {
        //var defaultBranch = _sectorLookup.Where(s => s.SectorId == 1).First().Branches.Where(b => b.BranchId == 1).First();
        _forecast = new Forecast() { Last_Updated_DT = DateTime.Now, Created_DT = DateTime.Now, Created_UserId = _user.Mail};
        StateHasChanged();
    }

    private async Task HandleValidSubmit()
    {

        if (_forecast != null)
        {
            if (_forecast.Forecast_ID == 0)
            {
                _forecast = Context.Forecasts.Add(_forecast).Entity;
            }
            _forecast.Last_Updated_DT = DateTime.Now;
            await Context.SaveChangesAsync();
            LoadData(_searchFilter); ;
            _forecast = null;
        }

        StateHasChanged();
    }

    private async Task<Forecast> ClearForm()
    {
        _forecast = null;
        StateHasChanged();
        return await Task.FromResult((Forecast)null);
    }

    private string GetDataLabel(string propName)
    {
        return DataLocalizer[propName];
    }

    
    private void OnConfigure(MudBlazor.Forms.IModelFormContext context)
    {

        //context.RegisterOptionValueProperty<FundCenter, FiscalYear>(l => l.FiscalYear, p => p?.Year ?? "N/A", () => _fiscalYears);
        //context.RegisterOptionValueProperty<FundCenter, HierarchyLevel>(l => l.Sector, p => p?.FundCenterNameEnglish ?? "N/A", () => GetSectors(), s => RefreshBranches(s, context));
        //context.RegisterOptionValueProperty<FundCenter, HierarchyLevel>(l => l.Branch, p => p?.FundCenterNameEnglish ?? "N/A", () => GetBranches(), s => RefreshDivisions(s, context));
        //context.RegisterOptionValueProperty<FundCenter, HierarchyLevel>(l => l.Division, p => p?.FundCenterNameEnglish ?? "N/A", () => GetDivisions());

    }


    private async void HandleFilterChange(string selection)
    {
        _searchFilter = selection;
        LoadData(_searchFilter);
        await InvokeAsync(StateHasChanged);
    }

    private void OnChange(ModelFormChangeArgs args)
    {
        OnConfigure(args.Context);
    }

    public void Dispose() 
    { 
        Context.Dispose(); 
    }
}
