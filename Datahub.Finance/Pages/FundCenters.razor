@inject IStringLocalizer DataLocalizer
@implements IDisposable
@inject IDbContextFactory<FinanceDBContext> DbFactory

@inject NavigationManager NavigationManager
@inject IJSRuntime JsInterop
@page "/finance/fundcenters"

<Datahub.Core.Components.MudFormTemplate 
        T="FundCenter" 
        U="FinanceDBContext"
        Metadata="@_formMetadata" 
        HandleSubmit="HandleValidSubmit"
        OnConfigureForms="OnConfigure"
        CreateNewRecord="CreateNewProject"
        SelectedRecord="@_fundcenter"
        SetFormEditRecord="SetFormEdit"
        Context=@Context/>

@code {
    private List<FundCenter> _fundcenters;
    private FundCenter _fundcenter;
    //private List<Sector> _sectorLookup;
    private FinanceDBContext Context;

    private int _lastClicked = 0;

    private FormMetadata<FundCenter> _formMetadata = new();

    private void OnPageClick(int pageIndex)
    {
        _lastClicked = pageIndex;
    }

    protected override void OnInitialized()
    {
        // load projects
        Context = DbFactory.CreateDbContext();
        _fundcenters = Context.FundCenters.ToList();
        
        _formMetadata.Header = "Finance Forms";
        _formMetadata.SubHeader = "Step 1: Select/Enter Fund Center Information";
        _formMetadata.DataSet = _fundcenters;
        _formMetadata.AccessorFunctions = accessorFunctions;
        _formMetadata.Headers = headers;
        _formMetadata.GridTemplateColumns = "4fr 8fr";
    }

    private async Task GoToNextSheet()
    {
        var sector = _fundcenter;
        await HandleValidSubmit();
       // NavigationManager.NavigateTo($"/finance/budgets/{sector.SectorBranch_ID}");
    }

    private List<Func<FundCenter, string>> accessorFunctions = new List<Func<FundCenter, string>>
{
        new Func<FundCenter, string>(p => { return p.Sector; }),
        new Func<FundCenter, string>(p => { return p.Branch; }),
    };

    private string getColor(FundCenter current)
    {
        if (current == _fundcenter)
        {
            return "yellow";
        }
        return "";
    }

    private List<string> headers = new List<string>
{
        "Sector","Branch"
    };

    private void SetFormEdit(FundCenter project)
    {
        _fundcenter = project;
        StateHasChanged();
    }

    private void CreateNewProject()
    {
        //var defaultBranch = _sectorLookup.Where(s => s.SectorId == 1).First().Branches.Where(b => b.BranchId == 1).First();
        _fundcenter = new FundCenter() { Last_Updated_DT = DateTime.Now, Created_DT = DateTime.Now, Created_UserId = string.Empty, Last_Updated_UserId = string.Empty };
        StateHasChanged();
    }

    private async Task HandleValidSubmit()
    {
        if (_fundcenter != null)
        {

            ////this is temporary, it loads ALL the branches. will need to change when on change is working. 
            //List<Branch> branchesList = new();
            //_sectorLookup.ForEach(s => branchesList.AddRange(s.Branches));
            //var sector = _sectorLookup.Where(s => s.SectorNameEn == _fundcenter.Sector_TXT).FirstOrDefault();
            //var branch = branchesList.Where(b => b.BranchNameEn == _fundcenter.Branch_TXT).FirstOrDefault();


            //_fundcenter.Sector = sector ?? null;
            //_fundcenter.Branch = branch ?? null;

            //if (_fundcenter.SectorBranch_ID == 0)
            //{
            //    _fundcenter = Context.SectorAndBranches.Add(_fundcenter).Entity;
            //}
            //_fundcenter.Last_Updated_DT = DateTime.Now;
            await Context.SaveChangesAsync();
            //_fundcenters = Context.SectorAndBranches.ToList();
            ////_tombstone = null;
        }

        _fundcenter = null;
        StateHasChanged();
    }

    private async Task<FundCenter> ClearForm()
    {
        _fundcenter = null;
        StateHasChanged();
        return await Task.FromResult((FundCenter)null);
    }

    private string GetDataLabel(string propName)
    {
        return DataLocalizer[propName];
    }

    private void OnConfigure(MudBlazor.Forms.IModelFormContext context)
    {
        //context.RegisterOptionValueProperty<SectorAndBranch>(s => s.Sector_TXT, () => _sectorLookup.Select(s => s.SectorNameEn));

        //List<Branch> branchesList = new();
        //_sectorLookup.ForEach(s => branchesList.AddRange(s.Branches));
        ////var branchesList =_sectorLookup.Where(s => s.SectorId == _sector.Sector.SectorId).FirstOrDefault().Branches;

        ////branchesList.AddRange()

        ////(s => branchesList.AddRange(s.Branches));
        //context.RegisterOptionValueProperty<SectorAndBranch>(s => s.Branch_TXT, () => branchesList.Select(bn => bn.BranchNameEn));
    }

    //private async Task OnChange(ModelFormChangeArgs args)
    //{
    //    var context = args.Context;
    //    if (args.HasPropertyChanged<SectorAndBranch>(s => s.Sector_TXT))
    //    {
    //        // _sector = _sectorLookup.Where(s => s.SectorNameEn == args.EditContext.)

    //        var branchesList = _sectorLookup.Where(s => s.SectorId == _sector.Sector.SectorId).FirstOrDefault().Branches;
    //        context.RegisterOptionValueProperty<SectorAndBranch>(s => s.Branch_TXT, () => branchesList.Select(bn => bn.BranchNameEn));
    //    }
    //}

    public void Dispose() 
    { 
        Context.Dispose(); 
    }
}
