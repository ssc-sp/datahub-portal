@inject IStringLocalizer DataLocalizer
@implements IDisposable
@inject IDbContextFactory<FinanceDBContext> DbFactory
@inject NavigationManager NavigationManager
@inject IJSRuntime JsInterop
@inject ServiceAuthManager ServiceAuthManager
@inject IUserInformationService UserInformationService
@page "/finance/summaryforecasts/{fundcenterId}"
@using System.Linq.Expressions
@using MudBlazor

<MudCard>    
    <MudCardContent>
        <MudTable Items="@_fundCenters" Hover="true" Loading="@_isLoading">
            <ToolBarContent>
                <MudText Typo="Typo.h6">Fund Center Details</MudText>
            </ToolBarContent>
            <HeaderContent>
                <MudTh>Sector</MudTh>
                <MudTh>Branch</MudTh>
                <MudTh>Division</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd>@context.Sector?.FundCenterModifiedEnglish</MudTd>
                <MudTd>@context.Branch?.FundCenterModifiedEnglish</MudTd>
                <MudTd>@context.Division?.FundCenterModifiedEnglish</MudTd>
            </RowTemplate>
        </MudTable>
    </MudCardContent>
</MudCard>

<Datahub.Core.Components.MudFormTemplate T="SummaryForecast"
                                         U="FinanceDBContext"
        Metadata="@_formMetadata" 
        HandleSubmit="HandleValidSubmit"
        OnConfigureForms="OnConfigure"
        OnChangeForms="OnChange"
        CreateNewRecord="CreateNewProject"
        SelectedRecord="@_summaryForecast"
        SetFormEditRecord="SetFormEdit"    
        HandleFilterChange="HandleFilterChange"
        SortAccessors="@_sortAccessors"
        Context=@Context/>


<MudCard>
    <MudCardContent>
        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="@(() => NavigationManager.NavigateTo("finance/fundcenters"))">Fund Centers</MudButton>
        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="@(() => NavigationManager.NavigateTo($"finance/forecasts/{_fundCenters[0].FundCenter_ID}"))">Forecasts</MudButton>
    </MudCardContent>
</MudCard>


@code {

    [Parameter]
    public string fundcenterId { get; set; }

    private const string PROJECTACRONYM = "FINGC";

    private FinanceDBContext Context;
    private Microsoft.Graph.User _user = null!;
    private bool _isUserAdmin;
    private bool _isLoading = true;
    private string _searchFilter = string.Empty;
    private int _lastClicked = 0;

    private List<FundCenter> _fundCenters;
    private List<SummaryForecast> _summaryForecasts;
    private SummaryForecast _summaryForecast;
    private Dictionary<string, Func<SummaryForecast, string>> _sortAccessors = new();
    private FormMetadata<SummaryForecast> _formMetadata = new();


    private void OnPageClick(int pageIndex)
    {
        _lastClicked = pageIndex;
    }

    protected override async Task OnInitializedAsync()
    {
        // load projects
        Context = DbFactory.CreateDbContext();
        LoadSortExpressions();
        _user = await UserInformationService.GetUserAsync();
        _isUserAdmin = await ServiceAuthManager.IsProjectAdmin(_user.Id, PROJECTACRONYM);

        LoadData(_searchFilter);
        _isLoading = false;
    }

    private void LoadData(string searchfilter)
    {
        _fundCenters = Context.FundCenters.Include(f => f.Sector).Include(f => f.Branch).Include(f => f.Division).Where(f => f.FundCenter_ID.ToString() == fundcenterId).ToList();
        _summaryForecasts = Context.SummaryForecasts.Where(f => f.FundCenter == _fundCenters[0]).ToList();
        //var fundcenters = _forecasts;
        //if (!string.IsNullOrWhiteSpace(searchfilter))
        //{
        //    fundcenters = _forecasts.Where(fundcenter =>
        //    {
        //        if (string.IsNullOrWhiteSpace(searchfilter))
        //            return true;
        //        if (fundcenter.Division.FundCenterModifiedEnglish.Contains(searchfilter, StringComparison.OrdinalIgnoreCase))
        //            return true;
        //        if (fundcenter.Branch.FundCenterModifiedEnglish.Contains(searchfilter, StringComparison.OrdinalIgnoreCase))
        //            return true;
        //        if (fundcenter.Sector.FundCenterModifiedEnglish.Contains(searchfilter, StringComparison.OrdinalIgnoreCase))
        //            return true;
        //        return false;
        //    }).ToList();
        //}
        _formMetadata.Header = string.Empty;
        _formMetadata.SubHeader = "Summary Forecasts";
        _formMetadata.DataSet = _summaryForecasts; //change when filters added
        _formMetadata.AccessorFunctions = accessorFunctions;
        _formMetadata.Headers = headers;
        _formMetadata.NavigateUrls = new List<Func<SummaryForecast, (string, string)>>();
        _formMetadata.IsSubmitEnabled = true;
    }

    private List<Func<SummaryForecast, string>> accessorFunctions = new List<Func<SummaryForecast, string>>
    {
        new Func<SummaryForecast, string>(p => { return p.Fund ?? ""; }),
        new Func<SummaryForecast, string>(p => { return p.Key_Activity ?? ""; }),
        new Func<SummaryForecast, string>(p => { return p.Key_Driver ?? ""; }),
        new Func<SummaryForecast, string>(p => { return p.Budget == null ? "$0.00" : p.Budget.Value.ToString("C"); }),
        new Func<SummaryForecast, string>(p => { return p.SFT_Forecast == null ? "$0.00" : p.SFT_Forecast.Value.ToString("C"); }),
        new Func<SummaryForecast, string>(p => { return p.THC == null ? "$0.00" : p.THC.Value.ToString("C"); }),
        new Func<SummaryForecast, string>(p => { return p.Other_OnM == null ? "$0.00" : p.Other_OnM.Value.ToString("C"); }),
        new Func<SummaryForecast, string>(p => { return p.Personel == null ? "$0.00" : p.Personel.Value.ToString("C"); }),
        new Func<SummaryForecast, string>(p => { return p.Non_Personel == null ? "$0.00" : p.Non_Personel.Value.ToString("C"); }),
        new Func<SummaryForecast, string>(p => { return p.Grants == null ? "$0.00" : p.Grants.Value.ToString("C"); }),
        new Func<SummaryForecast, string>(p => { return p.Contribution == null ? "$0.00" : p.Contribution.Value.ToString("C"); }),
        new Func<SummaryForecast, string>(p => { return p.Total_Forecast == null ? "$0.00" : p.Total_Forecast.Value.ToString("C"); }),
    };

    private void LoadSortExpressions()
    { 
        //_sortAccessors.Add("branch", t => t.Branch.FundCenterNameEnglish);
        //_sortAccessors.Add("sector", t => t.Sector.FundCenterNameEnglish);
        //_sortAccessors.Add("division", t => t.Division.FundCenterNameEnglish);
    }

    private List<string> headers = new List<string>
    {
        "Fund", 
        "Key Activity", 
        "Key Driver", 
        "Budget", 
        "SFT", 
        "THC", 
        "Other O&M", 
        "Personel", 
        "Non Personel", 
        "Grants",
        "Contribution",
        "Total Forecast"
    };

    private void SetFormEdit(SummaryForecast project)
    {
        _summaryForecast = project;
        StateHasChanged();
    }

    private void CreateNewProject()
    {        
        _summaryForecast = new SummaryForecast() { Last_Updated_DT = DateTime.Now, Created_DT = DateTime.Now, Created_UserId = _user.Mail, FundCenter = _fundCenters[0] };
        StateHasChanged();
    }

    private async Task HandleValidSubmit()
    {

        if (_summaryForecast != null)
        {
            if (_summaryForecast.Forecast_ID == 0)
            {
                _summaryForecast = Context.SummaryForecasts.Add(_summaryForecast).Entity;
            }
            _summaryForecast.Last_Updated_DT = DateTime.Now;
            await Context.SaveChangesAsync();
            LoadData(_searchFilter); ;
            _summaryForecast = null;
        }

        StateHasChanged();
    }

    private async Task<SummaryForecast> ClearForm()
    {
        _summaryForecast = null;
        StateHasChanged();
        return await Task.FromResult((SummaryForecast)null);
    }

    private void OnConfigure(MudBlazor.Forms.IModelFormContext context)
    {

        //context.RegisterOptionValueProperty<FundCenter, FiscalYear>(l => l.FiscalYear, p => p?.Year ?? "N/A", () => _fiscalYears);
        //context.RegisterOptionValueProperty<FundCenter, HierarchyLevel>(l => l.Sector, p => p?.FundCenterNameEnglish ?? "N/A", () => GetSectors(), s => RefreshBranches(s, context));
        //context.RegisterOptionValueProperty<FundCenter, HierarchyLevel>(l => l.Branch, p => p?.FundCenterNameEnglish ?? "N/A", () => GetBranches(), s => RefreshDivisions(s, context));
        //context.RegisterOptionValueProperty<FundCenter, HierarchyLevel>(l => l.Division, p => p?.FundCenterNameEnglish ?? "N/A", () => GetDivisions());

    }


    private async void HandleFilterChange(string selection)
    {
        _searchFilter = selection;
        LoadData(_searchFilter);
        await InvokeAsync(StateHasChanged);
    }

    private void OnChange(ModelFormChangeArgs args)
    {
        OnConfigure(args.Context);
    }

    public void Dispose() 
    { 
        Context.Dispose(); 
    }
}
