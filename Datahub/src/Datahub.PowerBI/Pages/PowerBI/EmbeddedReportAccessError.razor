@inject IPowerBiDataService _powerBiDataService
@inject IUserInformationService _userInfoService


<MudCard>
    <MudCardHeader>
        <MudText Typo=@Typo.h5>@Localizer[$"{LOCALIZATION_PREFIX}.ErrorLoadingReport"]</MudText>
    </MudCardHeader>
    <MudCardContent>
        <MudText Typo=@Typo.body1>@Localizer[$"{LOCALIZATION_PREFIX}.ErrorDescription"]</MudText>
        <div>
            @if (ErrorNotificationSent)
            {
                <MudText Typo=@Typo.body1>@Localizer[$"{LOCALIZATION_PREFIX}.NotificationSentMessage"]</MudText>
            }
            else
            {
                <MudButton 
                    OnClick=@SendNotFoundNotification 
                    Color=@Color.Primary
                    Variant=@Variant.Filled
                    Disabled=@SendingErrorNotification>@Localizer[$"{LOCALIZATION_PREFIX}.SendNotificationButton"]</MudButton>
            }
            <SuccessIndicator @ref=@NotificationSuccessInd @bind-IsLoading=@SendingErrorNotification />
        </div>
    </MudCardContent>
</MudCard>


@code {

    [Parameter]
    public Guid ReportIdGuid { get; set; }

    private const string LOCALIZATION_PREFIX = "POWER_BI_REPORT";

    private bool ErrorNotificationSent = false;
    private bool SendingErrorNotification = false;
    private SuccessIndicator NotificationSuccessInd;

    private string _currentUserEmail;


    private async Task SendNotFoundNotification()
    {
        SendingErrorNotification = true;
        await InvokeAsync(StateHasChanged);

        await _powerBiDataService.NotifyOfMissingReport(ReportIdGuid, _currentUserEmail);

        ErrorNotificationSent = true;
        await NotificationSuccessInd.SignalSuccess();
        await InvokeAsync(StateHasChanged);
    }

    protected override async Task OnInitializedAsync()
    {
        var currentUser = await _userInfoService.GetCurrentGraphUserAsync();
        _currentUserEmail = currentUser.Mail;
        
        await base.OnInitializedAsync();
    }

}
