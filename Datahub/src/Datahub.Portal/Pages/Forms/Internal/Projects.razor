@*Project.razor*@

@inject IStringLocalizer DataLocalizer
@inject IDbContextFactory<DatahubProjectDBContext> DbFactory
@inject ServiceAuthManager ServiceAuthManager
@inject IUserInformationService UserInformationService
@inject NavigationManager NavigationManager
@inject Elemental.Services.UIControlsService UIControlService
@inject IJSRuntime JsInterop
@inject TranslationService TranslationService
@inject IDatahubAuditingService AuditingService
@inject IOrganizationLevelsService OrganizationLevelsService
@inject IEmailNotificationService EmailService
@using Datahub.Core.Model.Onboarding
@page "/datahub/projects"

@implements IDisposable

<AeCard>
    <MudText Typo="Typo.h4">@Localizer["DataHub Initiative List"]</MudText>

    <MudGrid Class="mb-4 mt=4">
        <MudItem sm="4">
            <MudTextField DebounceInterval="600"
                          T="string"
                          OnDebounceIntervalElapsed="HandleAllProjectSearch"
                          Label=@Localizer["Filter projects"]
                          Variant="Variant.Outlined"
                          Margin="Margin.Dense"
                          Clearable="true"
                          Adornment="Adornment.End"
                          AdornmentIcon="@Icons.Filled.Search" />
        </MudItem>
    </MudGrid>

    <div>
         <AeFlex id="buttonBar">
            <div class="icon-container" style="margin-bottom: 10px; margin-left: 5px;">

                <FAButton Text="Add New" Icon="far fa-plus-square" onclick="e => CreateNewProject()" />

                @if (_project?.Project_ID > 0)
                {
                    @* <FAButton Text="Edit" Icon="fad fa-edit" onclick="async () => await SetFormEdit(q)"/>  *@
                    <FAButton Text="Delete" Icon="fad fa-trash-alt" onclick="() => DeleteShowModal(_project)" />
                    <FAButton Text="Power BI License Request Form" To="@($"/licenses/{_project.Project_ID}")" Icon="fas fa-chart-pie" />
                }

            </div>            
        </AeFlex>

        @if (filterProperties != null)
        {
            <AeFlex id="filterBar">
                @foreach (var filter in filterProperties)
                {
                    <AeDropdown Items="ValidDisplayValues" OnChange="HandleDropdownChange" Label="@filterLabelValue" class="@filterClass" />
                }
            </AeFlex>
        }

        <AeFlex Vertical id="indexFlex">

            <AePaginatedTable Accessors="accessorFunctions"
                              Renderers=@renderFunctions
                              T="Datahub_Project"
                              Dataset="_filteredProjects"
                              ColorAccessor="getColor"
                              Headers="headers"
                              GridTemplateColumns="2fr 4fr 2fr 8fr 2fr 8fr 2fr"
                              MaxHeight="400"
                              OnRowClick="@SetFormEdit"
                              Page="@_lastClicked"
                              PageSize="10"
                              @ref=_myTable />

            <AePagination Pageable="@_myTable" OnPageClick="OnPageClick">
                <LeftIcon><i class='fad fa-chevron-double-left'></i></LeftIcon>
                <RightIcon><i class='fad fa-chevron-double-right'></i></RightIcon>
            </AePagination>

        </AeFlex>

    </div>

</AeCard>

@if (_project != null)
{
    <div>&nbsp;</div>

    <AeCard>

        @if (_project.Project_ID > 0)
        {
            <h2>Editing Project @_project.Project_ID (@(_project.Project_Acronym_CD))</h2>
        }
        else
        {
            <h2>Create new project</h2>
        }

        <AeButton @onclick=@SuggestTranslation Disabled=@DisabledSuggestTranslation>
            @DataLocalizer["Suggest French Translation"]
        </AeButton>

        <AeModelForm Model="_project"
                 T="Datahub_Project"
                 OnValidSubmit="HandleValidSubmit"
                 OnCancel="ClearForm"
                 CancelLabel="Cancel"
                 SubmitLabel="@SubmitLabel"
                 LabelForPropertyFunc="@GetDataLabel"
                 OnChange=@FormChanged
                 OnConfigure="OnConfigure" />

        @if (_project.Project_ID > 0)
        {
            <AeFlex id="buttonBar">
                <div class="icon-container" style="margin-bottom: 10px; margin-left: 5px;">

                    <FAButton Text="Add New Comment" Icon="far fa-plus-square" onclick="e => AddNewComment()" />
                    @if (_comment?.Comment_ID > 0)
                    {
                        @* <FAButton Text="Edit" Icon="fad fa-edit" onclick="async () => await SetFormEdit(q)"/>  *@
                        @* <FAButton Text="Delete" Icon="fad fa-trash-alt" onclick="async () => DeleteShowModal(_project)"/> *@
                    }

                </div>
            </AeFlex>

            <AePaginatedTable Accessors="commentAccessorFunctions"
                      T="Datahub_ProjectComment"
                      Dataset="_project.Comments"
                      ColorAccessor="getColor"
                      Headers="commentsHeaders"
                      GridTemplateColumns="1fr 8fr"
                      MaxHeight="400"
                      OnRowClick="@SetCommentEdit"
                      Page="@_lastClickedComment"
                      PageSize="10"
                      @ref=_myTableComment />

            <AePagination Pageable="@_myTableComment" OnPageClick="OnPageClickComment">
                <LeftIcon>
                    <i class='fad fa-chevron-double-left'></i>
                </LeftIcon>
                <RightIcon>
                    <i class='fad fa-chevron-double-right'></i>
                </RightIcon>
            </AePagination>

            <AeModelForm Model="_comment"
                 OnValidSubmit="HandleValidCommentSubmit"
                 CancelLabel="Cancel"
                 SubmitLabel="Save Comment"
                 LabelForPropertyFunc="@GetDataLabel" />
        }

    </AeCard>
}

@code {
    private List<Datahub_Project> _projects;
    private List<Datahub_Project> _filteredProjects;

    private Datahub_Project _project;// = new Datahub_Project();
    private Datahub_ProjectComment _comment;
    private string SubmitLabel = "Add new";
    private const string EMAIL = "offline@nrcan-cnrcan.gc.ca";
    private bool _navToEdit = false;
    private DatahubProjectDBContext Context;

    private int _lastClicked = 0;
    private IPageableComponent _myTable;
    private int _lastClickedComment = 0;
    private IPageableComponent _myTableComment;

    private List<(Delegate Label, Delegate Choices)> filterProperties = new List<(Delegate Label, Delegate choices)>();
    private List<string> ValidDisplayValues { get; set; }
    private string filterLabel;
    private string filterLabelValue;
    private string filterClass;

    private List<OrganizationLevel> _sectors = new();
    private List<OrganizationLevel> _branches = new();
    private List<OrganizationLevel> _divisions = new();

    private int _sectorId = -1;
    private int _branchId = -1;
    private int _divisionId = -1;

    private bool _isFrench;

    protected override async Task OnInitializedAsync()
    {
        _isFrench = CultureInfo.CurrentCulture.Name.StartsWith("fr", StringComparison.InvariantCulture);
        _sectors = await OrganizationLevelsService.GetSectors();
        _branches = await OrganizationLevelsService.GetBranches();
        _divisions = await OrganizationLevelsService.GetDivisions();

        // load projects
        Context = DbFactory.CreateDbContext();
        LoadProjects();

        filterProperties.Add((() => "Status", () => new List<string> { "All", "Closed", "On Hold", "Ongoing" }));

        ValidDisplayValues = new();
        ValidDisplayValues = filterProperties[0].Choices.DynamicInvoke() as List<string>;
        filterLabel = filterProperties[0].Label.DynamicInvoke() as string;
        filterLabelValue = $"{filterLabel}: {ValidDisplayValues[0]}";
        filterClass = "filterDropdown";
    }

    private void HandleDropdownChange(string selectedItem)
    {
        if (selectedItem == "All")
        {
            LoadProjects();
            filterClass = "filterDropdown";
        }
        else
        {
            _projects = Context.Projects.Include(r => r.Comments).Where(p => p.Project_Status_Desc == selectedItem).ToList();
            filterClass = "filterOn";
        }
        filterLabelValue = $"{filterLabel}: {selectedItem}";
        StateHasChanged();
    }

    private bool DisabledSuggestTranslation => string.IsNullOrEmpty(_project?.Project_Name) || string.IsNullOrEmpty(_project?.Project_Summary_Desc);

    public async Task SuggestTranslation()
    {
        if (!string.IsNullOrEmpty(_project.Project_Name))
        {
            _project.Project_Name_Fr = await TranslationService.GetFrenchTranslation(_project.Project_Name);
        }
        if (!string.IsNullOrEmpty(_project.Project_Summary_Desc))
        {
            _project.Project_Summary_Desc_Fr = await TranslationService.GetFrenchTranslation(_project.Project_Summary_Desc);
        }
    }

    private void OnPageClick(int pageIndex)
    {
        _lastClicked = pageIndex;
    }

    private void OnPageClickComment(int pageIndex)
    {
        _lastClickedComment = pageIndex;
    }

    private List<string> headers = new List<string>
    {
        "Status", "Sector", "Project", "Name", "Last Contact", "Contacts", "Metadata"
    };

    private List<string> commentsHeaders = new List<string>
    {
        "Date","Comment"
    };

    private async Task<Datahub_Project> ClearForm()
    {
        _project = null;
        StateHasChanged();
        return await Task.FromResult((Datahub_Project)null);
    }

    public string GetDataLabel(string propName)
    {
        return DataLocalizer[propName];
    }

    private static string ShortenEntry(string entry)
    {
        var leqPos = entry.IndexOf('<');
        if (leqPos == -1) return entry;
        return entry.Substring(0, leqPos - 1).Trim();
    }

    public static string ShortenContactList(string contacts)
    {
        if (contacts is null) return null;
        var list = contacts.Split(";", StringSplitOptions.RemoveEmptyEntries);
        return string.Join(", ", list.Select(el => ShortenEntry(el)).ToList());
    }

    public static string ShortenString(string input, int maxLength)
    {
        if (input is null || input.Length <= maxLength)
            return input;
        var words = input.Split(" ", StringSplitOptions.RemoveEmptyEntries | StringSplitOptions.TrimEntries);
        var final = new List<string>();
        int wPos = 0;
        while (final.Sum(l => l.Length + 1) <= maxLength)
        {
            final.Add(words[wPos++]);
        }
        return string.Join(" ", final) + "...";
    }

    // Accessor functions to retrieve cell value
    private List<Func<Datahub_Project, string>> accessorFunctions = new List<Func<Datahub_Project, string>>
    {
        new(p => p?.Project_Status_Desc),
        new(p => p?.Sector_Name),
        new(p => p?.Project_Acronym_CD),
        new(p => p?.ProjectName),
        new(p => p?.Last_Contact_DT?.ToShortDateString()),
        new(p => ShortenContactList(p?.Contact_List)),
        null
    };

    private List<Func<Datahub_Project, RenderFragment>> renderFunctions => new()
    {
        null,
        null,
        null,
        null,
        null,
        null,
        GetMetadataFragment
    };

    private RenderFragment GetMetadataFragment(Datahub_Project p)
    {
        if (p != null && !p.MetadataAdded.HasValue)
            return@<a @onclick="() => RequestEnterMetadata(p)" style="cursor: pointer;">@Localizer["Request"]</a>;
        return @<span>&nbsp;</span>;
    }

    private const string PROJECTACRONYM = "DHPGLIST";

    private async Task RequestEnterMetadata(Datahub_Project p)
    {
        var ctx = await DbFactory.CreateDbContextAsync();
        
        var appForm = await ctx.OnboardingApps.FirstOrDefaultAsync(e => e.Application_ID == p.OnboardingApplicationId);
        appForm ??= GetOnboardingApplicationFromProject(p);
        
        if (appForm is not null)
        {
            OnboardingParameters onboardingParameters = new()
            {
                AppUrl = $"/admin/metadata/{p.Project_Acronym_CD}",
                App = appForm,
                AdminEmailAddresses = ServiceAuthManager.GetProjectMailboxEmails(PROJECTACRONYM)
            };
            
            await EmailService.SendOnboardingMetadataEditRequest(onboardingParameters);

            p.MetadataAdded = false;
            await InvokeAsync(StateHasChanged);
        }
    }

    private OnboardingApp GetOnboardingApplicationFromProject(Datahub_Project p)
    {
        // cannot contact the admin
        if (string.IsNullOrEmpty(p.Project_Admin))
            return null;

        // return a temp app form
        return new()
        {
            Product_Name = p.ProjectName,
            Client_Email = p.Project_Admin,
            Client_Contact_Name = "{p.Project_Acronym_CD} Admin"
        };
    }

    // Accessor functions to retrieve cell value
    private List<Func<Datahub_ProjectComment, string>> commentAccessorFunctions = new List<Func<Datahub_ProjectComment, string>>
    {
        new Func<Datahub_ProjectComment, string>(p => { return p.Comment_Date_DT.ToShortDateString(); }),
        new Func<Datahub_ProjectComment, string>(p => { return ShortenString(p.Comment_NT,50); })
    };

    private void SetFormEdit(Datahub_Project project)
    {
        _project = project;

        _sectorId = GetChoiceId(_sectors, _project.Sector_Name);
        _branchId = GetChoiceId(_branches, _project.Branch_Name, _sectorId);
        _divisionId = GetChoiceId(_divisions, _project.Division_Name, _branchId);
        //Context.Entry(_project).Reload();
        _comment = null;
        SubmitLabel = "Save Changes";
        StateHasChanged();
        _navToEdit = true;
    }

    private void SetCommentEdit(Datahub_ProjectComment comment)
    {
        _comment = comment;
        StateHasChanged();
    }

    private void LoadProjects()
    {
        _projects = Context.Projects.Include(r => r.Comments).Where(p => p.Deleted_DT == null).ToList();
        _filteredProjects = _projects;
    }

    private void CreateNewProject()
    {
        _project = new Datahub_Project() { Last_Updated_DT = DateTime.Now, Project_ID = 0 };
        StateHasChanged();
        _navToEdit = true;
    }

    private void AddNewComment()
    {
        _comment = new Datahub_ProjectComment() { Comment_Date_DT = DateTime.Now, Project = _project };
        StateHasChanged();
    }

    private string getColor(Datahub_Project current)
    {
        if (current == _project)
        {
            return "yellow";
        }
        return "";
    }

    private void DeleteShowModal(Datahub_Project project)
    {
        RenderFragment modalBody =
    @<div>
            <p>Do you confirm the deletion of Project @(project.Project_ID)?</p>
                <p>Acronym: @project.Project_Acronym_CD</p>
                <p>Summary: @project.ProjectDescription</p>
    </div>;

        RenderFragment modalFooter =
    @<div style="display:flex;justify-content:space-between;">
            <AeButton class="red" @onclick="async () => { UIControlService.ToggleModal(); StateHasChanged(); await DeleteConfirmed(project); }">
                Delete
            </AeButton>
            <AeButton class="blue" @onclick="() => { UIControlService.ToggleModal(); StateHasChanged(); }">
                Cancel
            </AeButton>
    </div>;

        var modalParameter = new Elemental.Code.ModalParameter()
            {
                Class = "modal",
                Body = modalBody,
                DisableBackgroundCancel = true,
                Title = "Delete Project",
                Footer = modalFooter
            };

        UIControlService.ToggleModal(modalParameter);

        StateHasChanged();
    }

    @*
    private void DeleteShowModal(Datahub_Project project)
    {
        InvokeAsync(async () =>
        {
            RenderFragment modalBody =
    @<div>
                                            <p>Do you confirm the deletion of Project @(project.Project_ID)?</p>
                                            <p>Acronym: @project.Project_Acronym_CD</p>
                                            <p>Summary: @project.ProjectDescription</p>
                                        </div>;
            RenderFragment modalFooter = @<div style="display:flex;justify-content:space-between;">
                                            <AeButton class="red" @onclick="async () => { UIControlService.ToggleModal(); StateHasChanged(); await DeleteConfirmed(project);  }">Delete</AeButton>
                                            <AeButton class="blue" @onclick="async () => { UIControlService.ToggleModal(); StateHasChanged(); }">Cancel</AeButton>
                                          </div>
    ;
            var modalParameter = new Elemental.Code.ModalParameter() { Class = "modal", Body = modalBody, DisableBackgroundCancel = true, Title = "Delete Project", Footer = modalFooter };
            UIControlService.ToggleModal(modalParameter);
            StateHasChanged();
        });
    }
    *@

    private async Task DeleteConfirmed(Datahub_Project project)
    {
        project.Deleted_DT = DateTime.Now;
        await Context.TrackSaveChangesAsync(AuditingService);
        LoadProjects();
    }

    private async Task HandleValidSubmit()
    {
        if (_project != null)
        {
            if (_project.Project_ID == 0)
            {
                _project = Context.Projects.Add(_project).Entity;
            }
            _project.Last_Updated_DT = DateTime.Now;

            //update admins here


            await Context.TrackSaveChangesAsync(AuditingService);

            //await UpdateAdmins();
            LoadProjects();
            _project = null;
        }
    }

    private async Task UpdateAdmins()
    {
        if (_project.Project_Admin != null)
        {
            var currentUserId = await UserInformationService.GetUserIdString();
            await ServiceAuthManager.RegisterProjectAdmin(_project, currentUserId);
        }
    }

    private async Task HandleValidCommentSubmit()
    {
        if (_comment != null)
        {
            if (_comment.Comment_ID == 0)
            {
                _comment = Context.Project_Comments.Add(_comment).Entity;
            }
            await Context.TrackSaveChangesAsync(AuditingService);
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            StateHasChanged();
        }
        if (_navToEdit)
        {
            _navToEdit = false;
            await this.JsInterop.InvokeVoidAsync("anchorLink.scrollIntoView", "edit");
        }
    }

    private List<string> LocalizeChoices(IEnumerable<OrganizationLevel> levels)
    {
        return levels.Select(s => !_isFrench ? s.EnglishLabel : s.FrenchLabel).OrderBy(s => s).ToList();
    }

    private List<string> Sectors => LocalizeChoices(_sectors);
    private List<string> Branches => LocalizeChoices(_branches.Where(b => b.ParentId == _sectorId));
    private List<string> Divisions => LocalizeChoices(_divisions.Where(d => d.ParentId == _branchId));

    private int GetChoiceId(List<OrganizationLevel> choices, string value, int? parentId = null)
    {
        return choices.FirstOrDefault(c => (!parentId.HasValue || c.ParentId == parentId.Value) && (c.EnglishLabel.Equals(value) || c.FrenchLabel.Equals(value)))?.Id ?? -1;
    }

    private void OnConfigure(IModelFormContext context)
    {
        context.RegisterOptionValueProperty<Datahub_Project>(s => s.Project_Category, () => new[] { "Data Pipeline",
                                                            "Data Science",
                                                            "Full Stack",
                                                            "Guidance",
                                                            "Power BI Reports",
                                                            "Storage",
                                                            "Web Forms",
                                                            "Unknown",
                                                            "Other",
                                                            "Presentations",
                                                            "Dashboards"
                 });
        context.RegisterOptionValueProperty<Datahub_Project>(s => s.Project_Phase, () => new[] {"Initiation",
                                                                        "Requirements",
                                                                        "Development/Design",
                                                                        "Implementation",
                                                                        "Testing",
                                                                        "Deployment",
                                                                        "Ongoing Maintenance and Support"
                 });

        context.RegisterOptionValueProperty<Datahub_Project>(p => p.Sector_Name, () => Sectors, s =>
        {
            var id = GetChoiceId(_sectors, s);
            if (_sectorId != id)
            {
                _sectorId = id;
                RefreshBranches(context);
            }
        });

        context.RegisterOptionValueProperty<Datahub_Project>(p => p.Branch_Name, () => Branches, b =>
        {
            var id = GetChoiceId(_branches, b, _sectorId);
            if (_branchId != id)
            {
                _branchId = id;
                RefreshDivisions(context);
            }
        });

        context.RegisterOptionValueProperty<Datahub_Project>(p => p.Division_Name, () => Divisions, d =>
        {
            var id = GetChoiceId(_divisions, d, _branchId);
            if (_divisionId != id)
            {
                _divisionId = id;
            }
        });
    }

    private void RefreshBranches(IModelFormContext context)
    {
        _branchId = -1;
        _project.Branch_Name = string.Empty;
        context.RefreshOptions<Datahub_Project>(p => p.Branch_Name);
        RefreshDivisions(context);
    }

    private void RefreshDivisions(IModelFormContext context)
    {
        _divisionId = -1;
        _project.Division_Name = string.Empty;
        context.RefreshOptions<Datahub_Project>(p => p.Division_Name);
    }

    private string CreateAcronym(string name)
    {
        var words = (name ?? "").Split(' ', StringSplitOptions.RemoveEmptyEntries).ToArray();
        if (words.Length == 0)
            return string.Empty;

        if (words.Length == 1)
            return words[0].Substring(0, 4).ToUpper();

        return string.Join("", words.Select(w => w[0])).ToUpper();
    }

    private void FormChanged(ModelFormChangeArgs args)
    {
        if (nameof(_project.Project_Name) == args.PropertyInfo.Name && string.IsNullOrEmpty(_project.Project_Acronym_CD))
        {
            _project.Project_Acronym_CD = CreateAcronym(_project.Project_Name);
        }
    }

    private void HandleAllProjectSearch(string text)
    {
        _project = null;
        _filteredProjects = !string.IsNullOrEmpty(text) ? _projects.Where(p => ProjectMatches(p, text)).ToList() : _projects;
    }

    private bool ProjectMatches(Datahub_Project project, string text)
    {
        if (text.Equals(project.Project_Acronym_CD, StringComparison.OrdinalIgnoreCase))
            return true;

        if ((project.Project_Name ?? "").Contains(text, StringComparison.OrdinalIgnoreCase))
            return true;

        if ((project.Project_Name_Fr ?? "").Contains(text, StringComparison.OrdinalIgnoreCase))
            return true;

        return false;
    }

    public void Dispose()
    {
        Context.Dispose();
    }
}
