@inject IDbContextFactory<DatahubProjectDBContext> _dbFactoryProject
@inject DataRetrievalService _dataRetrievalService
@inject IUserInformationService _userInformationService

@page "/projects/{ProjectAcronymParam}/filelist"
@using Datahub.Core.Components.PageBanner
@using Datahub.Portal.Pages.Project.FileExplorer.ResourcePages
@using Microsoft.Graph

<DHPageTitle PageTitleKey="@_projectName"/>
<DHPageAlert Title="How to use Project Storage" Key="@PageAlert.Storage" WikiLinkEN="Onboarding---Project-Storage" WikiLinkFR="Onboarding---Project-Storage"/>

<AeTypography style="margin-top: 0;" Variant="h1">@Localizer["Storage Explorer"]</AeTypography>

<CascadingValue Value="@ProjectAcronymParam" Name="ProjectAcronym">
    <CascadingValue Value="@_project" Name="Project">
        <CascadingValue Value="_user" Name="GraphUser">
            <div class="file-explorer-layout-wrapper">
                <TabControl TabIndex="@_tabIndex" OnChangeTab="@OnChangeTab">
                    @foreach (var (control, content, forceGapLeft) in _tabs)
                    {
                        <TabPage ForceGapToLeft="forceGapLeft">
                            <Control>
                                @control
                            </Control>
                            <ChildContent>
                                @content
                            </ChildContent>
                        </TabPage>
                    }
                </TabControl>
            </div>
        </CascadingValue>
    </CascadingValue>
</CascadingValue>

@code {

    [Parameter]
    public string ProjectAcronymParam { get; set; }

    private int _tabIndex;

    private Datahub_Project _project;
    private int? _projectId;
    private string _projectName;

    private List<(RenderFragment, RenderFragment, bool)> _tabs = new();
    private User _user;

    protected override async Task OnInitializedAsync()
    {
        await using var projectContext = await _dbFactoryProject.CreateDbContextAsync();

        _user = await _userInformationService.GetCurrentGraphUserAsync();

        _project = await projectContext.Projects
            .Include(p => p.Users)
            .AsSingleQuery()
            .Where(p => p.Project_Acronym_CD == ProjectAcronymParam)
            .FirstOrDefaultAsync();

        _projectName = _project?.ProjectName;
        _projectId = _project?.Project_ID;

        _tabs = await GetTabs();
    }

    private void OnChangeTab(int tabIndex)
    {
        _tabIndex = tabIndex;
    }

    private async Task<List<(RenderFragment, RenderFragment, bool)>> GetTabs()
    {
        var containers = await _dataRetrievalService.GetProjectContainersAsync(ProjectAcronymParam, _user);

        var tabs = new List<(RenderFragment, RenderFragment, bool)>();
        containers.ForEach(container =>
            tabs.Add((
                    @<AeTypography>
                         <i class="fas fa-hdd"></i>
                         @Localizer[container]
                     </AeTypography>, @<FileExplorer ProjectId=@_projectId ContainerName="@container"/>, false)));
        
        tabs.Add((@<AeTypography>
                      <i class="fas fa-plus"></i>
                      @Localizer["Create New Container"]
                  </AeTypography>, @<AzCopy/>, false));

        tabs.Add((@<AeTypography>
                      <i class="fas fa-info-circle"></i>
                      @Localizer["AzCopy"]
                  </AeTypography>, @<AzCopy/>, true));
        tabs.Add((@<AeTypography>
                      <i class="fas fa-info-circle"></i>
                      @Localizer["Databricks Access"]
                  </AeTypography>, @<Databricks/>, false));

        return tabs;
    }
}