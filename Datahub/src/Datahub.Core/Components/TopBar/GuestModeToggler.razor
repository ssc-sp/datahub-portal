@using Datahub.Core.Data
@inject ServiceAuthManager _serviceAuthManager
@inject IUserInformationService _userInformationService
@inject NavigationManager _navigationManager

<AuthorizeView Roles=@($"{RoleConstants.DATAHUB_ROLE_ADMIN},{RoleConstants.DATAHUB_ROLE_ADMIN_AS_GUEST}")>
    <MudStack Row>
        <MudTooltip Text="@Localizer["Initiative admin and global admin priviledges"]">
            <MudSwitch 
                T="bool"
                Color="Color.Primary"
                Checked="@_isViewAsAdmin"
                CheckedChanged="ToggleAdminMode">@Localizer["Admin Access Enabled"]</MudSwitch>
        </MudTooltip>
        <MudTooltip Text="@Localizer["Initiative membership"]">
            <MudSwitch T="bool"
                   Color="Color.Primary"
                   Checked="@_isViewAsVisitor"
                   Disabled="@_isViewAsAdmin"
                   CheckedChanged="ToggleVisitorMode">@Localizer["View As Visitor"]</MudSwitch>
        </MudTooltip>
    </MudStack>
</AuthorizeView>

@code {


    private bool _isViewAsAdmin;
    private bool _isViewAsVisitor = false;

    private string _tooltipText => _isViewAsAdmin ? Localizer["View portal as admin"] : Localizer["View portal as guest"];

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        _isViewAsAdmin = !(await _userInformationService.IsViewingAsGuest());
        _isViewAsVisitor = await _userInformationService.IsViewingAsVisitor();        
    }

    private async Task ToggleAdminMode(bool newValue)
    {
        await _userInformationService.SetViewingAsGuest(!newValue);
        _navigationManager.NavigateTo(_navigationManager.Uri, true);
    }

    private async Task ToggleVisitorMode(bool newValue)
    {        
        _isViewAsVisitor = newValue;
        await _userInformationService.SetViewingAsVisitor(newValue);
        StateHasChanged();
        //_navigationManager.NavigateTo(_navigationManager.Uri, true);
    }

}