@*LanguageTrainingApplicationForm.razor*@
@inject IStringLocalizer DataLocalizer
@inject IEmailNotificationService EmailService
@implements IDisposable
@inject IDbContextFactory<LanguageTrainingDBContext> DbFactory
@inject ServiceAuthManager ServiceAuthManager
@inject IUserInformationService UserInformationService
@inject NavigationManager NavigationManager
@inject IJSRuntime JsInterop
@inject IConfiguration Configuration
@inject IDatahubAuditingService AuditingService
@page "/languagetraining/applications"
@page "/languagetraining/applications/{AppId}"
@using Datahub.LanguageTraining.Data
@using Datahub.LanguageTraining.Utils

<Datahub.Core.Components.FormTemplate 
        T="LanguageTrainingApplication"
        U="LanguageTrainingDBContext"
        Context="@Context"
        Metadata="@_formMetadata" 
        HandleSubmit="HandleValidSubmit"
        HandleInvalidSubmit="HandleInvalidSubmit"
        OnChangeForms="OnChange"
        OnConfigureForms="OnConfigure"
        CreateNewRecord="CreateNewApplication"
        SelectedRecord="@_languageTrainingApplication"
        SetFormEditRecord="SetFormEdit" 
        HandleFilterChange="HandleFilterChange" />

<AuthorizeView Roles="@($"{PROJECTACRONYM}-admin, {RoleConstants.DATAHUB_ROLE_ADMIN}")">
    <AeCard class="facardForms" CardPosition="AeCard.CardStyle.Horizontal">
        <AeTypography Variant="h3">@DataLocalizer["Admin Actions"]</AeTypography>
        <div class="icon-container" style="margin-bottom: 10px; margin-left: 5px;">
            <FAButton @onclick=@OpenExcel Text=@DataLocalizer["Open Excel Report"] />
        </div>
    </AeCard>
</AuthorizeView>

@code {

    // IP: please enable nullable and review every warning it produces, 
    // I am not familiar with the code, so I didn't want to make breaking changes.
    #nullable disable 

    [Parameter]
    public string AppId { get; set; }

    private const string PROJECTACRONYM = "HRLTP";
    private const string FORMLOCATION = "languagetraining/applications";
    private FormMetadata<LanguageTrainingApplication> _formMetadata;
    private bool _onchange;
    private List<LanguageTrainingApplication> _languageTrainingApplications;
    private LanguageTrainingApplication _languageTrainingApplication;
    private LanguageTrainingDBContext Context;
    private List<string> MarkDownContent = new();
    private Microsoft.Graph.User _user;
    private bool _isUserAdmin;
    private List<string> headers;
    private bool _isNewApp;
    private bool _isFrench;
    private SeasonRegistrationPeriod _currentPeriod;
    private SeasonRegistrationPeriod _nextPeriod;

    protected override async Task OnInitializedAsync()
    {        
        Context = DbFactory.CreateDbContext();
        _user = await UserInformationService.GetCurrentGraphUserAsync();
        _isUserAdmin = await ServiceAuthManager.IsProjectAdmin(_user.Id, PROJECTACRONYM);
        _isFrench = CultureInfo.CurrentCulture.Name.StartsWith("fr", StringComparison.InvariantCulture);
        headers = new List<string>
        {
            DataLocalizer["User"],DataLocalizer["Sector"],DataLocalizer["Manager"], DataLocalizer["Request"], DataLocalizer["Manager Decision"]
        };
        _formMetadata = new();
        await LoadApps(string.Empty);

        // period dates are EST time based
        var date = DateTime.UtcNow.ConvertUtcToEasternTime().Date;
        _currentPeriod = GetCurrentPeriod(Context);
        _nextPeriod = Context.SeasonRegistrationPeriods.FirstOrDefault(e => e.Open_DT > date);

        PrepareMetadata();
    }

    private async void OpenExcel()
    {
        var lastPeriod = GetLatestPeriod();
        if (lastPeriod is not null)
        {
            try
            {
                var powerBiTargets = @"https://app.powerbi.com/groups/dabe2469-0692-42c4-b492-bd2872fa779c/rdlreports/ad9e392e-2949-49d4-8848-92d6ba59907d?rp:p_year_for_language_training={0}&rp:p_quarter_num={1}&rdl:format=EXCELOPENXML";
                var fiscalYear = GetFiscalYear(lastPeriod);
                var url = string.Format(powerBiTargets, fiscalYear, lastPeriod.Quarter_NUM);
                await JsInterop.InvokeVoidAsync("open", url, "_blank");
            }
            catch (Exception)
            {
            }
        }
    }

    private SeasonRegistrationPeriod GetLatestPeriod()
    {
        var date = DateTime.UtcNow.ConvertUtcToEasternTime().Date;
        var lastPeriod = Context.SeasonRegistrationPeriods
                                .OrderByDescending(e => e.Open_DT)
                                .FirstOrDefault(e => e.Open_DT < date);
        return lastPeriod;
    }

    private void PrepareMetadata()
    {
        var baseuri = NavigationManager.BaseUri;
        _formMetadata.Header = "NRCan Language Training Application Form";
        _formMetadata.SubHeader = GetFormSubHeader();
        _formMetadata.TableRoles = "default";
        _formMetadata.DataSet = _languageTrainingApplications;
        _formMetadata.UserId = _user.Id;
        _formMetadata.AccessorFunctions = accessorFunctions;
        _formMetadata.Headers = headers;
        _formMetadata.GridTemplateColumns = "3fr 3fr 3fr 4fr 3fr";
        _formMetadata.IsSubmitEnabled = false;
        _formMetadata.SaveButtonText = DataLocalizer["Submit"];
        var filters = new List<(Delegate Label, Delegate Choices)>() { (() => "Status", () => new List<string> { "All", "Pending", "Approved", "Declined" }) };
        _formMetadata.FilterProperties = filters;
        _formMetadata.TableDisclaimer = DataLocalizer["LanguageTrainingApplication.LanguageTableDisclaimer"];
        var introfile = _isFrench ? "FormIntroFr.md" : "FormIntro.md";
        var footerfile = _isFrench ? "FormFooterWarningFr.md" : "FormFooterWarning.md";
        _formMetadata.MarkDownContent = File.ReadAllLines($@"Pages\Forms\LanguageTraining\{introfile}").ToList();
        _formMetadata.MarkDownContentFooter = File.ReadAllLines($@"Pages\Forms\LanguageTraining\{footerfile}").ToList();
        _formMetadata.DisableNew = _currentPeriod is null;
    }

    private string GetFormSubHeader()
    {
        if (_currentPeriod is null)
        {
            if (_nextPeriod is null)
                return DataLocalizer["LanguageTrainingApplication.Registrations_closed"].ToString();

            var template = DataLocalizer["LanguageTrainingApplication.Registrations_open_from_to"];

            var openFormatted = _nextPeriod.Open_DT.ToShortDateString();
            var closeFormatted = _nextPeriod.Close_DT.ToShortDateString();
            var season = DataLocalizer[GetSeason(_nextPeriod.Quarter_NUM)];
            var fiscalYear = GetFiscalYear(_nextPeriod);

            return string.Format(template, season, fiscalYear, openFormatted, closeFormatted);
        }
        else
        {
            // Registrations open for {0} {1} until {Friday}, {December} {2}, {2022} by 6:00 PM (EDT).
            // Inscriptions ouvertes pour {0} {1} au plus tard vendredi, le {2} {décembre} {2022}, à 18 h 00 (HAE).
            var template = DataLocalizer["LanguageTrainingApplication.Registrations_open_until"];
            var closeDateTime = _currentPeriod.Close_DT;
            var season = DataLocalizer["LanguageTrainingApplication." + GetSeason(_currentPeriod.Quarter_NUM)];
            var fiscalYear = GetFiscalYear(_currentPeriod);
            var dowText = DataLocalizer[closeDateTime.DayOfWeek.ToString()];
            var monthText = DataLocalizer[GetMonth(closeDateTime.Month)];
            var year = closeDateTime.Year;
            var day = closeDateTime.Day;

            var formattedDate = _currentPeriod.Close_DT.ToShortDateString();
            return string.Format(template, season, fiscalYear, ToLowerIfFrench(dowText), ToLowerIfFrench(monthText), day, year);
        }
    }

    private string ToLowerIfFrench(string text) => _isFrench ? text.ToLower() : text;

    static string GetSeason(byte season) => season switch
    {
        1 => "Spring",
        2 => "Summer",
        3 => "Fall",
        _ => "Winter"
    };

    static string GetMonth(int month) => month switch
    {
        01 => "January",
        02 => "February",
        03 => "March",
        04 => "April",
        05 => "May",
        06 => "June",
        07 => "July",
        08 => "August",
        09 => "September",
        10 => "October",
        11 => "November",
        12 => "December",
        _  => "Unknown"
    };

    static int GetFiscalYear(SeasonRegistrationPeriod period) => period.Quarter_NUM switch
    {
        4 => period.Year_NUM + 1,
        _ => period.Year_NUM
    };

    private List<Func<LanguageTrainingApplication, string>> accessorFunctions = new List<Func<LanguageTrainingApplication, string>>
    {
        new Func<LanguageTrainingApplication, string>(p => { return p.NRCan_Username; }),
        new Func<LanguageTrainingApplication, string>(p => { return p.Sector_Branch; }),
        new Func<LanguageTrainingApplication, string>(p => { return (p.Delegate_Manager_First_Name + " " + p.Delegated_Manager_Last_Name); }),
        new Func<LanguageTrainingApplication, string>(p => { return p.I_am_seeking; }),
        new Func<LanguageTrainingApplication, string>(p => { return p.Manager_Decision; }),
    };


    private async void HandleFilterChange(string selection)
    {
        await LoadApps(selection);
        StateHasChanged();
    }

    private void HandleInvalidSubmit(EditContext editContext)
    {
        var validations = editContext.Validate();
        StateHasChanged();    
    }

    private async Task HandleValidSubmit()
    {
        if (_languageTrainingApplication != null)
        {
            if (_languageTrainingApplication.Application_ID == 0)
            {
                _languageTrainingApplication = Context.LanguageTrainingApplications.Add(_languageTrainingApplication).Entity;
            }
            _languageTrainingApplication.Last_Updated_DT = DateTime.Now;

            await Context.TrackSaveChangesAsync(AuditingService);

            var param = GetLanguageTrainingParameters();

            if (!_languageTrainingApplication.ApplicationCompleteEmailSent)
            {                
                await SendApplicationCompletedEmails(param);
                _languageTrainingApplication.ApplicationCompleteEmailSent = true;
                _languageTrainingApplication.FormSubmitted_DT = DateTime.Now;
                _languageTrainingApplication.FormSubmitted_UserId = _user.Mail;
                await Context.TrackSaveChangesAsync(AuditingService);
            }

            if (_languageTrainingApplication.ApplicationCompleteEmailSent && !_languageTrainingApplication.ManagerDecisionSent)
            {
                await SendManagerDecisionEmails(param);                
            }

            if (_isUserAdmin && HasLanguageSchoolMadeDecision() && !_languageTrainingApplication.LSUDecisionSent)
            {
                await SendLanguageSchoolDecisionEmails(param);                    
            }

        }
        AppId = string.Empty;
        await LoadApps(string.Empty);
        _languageTrainingApplication = null;
        StateHasChanged();
    }

    private bool HasLanguageSchoolMadeDecision()
    {
        return (!string.IsNullOrEmpty(_languageTrainingApplication.Decision));
    }

    private async Task SendLanguageSchoolDecisionEmails(LanguageTrainingParameters param)
    {
        await EmailService.SendLanguageSchoolDecision(param);
        _languageTrainingApplication.LSUDecisionSent = true;
        _languageTrainingApplication.LanguageSchoolDecision_DT = DateTime.Now;
        _languageTrainingApplication.LanguageSchoolDecision_UserId = _user.Mail;
        await Context.TrackSaveChangesAsync(AuditingService);
    }

    private async Task SendManagerDecisionEmails(LanguageTrainingParameters param)
    {
        if (_languageTrainingApplication.Manager_Decision == "Approved" || _languageTrainingApplication.Manager_Decision == "Declined")
        { 
            await EmailService.SendManagerDecisionEmail(param);
            _languageTrainingApplication.ManagerDecisionSent = true;
            _languageTrainingApplication.ManagerDecision_DT = DateTime.Now;
            _languageTrainingApplication.ManagerDecision_UserId = _user.Mail;
            await Context.TrackSaveChangesAsync(AuditingService);
        }  
    }

    private async Task SendApplicationCompletedEmails(LanguageTrainingParameters param)
    {
        await EmailService.SendApplicationCompleteNotification(param);    
    }

    private LanguageTrainingParameters GetLanguageTrainingParameters()
    {
        LanguageTrainingParameters param = new();
        param.ApplicationId = _languageTrainingApplication.Application_ID.ToString();
        param.AppUrl = $"/languagetraining/applications/{_languageTrainingApplication.Application_ID}";
        param.EmployeeEmailAddress = _languageTrainingApplication.Email_Address_EMAIL;
        param.EmployeeName = $"{_languageTrainingApplication.First_Name} {_languageTrainingApplication.Last_Name}";
        param.TrainingType = _languageTrainingApplication.Training_Type;
        param.ManagerEmailAddress = _languageTrainingApplication.Delegated_Manager_Email;
        param.ManagerName = _languageTrainingApplication.Delegate_Manager_First_Name + " " + _languageTrainingApplication.Delegated_Manager_Last_Name;
        param.ManagerDecision = _languageTrainingApplication.Manager_Decision;
        param.AdminEmailAddresses = ServiceAuthManager.GetProjectAdminsEmails(PROJECTACRONYM);
        param.LanguageSchoolDecision = _languageTrainingApplication.Decision;
        param.Session = _languageTrainingApplication.Session_For_Language_Training;
        param.Class = _languageTrainingApplication.Class_For_Language_Training;
        param.FormUrl =  $"{NavigationManager.BaseUri}{FORMLOCATION}";
        return param;
    }

    private async Task LoadApps(string filter)
    {
        var latestPeriod = GetLatestPeriod();
        var quarter = latestPeriod.Quarter_NUM;
        var year = GetFiscalYear(latestPeriod);

        if (_isUserAdmin)
        {
            _languageTrainingApplications = await Context.LanguageTrainingApplications
                .Where(a => a.Year_For_Language_Training == year && a.Quarter_NUM == quarter)
                .ToListAsync();
            if (!string.IsNullOrEmpty(AppId))
            {
                _languageTrainingApplication = Context.LanguageTrainingApplications.Where(a => a.Application_ID == Convert.ToInt32(AppId)).FirstOrDefault();
            }
        }
        else
        {
            _languageTrainingApplications = Context.LanguageTrainingApplications
                .Where(a => a.Year_For_Language_Training == year && a.Quarter_NUM == quarter)
                .Where(r => (r.Email_Address_EMAIL.ToLower() == _user.Mail.ToLower()) || (r.Delegated_Manager_Email.ToLower() == _user.Mail.ToLower()))
                .ToList();
        }

        if (filter == "All" || string.IsNullOrEmpty(filter))
        {
            _formMetadata.DataSet = _languageTrainingApplications;
        }
        else
        {
            _formMetadata.DataSet = _languageTrainingApplications.Where(r => r.Manager_Decision == filter).ToList();
        }
    }

    private List<string> GetTrainingTypes()
    {
        var languageClass = _languageTrainingApplication.I_am_seeking;
        return languageClass == "English Language Training" ? Language_Constants.TRAININGTYPEENGLISH.ToList() : Language_Constants.TRAININGTYPEFRENCH.ToList();
    }

    private void OnConfigure(IModelFormContext context)
    {
        if (!_onchange)
        {
            context.RegisterOptionValueProperty<LanguageTrainingApplication>(p => p.Sector_Branch, () => Language_Constants.SECTORSANDBRANCHES);
            context.RegisterOptionValueProperty<LanguageTrainingApplication>(p => p.Province_Territory, () => Language_Constants.PROVINCES);
            context.RegisterOptionValueProperty<LanguageTrainingApplication>(p => p.Employment_Status, () => Language_Constants.EMPLOYMENT_STATUS);
            context.RegisterOptionValueProperty<LanguageTrainingApplication>(p => p.I_am_seeking, () => Language_Constants.LANGUAGE_TRAINING, s => 
            {
                context.RefreshOptions<LanguageTrainingApplication>(p => p.Training_Type);
            });
            context.RegisterOptionValueProperty<LanguageTrainingApplication>(p => p.Language_Training_Provided_By, () => Language_Constants.LANGUAGE_TRAINING_PROVIDERS);
            context.RegisterOptionValueProperty<LanguageTrainingApplication>(p => p.Last_Course_Successfully_Completed, () => Language_Constants.CLASSES_E);
            context.RegisterOptionValueProperty<LanguageTrainingApplication>(p => p.SLE_Results_Reading, () => Language_Constants.SLESTATUS);
            context.RegisterOptionValueProperty<LanguageTrainingApplication>(p => p.SLE_Results_Writing, () => Language_Constants.SLESTATUS);
            context.RegisterOptionValueProperty<LanguageTrainingApplication>(p => p.SLE_Results_Oral, () => Language_Constants.SLESTATUS);
            //context.RegisterOptionValueProperty<LanguageTrainingApplication>(p => p.Session_For_Language_Training, () => Language_Constants.QUARTERS);
            context.RegisterOptionValueProperty<LanguageTrainingApplication>(p => p.Class_For_Language_Training, () => Language_Constants.CLASSES_E);        
            context.RegisterOptionValueProperty<LanguageTrainingApplication>(p => p.Decision, () => Language_Constants.LANGUAGE_SCHOOL_SELECTION);
            context.RegisterOptionValueProperty<LanguageTrainingApplication>(p => p.Completed_Training_Session, () => Language_Constants.QUARTERS);
            context.RegisterOptionValueProperty<LanguageTrainingApplication>(p => p.Manager_Decision, () => new[] { "Pending", "Approved", "Declined"});
            context.RegisterOptionValueProperty<LanguageTrainingApplication>(p => p.Training_Type, () => GetTrainingTypes());
            context.RegisterFieldNotes<LanguageTrainingApplication>(p => p.Manager_Decision, "The manager must approve or decline this application to proceed");
        }

        ToggleVisibility(context);
    }

    private void ToggleVisibility(IModelFormContext context)
    {
        context.SetVisible<LanguageTrainingApplication>(p => p.Language_Training_Since_LETP_Assessment, _languageTrainingApplication.Completed_LETP_Assessment);
        context.SetVisible<LanguageTrainingApplication>(p => p.Language_Training_Provided_By, _languageTrainingApplication.Completed_LETP_Assessment && _languageTrainingApplication.Language_Training_Since_LETP_Assessment);
        context.SetVisible<LanguageTrainingApplication>(p => p.Last_Course_Successfully_Completed, _languageTrainingApplication.Completed_LETP_Assessment && (_languageTrainingApplication.Language_Training_Provided_By == "NRCan Language School" || _languageTrainingApplication.Language_Training_Provided_By == "École de langues de RNCan"));
        context.SetVisible<LanguageTrainingApplication>(p => p.Completed_Training_Year, _languageTrainingApplication.Completed_LETP_Assessment && (_languageTrainingApplication.Language_Training_Provided_By == "NRCan Language School" || _languageTrainingApplication.Language_Training_Provided_By == "École de langues de RNCan"));
        context.SetVisible<LanguageTrainingApplication>(p => p.Completed_Training_Session, _languageTrainingApplication.Completed_LETP_Assessment && (_languageTrainingApplication.Language_Training_Provided_By == "NRCan Language School" || _languageTrainingApplication.Language_Training_Provided_By == "École de langues de RNCan"));
        context.SetVisible<LanguageTrainingApplication>(p => p.Report_Sent_To_NRCan_Language_School, _languageTrainingApplication.Completed_LETP_Assessment  && (_languageTrainingApplication.Language_Training_Provided_By == "External Provider" || _languageTrainingApplication.Language_Training_Provided_By == "Fournisseur externe"));
        context.SetVisible<LanguageTrainingApplication>(p => p.Second_Language_Evaluation_Results, _languageTrainingApplication.Completed_LETP_Assessment);
        context.SetVisible<LanguageTrainingApplication>(p => p.SLE_Results_Reading, _languageTrainingApplication.Completed_LETP_Assessment && _languageTrainingApplication.Second_Language_Evaluation_Results);
        context.SetVisible<LanguageTrainingApplication>(p => p.SLE_Results_Writing, _languageTrainingApplication.Completed_LETP_Assessment && _languageTrainingApplication.Second_Language_Evaluation_Results);
        context.SetVisible<LanguageTrainingApplication>(p => p.SLE_Results_Oral, _languageTrainingApplication.Completed_LETP_Assessment && _languageTrainingApplication.Second_Language_Evaluation_Results);
        context.SetVisible<LanguageTrainingApplication>(p => p.Training_Type, _languageTrainingApplication.Completed_LETP_Assessment);
        context.SetVisible<LanguageTrainingApplication>(p => p.SLE_Test_Date, _languageTrainingApplication.Completed_LETP_Assessment && (_languageTrainingApplication.Training_Type == "Individual - Coaching" || _languageTrainingApplication.Training_Type == "Encadrement individuel"));
        //context.SetVisible<LanguageTrainingApplication>(p => p.Session_For_Language_Training, _languageTrainingApplication.Completed_LETP_Assessment && !(_languageTrainingApplication.Training_Type == "Private training: Coaching**" || _languageTrainingApplication.Training_Type == "Individual - Coaching"));
        context.SetVisible<LanguageTrainingApplication>(p => p.Class_For_Language_Training, _languageTrainingApplication.Completed_LETP_Assessment && !(_languageTrainingApplication.Training_Type == "Private training: Coaching**" || _languageTrainingApplication.Training_Type == "Individual - Coaching"));
        context.SetVisible<LanguageTrainingApplication>(p => p.Delegate_Manager_First_Name, _languageTrainingApplication.Completed_LETP_Assessment);
        context.SetVisible<LanguageTrainingApplication>(p => p.Delegated_Manager_Last_Name, _languageTrainingApplication.Completed_LETP_Assessment);
        context.SetVisible<LanguageTrainingApplication>(p => p.Delegated_Manager_Email, _languageTrainingApplication.Completed_LETP_Assessment);
        context.SetVisible<LanguageTrainingApplication>(p => p.Employee_Appointed_NonImperative_Basis, _languageTrainingApplication.Completed_LETP_Assessment);
        context.SetVisible<LanguageTrainingApplication>(p => p.Employee_equity_group, _languageTrainingApplication.Completed_LETP_Assessment);
        context.SetVisible<LanguageTrainingApplication>(p => p.Employee_language_profile_raised, _languageTrainingApplication.Completed_LETP_Assessment);
        context.SetVisible<LanguageTrainingApplication>(p => p.Employee_professional_dev_program, _languageTrainingApplication.Completed_LETP_Assessment);

        context.SetVisible<LanguageTrainingApplication>(p => p.Employee_In_Pardp, _languageTrainingApplication.Completed_LETP_Assessment);
        context.SetVisible<LanguageTrainingApplication>(p => p.Employee_talent_management_exercise, _languageTrainingApplication.Completed_LETP_Assessment);

        var isDelegatedManager = _languageTrainingApplication.Delegated_Manager_Email?.ToLower() == _user.Mail.ToLower();

        context.SetVisible<LanguageTrainingApplication>(p => p.Manager_First_Name, _isUserAdmin || isDelegatedManager);
        context.SetVisible<LanguageTrainingApplication>(p => p.Manager_Last_Name, _isUserAdmin || isDelegatedManager);
        context.SetVisible<LanguageTrainingApplication>(p => p.Manager_Email_Address, _isUserAdmin || isDelegatedManager);
        context.SetVisible<LanguageTrainingApplication>(p => p.Manager_Decision, _isUserAdmin || isDelegatedManager);
        context.SetVisible<LanguageTrainingApplication>(p => p.Decision, _isUserAdmin);


        _formMetadata.IsSubmitEnabled = _isUserAdmin || isDelegatedManager || (_isNewApp && _languageTrainingApplication.Completed_LETP_Assessment);
        var footerfile = _formMetadata.IsSubmitEnabled ? (_isFrench ? "FormFooterFr.md" : "FormFooter.md") : (_isNewApp ? (_isFrench ? "FormFooterWarningFr.md" : "FormFooterWarning.md") : (_isFrench ? "FormFooterSubmittedFr.md" : "FormFooterSubmitted.md"));

        _formMetadata.MarkDownContentFooter = File.ReadAllLines($@"Pages\Forms\LanguageTraining\{footerfile}").ToList();
        _onchange = false;
    }

    private void OnChange(ModelFormChangeArgs args)
    {
        _onchange = true;
        OnConfigure(args.Context);
    }

    private void CreateNewApplication()
    {
        _isNewApp = true;
        _languageTrainingApplication = new LanguageTrainingApplication() { Last_Updated_DT = DateTime.Now, Manager_Decision = "Pending" };
        //var user = await UserInformationService.GetUserAsync();
        _languageTrainingApplication.Email_Address_EMAIL = _user.Mail;
        _languageTrainingApplication.First_Name = _user.GivenName;
        _languageTrainingApplication.Last_Name = _user.Surname;

        // _currentPeriod shouldn't be null here!
        _languageTrainingApplication.Year_For_Language_Training = _currentPeriod is not null ? GetFiscalYear(_currentPeriod) : DateTime.Now.Year;
        _languageTrainingApplication.Quarter_NUM = _currentPeriod?.Quarter_NUM ?? 1;
        _languageTrainingApplication.Session_For_Language_Training = GetSessionForTraining();

        StateHasChanged();
    }

    private string GetSessionForTraining()
    {
        return _currentPeriod?.Quarter_NUM switch
        {
            null => string.Empty,
            1 => "Q1 - April to June",
            2 => "Q2 - July to September",
            3 => "Q3 - October to December",
            _ => "Q4 - January to March",
        };
    }

    private void SetFormEdit(LanguageTrainingApplication application)
    {
        _isNewApp = false;
        _languageTrainingApplication = application;
        StateHasChanged();
    }

    private static SeasonRegistrationPeriod GetCurrentPeriod(LanguageTrainingDBContext ctx)
    {
        var estDateTimeNow = DateTime.UtcNow.ConvertUtcToEasternTime();

        var date = estDateTimeNow.Date;
        var period = ctx.SeasonRegistrationPeriods.FirstOrDefault(e => e.Open_DT <= date && date <= e.Close_DT);

        if (period is null)
            return null;
        
        if (estDateTimeNow > GetCloseDateExact(period.Close_DT))
            return null;

        return period;
    }

    private static DateTime GetCloseDateExact(DateTime date) => date.Date + TimeSpan.FromHours(18); // 6:00PM

    public void Dispose() 
    { 
        Context.Dispose(); 
    }
}
