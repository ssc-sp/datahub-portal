@using Microsoft.Azure.Services.AppAuthentication
@inject IProjectDatabaseService ProjectDbService
@inject IUserInformationService UserInformationService

@if (DataProject != null)
{
    <AeTypography Variant="h3">@DataProject.ProjectName</AeTypography>
    <AeTable
        Dataset=@DbAttrDataSet
        Headers=@LocalizedHeaders
        Accessors=@accessors
        />
    <hr />
    @if (DataProject.IsDatabasePostgres)
    {
        @if (_authResult != null)
        {
            <div>
                @Localizer["PROJECT-PAGE.DATABASE-CARD.AccessToken"]:
                <code style="display: block; padding: 2px 10px; word-break: break-all;">
                    @_authResult.AccessToken
                </code>
            </div>
            <div>@Localizer["PROJECT-PAGE.DATABASE-CARD.Expires"]: @_authResult.ExpiresOn.ToLocalTime()</div>
        }
        else if (ProjectDbService.IsServiceAvailable())
        {
            <div>
                <AeButton OnClickEvent=@GetPostgresToken Disabled=@awaitingToken>@Localizer["PROJECT-PAGE.DATABASE-CARD.GetToken_button"]</AeButton>
                @if (awaitingToken)
                {
                    <div style="display: inline-block;">
                        <Spinner Small/>
                    </div>
                }
            </div>
        }
    }
}


@code {
    private readonly string LOCALIZATION_PREFIX = "PROJECT-PAGE.DATABASE-CARD";

    [Parameter]
    public Datahub_Project DataProject { get; set; }

    [Parameter]
    public bool GetAccessTokenImmediately { get; set; } = false;

    private AppAuthenticationResult _authResult { get; set; }
    private bool awaitingToken = false;

    private Dictionary<string, string> _dbAttributes;
    private List<KeyValuePair<string, string>> DbAttrDataSet => _dbAttributes.ToList();

    private List<string> LocalizeHeaders(List<string> headerKeys)
    {
        return headerKeys.Select(k => Localizer[$"{LOCALIZATION_PREFIX}.{k}"].ToString()).ToList();
    }
    private List<string> headerKeys = new List<string>() { "Attribute", "Value" };
    private List<string> LocalizedHeaders => LocalizeHeaders(headerKeys);

    private List<Func<KeyValuePair<string, string>, string>> accessors = new();

    private async Task GetPostgresToken()
    {
        awaitingToken = true;
        _authResult = await ProjectDbService.GetPostgresAuthenticationObject();
        awaitingToken = false;
    }

    protected override async Task OnInitializedAsync()
    {
        var loadUserTask = UserInformationService.GetUserAsync();

        accessors = new List<Func<KeyValuePair<string, string>, string>>()
        {
            p => Localizer[$"{LOCALIZATION_PREFIX}.{p.Key}"].ToString(),
            p => p.Value
        };

        if (DataProject != null)
        {
            _dbAttributes = new Dictionary<string, string>()
            {
                {"DatabaseName", DataProject.DB_Name},
                {"DatabaseServer", DataProject.DB_Server},
                {"DatabaseType", DataProject.DB_Type}
            };

            var user = await loadUserTask;
            if (DataProject.IsDatabasePostgres)
            {
                _dbAttributes.Add("DbUsername", $"{user.Mail}@{DataProject.DB_Server}");
            }
        }

        if (GetAccessTokenImmediately)
        {
            await GetPostgresToken();
        }
    }
}
