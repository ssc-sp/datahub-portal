@inject IProjectCreationService ProjectCreationService
<MudPaper Class="pa-16">
    <MudText Typo="Typo.h3">@Localizer[Title]</MudText> 
    <MudForm Class="my-8" @bind-IsValid="@_success">
        <MudText Class="mb-4">@Localizer[Description]</MudText>
        <MudTextField T="string" @bind-Value="_workspaceTitle" Label="@Localizer[WorkspaceLabel]" Required 
                  RequiredError="@Localizer[MissingTitle]" HelperText="@Localizer[WorkspaceHelper]"/>
        <MudTextField T="string" @bind-Value="_workspaceAcronym" Label="@Localizer[AcronymLabel]" AdornmentIcon="@AcronymGeneratorIcon"
                  HelperText="@Localizer[AcronymHelper]" Adornment="Adornment.End" OnAdornmentClick="GenerateAcronym"
                  RequiredError="@Localizer[MissingAcronym]" Converter="_converter" @ref="_acronymField" Required
                  Validation="new Func<string,Task<string>>(ValidateAcronym)" />
        @if (_errorMessage is not null)
        {
            <MudAlert Severity="Severity.Error" Dense="true" Class="my-2" ShowCloseIcon CloseIconClicked="CloseAlert">
                @_errorMessage
            </MudAlert>
        }
    </MudForm>
    <MudStack Row Spacing="3" Justify="Justify.FlexEnd">
        @if (ShowCancel)
        {
            <MudButton Variant="Variant.Text">@Localizer[CancelButton]</MudButton>
        }
        <MudButton Variant="Variant.Filled" Color="Color.Primary" Disabled="!_success" OnClick="CreateWorkspace">
            @Localizer[CreateButton]
        </MudButton>
    </MudStack>
</MudPaper> 

@code {

    [Parameter]
    public bool ShowCancel { get; set; } = true;
#nullable enable
    private const string Title = "Create a new Workspace";
    private const string Description = "Required information to create a collaborative workspace";  
    private const string WorkspaceLabel = "Workspace Title";
    private const string WorkspaceHelper = "A title that describes the workspace";
    private const string AcronymLabel = "Workspace Acronym";
    private const string AcronymHelper = "A unique alphanumeric acronym to identify the workspace";
    private const string AcronymGeneratorIcon = "fa-light fa-arrows-rotate";
    private const string AcronymGeneratorTooltip = "Generate a unique acronym";
    private const string CreateButton = "Create Workspace";
    private const string CancelButton = "Cancel";
    
    private const string MissingTitle = "Workspace Title is required";
    private const string MissingAcronym = "Workspace Acronym is required";
    private const string AcronymExists = "Workspace Acronym already exists";
    private const string WorkspaceRequiredToGenerateAcronym = "Workspace Title is required to generate an acronym";
    
    private string? _errorMessage;
    private string _workspaceTitle = string.Empty;
    private string _workspaceAcronym = string.Empty;
    private MudTextField<string>? _acronymField;

    private bool _success;
    
    private async Task GenerateAcronym()
    {
        if (string.IsNullOrWhiteSpace(_workspaceTitle))
        {
            _errorMessage = Localizer[WorkspaceRequiredToGenerateAcronym];
            return;
        }
        
        _workspaceAcronym = await ProjectCreationService.GenerateProjectAcronymAsync(_workspaceTitle);
        _success = true;
        _acronymField?.ResetValidation();    
    }

    private void CloseAlert()
    {
        _errorMessage = null;
    }

    private async Task<string?> ValidateAcronym(string acronym)
    {   
        if (await ProjectCreationService.AcronymExists(acronym))
            return Localizer[AcronymExists];
        return null;
    }
    
    private Converter<string> _converter = new Converter<string>
    {
        SetFunc = value => value?.ToUpperInvariant() ?? string.Empty,
        GetFunc = text => text?.ToUpperInvariant() ?? string.Empty,
    };
    
    private async Task CreateWorkspace()
    {
        if (_success)
        {
            await ProjectCreationService.CreateProjectAsync(_workspaceTitle, _workspaceAcronym);
        }
    }
#nullable disable
}