@*ItemDetails.razor*@
@using Datahub.Metadata.Model
@using Datahub.Portal.Components;
@inject IMSGraphService MSGraphService
@inject CommonAzureServices CommonAzureServices;
@inject NavigationManager NavigationManager

@if (SelectedFile != null)
{
    <div class="item-details-container">
        <div style="position: relative;">
            <h4 class="nrcan-typography title h4">
                <i class="fal fa-times-circle details-close-button" title=@Localizer["ITEM-DETAILS-PAGE.CloseDetails"] @onclick=@HandleClose></i>
                <i class="@DatahubTools.GetFileTypeIcon(SelectedFile.fileformat)"></i>
                @SelectedFile.filename
            </h4>
        </div>

        @*<div class="tab">
            <h4 class="nrcan-typography @DetailsTabClassname h4" @onclick="@(() => TabClick("details"))">
                @Localizer["ITEM-DETAILS-PAGE.Details-Label"]
            </h4>
            <h4 class="nrcan-typography @ActivityTabClassname h4" @onclick="@(() => TabClick("activity"))">
                @Localizer["ITEM-DETAILS-PAGE.Activity-Label"]
            </h4>
        </div>*@

        <div class="@DetailsContentClassname">
            @foreach ((string propertyName, string displayValue) in Properties)
            {
                @if (propertyName == "customfields")
                {
                    @for (int i = 0; i < SelectedFile.customfields.Count; i++)
                    {
                        <CustomFieldsView Field="@SelectedFile.customfields[i]" IncludeHeader="@(i == 0)" />
                    }
                }
                else if (!string.IsNullOrWhiteSpace(displayValue))
                {
                    <div class="item-row">
                        <div class="nrcan-typography item-label">
                            @Localizer["ITEM-DETAILS-PAGE." + propertyName]
                        </div>
                        <div class="nrcan-typography item-text">
                            @displayValue
                        </div>
                    </div>
                }
            }

            <div class="item-row">
                <AeInput disabled DefaultValue="@PowerBIPasteText" class="formuserinput" id="powerbi-connectionstring" />
                <a onclick="copyToClipboard('powerbi-connectionstring')">
                    <i class="fas fa-copy" style="padding-left: 1rem;"></i>
                </a>
            </div>

            <div class="item-row">
                <AeInput disabled DefaultValue="@FileLinkURL" class="formuserinput" id="datalake-connectionstring" />
                <a onclick="copyToClipboard('datalake-connectionstring')">
                    <i class="fas fa-copy" style="padding-left: 1rem;"></i>
                </a>
            </div>

            <div class="item-row">
                <ObjectMetadataEditor ObjectId=@SelectedFile.fileid 
                                      Name=@SelectedFile.filename
                                      Location=@Project
                                      SecurityClass=@SelectedFile.securityclass
                                      SaveButtonLabel=@Localizer["OPENDATA-WIZARD.Save_button"] 
                                      ValidateRequired=true
                                      ProfileName="catalog"
                                      ObjectType=@MetadataObjectType.File
                                      UpdateCatalog=@UpdateCatalog
                                      Preview=@PreviewMetadata />
            </div>

        </div>
        <div class="@ActivityContentClassname">
            @foreach (var activity in SelectedFile.activities)
            {
                <div class="item-row"> 
                    @*In the future, instead of "created", use @activity.verb*@
                    @((MarkupString)GetActivity(activity))
                    <div class="nrcan-typography mini-timestamp">
                        @activity.activityts
                    </div>
                </div>
            }
        </div>
    </div>
}

@code {

    [Parameter]
    public FileMetaData SelectedFile { get; set; }

    [Parameter]
    public string CurrentUser { get; set; }

    [Parameter]
    public string Project { get; set; }

    [Parameter]
    public EventCallback OnClose { get; set; }

    private bool UpdateCatalog => !string.IsNullOrEmpty(Project);

    protected override async Task OnInitializedAsync()
    {
        foreach (string propertyName in FileMetaDataExtensions.GetMetadataProperties(null).Where(p => p.isVisible).Select(p => p.key))
        {
            var propertyValue = await GetPropertyDisplayValue(propertyName);
            if (!string.IsNullOrEmpty(propertyValue))
            {
                var prop = (propertyName, propertyValue);
                Properties.Add(prop);
            }
        }
    }

    private bool PreviewMetadata => !(CurrentUser ?? "").Equals(SelectedFile?.ownedby, StringComparison.InvariantCultureIgnoreCase);

    private string FileLinkURL => $"https://{CommonAzureServices.StorageAccountName}.blob.core.windows.net/datahub/{SelectedFile.folderpath}/{SelectedFile.filename}";
    private string PowerBIPasteText => $"abfs://{CommonAzureServices.FileSystemName}@{CommonAzureServices.StorageAccountName}.dfs.core.windows.net/{SelectedFile.folderpath}/{SelectedFile.filename}";

    private string DetailsTabClassname => $"tab-link {(_detailsActive ? "active" : "")}";
    private string ActivityTabClassname => $"tab-link {(!_detailsActive ? "active" : "")}";

    private string DetailsContentClassname => $"tab-content item-details {(_detailsActive ? "" : "hidden")}";
    private string ActivityContentClassname => $"tab-content item-activity {(_detailsActive ? "hidden" : "")}";

    private bool _detailsActive = true;

    private List<(string Name, string Value)> Properties = new();

    private string GetActivity(Activity activity)
    {
        //var localizer = @"<Typography>{0} {1} <span class=""bluetext"">{2}</span> in <span class=""bluetext"">{3}</span></Typography>";
        //var loc = string.Format(HtmlLocalizer[localizer].Value, MSGraphService.GetUserName(activity.userid), activity.activity, "another text", "foldername");
        return string.Empty;
    }

    private void TabClick(string tabName)
    {
        _detailsActive = tabName == "details";
        StateHasChanged();
    }

    public void OpenMetadata()
    {        
        NavigationManager.NavigateTo($"/metadata/{SelectedFile.fileid}");
    }

    private async Task<string> GetPropertyDisplayValue(string propertyName)
    {
        switch (propertyName)
        {
            case "ownedby":
            case "lastmodifiedby":
            case "createdby":
                var value = SelectedFile.GetMetadataPropertyValue(propertyName);
                return await MSGraphService.GetUserName(value, CancellationToken.None);

            case "tags":
                return SelectedFile._tags;

            default:
                return SelectedFile.GetMetadataPropertyValue(propertyName);
        }
    }

    private async void HandleClose()
    {
        await OnClose.InvokeAsync();
    }
}
