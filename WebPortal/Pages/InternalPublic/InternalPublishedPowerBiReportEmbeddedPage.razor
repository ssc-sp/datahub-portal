@page "/internal-published-report/{ObjectId}"
@page "/internal-published-report/{ObjectId}/{Language}"
@using Microsoft.Identity.Web
@using LanguageEnum = Metadata.Model.CatalogObjectLanguage
@using CatalogItem = Metadata.DTO.CatalogObjectResult

@inject IJSRuntime _jsRuntime
@inject NavigationManager _navManager
@inject PowerBiServiceApi _pbiApiService
@inject IPowerBiDataService _pbiDataService
@inject IMetadataBrokerService _metadataService
@inject MicrosoftIdentityConsentAndConditionalAccessHandler _consentHandler


<MudStack>
    <MudStack Row>
        <MudText Typo=@Typo.h3>
            @if (_showReportTitle)
            {
                @_catalogReport.Name_English
            }
            else
            {
                <MudProgressCircular Indeterminate />
            }
        </MudText>
        <MudSpacer />
        <MudButton OnClick=@(() => _relatedMenuOpen = !_relatedMenuOpen)>Related Reports</MudButton>
        <MudPopover TransformOrigin=@Origin.TopRight AnchorOrigin=@Origin.TopRight Open=@_relatedMenuOpen>
            <MudContainer>
                <MudText>Debug</MudText>
                <MudText>User language: @UserLanguagePreference</MudText>
                <MudText>Selected language: @SelectedLanguage</MudText>
                @if (_relatedCatalogItems?.Count > 0)
                {
                    <MudText>Related reports</MudText>
                    <MudList>
                        @foreach (var report in _relatedCatalogItems)
                        {
                            <MudListItem>
                                @if (report == _catalogReport)
                                {
                                    <MudText>
                                        <MudIcon Icon=@Icons.Filled.ArrowRight Color=@Color.Primary />
                                        @report.Name_English - @report.Language
                                    </MudText>
                                }
                                else
                                {
                                    <MudLink Href=@GenerateReportLink(report) @onclick=@(async () => await ChangeReport(report))>@report.Name_English - @report.Language</MudLink>
                                }
                            </MudListItem>
                        }
                    </MudList>
                }
            </MudContainer>
        </MudPopover>
    </MudStack>

    <MudContainer>
        @if (_invalidReport)
        {
            <MudText>invalid report</MudText>
        }
        else if (_isWorking)
        {
            <MudText>Loading</MudText>
        }
        else
        {
            <div @ref="@_powerBIElement" style="width:100%;height:600px;max-width: 2000px" />
        }
    </MudContainer>
</MudStack>


@*
@if (_invalidReport)
{
    <MudText>invalid report</MudText>
}
else if (_isWorking)
{
    <MudText>Loading</MudText>
}
else
{
    <div @ref="@_powerBIElement" style="width:100%;height:600px;max-width: 2000px" />
}
*@


@code {



    [Parameter]
    public string ObjectId { get; set; }

    [Parameter]
    public string Language { get; set; }

    [CascadingParameter(Name = "UserLanguage")]
    public (Func<string> currentLanguage, Action<string> setLanguage) UserLanguage { get; set; }


    private bool _isWorking = true;
    private bool _invalidReport = false;

    private ElementReference _powerBIElement;
    private Guid? _reportId;
    private Guid? _groupId;

    private Microsoft.PowerBI.Api.Models.Report _pbiReport;
    private CatalogItem _catalogReport;
    private List<CatalogItem> _relatedCatalogItems;
    private string _powerBiAccessToken;
    private PowerBISettings _pbiSettings;

    private bool _relatedMenuOpen = false;

    private string _userLanguagePreferenceOnLoad;

    private bool _showReportTitle => !_invalidReport && !_isWorking && _catalogReport != null;

    private LanguageEnum UserLanguagePreference => UserLanguage.currentLanguage() switch
    {
        "en" => Metadata.Model.CatalogObjectLanguage.English,
        "fr" => Metadata.Model.CatalogObjectLanguage.French,
        _ => Metadata.Model.CatalogObjectLanguage.Bilingual
    };

    private LanguageEnum SelectedLanguage => Language switch
    {
        "en" => Metadata.Model.CatalogObjectLanguage.English,
        "fr" => Metadata.Model.CatalogObjectLanguage.French,
        _ => UserLanguagePreference
    };

    private async Task LoadReportPage(Guid objectGuid)
    {
        _isWorking = true;
        try
        {
            if (string.IsNullOrEmpty(_powerBiAccessToken))
            {
                _powerBiAccessToken = await _pbiApiService.GetAccessTokenAsync();
            }
            _catalogReport = await _metadataService.GetCatalogObjectByObjectId(objectGuid.ToString());
            _relatedCatalogItems = await _metadataService.GetCatalogGroup(objectGuid);

            if (_catalogReport != null)
            {
                _reportId = objectGuid;
                await PopulateFromCatalogReport();
            }
            else if (_relatedCatalogItems != null)
            {
                _groupId = objectGuid;
                await RedirectFromGroup(_relatedCatalogItems);
            }
            else
            {
                _invalidReport = true;
            }
        }
        catch (MicrosoftIdentityWebChallengeUserException e)
        {
            // user isn't logged into Power BI -> redirect to Microsoft
            _consentHandler.HandleException(e);
        }
        catch (Microsoft.Rest.HttpOperationException)
        {
            // couldn't load the report - missing or unauthorized
            _invalidReport = true;
        }
        catch (Exception)
        {
            // some other exception, crash and log like normal
            throw;
        }
    }

    protected override async Task OnInitializedAsync()
    {
        // if this layout (InternalPublicLayout) ever gets connected to the user language setting, we may not want to update the user's preference automatically
        if (!string.IsNullOrEmpty(Language))
        {
            UserLanguage.setLanguage(Language);
        }

        _userLanguagePreferenceOnLoad = UserLanguage.currentLanguage();

        Guid objectGuid;
        if (!Guid.TryParse(ObjectId, out objectGuid))
        {
            //_navManager.NavigateTo("/");
            _invalidReport = true;
        }

        await LoadReportPage(objectGuid);
    }

    private bool IsWrongLanguage(LanguageEnum reportLanguage) => SelectedLanguage != LanguageEnum.Bilingual
        && reportLanguage != LanguageEnum.Bilingual
        && reportLanguage != SelectedLanguage;


    private async Task PopulateFromCatalogReport()
    {
        _groupId = _catalogReport?.GroupId;
        if (_groupId.HasValue)
        {
            _relatedCatalogItems = await _metadataService.GetCatalogGroup(_groupId.Value);
            var temp = _catalogReport;
            _catalogReport = _relatedCatalogItems?.FirstOrDefault(r => r.CatalogObjectId == temp.CatalogObjectId) ?? temp;
        }

        if (IsWrongLanguage(_catalogReport.Language))
        {
            await RedirectFromGroup(_relatedCatalogItems);
        }
        else
        {
            _pbiReport = await _pbiApiService.GetReport(_reportId.ToString());
            await ShowEmbeddedReport();
        }
    }

    private CatalogItem FindMatchingLanguageReport(IEnumerable<CatalogItem> catalogObjects)
    {
        if (SelectedLanguage == LanguageEnum.Bilingual)
        {
            return catalogObjects.FirstOrDefault();
        }
        else
        {
            return catalogObjects.FirstOrDefault(r => r.Language == SelectedLanguage) ??
                catalogObjects.FirstOrDefault(r => r.Language == LanguageEnum.Bilingual);
        }
    }


    private async Task RedirectFromGroup(IEnumerable<CatalogItem> catalogObjects)
    {
        var newReport = FindMatchingLanguageReport(catalogObjects);
        if (newReport != null)
        {
            _catalogReport = newReport;
            _reportId = Guid.Parse(newReport.Metadata.ObjectId);
            //var extReportTask = _powerBiDataService.GetExternalReportRecord(newGuid);
            var url = _pbiDataService.GeneratePublishedInternalReportLink(_reportId.Value, SelectedLanguage);
            _navManager.NavigateTo(url, replace: true);
            await PopulateFromCatalogReport();
        }
    }


    private async Task ShowEmbeddedReport()
    {
        _isWorking = true;

        _pbiSettings = new();

        // if readonly
        _pbiSettings.bars.actionBar.visible = true;
        _pbiSettings.navContentPaneEnabled = true;
        _pbiSettings.filterPaneEnabled = true;

        if (_pbiReport != null && _reportId.HasValue)
        {
            var embedUrl = SelectedLanguage switch
            {
                LanguageEnum.French => $"{_pbiReport.EmbedUrl}&language=fr-ca",
                LanguageEnum.English => $"{_pbiReport.EmbedUrl}&language=en-ca",
                _ => _pbiReport.EmbedUrl
            };

            _isWorking = false;
            await InvokeAsync(StateHasChanged);

            await _jsRuntime.InvokeAsync<object>(
                "ShowMyPowerBI.showReport",
                _powerBIElement, _powerBiAccessToken, embedUrl,
                _pbiReport.Id.ToString(), _pbiSettings);
        }
    }

    private string GenerateReportLink(CatalogItem report) => _pbiDataService.GeneratePublishedInternalReportLink(report.Metadata.ObjectId, report.Language);

    private async Task ChangeReport(CatalogItem report)
    {
        _relatedMenuOpen = false;
        if (Guid.TryParse(report.Metadata.ObjectId, out var objectGuid))
        {
            await LoadReportPage(objectGuid);
        }
        else
        {
            _invalidReport = true;
        }
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (!firstRender)
        {
            var newLang = UserLanguage.currentLanguage();
            if (newLang != _userLanguagePreferenceOnLoad)
            {
                _userLanguagePreferenceOnLoad = newLang;
                var redirectUrl = _pbiDataService.GeneratePublishedInternalReportLink(_reportId.Value, UserLanguagePreference);
                _navManager.NavigateTo(redirectUrl, forceLoad: true);
            }
        }
    }

}
