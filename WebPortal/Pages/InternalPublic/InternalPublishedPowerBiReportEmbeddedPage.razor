@page "/internal-published-report/{ObjectId}"
@page "/internal-published-report/{ObjectId}/{Language}"
@using Microsoft.Identity.Web
@using LanguageEnum = Metadata.Model.CatalogObjectLanguage
@using CatalogItem = Metadata.DTO.CatalogObjectResult

@layout MainLayout

@inject IJSRuntime _jsRuntime
@inject NavigationManager _navManager
@inject PowerBiServiceApi _pbiApiService
@inject IPowerBiDataService _pbiDataService
@inject IMetadataBrokerService _metadataService
@inject MicrosoftIdentityConsentAndConditionalAccessHandler _consentHandler
@inject IOrganizationLevelsService _orgLevelService
@inject IUserInformationService _userInfoService

<MudStack>
    <MudStack Row>
        <MudText Typo=@Typo.h3>
            @if (_showReportTitle)
            {
                @_catalogReport.Name_English
            }
            else
            {
                <MudProgressCircular Indeterminate />
            }
        </MudText>
        <MudSpacer />
        <MudButton OnClick=@(() => _relatedMenuOpen = true)>@Localizer[$"{LOCALIZATION_PREFIX}.ReportInformation"]</MudButton>
        <MudPopover TransformOrigin=@Origin.TopRight AnchorOrigin=@Origin.TopRight Open=@_relatedMenuOpen Paper Style="max-width: 50em;">
            <MudContainer>
                <MudStack Row>
                    <MudSpacer />
                    <MudIconButton Icon=@Icons.Filled.Close OnClick=@(() => _relatedMenuOpen = false)/>
                </MudStack>
                <MudText>@Localizer[$"{LOCALIZATION_PREFIX}.ReportLanguage"]: @Localizer[_catalogReport.Language.ToString()]</MudText>
                <MudText>@Localizer[$"{LOCALIZATION_PREFIX}.ContactInformation"]: @_catalogReport.Contact</MudText>
                @if (!string.IsNullOrEmpty(_sectorName))
                {
                    <MudText>@Localizer[$"{LOCALIZATION_PREFIX}.Sector"]: @_sectorName</MudText>
                }
                @if (!string.IsNullOrEmpty(_branchName))
                {
                    <MudText>@Localizer[$"{LOCALIZATION_PREFIX}.Branch"]: @_branchName</MudText>
                }

                @*<MudText>User language: @UserLanguagePreference</MudText>
                <MudText>Selected language: @SelectedLanguage</MudText>*@
                @if (_relatedCatalogItems?.Count > 0)
                {
                    <MudDivider />
                    <MudText Typo=@Typo.h5>@Localizer[$"{LOCALIZATION_PREFIX}.RelatedReports"]</MudText>
                    <MudList>
                        @foreach (var report in _relatedCatalogItems)
                        {
                            @if (report != _catalogReport)
                            {
                                <MudListItem>
                                    <MudLink Href=@GenerateReportLink(report) @onclick=@(async () => await ChangeReport(report))>
                                        @report.Name_English - @Localizer[@report.Language.ToString()]
                                    </MudLink>
                                </MudListItem>
                            }
                        }
                    </MudList>
                }
            </MudContainer>
        </MudPopover>
    </MudStack>
    <MudContainer>
        @foreach(var keyword in _catalogKeywords)
        {
            <MudChip>@keyword</MudChip>
        }
    </MudContainer>

    <MudContainer>
        @if (_invalidReport)
        {
            <MudText>@Localizer[$"{LOCALIZATION_PREFIX}.InvalidReport"]</MudText>
        }
        else if (_isWorking)
        {
            <MudText>@Localizer[$"{LOCALIZATION_PREFIX}.Loading"]</MudText>
        }
        else
        {
            <div @ref="@_powerBIElement" style="width:100%;height:600px;max-width: 2000px" />
        }
    </MudContainer>
</MudStack>


@code {
    private const string LOCALIZATION_PREFIX = "TEMP-POWERBI";

    [Parameter]
    public string ObjectId { get; set; }

    [Parameter]
    public string Language { get; set; }

    //[CascadingParameter(Name = "UserLanguage")]
    //public (Func<string> currentLanguage, Action<string> setLanguage) UserLanguage { get; set; }


    private bool _isWorking = true;
    private bool _invalidReport = false;

    private ElementReference _powerBIElement;
    private Guid? _reportId;
    private Guid? _groupId;

    private Microsoft.PowerBI.Api.Models.Report _pbiReport;
    private CatalogItem _catalogReport;
    private List<CatalogItem> _relatedCatalogItems;
    private string _powerBiAccessToken;
    private PowerBISettings _pbiSettings;
    private List<string> _catalogKeywords = new();
    private string _sectorName;
    private string _branchName;

    private bool _relatedMenuOpen = false;

    private string _userLanguagePreferenceOnLoad;

    private bool _showReportTitle => !_invalidReport && !_isWorking && _catalogReport != null;

    //private LanguageEnum UserLanguagePreference => UserLanguage.currentLanguage() switch
    //{
    //    "en" => LanguageEnum.English,
    //    "fr" => LanguageEnum.French,
    //    _ => LanguageEnum.Bilingual
    //};

    private LanguageEnum UserLangPreference => _userLanguagePreferenceOnLoad?.ToLowerInvariant() switch
    {
        "en" => LanguageEnum.English,
        "en-ca" => LanguageEnum.English,
        "fr" => LanguageEnum.French,
        "fr-ca" => LanguageEnum.French,
        _ => LanguageEnum.English
    };

    private LanguageEnum SelectedLanguage => Language switch
    {
        "en" => LanguageEnum.English,
        "fr" => LanguageEnum.French,
        _ => UserLangPreference
    };

    private bool ReportIsFrench => (_catalogReport?.IsFrench ?? false) || (SelectedLanguage == LanguageEnum.French);

    private async Task LoadReportPage(Guid objectGuid)
    {
        _isWorking = true;
        try
        {
            if (string.IsNullOrEmpty(_powerBiAccessToken))
            {
                _powerBiAccessToken = await _pbiApiService.GetAccessTokenAsync();
            }
            _catalogReport = await _metadataService.GetCatalogObjectByObjectId(objectGuid.ToString());
            _relatedCatalogItems = await _metadataService.GetCatalogGroup(objectGuid);

            if (_catalogReport != null)
            {
                _reportId = objectGuid;
                await PopulateFromCatalogReport();
            }
            else if (_relatedCatalogItems != null)
            {
                _groupId = objectGuid;
                RedirectFromGroup(_relatedCatalogItems);
                await PopulateFromCatalogReport();
            }
            else
            {
                _invalidReport = true;
            }

            if (_reportId.HasValue)
            {
                SilentlyUpdateUrl(_reportId.Value, LanguageEnum.Bilingual);
            }
        }
        catch (MicrosoftIdentityWebChallengeUserException e)
        {
            // user isn't logged into Power BI -> redirect to Microsoft
            _consentHandler.HandleException(e);
        }
        catch (Microsoft.Rest.HttpOperationException)
        {
            // couldn't load the report - missing or unauthorized
            _invalidReport = true;
        }
        catch (Exception)
        {
            // some other exception, crash and log like normal
            throw;
        }
    }

    private void TempSetCulture(LanguageEnum lang)
    {
        var langCode = lang == LanguageEnum.French ? "fr-ca" : "en-ca";
        var culture = CultureInfo.GetCultureInfoByIetfLanguageTag(langCode);
        Thread.CurrentThread.CurrentCulture = culture;
        Thread.CurrentThread.CurrentUICulture = culture;
    }

    private string DetectCurrentLanguage()
    {
        return Thread.CurrentThread.CurrentCulture.Name;
    }

    protected override async Task OnInitializedAsync()
    {
        if (!string.IsNullOrEmpty(Language))
        {
            _userInfoService.SetLanguage($"{Language}-ca");
        }

        //_userLanguagePreferenceOnLoad = UserLanguage.currentLanguage();
        //_userLanguagePreferenceOnLoad = await _userInfoService.GetUserLanguage();
        _userLanguagePreferenceOnLoad = DetectCurrentLanguage();


        Guid objectGuid;
        if (!Guid.TryParse(ObjectId, out objectGuid))
        {
            //_navManager.NavigateTo("/");
            _invalidReport = true;
        }

        await LoadReportPage(objectGuid);
    }

    private bool IsWrongLanguage(LanguageEnum reportLanguage) => SelectedLanguage != LanguageEnum.Bilingual
        && reportLanguage != LanguageEnum.Bilingual
        && reportLanguage != SelectedLanguage;


    private async Task GetSectorAndBranchInfo()
    {
        var isFrench = SelectedLanguage == LanguageEnum.French;

        var sectorTask = _orgLevelService.GetSector(_catalogReport.Sector);
        var branchTask = _orgLevelService.GetBranch(_catalogReport.Branch);

        var sector = await sectorTask;
        _sectorName = isFrench ? sector?.FrenchLabel : sector?.EnglishLabel;

        var branch = await branchTask;
        _branchName = isFrench ? branch?.FrenchLabel : branch?.EnglishLabel;

        await InvokeAsync(StateHasChanged);
    }

    private async Task PopulateFromCatalogReport()
    {
        _groupId = _catalogReport?.GroupId;

        if (_groupId.HasValue)
        {
            _relatedCatalogItems = await _metadataService.GetCatalogGroup(_groupId.Value);
            var temp = _catalogReport;
            _catalogReport = _relatedCatalogItems?.FirstOrDefault(r => r.CatalogObjectId == temp.CatalogObjectId) ?? temp;
        }

        /*
        * Using logical && to short-circuit the redirection thusly:
        * - if IsWrongLanguage is false (i.e. report is the right language), the whole thing is false so the if condition is true => display report
        * - if IsWrongLanguage is true but no redirect (i.e. the user's language is already the right one) => display report
        * - otherwise, IsWrongLanguage is true and the user gets redirected => redirect causes a reload so everthing will get processed again
        */
        if (!(IsWrongLanguage(_catalogReport.Language) && RedirectFromGroup(_relatedCatalogItems)))
        {
            _pbiReport = await _pbiApiService.GetReport(_reportId.ToString());
            await ShowEmbeddedReport();
        }

        //if (IsWrongLanguage(_catalogReport.Language))
        //{
        //    await RedirectFromGroup(_relatedCatalogItems);
        //}
        //else
        //{
        //    _pbiReport = await _pbiApiService.GetReport(_reportId.ToString());
        //    await ShowEmbeddedReport();
        //}

        if (_catalogReport != null)
        {
            SetAllTags();
            await GetSectorAndBranchInfo();
        }
    }

    private void SetAllTags()
    {
        _catalogKeywords = new();
        var keywords = ReportIsFrench ? "keywords_fr" : "keywords_en";
        var eTags = _catalogReport?.Metadata[keywords].Value_TXT ?? string.Empty;
        var eTagsList = eTags.Split(',', StringSplitOptions.RemoveEmptyEntries)
                             .Select(kw => kw.Trim())
                             .Where(kw => !string.IsNullOrEmpty(kw))
                             .ToList();
        _catalogKeywords.AddRange(eTagsList);
    }


    private CatalogItem FindMatchingLanguageReport(IEnumerable<CatalogItem> catalogObjects)
    {
        if (SelectedLanguage == LanguageEnum.Bilingual)
        {
            return catalogObjects.FirstOrDefault();
        }
        else
        {
            return catalogObjects.FirstOrDefault(r => r.Language == SelectedLanguage) ??
                catalogObjects.FirstOrDefault(r => r.Language == LanguageEnum.Bilingual);
        }
    }

    private void SilentlyUpdateUrl(Guid reportId, LanguageEnum language)
    {
        var url = _pbiDataService.GeneratePublishedInternalReportLink(reportId, language);
        _navManager.NavigateTo(url, replace: true);
    }

    private bool RedirectFromGroup(IEnumerable<CatalogItem> catalogObjects)
    {
        var newReport = FindMatchingLanguageReport(catalogObjects);
        if (newReport != null)
        {
            _catalogReport = newReport;
            _reportId = Guid.Parse(newReport.Metadata.ObjectId);
            //var extReportTask = _powerBiDataService.GetExternalReportRecord(newGuid);
            //var url = _pbiDataService.GeneratePublishedInternalReportLink(_reportId.Value, SelectedLanguage);
            //_navManager.NavigateTo(url, replace: true);
            SilentlyUpdateUrl(_reportId.Value, SelectedLanguage);
            var newLang = SelectedLanguage == LanguageEnum.French ? "fr-ca" : "en-ca";
            return _userInfoService.SetLanguage(newLang);

            //await PopulateFromCatalogReport();
        }
        else 
        {
            return false;
        }
    }


    private async Task ShowEmbeddedReport()
    {
        _isWorking = true;

        _pbiSettings = new();

        // if readonly
        _pbiSettings.bars.actionBar.visible = true;
        _pbiSettings.navContentPaneEnabled = true;
        _pbiSettings.filterPaneEnabled = true;

        if (_pbiReport != null && _reportId.HasValue)
        {
            var embedUrl = SelectedLanguage switch
            {
                LanguageEnum.French => $"{_pbiReport.EmbedUrl}&language=fr-ca",
                LanguageEnum.English => $"{_pbiReport.EmbedUrl}&language=en-ca",
                _ => _pbiReport.EmbedUrl
            };

            _isWorking = false;
            await InvokeAsync(StateHasChanged);

            await _jsRuntime.InvokeAsync<object>(
                "ShowMyPowerBI.showReport",
                _powerBIElement, _powerBiAccessToken, embedUrl,
                _pbiReport.Id.ToString(), _pbiSettings);
        }
    }

    private string GenerateReportLink(CatalogItem report) => _pbiDataService.GeneratePublishedInternalReportLink(report.Metadata.ObjectId, report.Language);

    private async Task ChangeReport(CatalogItem report)
    {
        _navManager.NavigateTo(GenerateReportLink(report), forceLoad: true);
        await Task.CompletedTask;
    }

    private async Task ChangeReportOld(CatalogItem report)
    {
        _relatedMenuOpen = false;
        if (Guid.TryParse(report.Metadata.ObjectId, out var objectGuid))
        {
            await LoadReportPage(objectGuid);
        }
        else
        {
            _invalidReport = true;
        }
    }

    //protected override void OnAfterRender(bool firstRender)
    //{
    //    if (!firstRender)
    //    {
    //        var newLang = UserLanguage.currentLanguage();
    //        if (newLang != _userLanguagePreferenceOnLoad)
    //        {
    //            _userLanguagePreferenceOnLoad = newLang;
    //            var redirectUrl = _pbiDataService.GeneratePublishedInternalReportLink(_reportId.Value, UserLanguagePreference);
    //            _navManager.NavigateTo(redirectUrl, forceLoad: true);
    //        }
    //    }
    //}

}
