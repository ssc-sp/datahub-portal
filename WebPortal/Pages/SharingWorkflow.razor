@page "/sharingworkflow/{FileId}"
@using Microsoft.AspNetCore.WebUtilities
@using Microsoft.Graph
@inject NavigationManager _navManager
@inject IPublicDataFileService _publicDataService
@inject IUserInformationService _userInfoService

<h3>Sharing Workflow</h3>

<p>
    <AeButton OnClickEvent=@OpenDataClicked Disabled=@_openDataDisabled >@Localizer["Open Data"]</AeButton>

    <AeButton OnClickEvent=@PublicUrlClicked Disabled=@_publicUrlDisabled >@Localizer["Public URL"]</AeButton>
</p>

@code {

    [Parameter]
    public string FileId { get; set; }

    private string Filename { get; set; }
    private string Folderpath { get; set; }
    private string ProjectCode { get; set; }

    private User _user { get; set; }
    private bool _userLoaded => _user != null;
    private bool _publicUrlDisabled => !_userLoaded;
    private bool _openDataDisabled => !_userLoaded;

    private string PublicUrlSharingUrl => $"/share/public/{FileId}";
    private string OpenDataSharingUrl => $"/share/opendata/{FileId}";

    public async Task OpenDataClicked()
    {
        var filemd = new FileMetaData()
        {
            fileid = FileId,
            filename = Filename,
            folderpath = Folderpath
        };

        await _publicDataService.CreateDataSharingRequest(filemd, ProjectCode, _user, true);
        _navManager.NavigateTo(OpenDataSharingUrl);
    }

    public async Task PublicUrlClicked()
    {   
        var filemd = new FileMetaData()
        {
            fileid = FileId,
            filename = Filename,
            folderpath = Folderpath
        };

        await _publicDataService.CreateDataSharingRequest(filemd, ProjectCode, _user);
        _navManager.NavigateTo(PublicUrlSharingUrl);
    }

    private string GetFirstQueryValue(IDictionary<string, Microsoft.Extensions.Primitives.StringValues> query, string paramKey)
    {
        if (query.TryGetValue(paramKey, out var param))
        {
            return param.First();
        }
        else
        {
            return null;
        }
    }

    protected override async Task OnInitializedAsync()
    {
        var userTask = _userInfoService.GetCurrentUserAsync();
        
        Guid fileIdGuid;
        if (!Guid.TryParse(FileId, out fileIdGuid))
        {
            // return to homepage if guid is invalid
            _navManager.NavigateTo("/");
        }

        var fileInfoTask = _publicDataService.LoadPublicUrlSharedFileInfo(fileIdGuid);

        var uri = _navManager.ToAbsoluteUri(_navManager.Uri);
        var query = QueryHelpers.ParseQuery(uri.Query);

        Filename = GetFirstQueryValue(query, "filename");
        Folderpath = GetFirstQueryValue(query, "folderpath");
        ProjectCode = GetFirstQueryValue(query, "project");

        var existingPublicFile = await fileInfoTask;
        if (existingPublicFile != null)
        {
            if (existingPublicFile.IsOpenDataRequest_FLAG)
            {
                _navManager.NavigateTo(OpenDataSharingUrl);
            }
            else
            {
                _navManager.NavigateTo(PublicUrlSharingUrl);
            }
        }

        _user = await userTask;
    }

}
