@page "/sharingworkflow/{FileId}"
@using Microsoft.AspNetCore.WebUtilities
@using Microsoft.Extensions.Logging
@using Microsoft.Graph
@inject CustomNavigation NavManager
@inject IPublicDataFileService _publicDataService
@inject IUserInformationService _userInfoService
@inject ILogger<SharingWorkflow> logger

@if (!_awaitingRedirect)
{
    <div style="padding: 2rem">
        <AeFlex Vertical>
            <AeTypography Variant="h1">@Localizer[$"{LOCALIZATION_PREFIX}.Title"]</AeTypography>
        </AeFlex>

        <AeFlex>

            <AuthorizeView Roles="DHPGLIST-admin" Context="hidden_in_dev">
                <AeCard class="facard1">
                    <Header>
                        <AeTypography Variant="h3">@Localizer[$"{LOCALIZATION_PREFIX}.OpenDataTitle"]</AeTypography>
                    </Header>
                    <ChildContent>
                        <p>
                            @Localizer[$"{LOCALIZATION_PREFIX}.OpenDataDesc"]
                        </p>
                    </ChildContent>
                    <Footer>
                        <div>
                            <AeButton OnClickEvent=@OpenDataClicked Disabled=@_openDataDisabled>@Localizer[$"{LOCALIZATION_PREFIX}.StartWorkflowButton"]</AeButton>
                        </div>
                    </Footer>
                </AeCard>
            </AuthorizeView>

            <AeCard class="facard1">
                <Header>
                    <AeTypography Variant="h3">@Localizer[$"{LOCALIZATION_PREFIX}.PublicUrlTitle"]</AeTypography>
                </Header>
                <ChildContent>
                    <p>
                        @Localizer[$"{LOCALIZATION_PREFIX}.PublicUrlDesc"]
                    </p>
                </ChildContent>
                <Footer>
                    <div>
                        <AeButton OnClickEvent=@PublicUrlClicked Disabled=@_publicUrlDisabled>@Localizer[$"{LOCALIZATION_PREFIX}.StartWorkflowButton"]</AeButton>
                    </div>
                </Footer>
            </AeCard>

        </AeFlex>
    </div>
}
else
{
    <Spinner />
}

@code {

    private static readonly string LOCALIZATION_PREFIX = "PUBLIC-SHARING-WORKFLOW";

    [Parameter]
    public string FileId { get; set; }

    private string Filename { get; set; }
    private string Folderpath { get; set; }
    private string ProjectCode { get; set; }

    private User _user { get; set; }
    private bool _userLoaded => _user != null;
    private bool _publicUrlDisabled => !_userLoaded;
    private bool _openDataDisabled => !_userLoaded;
    private bool _awaitingRedirect = true;

    private string PublicUrlSharingUrl => $"/share/public/{FileId}";
    private string OpenDataSharingUrl => $"/share/opendata/{FileId}";

    public async Task OpenDataClicked()
    {
        var filemd = new FileMetaData()
            {
                fileid = FileId,
                filename = Filename,
                folderpath = Folderpath
            };

        await _publicDataService.CreateDataSharingRequest(filemd, ProjectCode, _user, true);
        await NavManager.NavigateTo(OpenDataSharingUrl, true);
    }

    public async Task PublicUrlClicked()
    {
        var filemd = new FileMetaData()
            {
                fileid = FileId,
                filename = Filename,
                folderpath = Folderpath
            };

        await _publicDataService.CreateDataSharingRequest(filemd, ProjectCode, _user);
        await NavManager.NavigateTo(PublicUrlSharingUrl, true);
    }

    private string GetFirstQueryValue(IDictionary<string, Microsoft.Extensions.Primitives.StringValues> query, string paramKey)
    {
        if (query.TryGetValue(paramKey, out var param))
        {
            return param.First();
        }
        else
        {
            return null;
        }
    }

    protected override async Task OnInitializedAsync()
    {
        var userTask = _userInfoService.GetUserAsync();

        Guid fileIdGuid;
        if (!Guid.TryParse(FileId, out fileIdGuid))
        {
            logger.LogError($"Error invalid FileID: '{FileId}''");
            // return to homepage if guid is invalid
            await NavManager.NavigateTo("/", true);
        }

        var fileInfoTask = _publicDataService.LoadPublicUrlSharedFileInfo(fileIdGuid);

        var uri = NavManager.GetAbsoluteUri();
        var query = QueryHelpers.ParseQuery(uri.Query);

        Filename = GetFirstQueryValue(query, "filename");
        Folderpath = GetFirstQueryValue(query, "folderpath");
        ProjectCode = GetFirstQueryValue(query, "project");

        var existingPublicFile = await fileInfoTask;
        if (existingPublicFile != null)
        {
            if (existingPublicFile.IsOpenDataRequest_FLAG)
            {
                await NavManager.NavigateTo(OpenDataSharingUrl, true);
            }
            else
            {
                await NavManager.NavigateTo(PublicUrlSharingUrl, true);
            }
        }
        else
        {
            _awaitingRedirect = false;
        }

        _user = await userTask;
    }
}
