@using Datahub.Portal.Pages.Project
@inject NavigationManager NavManager
@inject IPublicDataFileService PublicFileService
@inject IMSGraphService GraphService
@inject NotifierService NotifierService
@inject IEmailNotificationService EmailNotificationService
@inject ISystemNotificationService SystemNotificationService


<AeFlex Vertical style="padding-left: 1rem; padding-right: 1rem;">

    <AeTypography Variant="h4">@Localizer[$"{LOCALIZATION_PREFIX}.Title"]</AeTypography>

    <div>@Localizer[$"{LOCALIZATION_PREFIX}.Filename"]: @SharedFile.Filename_TXT</div>
    <div>@Localizer[$"{LOCALIZATION_PREFIX}.RequestingUser"]: @_userDisplayName</div>
    <div>@Localizer[$"{LOCALIZATION_PREFIX}.SubmissionDate"]: @SharedFile.SubmittedDate_DT?.ToShortDateString()</div>

    <AeButton OnClickEvent=@DownloadFile>@Localizer[$"{LOCALIZATION_PREFIX}.DownloadFile"]</AeButton>

    <AeTypography Variant="p">@Localizer[$"{LOCALIZATION_PREFIX}.Description"]</AeTypography>

    <EditForm EditContext=@editContext>
        <label for="publicationDateInput">@Localizer[$"{LOCALIZATION_PREFIX}.PublicationDate"]:</label>
        @if (!approved)
        {
            @* TODO: limit dates *@
            <InputDate id="publicationDateInput" @bind-Value=@formData.PublicationDate class="ae input" />
            <ValidationMessage For="() => formData.PublicationDate" />
        }
        else
        {
            <div>@formData.PublicationDate?.ToShortDateString()</div>
        }
        @if (!approved)
        {
            <div>
                <label>
                    <InputCheckbox id="enableTempSharingCheck" @bind-Value=@formData.EnableTempSharing/>
                    @Localizer[$"{LOCALIZATION_PREFIX}.EnableTempSharing"]
                </label>
            </div>
            @if (formData.EnableTempSharing)
            {
                <div>
                    <label for="expiryDateInput">
                        @Localizer[$"{LOCALIZATION_PREFIX}.ExpirationDate"]
                    </label>
                    <InputDate id="expiryDateInput" @bind-Value=@formData.ExpirationDate class="ae input"/>
                </div>
                <ValidationMessage For="() => formData.ExpirationDate" />
            }
        }
        else if (SharedFile.ExpirationDate_DT.HasValue)
        {
            <label>@Localizer[$"{LOCALIZATION_PREFIX}.ExpirationDate"]</label>
            <div>@SharedFile.ExpirationDate_DT?.ToShortDateString()</div>
        }
    </EditForm>

    <div>
        <AeButton OnClickEvent=@ApproveRequest Disabled=@ButtonsDisabled >@Localizer[$"{LOCALIZATION_PREFIX}.Approve"]</AeButton>
        <AeButton OnClickEvent=@DenyRequest Disabled=@ButtonsDisabled >@Localizer[$"{LOCALIZATION_PREFIX}.Deny"]</AeButton>
        @if (processing)
        {
            <Spinner Small=@true />
        }
    </div>



</AeFlex>

@code {
    private static readonly string LOCALIZATION_PREFIX = "PUBLIC-URL-APPROVAL";
    private static readonly string VALIDATION_ERROR_LOCALIZATION_PREFIX = $"{LOCALIZATION_PREFIX}.ValidationErrors";


    [Parameter]
    public SharedDataFile SharedFile { get; set; }

    public class ApprovalFormDataHolder
    {
        public DateTime? PublicationDate { get; set; }
        public bool EnableTempSharing { get; set; } = false;
        public DateTime? ExpirationDate { get; set; }
    }

    private ApprovalFormDataHolder formData = new();
    private EditContext editContext;
    private ValidationMessageStore validationMessageStore;

    private bool processing = false;
    private bool approved = false;
    private bool ButtonsDisabled => processing || approved;
    private string _userDisplayName;
    

    private async Task DownloadFile()
    {
        var uri = await PublicFileService.DoDownloadFile(SharedFile);
        NavManager.NavigateTo(uri.ToString());
    }

    private async Task DenyRequest()
    {
        processing = true;
        await PublicFileService.DenyPublicUrlShare(SharedFile.File_ID);
        await NotifierService.Update(DataSharingDashboard.NOTIFICATION_UPDATE_KEY, true);
        processing = false;
    }

    private async Task ApproveRequest()
    {
        if (editContext.Validate())
        {
            processing = true;
            var expirationDate = formData.EnableTempSharing ? formData.ExpirationDate : null;
            var project = await PublicFileService.GetProjectWithUsers(SharedFile.ProjectCode_CD);
            var publicUrl = PublicFileService.GetPublicSharedFileUrl(SharedFile.File_ID.ToString());
            await PublicFileService.SaveTempSharingExpiryDate(SharedFile.File_ID, expirationDate);
            var notificationKey = formData.PublicationDate.HasValue ? 
                "SYSTEM-NOTIFICATION.NOTIFICATION-TEXT.PublicUrlShareApprovedLater" : 
                "SYSTEM-NOTIFICATION.NOTIFICATION-TEXT.PublicUrlShareApproved";
            await PublicFileService.ApprovePublicUrlShare(SharedFile.File_ID, formData.PublicationDate);
            var tasks = new List<Task>()
                {
                    EmailNotificationService.SendFileSharingApproved(SharedFile, project.ProjectInfo, publicUrl, SharedFile.RequestingUser_ID),
                    SystemNotificationService.CreateSystemNotificationWithLink(SharedFile.RequestingUser_ID,
                        $"/share/public/{SharedFile.File_ID}", "SYSTEM-NOTIFICATION.ViewSharingStatus",
                        notificationKey, SharedFile.Filename_TXT, new BilingualStringArgument(project.ProjectInfo.ProjectNameEn, project.ProjectInfo.ProjectNameFr),
                        formData.PublicationDate?.ToShortDateString())
                };
            await Task.WhenAll(tasks);
            approved = true;
            await NotifierService.Update(DataSharingDashboard.NOTIFICATION_UPDATE_KEY, true);
            processing = false;
        }
    }

    protected override async Task OnInitializedAsync()
    {
        editContext = new(formData);
        editContext.OnValidationRequested += HandleValiadationRequested;
        validationMessageStore = new(editContext);
        _userDisplayName = await GraphService.GetUserName(SharedFile.RequestingUser_ID, CancellationToken.None);
        formData.ExpirationDate = SharedFile.ExpirationDate_DT;
        formData.EnableTempSharing = formData.ExpirationDate.HasValue;
    }

    private void HandleValiadationRequested(object sender, ValidationRequestedEventArgs args)
    {
        validationMessageStore.Clear();

        var pubDate = formData.PublicationDate ?? DateTime.UtcNow;

        if (formData.PublicationDate.HasValue && formData.PublicationDate.Value < DateTime.UtcNow)
        {
            validationMessageStore.Add(() => formData.PublicationDate, Localizer[$"{VALIDATION_ERROR_LOCALIZATION_PREFIX}.PubDateInPast"]);
        }

        if (formData.EnableTempSharing && !formData.ExpirationDate.HasValue)
        {
            validationMessageStore.Add(() => formData.ExpirationDate, Localizer[$"{VALIDATION_ERROR_LOCALIZATION_PREFIX}.TempWithNoExpiry"]);
        }

        if (formData.ExpirationDate.HasValue && formData.ExpirationDate.Value <= pubDate)
        {
            validationMessageStore.Add(() => formData.ExpirationDate, Localizer[$"{VALIDATION_ERROR_LOCALIZATION_PREFIX}.PubDateAfterExpiry"]);
        }
    }

    public void Dispose()
    {
        editContext.OnValidationRequested -= HandleValiadationRequested;
    }

}
