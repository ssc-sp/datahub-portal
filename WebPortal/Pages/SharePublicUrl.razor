@page "/share/public/{FileId}"
@inject CustomNavigation NavManager
@inject IPublicDataFileService PublicFileService
@inject UIControlsService UI
@inject IMSGraphService GraphService
@inject IUserInformationService UserInformationService
@inject IEmailNotificationService EmailNotificationService
@inject ISystemNotificationService SystemNotificationService

<AeTypography style="margin-left: 2rem;" Variant="h2">@Localizer[$"{LOCALIZATION_PREFIX}.Page_Title"]</AeTypography>

<AeFlex>
    <AeFlex Vertical style="margin-left: 2rem; width: 50%">

        <AeCard>
            <AeTypography Variant="h3">@GetStepTitle(PublicUrlSharingStatus.EnterMetadata)</AeTypography>

            @if (!string.IsNullOrEmpty(_requestFilename))
            {
                <AeTypography Variant="p">@Localizer["Filename"]: @_requestFilename</AeTypography>
            }

            @if (_isOwnRequest)
            {
                if (ShowMetadataEditor)
                {
                    <ObjectMetadataEditor @ref=@_metadataEditor
                                      ObjectId=@FileId
                                      SaveButtonLabel=@Localizer[$"{LOCALIZATION_PREFIX}.Save_Metadata_button"]
                                      ValidateRequired=false
                                      OnSave=@HandleSaveMetadata />
                }
                else
                {
                    <AeButton OnClickEvent=@ManuallyShowMetadataEditor Disabled=@_savingData>@Localizer[$"{LOCALIZATION_PREFIX}.Edit_button"]</AeButton>    
                }
            }
            else
            {
                @if (_requestingUser != null)
                {
                    <div>@Localizer[$"{LOCALIZATION_PREFIX}.RequestingUser"]: @_requestingUser.DisplayName</div>
                }
            }

        </AeCard>

        @if (ShowSubmitApproval && _isOwnRequest)
        {
            <AeCard>
                <AeTypography Variant="h3">@GetStepTitle(PublicUrlSharingStatus.RequestApproval)</AeTypography>
                <AeFlex>
                    <AeButton OnClickEvent=@SubmitForApproval Disabled=@_savingData>@Localizer["BUTTONS.Submit"]</AeButton>
                    <SuccessIndicator @bind-IsLoading=@_submittingApproval @ref=@_submitApprovalInd />
                </AeFlex>
                <div>&nbsp;</div>
            </AeCard>
        }

        @if (ShowPublicationDate)
        {
            <AeCard>
                <AeTypography Variant="h3">@GetStepTitle(PublicUrlSharingStatus.PendingPublication)</AeTypography>
                <p>@_publicationDateStr</p>
            </AeCard>
        }

        @if (ShowPendingApprovalPanel)
        {
            <AeCard>
                <AeTypography Variant="h3">@GetStepTitle(PublicUrlSharingStatus.PendingApproval)</AeTypography>
                <AeTypography Variant="h5">@Localizer[$"{LOCALIZATION_PREFIX}.DataApprovers"]</AeTypography>
                <ul>
                    @foreach (var userid in _dataApproverUserIds)
                    {
                        <li><GraphUserInformation UserId=@userid IsUserNameRequested=@true /></li>
                    }
                </ul>
            </AeCard>
        }

        @if (ShowExpiryDatePanel && _isOwnRequest)
        {
            <AeCard>
                <AeTypography Variant="h3">@Localizer[$"{LOCALIZATION_PREFIX}.TempSharingTitle"]</AeTypography>
                <AeTypography Variant="p">@Localizer[$"{LOCALIZATION_PREFIX}.TempSharingDesc"]</AeTypography>
                <EditForm EditContext=@_editContext>
                    <div>
                        <label>
                            <InputCheckbox id="tempSharingToggle" @bind-Value=@_dateHolder.EnableTempSharing />
                            @Localizer[$"{LOCALIZATION_PREFIX}.EnableTempSharing"]
                        </label>
                    </div>
                    @if (_dateHolder.EnableTempSharing)
                    {
                        <div>
                            <label for="expiryDateInput">
                                @Localizer[$"{LOCALIZATION_PREFIX}.ExpirationDate"]
                            </label>
                            <InputDate id="expiryDateInput" @bind-Value=@_dateHolder.Date class="ae input" />
                        </div>
                        <ValidationMessage For="()=>_dateHolder.Date" />
                    }
                </EditForm>
                <div>
                    <AeButton OnClickEvent=@SaveExpiryDate Disabled=@_savingData>@Localizer[$"{LOCALIZATION_PREFIX}.Save_button"]</AeButton>
                    <SuccessIndicator @bind-IsLoading=@_savingExpiryDate @ref=@_tempDateInd />
                </div>
            </AeCard>
        }

        @if (ShowCancelPanel)
        {
            <AeCard style="margin-top: 1rem;">
                <AeTypography Variant="h3">@Localizer[$"{LOCALIZATION_PREFIX}.CancelSharing"]</AeTypography>
                <p>@Localizer[$"{LOCALIZATION_PREFIX}.CancelSharingDescription"]</p>
                <AeButton OnClickEvent=@ShowCancelRequestDialog Disabled=@_savingData>@Localizer["BUTTONS.Cancel"]</AeButton>
            </AeCard>
        }

        @if (ShowDeletePanel)
        {
            <AeCard style="margin-top: 1rem;">
                <Typography Variant="h3">@Localizer[$"{LOCALIZATION_PREFIX}.DeleteExpired"]</Typography>
                <p>@Localizer[$"{LOCALIZATION_PREFIX}.DeleteExpiredDescription"]</p>
                <AeButton OnClickEvent=@ShowDeleteExpiredDialog>@Localizer[$"{LOCALIZATION_PREFIX}.Delete_button"]</AeButton>
            </AeCard>
        }

        <div>&nbsp;</div>

        <div>
            <DHLink DataProject=@_projectCode>@Localizer[$"{LOCALIZATION_PREFIX}.ReturnToProject"]</DHLink>
        </div>

    </AeFlex>

    <div id="stepsDiv" style="width: 50%;">
        <AeSteps T=@PublicUrlSharingStatus
                 CurrentStepState=@GetState
                 StepItems=@_steps
                 StepTitle=@StepTitle
                 StepMessage=@StepMessage
                 PassedIcon=@_checkIcon></AeSteps>

        @if (ShowPublicUrl)
        {
            <AeCard>
                <AeTypography Variant="h3">@Localizer[$"{LOCALIZATION_PREFIX}.PublicUrl"]</AeTypography>
                <p><a href=@PublicUrl target="_blank">@PublicUrl</a></p>
            </AeCard>
        }

    </div>

</AeFlex>

<div>&nbsp;</div>


@code {

    private static readonly string LOCALIZATION_PREFIX = "PUBLIC-URL-WIZARD";
    private static readonly string VALIDATION_ERROR_PREFIX = $"{LOCALIZATION_PREFIX}.ValidationErrors";

    [Parameter]
    public string FileId { get; set; }

    private Guid _fileIdGuid;

    private ObjectMetadataEditor _metadataEditor;

    private RenderFragment _checkIcon = @<i class="fa fa-check"></i>;

    private List<PublicUrlSharingStatus> _steps = Enum.GetValues<PublicUrlSharingStatus>().ToList();
    private PublicUrlSharingStatus currentStep = PublicUrlSharingStatus.EnterMetadata;

    private Dictionary<PublicUrlSharingStatus, (string, string)?> _stepInfo = new();
    private Dictionary<PublicUrlSharingStatus, AeSteps<PublicUrlSharingStatus>.StepState> _stepStates = new();

    private string StepTitle(PublicUrlSharingStatus i) => _stepInfo.GetValueOrDefault(i)?.Item1;
    private string StepMessage(PublicUrlSharingStatus i) => _stepInfo.GetValueOrDefault(i)?.Item2;
    private AeSteps<PublicUrlSharingStatus>.StepState GetState(PublicUrlSharingStatus i) => _stepStates[i];

    private bool _savingExpiryDate = false;
    private bool _submittingApproval = false;
    private bool _cancellingSubmission = false;
    private bool _savingData => _savingExpiryDate || _submittingApproval || _cancellingSubmission;
    private SuccessIndicator _tempDateInd;
    private SuccessIndicator _submitApprovalInd;

    private bool ShowSubmitApproval => currentStep == PublicUrlSharingStatus.RequestApproval && _isOwnRequest && !_editSavedMetadata;
    private bool ShowPublicationDate => currentStep == PublicUrlSharingStatus.PendingPublication && !string.IsNullOrEmpty(_publicationDateStr) && !_editSavedMetadata;
    private bool ShowPublicUrl => currentStep == PublicUrlSharingStatus.AccessPublicUrl;
    private bool ShowMetadataEditor => (currentStep == PublicUrlSharingStatus.EnterMetadata || _editSavedMetadata) && _isOwnRequest;
    private bool ShowPendingApprovalPanel => currentStep == PublicUrlSharingStatus.PendingApproval && (_dataApproverUserIds?.Count ?? 0) > 0;
    private bool ShowCancelPanel => currentStep <= PublicUrlSharingStatus.PendingApproval && _isOwnRequest;
    private bool ShowExpiryDatePanel => currentStep <= PublicUrlSharingStatus.PendingApproval && !ShowMetadataEditor;
    private bool ShowDeletePanel => currentStep == PublicUrlSharingStatus.Expired && _isOwnRequest;

    private bool _isOwnRequest = false;

    private bool _editSavedMetadata = false;

    private string _publicationDateStr = string.Empty;

    private GraphUser _requestingUser;
    private string _requestFilename;
    private string _projectCode;
    private DatahubProjectInfo _projectInfo;

    private List<string> _dataApproverUserIds;

    private string PublicUrl => PublicFileService.GetPublicSharedFileUrl(FileId);

    public class ExpirationDateHolder
    {
        public DateTime? Date { get; set; }
        public bool EnableTempSharing { get; set; } = false;
    }
    private ExpirationDateHolder _dateHolder = new();
    private EditContext _editContext;
    private ValidationMessageStore _validationMessageStore;

    private async Task HandleSaveMetadata()
    {
        _editSavedMetadata = false;

        await PublicFileService.MarkMetadataComplete(_fileIdGuid);

        var uri = NavManager.Uri;
        if (uri.IndexOf('#') >= 0)
        {
            uri = uri.Substring(0, uri.IndexOf('#'));
        }
        await NavManager.NavigateTo($"{uri}#stepsDiv", true);

        if (currentStep == PublicUrlSharingStatus.EnterMetadata)
        {
            UpdateCurrentStatus(PublicUrlSharingStatus.RequestApproval);
        }
    }

    private async Task SubmitForApproval()
    {
        _submittingApproval = true;

        var approvers = _dataApproverUserIds;

        var success = await PublicFileService.SubmitPublicUrlShareForApproval(_fileIdGuid);

        if (success)
        {
            var notifyTasks = new List<Task>()
            {
                EmailNotificationService.SendFileSharingApprovalRequest(_requestingUser.Mail, _requestFilename, _projectInfo, approvers),
                SystemNotificationService.CreateSystemNotificationsWithLink(approvers,
                    $"/project/{_projectInfo.ProjectCode}/datasharing", "SYSTEM-NOTIFICATION.GoToSharingDashboard",
                    "SYSTEM-NOTIFICATION.NOTIFICATION-TEXT.PublicUrlShareRequested", _requestingUser.Mail, _requestFilename,
                    new BilingualStringArgument(_projectInfo.ProjectNameEn, _projectInfo.ProjectNameFr))
            };

            await _submitApprovalInd.SignalSuccess();
            await Task.WhenAll(notifyTasks);
            UpdateCurrentStatus(PublicUrlSharingStatus.PendingApproval);
        }
        else
        {
            await _submitApprovalInd.SignalFailure();
        }
    }

    private async Task SaveExpiryDate()
    {
        if (_editContext.Validate())
        {
            _savingExpiryDate = true;
            var expirationDate = _dateHolder.EnableTempSharing ? _dateHolder.Date : null;
            var success = await PublicFileService.SaveTempSharingExpiryDate(_fileIdGuid, expirationDate);
            await (success ? _tempDateInd.SignalSuccess() : _tempDateInd.SignalFailure());
        }
    }

    private void UpdateCurrentStatus(PublicUrlSharingStatus step, bool passed = false)
    {
        currentStep = step;
        _stepStates[step] = passed ? AeSteps<PublicUrlSharingStatus>.StepState.Passed : AeSteps<PublicUrlSharingStatus>.StepState.Running;

        foreach (var stepv in Enum.GetValues<PublicUrlSharingStatus>())
        {
            if (stepv < step)
            {
                _stepStates[stepv] = AeSteps<PublicUrlSharingStatus>.StepState.Passed;
            }
            else if (stepv > step)
            {
                _stepStates[stepv] = AeSteps<PublicUrlSharingStatus>.StepState.Queued;
            }
        }
    }

    private void ManuallyShowMetadataEditor()
    {
        _editSavedMetadata = true;
    }

    private async Task ShowCancelRequestDialog()
    {
        await ShowCancelOrDeleteRequestDialog("CancelSharing");
    }

    private async Task ShowDeleteExpiredDialog()
    {
        await ShowCancelOrDeleteRequestDialog("DeleteExpired");
    }

    private async Task ShowCancelOrDeleteRequestDialog(string operation)
    {
        var promptText = new List<string>() { Localizer[$"{LOCALIZATION_PREFIX}.{operation}Prompt"] };
        RenderFragment cancelDialog = @<UserChoiceModal HeaderText=@Localizer[$"{LOCALIZATION_PREFIX}.{operation}"]
                                                        ChoiceTextList=@promptText
                                                        OnDecision="HandleCancel"
                                                        ConfirmText=@Localizer["COMMON.Yes"]
                                                        CancelText=@Localizer["COMMON.No"] />;
        await UI.ToggleModal(cancelDialog);
    }


    private async void HandleCancel(bool isCancelled)
    {
        if (isCancelled)
        {
            _cancellingSubmission = true;
            await PublicFileService.CancelPublicDataShare(_fileIdGuid);
            _cancellingSubmission = false;
            await NavManager.NavigateTo("/", true);
        }
        await UI.ToggleModal();
    }

    private void HandleValiadationRequested(object sender, ValidationRequestedEventArgs args)
    {
        _validationMessageStore.Clear();

        if (_dateHolder.EnableTempSharing && !_dateHolder.Date.HasValue)
        {
            _validationMessageStore.Add(() => _dateHolder.Date, Localizer[$"{VALIDATION_ERROR_PREFIX}.TempWithNoExpiry"]);
        }

        if (_dateHolder.Date.HasValue && _dateHolder.Date <= DateTime.UtcNow)
        {
            _validationMessageStore.Add(() => _dateHolder.Date, Localizer[$"{VALIDATION_ERROR_PREFIX}.ExpiryDateInPast"]);
        }
    }

    private async Task LoadProjectInfo()
    {
        var project = await PublicFileService.GetProjectWithUsers(_projectCode);
        _dataApproverUserIds = project.Users.Where(pu => pu.IsDataApprover).Select(pu => pu.User_ID).ToList();
        _projectInfo = project.ProjectInfo;
    }

    protected override async Task OnInitializedAsync()
    {
        // don't show a step for Expired status
        _steps.Remove(PublicUrlSharingStatus.Expired);

        _editContext = new(_dateHolder);
        _editContext.OnValidationRequested += HandleValiadationRequested;
        _validationMessageStore = new(_editContext);

        if (!Guid.TryParse(FileId, out _fileIdGuid))
        {
            await NavigateHome();
            return;
        }

        var loadTask = PublicFileService.LoadPublicUrlSharedFileInfo(_fileIdGuid);
        var currentUserTask = UserInformationService.GetUserAsync();

        _stepInfo = _steps.ToDictionary(s => s, s => GetStepPair(s));
        _stepStates = _steps.ToDictionary(s => s, s => AeSteps<PublicUrlSharingStatus>.StepState.Queued);

        var sharedFileInfo = await loadTask;
        if (sharedFileInfo is null)
        {
            await NavigateHome();
            return;
        }

        _requestFilename = sharedFileInfo.Filename_TXT;
        _projectCode = sharedFileInfo.ProjectCode_CD;
        await LoadProjectInfo();

        _requestingUser = await GraphService.GetUserAsync(sharedFileInfo.RequestingUser_ID, CancellationToken.None);
        var currentUser = await currentUserTask;
        _isOwnRequest = currentUser.Id == _requestingUser.Id;

        _publicationDateStr = sharedFileInfo.PublicationDate_DT?.ToShortDateString();

        _dateHolder.Date = sharedFileInfo.ExpirationDate_DT;
        _dateHolder.EnableTempSharing = _dateHolder.Date.HasValue;

        var status = sharedFileInfo.GetPublicUrlSharingStatus();
        UpdateCurrentStatus(status, status == PublicUrlSharingStatus.AccessPublicUrl);
    }

    public void Dispose()
    {
        _editContext.OnValidationRequested -= HandleValiadationRequested;
    }

    private async Task NavigateHome()
    {
        await NavManager.NavigateTo("/", true);
    }

    private (string, string)? GetStepPair(PublicUrlSharingStatus status)
    {
        var prefix = SharedDataFile.PUBLIC_URL_SHARING_STATUS_LOCALIZATION_PREFIX;
        var title = $"{prefix}.{status}.Title";
        var desc = $"{prefix}.{status}.Description";
        return (Localizer[title], Localizer[desc]);
    }

    private string GetStepTitle(PublicUrlSharingStatus status) => GetStepPair(status).Value.Item1;
}
