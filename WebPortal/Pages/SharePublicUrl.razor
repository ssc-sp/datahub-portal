@page "/share/public/{FileId}"
@inject CustomNavigation NavManager
@inject IPublicDataFileService PublicFileService
@inject UIControlsService UI
@inject IMSGraphService GraphService
@inject IUserInformationService UserInformationService
@inject IEmailNotificationService EmailNotificationService
@inject ISystemNotificationService SystemNotificationService

<AeTypography style="margin-left: 2rem;" Variant="h2">@Localizer[$"{LOCALIZATION_PREFIX}.Page_Title"]</AeTypography>

<AeFlex>
    <AeFlex Vertical style="margin-left: 2rem; width: 48%">

        <AeCard>
            <AeTypography Variant="h2">@Localizer[$"{LOCALIZATION_PREFIX}.Metadata"]</AeTypography>

            @if (!string.IsNullOrEmpty(requestFilename))
            {
                <div>@Localizer["Filename"]: @requestFilename</div>
            }

            @if (ShowMetadataEditor && IsOwnRequest)
            {
                <ObjectMetadataEditor @ref=@_metadataEditor 
                                      ObjectId=@FileId 
                                      SaveButtonLabel=@Localizer[$"{LOCALIZATION_PREFIX}.Save_button"]
                                      OnSave=@HandleSave />
            }
            else if (IsOwnRequest)
            {
                <AeButton OnClickEvent=@ManuallyShowMetadataEditor >@Localizer[$"{LOCALIZATION_PREFIX}.Edit_button"]</AeButton>
            }
            else
            {
                @if (RequestingUser != null) {
                    <div>@Localizer[$"{LOCALIZATION_PREFIX}.RequestingUser"]: @RequestingUser.DisplayName</div>
                }
            }
            <div>&nbsp;</div>
        </AeCard>
    </AeFlex>

    <div id="stepsDiv">
        <AeSteps T=@PublicUrlSharingStatus 
            CurrentStepState=@GetState 
            StepItems=@steps 
            StepTitle=@StepTitle 
            StepMessage=@StepMessage 
            PassedIcon=@checkIcon ></AeSteps>
        
        @if(ShowSubmitApproval && IsOwnRequest)
        {
            <AeCard>
                <AeTypography Variant="h3">@Localizer[$"{LOCALIZATION_PREFIX}.SubmitForApproval"]</AeTypography>
                <AeFlex>
                    <AeButton OnClickEvent=@SubmitForApproval Disabled=@savingData>@Localizer["BUTTONS.Submit"]</AeButton>
                    @if(savingData)
                    {
                        <Spinner Small=@true/>
                    }                
                </AeFlex>
                <div>&nbsp;</div>
            </AeCard>
        }

        @if(ShowSkipMetadata && IsOwnRequest)
        {
            <AeCard>
                <AeTypography Variant="h3">@Localizer[$"{LOCALIZATION_PREFIX}.AcceptMetadata"]</AeTypography>
                <AeButton OnClickEvent=@AcceptMetadata Disabled=@savingData>@Localizer[$"{LOCALIZATION_PREFIX}.Continue_button"]</AeButton>
                <div>&nbsp;</div>
            </AeCard>
        }
        
        @if(ShowPublicationDate)
        {
            <AeCard>
                <AeTypography Variant="h3">@Localizer[$"{LOCALIZATION_PREFIX}.PublicationDate"]</AeTypography>
                <p>@PublicationDateStr</p>
            </AeCard>
        }

        @if(ShowPublicUrl)
        {
            <AeCard>
                <AeTypography Variant="h3">@Localizer[$"{LOCALIZATION_PREFIX}.PublicUrl"]</AeTypography>
                <p><a href=@PublicUrl target="_blank">@PublicUrl</a></p>
            </AeCard>
        }

        @if (ShowExpiryDatePanel && IsOwnRequest)
        {
            <AeCard>
                <AeTypography Variant="h3">@Localizer[$"{LOCALIZATION_PREFIX}.TempSharingTitle"]</AeTypography>
                <p>@Localizer[$"{LOCALIZATION_PREFIX}.TempSharingDesc"]</p>
                <EditForm EditContext=@editContext >
                    <div>
                        <label>
                            <InputCheckbox id="tempSharingToggle" @bind-Value=@dateHolder.EnableTempSharing />
                            @Localizer[$"{LOCALIZATION_PREFIX}.EnableTempSharing"]
                        </label>
                    </div>
                    @if (dateHolder.EnableTempSharing)
                    {
                        <div>
                            <label for="expiryDateInput">
                                @Localizer[$"{LOCALIZATION_PREFIX}.ExpirationDate"]
                            </label>
                            <InputDate id="expiryDateInput" @bind-Value=@dateHolder.Date class="ae input"/>
                        </div>
                        <ValidationMessage For="()=>dateHolder.Date" />
                    }
                </EditForm>
                <AeButton OnClickEvent=@SaveExpiryDate Disabled=@savingData>@Localizer[$"{LOCALIZATION_PREFIX}.Save_button"]</AeButton>
            </AeCard>
        }

        @if (ShowCancelPanel && IsOwnRequest)
        {
            <AeCard>
                <AeTypography Variant="h3">@Localizer[$"{LOCALIZATION_PREFIX}.CancelSharing"]</AeTypography>
                <p>@Localizer[$"{LOCALIZATION_PREFIX}.CancelSharingDescription"]</p>
                <AeButton OnClickEvent=@ShowCancelRequestDialog>@Localizer["BUTTONS.Cancel"]</AeButton>
            </AeCard>
        }

        @if (ShowDeletePanel && IsOwnRequest)
        {
            <AeCard>
                <Typography Variant="h3">@Localizer[$"{LOCALIZATION_PREFIX}.DeleteExpired"]</Typography>
                <p>@Localizer[$"{LOCALIZATION_PREFIX}.DeleteExpiredDescription"]</p>
                <AeButton OnClickEvent=@ShowDeleteExpiredDialog>@Localizer[$"{LOCALIZATION_PREFIX}.Delete_button"]</AeButton>
            </AeCard>
        }

    </div>
</AeFlex>

<div>&nbsp;</div>


@code {

    private static readonly string LOCALIZATION_PREFIX = "PUBLIC-URL-WIZARD";
    private static readonly string VALIDATION_ERROR_PREFIX = $"{LOCALIZATION_PREFIX}.ValidationErrors";

    [Parameter]
    public string FileId { get; set; }

    private Guid fileIdGuid;

    private ObjectMetadataEditor _metadataEditor;

    private RenderFragment checkIcon = 
    @<i class="fa fa-check"></i>
    ;

    private List<PublicUrlSharingStatus> steps = Enum.GetValues<PublicUrlSharingStatus>().ToList();
    private PublicUrlSharingStatus currentStep = PublicUrlSharingStatus.EnterMetadata;

    private Dictionary<PublicUrlSharingStatus, (string, string)?> _stepInfo = new Dictionary<PublicUrlSharingStatus, (string, string)?>();
    private Dictionary<PublicUrlSharingStatus, AeSteps<PublicUrlSharingStatus>.StepState> _stepStates = new Dictionary<PublicUrlSharingStatus, AeSteps<PublicUrlSharingStatus>.StepState>()
        {
            { PublicUrlSharingStatus.EnterMetadata, AeSteps<PublicUrlSharingStatus>.StepState.Queued },
            { PublicUrlSharingStatus.RequestApproval, AeSteps<PublicUrlSharingStatus>.StepState.Queued },
            { PublicUrlSharingStatus.PendingApproval, AeSteps<PublicUrlSharingStatus>.StepState.Queued },
            { PublicUrlSharingStatus.PendingPublication, AeSteps<PublicUrlSharingStatus>.StepState.Queued },
            { PublicUrlSharingStatus.AccessPublicUrl, AeSteps<PublicUrlSharingStatus>.StepState.Queued }
        };

    private string StepTitle(PublicUrlSharingStatus i) => _stepInfo.GetValueOrDefault(i)?.Item1;
    private string StepMessage(PublicUrlSharingStatus i) => _stepInfo.GetValueOrDefault(i)?.Item2;
    private AeSteps<PublicUrlSharingStatus>.StepState GetState(PublicUrlSharingStatus i) => _stepStates[i];

    private bool savingData = false;

    private bool ShowSubmitApproval => currentStep == PublicUrlSharingStatus.RequestApproval;
    private bool ShowPublicationDate => currentStep == PublicUrlSharingStatus.PendingPublication && !string.IsNullOrEmpty(PublicationDateStr);
    private bool ShowPublicUrl => currentStep == PublicUrlSharingStatus.AccessPublicUrl;
    private bool ShowSkipMetadata => currentStep == PublicUrlSharingStatus.EnterMetadata;
    private bool ShowMetadataEditor => currentStep == PublicUrlSharingStatus.EnterMetadata || editSavedMetadata;
    private bool ShowCancelPanel => currentStep <= PublicUrlSharingStatus.PendingApproval;
    private bool ShowExpiryDatePanel => currentStep <= PublicUrlSharingStatus.PendingApproval;
    private bool ShowDeletePanel => currentStep == PublicUrlSharingStatus.Expired;

    private bool IsOwnRequest = false;

    private bool editSavedMetadata = false;

    private string PublicationDateStr = string.Empty;

    private GraphUser RequestingUser;
    private string requestFilename;
    private string projectCode;

    private string PublicUrl => PublicFileService.GetPublicSharedFileUrl(FileId);

    public class ExpirationDateHolder
    {
        public DateTime? Date { get; set; }
        public bool EnableTempSharing { get; set; } = false;
    }
    private ExpirationDateHolder dateHolder = new();
    private EditContext editContext;
    private ValidationMessageStore validationMessageStore;

    private async Task HandleSave()
    {
        var uri = NavManager.Uri;
        if (uri.IndexOf('#') >= 0)
        {
            uri = uri.Substring(0, uri.IndexOf('#'));
        }

        await PublicFileService.MarkMetadataComplete(fileIdGuid);
        savingData = false;
        await NavManager.NavigateTo($"{uri}#stepsDiv", true);
        if (currentStep == PublicUrlSharingStatus.EnterMetadata)
        {
            UpdateCurrentStatus(PublicUrlSharingStatus.RequestApproval);
        }
    }

    private async Task AcceptMetadata()
    {
        await PublicFileService.MarkMetadataComplete(fileIdGuid);
        UpdateCurrentStatus(PublicUrlSharingStatus.RequestApproval);
    }

    private async Task SubmitForApproval()
    {
        savingData = true;

        var project = await PublicFileService.GetProjectWithUsers(projectCode);
        var approvers = project.Users.Where(pu => pu.IsDataApprover).Select(pu => pu.User_ID).ToList();

        var tasks = new List<Task>()
        {
            PublicFileService.SubmitPublicUrlShareForApproval(fileIdGuid),
            EmailNotificationService.SendFileSharingApprovalRequest(RequestingUser.Mail, requestFilename, project.ProjectInfo, approvers),
            SystemNotificationService.CreateSystemNotificationsWithLink(approvers, 
                $"/project/{project.ProjectInfo.ProjectCode}/datasharing", "SYSTEM-NOTIFICATION.GoToSharingDashboard", 
                "SYSTEM-NOTIFICATION.NOTIFICATION-TEXT.PublicUrlShareRequested", RequestingUser.Mail, requestFilename, 
                new BilingualStringArgument(project.ProjectInfo.ProjectNameEn, project.ProjectInfo.ProjectNameFr))
        };

        await Task.WhenAll(tasks);
        UpdateCurrentStatus(PublicUrlSharingStatus.PendingApproval);

        savingData = false;
    }

    private async Task SaveExpiryDate()
    {
        if (editContext.Validate())
        {
            savingData = true;
            var expirationDate = dateHolder.EnableTempSharing ? dateHolder.Date : null;
            var t = PublicFileService.SaveTempSharingExpiryDate(fileIdGuid, expirationDate);
            await t;
            savingData = false;
        }
    }

    private void UpdateCurrentStatus(PublicUrlSharingStatus step, bool passed = false)
    {
        editSavedMetadata = false;
        currentStep = step;
        _stepStates[step] = passed? AeSteps<PublicUrlSharingStatus>.StepState.Passed : AeSteps<PublicUrlSharingStatus>.StepState.Running;

        foreach (var stepv in Enum.GetValues<PublicUrlSharingStatus>())
        {
            if (stepv < step)
            {
                _stepStates[stepv] = AeSteps<PublicUrlSharingStatus>.StepState.Passed;
            }
            else if (stepv > step)
            {
                _stepStates[stepv] = AeSteps<PublicUrlSharingStatus>.StepState.Queued;
            }
        }
    }

    private async Task ManuallyShowMetadataEditor()
    {
        editSavedMetadata = true;
    }

    private async Task ShowCancelRequestDialog()
    {
        await ShowCancelOrDeleteRequestDialog("CancelSharing");
    }

    private async Task ShowDeleteExpiredDialog()
    {
        await ShowCancelOrDeleteRequestDialog("DeleteExpired");
    }

    private async Task ShowCancelOrDeleteRequestDialog(string operation)
    {
        var promptText = new List<string>() { Localizer[$"{LOCALIZATION_PREFIX}.{operation}Prompt"] };
        RenderFragment cancelDialog =  
    @<UserChoiceModal
            HeaderText=@Localizer[$"{LOCALIZATION_PREFIX}.{operation}"]
            ChoiceTextList=@promptText
            OnDecision="HandleCancel"
            ConfirmText=@Localizer["COMMON.Yes"]
            CancelText=@Localizer["COMMON.No"]
            />
    ;
        await UI.ToggleModal(cancelDialog);
    }


    private async void HandleCancel(bool isCancelled)
    {
        if (isCancelled)
        {
            savingData = true;
            await PublicFileService.CancelPublicDataShare(fileIdGuid);
            savingData = false;
            await NavManager.NavigateTo("/", true);
        }
        await UI.ToggleModal();
    }

    private void HandleValiadationRequested(object sender, ValidationRequestedEventArgs args)
    {
        validationMessageStore.Clear();

        if (dateHolder.EnableTempSharing && !dateHolder.Date.HasValue)
        {
            validationMessageStore.Add(() => dateHolder.Date, Localizer[$"{VALIDATION_ERROR_PREFIX}.TempWithNoExpiry"]);
        }

        if (dateHolder.Date.HasValue && dateHolder.Date <= DateTime.UtcNow)
        {
            validationMessageStore.Add(() => dateHolder.Date, Localizer[$"{VALIDATION_ERROR_PREFIX}.ExpiryDateInPast"]);
        }
    }

    protected override async Task OnInitializedAsync()
    {
        // don't show a step for Expired status
        steps.Remove(PublicUrlSharingStatus.Expired);

        editContext = new(dateHolder);
        editContext.OnValidationRequested += HandleValiadationRequested;
        validationMessageStore = new(editContext);

        if (!Guid.TryParse(FileId, out fileIdGuid))
        {
            await NavigateHome();
            return;
        }

        var loadTask = PublicFileService.LoadPublicUrlSharedFileInfo(fileIdGuid);
        var currentUserTask = UserInformationService.GetUserAsync();

        _stepInfo = new();
        foreach(var step in steps)
        {
            var stepName = step.ToString();
            var prefix = SharedDataFile.PUBLIC_URL_SHARING_STATUS_LOCALIZATION_PREFIX;
            var keys = ($"{prefix}.{stepName}.Title", $"{prefix}.{stepName}.Description");
            _stepInfo.Add(step, (Localizer[keys.Item1], Localizer[keys.Item2]));
        }

        var sharedFileInfo = await loadTask;
        if (sharedFileInfo is null)
        {
            await NavigateHome();
            return;
        }

        requestFilename = sharedFileInfo.Filename_TXT;
        projectCode = sharedFileInfo.ProjectCode_CD;

        RequestingUser = await GraphService.GetUserAsync(sharedFileInfo.RequestingUser_ID, CancellationToken.None);
        var currentUser = await currentUserTask;
        IsOwnRequest = currentUser.Id == RequestingUser.Id;

        PublicationDateStr = sharedFileInfo.PublicationDate_DT?.ToShortDateString();

        dateHolder.Date = sharedFileInfo.ExpirationDate_DT;
        dateHolder.EnableTempSharing = dateHolder.Date.HasValue;

        var status = sharedFileInfo.GetPublicUrlSharingStatus();
        UpdateCurrentStatus(status, status == PublicUrlSharingStatus.AccessPublicUrl);
    }

    public void Dispose()
    {
        editContext.OnValidationRequested -= HandleValiadationRequested;
    }

    private async Task NavigateHome() 
    {
        await NavManager.NavigateTo("/", true);
    }
}
