@page "/powerbi-report/embed/{GroupId}/{ReportId}"
@page "/powerbi-report/embed/{ReportId}"
@* @layout ExternalLayout *@
@using System.Net.Http
@using System.Threading.Tasks
@using Microsoft.Identity.Client
@using Microsoft.PowerBI.Api
@using Microsoft.PowerBI.Api.Models
@using Microsoft.Rest
@using Newtonsoft.Json.Linq
@using Microsoft.Extensions.Configuration
@inject IJSRuntime JSRuntime
@inject IConfiguration _configuration

@inject IStringLocalizer<DataLabels> DataLocalizer
@inject NavigationManager NavigationManager
@inject PowerBiServiceApi PowerBiServiceApi
@using Microsoft.Identity.Web
@inject MicrosoftIdentityConsentAndConditionalAccessHandler ConsentHandler

<div @ref="@PowerBIElement" style="width:100%;height:600px;max-width: 2000px">@_errorMessage</div>

@code {

    [Parameter]
    public string ReportId {  get;  set; }

    [Parameter]
    public string GroupId {  get;  set; }

    [Parameter]
    [SupplyParameterFromQuery]
    public bool ReadOnly { get; set; }

    private ElementReference PowerBIElement;

    private Report report;
    private EmbedToken reportToken;

    private string _errorMessage;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            if (GroupId is null)
                report = await PowerBiServiceApi.GetReport(ReportId);                
            else
                report = await PowerBiServiceApi.GetReport(ReportId, GroupId);
            
            reportToken = await PowerBiServiceApi.GetEmbedTokenAsync(10,report.DatasetId, new Guid(ReportId));

            var pbiSettings = new PowerBISettings();
            if (ReadOnly)
            {
                pbiSettings.bars.actionBar.visible = false;
                pbiSettings.navContentPaneEnabled = false;            
            }

            if (report != null)
            {
                await JSRuntime.InvokeAsync<object>(
                    "ShowMyPowerBI.showReportEmbed",
                    PowerBIElement, reportToken, report.EmbedUrl,
                    report.Id.ToString(), pbiSettings);
            }
        } 
        catch (Exception ex)
        {
            HandleError(ex);
        }
    }

    private void HandleError(Exception ex)
    {
        _errorMessage = $"Internal error loading report {ReportId}.";
        try
        {
            ConsentHandler.HandleException(ex);        
        }
        catch (Exception)
        {
            throw;
        }
    }

    private const string AuthorityFormat = "https://login.microsoftonline.com/{0}/v2.0";
    private const string MSGraphScope = "https://analysis.windows.net/powerbi/api/.default";
}