@page "/powerbi-report/{GroupId}/{ReportId}"
@page "/powerbi-report/{ReportId}"
@using System.Net.Http
@using System.Threading.Tasks
@using Microsoft.Identity.Client
@using Microsoft.PowerBI.Api
@using Microsoft.PowerBI.Api.Models
@using Microsoft.Rest
@using Newtonsoft.Json.Linq
@using Microsoft.Extensions.Configuration
@inject IJSRuntime JSRuntime
@inject IConfiguration _configuration

@inject IStringLocalizer<DataLabels> DataLocalizer
@inject NavigationManager NavigationManager
@inject PowerBiServiceApi PowerBiServiceApi
@using Microsoft.Identity.Web
@inject MicrosoftIdentityConsentAndConditionalAccessHandler ConsentHandler

<div @ref="@PowerBIElement" style="width:100%;height:600px;max-width: 2000px" />

@code {

    [Parameter]
    public string ReportId {  get;  set; }

    [Parameter]
    public string GroupId {  get;  set; }

    [Parameter]
    [SupplyParameterFromQuery]
    public bool ReadOnly { get; set; }

    //protected override async Task OnAfterRenderAsync(bool firstRender)
    //{
    //    await JSRuntime.InvokeVoidAsync("ResizeIFrame","#powerbi-iframe");
    //}

    private ElementReference PowerBIElement;

    private Report report;
    private string reportToken;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            if (GroupId is null)
                report = await PowerBiServiceApi.GetReport(ReportId);                
            else
                report = await PowerBiServiceApi.GetReport(ReportId, GroupId);                
            reportToken = await PowerBiServiceApi.GetAccessTokenAsync();
        } catch (Exception ex)
        {
            ConsentHandler.HandleException(ex);
        }
        var pbiSettings = new PowerBISettings();
        if (ReadOnly)
        {
            pbiSettings.bars.actionBar.visible = false;
            pbiSettings.navContentPaneEnabled = false;            
        }

        if (report != null)
        {
            await JSRuntime.InvokeAsync<object>(
                "ShowMyPowerBI.showReport",
                PowerBIElement, reportToken, report.EmbedUrl,
                report.Id.ToString(), pbiSettings);
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {

            
        }
    }
    private const string AuthorityFormat = "https://login.microsoftonline.com/{0}/v2.0";
    private const string MSGraphScope = "https://analysis.windows.net/powerbi/api/.default";

}
