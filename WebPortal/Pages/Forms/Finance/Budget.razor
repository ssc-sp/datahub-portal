@inject IStringLocalizer DataLocalizer
@implements IDisposable
@inject IDbContextFactory<FinanceDBContext> DbFactory
@inject NavigationManager NavigationManager
@inject DataImportingService DataImportingService
@inject IJSRuntime JsInterop
@page "/finance/budgets/{sector}"

<h1>Sector and Branch</h1>

<SectorTable sector="@sector"></SectorTable>

<div>
    <AeFlex Vertical id="indexFlex">
        <AePaginatedTable Accessors="accessorFunctions"
                 T="NRCan.Datahub.Portal.Data.Finance.Budget"
                 Dataset="_budgets"
                 ColorAccessor="getColor"
                 Headers="headers"
                 GridTemplateColumns="2fr 2fr 2fr"
                 MaxHeight="400"
                 OnRowClick="@SetFormEdit" 
                 Page="@_lastClicked"
                 PageSize="10"
                 @ref=_myTable
              />
             <AePagination Pageable="@_myTable" OnPageClick="OnPageClick" /> 
    </AeFlex>
    
    
    <TablePasteArea ExcelContent="HandleExcelPaste"></TablePasteArea>

    <AeFlex id="buttonBar">
        <div class="icon-container" style="margin-bottom: 10px; margin-left: 5px;">
            <FAButton Text="Add New" Icon="far fa-plus-square" onclick="e => CreateNewBudget()" />
        </div>
    </AeFlex>
    <AeFlex id="buttonBar">
        <div class="icon-container" style="margin-bottom: 10px; margin-left: 5px;">
            <FAButton Text="Back" Icon="fal fa-arrow-left" onclick="e => GoBack()" />
        </div>
    </AeFlex>

</div>

@if (_budget != null)
{
    if (_budget.Budget_ID > 0)
    {
        <h2>Editing Budget @_budget.Budget_ID</h2>
    }
    else
    {
        <h2>Create new Budget record</h2>
    }

    <AeModelForm Model="_budget"
                 T="NRCan.Datahub.Portal.Data.Finance.Budget"
                 OnValidSubmit="HandleValidSubmit"
                 OnCancel="ClearForm"
                 CancelLabel="Cancel"
                 SubmitLabel="@SubmitLabel"
                 LabelForPropertyFunc="@GetDataLabel"
                 OnConfigure="OnConfigure" />
}

@code {
    [Parameter]
    public string sector { get; set; }

    private NRCan.Datahub.Portal.Data.Finance.Budget _budget;
    private List<NRCan.Datahub.Portal.Data.Finance.Budget> _budgets;
    private bool _navToEdit;
    private string SubmitLabel = "Add new";
    private SectorAndBranch _sector;
    private FinanceDBContext Context;

    private int _lastClicked = 0;
    private IPageableComponent _myTable;


    private void OnPageClick(int pageIndex)
    {
        _lastClicked = pageIndex;
    }

    private List<Func<NRCan.Datahub.Portal.Data.Finance.Budget, string>> accessorFunctions = new List<Func<NRCan.Datahub.Portal.Data.Finance.Budget, string>>
{
        new Func<NRCan.Datahub.Portal.Data.Finance.Budget, string>(p => { return p.Division_NUM.ToString(); }),
        new Func<NRCan.Datahub.Portal.Data.Finance.Budget, string>(p => { return p.SubLevel_TXT; }),
        new Func<NRCan.Datahub.Portal.Data.Finance.Budget, string>(p => { return p.Funding_Type_TXT; }),
    };

    private void HandleExcelPaste(List<String[]> items)
    {
        //var objectItems = DataImportingService.CreateBudgets(items);
        var objectItems = DataImportingService.CreateObjects<NRCan.Datahub.Portal.Data.Finance.Budget>(items);
        foreach(var item in objectItems)
        {
            item.SectorAndBranch = _sector;
        }
        Context.Budgets.AddRange(objectItems);
        Context.SaveChanges();
        OnInitialized();
        StateHasChanged();
    }


    private string getColor(NRCan.Datahub.Portal.Data.Finance.Budget current)
    {
        if (current == _budget)
        {
            return "yellow";
        }
        return "";
    }

    private List<string> headers = new List<string>
    {
        "Division","Sublevel", "Funding Type"
    };

    private void SetFormEdit(NRCan.Datahub.Portal.Data.Finance.Budget budget)
    {
        _budget = budget;
        SubmitLabel = "Save Changes";
        StateHasChanged();
        _navToEdit = true;
    }

    private Task CreateNewBudget()
    {
        return Task.Run(() =>
        {
            _budget = new NRCan.Datahub.Portal.Data.Finance.Budget() { SectorAndBranch = _sector, Last_Updated_DT = DateTime.Now };
            StateHasChanged();
            _navToEdit = true;
        });
    }

    private async Task HandleValidSubmit()
    {
        if (_budget != null)
        {
            if (_budget.Budget_ID == 0)
            {
                _budget = Context.Budgets.Add(_budget).Entity;
            }
            _budget.Last_Updated_DT = DateTime.Now;
            await Context.SaveChangesAsync();
            OnInitialized();
            _budget = null;
        }
    }

    public string GetDataLabel(string propName)
    {
        return DataLocalizer[propName];
    }

    private async Task<NRCan.Datahub.Portal.Data.Finance.Budget> ClearForm()
    {
        return await Task.Run<NRCan.Datahub.Portal.Data.Finance.Budget>(() => {
            _budget = null;
            StateHasChanged();
            return (NRCan.Datahub.Portal.Data.Finance.Budget)(null);
        });
    }

    protected override void OnInitialized()
    {
        // load projects
        Context = DbFactory.CreateDbContext();
        _sector = Context.SectorAndBranches.Where(p => p.SectorBranch_ID == Convert.ToInt32(sector)).FirstOrDefault();
        _budgets = Context.Budgets.Where(p => p.SectorAndBranch.SectorBranch_ID == _sector.SectorBranch_ID).ToList();
    }

    private async Task OnConfigure(ModelFormContext<NRCan.Datahub.Portal.Data.Finance.Budget> context)
    {
        await context.UpdateValidValues("Departmental_Priorities_TXT", new[] { "DepPriority 1", "DepPriority 2", "DepPriority 3", "DepPriority 4", "DepPriority 5", "DepPriority 6" });
        await context.UpdateValidValues("Sector_Priorities_TXT", new[] { "SectPriority 1", "SectPriority 2", "SectPriority 3", "SectPriority 4", "SectPriority 5", "SectPriority 6", "SectPriority 7", "SectPriority 8" });
        await context.UpdateValidValues("Key_Activity_TXT", new[] { "Activity 1", "Activity 2", "Activity 3", "Activity 4", "Activity 5", "Activity 6", "Activity 7", "Activity 8", "Activity 9", "Activity 10" });
    }

    private async Task GoBack()
    {
        await Task.Run(() => NavigationManager.NavigateTo($"/finance/programs"));
    }

    public void Dispose()
    {
        Context.Dispose();
    }
}
