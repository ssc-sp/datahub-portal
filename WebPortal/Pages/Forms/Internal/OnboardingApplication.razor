@inject IEmailNotificationService EmailService
@implements IDisposable
@inject ServiceAuthManager ServiceAuthManager
@inject IDbContextFactory<DatahubProjectDBContext> DbFactory
@inject IUserInformationService UserInformationService
@inject NavigationManager NavigationManager
@inject IJSRuntime JsInterop
@inject UIControlsService UI
@inject IDatahubAuditingService AuditingService
@inject NavigationManager NavigationManager
@page "/onboarding/applications"

@using Datahub.Core.Model.Onboarding

<Datahub.Core.Components.FormTemplate 
        T="OnboardingApp" 
        U="DatahubProjectDBContext"
        Context="Context"
        Metadata="@_formMetadata" 
        HandleSubmit="HandleValidSubmit"
        OnChangeForms="OnChange"
        OnConfigureForms="OnConfigure"
        CreateNewRecord="CreateNewApplication"
        SelectedRecord="@_onboardingApplication"
        SetFormEditRecord="SetFormEdit" />

@code {
    private const string PROJECTACRONYM = "DHPGLIST";
    private const string NOTAPPLICABLE = "N/A";
    private FormMetadata<OnboardingApp> _formMetadata;
    private bool _onchange;
    private bool _isFrench;
    private List<OnboardingApp> _onboardingApplications;
    private OnboardingApp _onboardingApplication;
    private DatahubProjectDBContext Context;
    private List<string> MarkDownContent = new();
    private Microsoft.Graph.User _user;
    private List<Datahub_Project_Sectors_And_Branches> _sectors;
    private List<Datahub_Project_Sectors_And_Branches> _branches;
    private List<Datahub_Project_Sectors_And_Branches> _divisions;
    

    protected override async Task OnInitializedAsync()
    {
        // load projects
        Context = DbFactory.CreateDbContext();
        _user = await UserInformationService.GetUserAsync();
        _formMetadata = new();

        _sectors = Context.Organization_Levels.Where(l => l.Org_Level == "3").ToList();
        _branches = Context.Organization_Levels.Where(l => l.Org_Level == "4").ToList();
        _divisions = Context.Organization_Levels.Where(l => l.Org_Level == "5").ToList();

        await LoadApps();
        _formMetadata.Header = Localizer["Datahub Project Onboarding Application Form"];
        _formMetadata.TableRoles = RoleConstants.DATAHUB_ROLE_ADMIN;
        _formMetadata.DataSet = _onboardingApplications;
        _formMetadata.AccessorFunctions = accessorFunctions;
        _formMetadata.Headers = headers;
        _formMetadata.GridTemplateColumns = "4fr 4fr 4fr 4fr";
        _formMetadata.IsSubmitEnabled = true;
        _isFrench = CultureInfo.CurrentCulture.Name.StartsWith("fr", StringComparison.InvariantCulture);
        _formMetadata.MarkDownContent = new List<string>();
        _formMetadata.MarkDownContentFooter = new List<string>();
        
    }

    private List<Func<OnboardingApp, string>> accessorFunctions = new List<Func<OnboardingApp, string>>
    {
        new Func<OnboardingApp, string>(p => { return p.Client_Sector; }),
        new Func<OnboardingApp, string>(p => { return p.Client_Branch; }),
        new Func<OnboardingApp, string>(p => { return p.Client_Division; }),
        new Func<OnboardingApp, string>(p => { return p.Client_Contact_Name; }),
    };

    
    private List<string> headers => new List<string>
    {
        Localizer["Sector"], Localizer["Branch"], Localizer["Division"], Localizer["Contact"]        
    };

    private async Task HandleValidSubmit()
    {
        if (_onboardingApplication != null)
        {
            if (_onboardingApplication.Application_ID == 0)
            {
                _onboardingApplication = Context.OnboardingApps.Add(_onboardingApplication).Entity;
            }
            _onboardingApplication.Last_Updated_DT = DateTime.Now;
            
            OnboardingParameters onboardingParameters = new() { App = _onboardingApplication, AdminEmailAddresses =  ServiceAuthManager.GetProjectAdminsEmails(PROJECTACRONYM)};
        
            await EmailService.SendOnboardingConfirmations(onboardingParameters);
            _onboardingApplication.NotificationsSent = true;

            await Context.TrackSaveChangesAsync(AuditingService);
            NavigationManager.NavigateTo("/onboarding/confirmation");
        }

    }

   
    private async Task LoadApps()
    {

        _onboardingApplications = Context.OnboardingApps.ToList();
        _formMetadata.DataSet = _onboardingApplications;

    }



    private List<string> LoadBranches()
    {
        if (string.IsNullOrEmpty(_onboardingApplication.Client_Sector))
        {
            return new List<string>();
        }
        var sectorId = _sectors.Where(s => (s.Org_Name_E == _onboardingApplication.Client_Sector || s.Org_Name_F == _onboardingApplication.Client_Sector)).First().Organization_ID;
        var branches = _branches.Where(r => r.Superior_OrgId == sectorId).Select(r=> _isFrench ? r.Org_Name_F : r.Org_Name_E).ToList();
        if (!branches.Any())
        {
            branches.Add(NOTAPPLICABLE);
        }

        return branches;
    }

    private List<string> LoadDivisions()
    {
        if (string.IsNullOrEmpty(_onboardingApplication.Client_Branch) || _onboardingApplication.Client_Branch == NOTAPPLICABLE)
        {
            return new List<string>() { NOTAPPLICABLE };
        }
        
        var branchId = _branches.Where(s => (s.Org_Name_E == _onboardingApplication.Client_Branch  || s.Org_Name_F == _onboardingApplication.Client_Branch)).First().Organization_ID;
        var divisions = _divisions.Where(r => r.Superior_OrgId == branchId).Select(r=> _isFrench ? r.Org_Name_F : r.Org_Name_E).ToList();

        if (!divisions.Any())
        {
            divisions.Add(NOTAPPLICABLE);
        }
        return divisions;
    }

    private void OnConfigure(IModelFormContext context)
    {
        if (!_onchange)
        {
            var sectors = _sectors.Select(r=> _isFrench ? r.Org_Name_F : r.Org_Name_E).ToList();
            context.RegisterOptionValueProperty<OnboardingApp>(p => p.Client_Sector, () => sectors, _ => context.RefreshOptions<OnboardingApp>(s => s.Client_Branch));
            context.RegisterOptionValueProperty<OnboardingApp>(p => p.Client_Branch, LoadBranches, _ => context.RefreshOptions<OnboardingApp>(s => s.Client_Division));
            context.RegisterOptionValueProperty<OnboardingApp>(p => p.Client_Division, LoadDivisions);
            context.RegisterOptionValueProperty<OnboardingApp>(p => p.Project_Engagement_Category, () => Onboarding_Constants.CATEGORY);
            context.RegisterOptionValueProperty<OnboardingApp>(p => p.Data_Security_Level, () => Onboarding_Constants.SECURITYLEVEL);
        }

        ToggleVisibility(context);
    }
    
     private void ToggleVisibility(IModelFormContext context)
    {
        context.SetVisible<OnboardingApp>(p => p.Project_Engagement_Category_Other, _onboardingApplication.Project_Engagement_Category == "Other");
        _onchange = false;
    }

    private void OnChange(ModelFormChangeArgs args)
    {
        _onchange = true;
        OnConfigure(args.Context);
    }

    private async Task CreateNewApplication()
    {
        _onboardingApplication = new OnboardingApp() { Last_Updated_DT = DateTime.Now };
        //var user = await UserInformationService.GetUserAsync();
        _onboardingApplication.Client_Email = _user.Mail;
        _onboardingApplication.Client_Contact_Name = _user.DisplayName;
        _formMetadata.IsSubmitEnabled = true;
        StateHasChanged();
    }

    private async Task SetFormEdit(OnboardingApp application)
    {
    
        _onboardingApplication = application;
        if (_onboardingApplication.NotificationsSent)
            _formMetadata.IsSubmitEnabled = false;

        StateHasChanged();

    }


    private async void OnConfirmSave(bool isConfirmed, dynamic item)
    {
        if (isConfirmed && _onboardingApplication != null)
        {
            _onboardingApplication.Last_Updated_DT = DateTime.Now;
            _onboardingApplication.Last_Updated_UserId = _user.Id;
            if (_onboardingApplication.Application_ID == 0)
            {
                _onboardingApplication = Context.OnboardingApps.Add(_onboardingApplication).Entity;
            }
            await Context.TrackSaveChangesAsync(AuditingService);
            
        }
        else
        {
            var entry = Context.Entry(_onboardingApplication);
            foreach (var property in entry.OriginalValues.Properties)  
            {
                var propertyName = property.Name;
                entry.Property(propertyName).CurrentValue = entry.Property(propertyName).OriginalValue;   
            }              
        }
        await UI.ToggleModal();
        _onboardingApplication = item;
        StateHasChanged();
    }



    public void Dispose() { Context.Dispose(); }
}
