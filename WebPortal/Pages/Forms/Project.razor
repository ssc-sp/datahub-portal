@using Microsoft.EntityFrameworkCore.Query
@using Microsoft.EntityFrameworkCore;
@using NRCan.Datahub.Portal.Data;
@inject IStringLocalizer<DataLabels> DataLocalizer
@inject NavigationManager NavigationManager
@inject Elemental.Services.UIControlsService UIControlService
@inject IUserInformationService UserInformationService
@inject IJSRuntime JsInterop
@implements IDisposable
@inject IDbContextFactory<DatahubProjectDBContext> DbFactoryProject
@inject IDbContextFactory<SqlCiosbDatahubEtldbContext> DbFactoryEtl

@page "/project/{projectAcronym}"

<div style="padding-left: 2rem;padding-right: 2rem">
<h1>@_project.ProjectName</h1>

@if (_pipelineStatus?.Count > 0)
{
<AeFlex Vertical>            
<h2>Data Pipeline Status</h2>
<AeTable Accessors="accessorFunctions" Renderers="renderFunctions"
        GridTemplateColumns="4fr 4fr 3fr 3fr"
       Dataset="_pipelineStatus"     
       Headers="pipelineHeaders" />
</AeFlex>       
}

<h2>Project Tools</h2>
<div class="ae flex wrap">
    <AeCard class="facard1">
        <ChildContent>
            <AeFlex>
                <svg height="30%" width="30%" aria-hidden="true" role="presentation" focusable="false"><svg viewBox="0 0 104.26 112.97" class="" role="presentation" focusable="false" xmlns:svg="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" id="FxSymbol0-029" data-type="1"><g><title></title><path fill="#ff3621" d="M0 29.44v3.4l52.13 29.41 46.56-26.29.01 10.62-46.57 26.46L2.62 44.91 0 46.37v20.35l52.13 29.34 46.56-26.2.01 10.54-46.57 26.46L2.62 78.73 0 80.19v3.45l52.13 29.33 52.13-29.33V63.27l-2.63-1.45-49.5 28.13L5.56 63.49V53l46.57 26.17 52.13-29.34V29.76l-2.63-1.46-49.5 28.14L7.95 31.33 52.13 6.38l36.39 20.56 3.18-1.79v-2.8L52.13 0 0 29.44z"></path></g></svg></svg>
                <AeFlex Vertical>
                    @if (_databricksAuthorized && !string.IsNullOrWhiteSpace(_project.Databricks_URL))
                    {
                        <a href="@_project.Databricks_URL"><AeTypography Variant="h3">Azure Databricks</AeTypography></a>
                    }
                    else
                    {
                        <AeTypography Variant="h3">Azure Databricks</AeTypography>
                    }
                    <AeTypography>Azure Databricks Workspace for @_project.ProjectName</AeTypography>
                    @if (!_databricksAuthorized)
                    {
                    @if (!string.IsNullOrWhiteSpace(_project.Databricks_URL))
                    {
                        @if (_databricksRequested)
                        {
                            <AeTypography class="warning">Access Request is being reviewed</AeTypography>
                        }
                        else
                        {
                            <AeTypography class="warning">Access not authorized</AeTypography>
                            <AeButton @onclick="@(async () => await RequestAccess(true, false, false))">Request Access</AeButton>
                        }
                    }
                    else
                    {
                        @if (_serviceRequests.Any(r => r.ServiceType == "databricks" && r.Is_Completed == null))
                        {
                            <AeTypography class="warning">Service Request is being reviewed</AeTypography>
                        }
                        else
                        {
                            @* <AeTypography class="warning">Service not available</AeTypography> *@
                            <AeButton @onclick="@(async () => await RequestServiceAccess("databricks"))">Request Service Creation</AeButton>
                        }
                    }
                    }
                </AeFlex>
            </AeFlex>
        </ChildContent>
    </AeCard>

    <AeCard class="facard1">
        <ChildContent>
            <AeFlex>
                <img src="/icons/svg/powerbi.svg" alt="Power Virtual Agents powerbi">
                <AeFlex Vertical>
                    @if (_powerBIAuthorized && !string.IsNullOrWhiteSpace(_project.PowerBI_URL))
                    {
                        <a href="@_project.PowerBI_URL"><AeTypography Variant="h3">PowerBI</AeTypography></a>
                    }
                    else
                    {
                        <AeTypography Variant="h3">PowerBI</AeTypography>
                    }                    
                    <AeTypography>PowerBI Workspace for @_project.ProjectName</AeTypography>
                    @if (!_powerBIAuthorized)
                    {
                    @if (!string.IsNullOrWhiteSpace(_project.PowerBI_URL))
                    {
                        @if (_powerBIRequested)
                        {
                            <AeTypography class="warning">Access Request is being reviewed</AeTypography>
                        }
                        else
                        {
                            <AeTypography class="warning">Access not authorized</AeTypography>
                            <AeButton @onclick="@(async () => await RequestAccess(false, true, false))">Request Access</AeButton>
                        }
                    }
                    else
                    {
                        @if (_serviceRequests.Any(r => r.ServiceType == "powerbi" && r.Is_Completed == null))
                        {
                            <AeTypography class="warning">Service Request is being reviewed</AeTypography>
                        }
                        else
                        {
                            @*<AeTypography class="warning">Service not available</AeTypography>*@
                            <AeButton @onclick="@(async () => await RequestServiceAccess("powerbi"))">Request Service Creation</AeButton>
                        }
                    }
                    }
                </AeFlex>
            </AeFlex>
        </ChildContent>
    </AeCard>

    @if (!string.IsNullOrEmpty(_project.WebForms_URL))
    {
        <AeCard class="facard1">
            <ChildContent>
                <AeFlex>
                    <AeIcon class="fas fa-keyboard big-icon" />
                    <AeFlex Vertical>
                        @if (!string.IsNullOrWhiteSpace(_project.WebForms_URL) && _webFormsAuthorized)
                        {
                            <NavLink href="@_project.WebForms_URL"><AeTypography Variant="h3">Data Entry</AeTypography></NavLink>
                        }
                        else
                        {
                            <AeTypography Variant="h3">Data Entry</AeTypography>
                        }
                        <AeTypography>Data Entry for @_project.ProjectName</AeTypography>
                        @if (!_webFormsAuthorized)
                        {
                        @if (_webFormsRequested)
                        {
                            <AeTypography class="warning">Access Request is being reviewed</AeTypography>
                        }
                        else
                        {
                            <AeTypography class="warning">Access not authorized</AeTypography>
                            <AeButton @onclick="@(async () => await RequestAccess(false, false, true))">Request Access</AeButton>
                        }
                        }
                    </AeFlex>
                </AeFlex>
            </ChildContent>
        </AeCard>
    }


    <AeCard class="facard1">
        <AeFlex>
            <AeIcon class="fas fa-file-alt big-icon" />
            <AeFlex Vertical>
                <NavLink href=@($"/project/{projectAcronym}/forms")><AeTypography Variant="h3">Form Builder</AeTypography></NavLink>
                <AeTypography>Form Builder for @_project.ProjectName</AeTypography>
            </AeFlex>
        </AeFlex>
    </AeCard>

    <AeCard class="facard1">
        <AeFlex>
            <AeIcon class="fas fa-hdd big-icon" />
            <AeFlex Vertical>

                @if (_serviceRequests.Any(r => r.ServiceType == "storage" && r.Is_Completed != null))
                {
                    <NavLink href=@($"/project/{projectAcronym}/filelist")><AeTypography Variant="h3">Storage Explorer</AeTypography></NavLink>
                    <AeTypography>Storage Explorer for @_project.ProjectName</AeTypography>
                }
                else if (_serviceRequests.Any(r => r.ServiceType == "storage" && r.Is_Completed == null))
                {
                    <AeTypography Variant="h3">Storage Explorer</AeTypography>
                    <AeTypography>Storage Explorer for @_project.ProjectName</AeTypography>
                    <AeTypography class="warning">Service Request is being reviewed</AeTypography> 
                }
                else
                {
                    <AeTypography Variant="h3">Storage Explorer</AeTypography>
                    <AeTypography>Storage Explorer for @_project.ProjectName</AeTypography>
                    <AeButton @onclick="@(async () => await RequestServiceAccess("storage"))">Request Service Creation</AeButton>
                }
                
            </AeFlex>
        </AeFlex>
    </AeCard>
</div>
</div>



@code {
    //Service Types - 1 = DataBricks, 2 = PowerBi
    //Service Status - 0 = pending creation, 1 = created

    private DatahubProjectDBContext projectContext;
    private SqlCiosbDatahubEtldbContext etlContext;


    // Define the headers at the top of the table
    private List<string> pipelineHeaders = new List<string>
    {
        "Data Factory Pipeline", "Last Update", "Result", "Data Quality & Integrity Checks"
    };

    // Accessor functions to retrieve cell value
    private List<Func<ETL_CONTROL_TBL, string>> accessorFunctions = new List<Func<ETL_CONTROL_TBL, string>>
    {
        new Func<ETL_CONTROL_TBL, string>(etl => etl.PROCESS_NM),
        new Func<ETL_CONTROL_TBL, string>(etl => etl.END_TS?.ToString("g")),
        new Func<ETL_CONTROL_TBL, string>(etl => etl.STATUS_FLAG),
        new Func<ETL_CONTROL_TBL, string>(etl => "S")
    };

    private List<Func<ETL_CONTROL_TBL, RenderFragment>> renderFunctions = new List<Func<ETL_CONTROL_TBL, RenderFragment>>
    {
        null,
        null,
        new Func<ETL_CONTROL_TBL, RenderFragment>(etl =>  { if (etl.STATUS_FLAG == "S")
                                                                return @<div><i class="fad fa-check"></i> OK</div>;
                                                            else 
                                                                return @<div><i class="fad fa-exclamation-triangle"></i> Error</div>;}),
        new Func<ETL_CONTROL_TBL, RenderFragment>(etl => { return @<div><i class="fad fa-check"></i> OK</div>
    ; })
    };

    [Parameter]
    public string projectAcronym { get; set; }


    private Datahub_Project _project;
    private List<Datahub_ProjectServiceRequests> _serviceRequests = new List<Datahub_ProjectServiceRequests>();

    private Microsoft.Graph.User _user;

    private bool _databricksRequested = false;
    private bool _powerBIRequested = false;
    private bool _webFormsRequested = false;
    private bool _databricksAuthorized = false;
    private bool _powerBIAuthorized = false;
    private bool _webFormsAuthorized = false;

    private List<ETL_CONTROL_TBL> _pipelineStatus = new List<ETL_CONTROL_TBL>();

    protected override async Task OnInitializedAsync()
    {
        projectContext = DbFactoryProject.CreateDbContext();
        etlContext = DbFactoryEtl.CreateDbContext();
        await RefreshComponents(false);
        var allPipelines = _project.Pipelines?.Select(p => p.Process_Nm).ToList();
        if (allPipelines != null)
        {
            _pipelineStatus = await etlContext.ETL_CONTROL_TBL.Where(t => allPipelines.Contains(t.PROCESS_NM)).ToListAsync();
            _pipelineStatus = _pipelineStatus.Where(t => t.STATUS_FLAG != "T").GroupBy(t => t.PROCESS_NM).Select(gp => gp.OrderByDescending(g => g.END_TS).First()).OrderBy(s => s.PROCESS_NM).ToList();
        }
        _user = await UserInformationService.GetCurrentUserAsync();

        if (_user != null)
        {
            var userRequests = _project.Requests?.Where(r => r.User_ID == _user.Id && r.Completion_DT is null).ToList();
            if (userRequests != null)
            {
                _databricksRequested = userRequests.Any(r => r.Databricks);
                _powerBIRequested = userRequests.Any(r => r.PowerBI);
                _webFormsRequested = userRequests.Any(r => r.WebForms);
            }
            var userAccess = _project.Requests?.Where(r => r.User_ID == _user.Id && r.Completion_DT != null).ToList();
            if (userAccess != null)
            {
                _databricksAuthorized = userAccess.Any(r => r.Databricks);
                _powerBIAuthorized = userAccess.Any(r => r.PowerBI);
                _webFormsAuthorized = userAccess.Any(r => r.WebForms);
            }            
        }

    }

    private async Task RequestAccess(bool databricks, bool powerbi, bool webforms)
    {
        _databricksRequested = databricks || _databricksRequested;
        _powerBIRequested = powerbi || _powerBIRequested;
        _webFormsRequested = webforms || _webFormsRequested;
        var request = new Datahub_Project_Access_Request()
        {
            Request_DT = DateTime.Now,
            User_Name = _user.UserPrincipalName,
            User_ID = _user.Id,
            Project = _project,
            PowerBI = powerbi,
            WebForms = webforms,
            Databricks = databricks
        };
        projectContext.Access_Requests.Add(request);
        await projectContext.SaveChangesAsync();

        await RefreshComponents(true);
    }

    private async Task RequestServiceAccess(string serviceType)
    {
        var serviceRequest = new Datahub_ProjectServiceRequests()
        {
            ServiceType = serviceType,
            ServiceRequests_Date_DT = DateTime.Now,
            Is_Completed = null,
            Project = _project
        };

        projectContext.Project_Requests.Add(serviceRequest);
        await projectContext.SaveChangesAsync();

        await RefreshComponents(true);
    }

    private async Task RefreshComponents(bool refreshState)
    {
        _project = projectContext.Projects.Include(p => p.Requests).Include(p => p.Pipelines).Single(p => p.Project_Acronym_CD == projectAcronym);
        _serviceRequests = projectContext.Project_Requests.Where(p => p.Project == _project).ToList();
        StateHasChanged();
    }

    public void Dispose() 
    { 
        projectContext.Dispose(); 
        etlContext.Dispose();
    }
}
