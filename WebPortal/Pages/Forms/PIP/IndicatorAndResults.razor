@inject UIControlsService UI
@inject IStringLocalizer DataLocalizer
@inject NavigationManager NavigationManager
@inject IJSRuntime JsInterop
@inject IUserInformationService UserInformationService
@inject IMSGraphService MSGraphService
@implements IDisposable
@inject IDbContextFactory<PIPDBContext> DbFactory
@inject IDatahubAuditingService AuditingService
@inject ServiceAuthManager ServiceAuthManager

@page "/pip/indicators/{tombstone}"

<h1>Indicator And Results</h1>

<ProgramTable tombstone="@tombstone"></ProgramTable>

<h2>Step 2: Enter/Select Indicators and Results for Selected Program</h2>
<div>
    <AeFlex Vertical id="indexFlex">



        <AePaginatedTable Accessors="accessorFunctions"
                 T="PIP_IndicatorAndResults"
                 Dataset="_indicators"
                 Renderers="GetRenderers()"
                 ColorAccessor="getColor"
                 Headers="headers"
                 GridTemplateColumns="1fr 4fr 4fr 1fr"
                 OnRowClick="@SetFormEdit" 
                 Page="@_lastClicked"
                 PageSize="10"
                 @ref=_myTable />

                 <AePagination 
                Pageable="@_myTable" 
                OnPageClick="OnPageClick"> 
                <LeftIcon><i class='fad fa-chevron-double-left'></i></LeftIcon> 
                <RightIcon><i class='fad fa-chevron-double-right'></i></RightIcon>
                </AePagination>

    </AeFlex>
    @if (_indicator == null)
    {
        <AeFlex id="buttonBar">
            <div class="icon-container" style="margin-bottom: 10px; margin-left: 5px;">

                <FAButton Text="Add New" Icon="far fa-plus-square" onclick="e => CreateNewIndicator()" />
            </div>
        </AeFlex>
    }
</div>

@if (_indicator != null)
{
    if (_indicator.IndicatorAndResult_ID > 0)
    {
        <h2>Editing Indicator and Result @_indicator.IndicatorAndResult_ID</h2>
    }
    else
    {
        <h2>Update Outcome and Indicator Data</h2>
    }

    <AeModelForm Model="_indicator"
                 T="PIP_IndicatorAndResults"
                 OnValidSubmit="HandleValidSubmit"
                 OnCancel="ClearForm"
                 CancelLabel="Cancel"
                 SubmitLabel="@SubmitLabel"
                 LabelForPropertyFunc="@GetDataLabel"
                 OnConfigure="OnConfigure"
                 LabelsOnTop="true" 
                 Flexbox/>

    @*if (_indicator.IndicatorAndResult_ID > 0)
    {
        <RiskTable ToggleRisk="ToggleRisk" IndicatorRisks="@_risks" RenderFunctions="@renderFunctions"></RiskTable>
    }*@
}

<AeFlex id="buttonBar">
    <div class="icon-container" style="margin-bottom: 10px; margin-left: 5px;">
        <FAButton Text="Tombstone" Icon="fal fa-arrow-left" onclick="e => GoToPreviousSheet()" />
        <FAButton Text="Risks" Icon="fal fa-arrow-right" IconLocation="right" onclick="e => GoToNextSheet()" />
    </div>
</AeFlex>

@code {

    [Parameter]
    public string tombstone { get; set; }

    private const string PROJECTACRONYM = "PIP";
    private List<PIP_IndicatorAndResults> _indicators;
    private PIP_IndicatorAndResults _indicator;
    private List<PIP_Tombstone> _tombstones;
    private List<PIP_Risks> _risks = new List<PIP_Risks>();
    private PIP_Tombstone _tombstone;
    private PIPDBContext Context;  
    private bool _navToEdit = false;
    private Microsoft.Graph.User CurrentUser;
    private string navigationUrl = string.Empty;
    private string SubmitLabel = "Save";
    private bool _isUserAdmin;
    private int _lastClicked = 0;
    private IPageableComponent _myTable;


    private void OnPageClick(int pageIndex)
    {
        _lastClicked = pageIndex;
    }

    protected override async Task OnInitializedAsync()
    {
        Context = DbFactory.CreateDbContext();
        renderFunctions = new List<Func<PIP_Risks, RenderFragment>>
{
        new Func<PIP_Risks, RenderFragment>(p => { return p.PIP_IndicatorRisks.Any(q => q.Pip_Indicator == _indicator) ? 
    @<i class="fal fa-check-square"></i> : @<i class="fal fa-square"></i>
    ; }),
        null,
        null,
        null,
    };
        CurrentUser = await UserInformationService.GetUserAsync();
        _isUserAdmin = await ServiceAuthManager.IsProjectAdmin(CurrentUser.Id, PROJECTACRONYM);
        // load projects
        _tombstone = Context.Tombstones.Where(p => p.Tombstone_ID == Convert.ToInt32(tombstone)).FirstOrDefault();
        _indicators = Context.IndicatorAndResults.Where(p => p.PIP_Tombstone.Tombstone_ID == _tombstone.Tombstone_ID && !p.IsDeleted).ToList();
    }

    private async Task CreateNewIndicator()
    {
        _indicator = new PIP_IndicatorAndResults() { PIP_Tombstone = _tombstone, Last_Updated_DT = DateTime.Now, Date_Result_Collected = DateTime.Now, Date_To_Achieve_Target_DT = DateTime.Now };
        StateHasChanged();
        _navToEdit = true;
    }

    private async Task OnConfigure(IModelFormContext context)
    {
        context.RegisterOptionValueProperty<PIP_IndicatorAndResults>(s => s.Outcome_Level_DESC, () => new[] { "Immediate", "Intermediate", "Ultimate", "Output" });
        context.RegisterOptionValueProperty<PIP_IndicatorAndResults>(s => s.Frequency_DESC, () => new[] { "Monthly", "Bi-Monthly", "Quarterly", "Semi-Anually", "Annually", "2 Years", "3 Years", "5 Years", "Other" });
        context.RegisterOptionValueProperty<PIP_IndicatorAndResults>(s => s.Source_Of_Indicator_DESC,() => new[] { "Horizontal Intiative", "DRF indicator", "GC InfoBase Indicator", "TB Sub indicator", "DSDS indicator", "SDG indicator", "TPP indicator", "Internal program indicator only" }); 
        context.RegisterOptionValueProperty<PIP_IndicatorAndResults>(s => s.Source_Of_Indicator2_DESC, () => new[] { "Horizontal Intiative", "DRF indicator", "GC InfoBase Indicator", "TB Sub indicator", "DSDS indicator", "SDG indicator", "TPP indicator", "Internal program indicator only" }); 
        context.RegisterOptionValueProperty<PIP_IndicatorAndResults>(s => s.Source_Of_Indicator3_DESC, () => new[] { "Horizontal Intiative", "DRF indicator", "GC InfoBase Indicator", "TB Sub indicator", "DSDS indicator", "SDG indicator", "TPP indicator", "Internal program indicator only" }); 
        context.RegisterOptionValueProperty<PIP_IndicatorAndResults>(s => s.Indicator__Progressive_Or_Aggregate_DESC, () => new[] { "Progressive", "Aggregate" });
        context.RegisterOptionValueProperty<PIP_IndicatorAndResults>(s => s.Indicator_Category_DESC, () => new[] { "Quantitative", "Qualitative" });
        context.RegisterOptionValueProperty<PIP_IndicatorAndResults>(s => s.Indicator_Direction_DESC, () => new[] { "Increase", "Decrease", "Maintain" });
        context.RegisterOptionValueProperty<PIP_IndicatorAndResults>(s => s.Data_Type_DESC, () => new[] { "Number", "Non numeric", "Dollar", "Percent" });
        context.RegisterOptionValueProperty<PIP_IndicatorAndResults>(s => s.Target_Type_DESC, () => new[] { "Minimum value(at least)", "Maximum value(at most)", "Closed range", "Exact(single) value" });
        context.RegisterOptionValueProperty<PIP_IndicatorAndResults>(s => s.Target_Met, () => new[] { "On Track", "Met", "Not Met", "Not on track to meet target" });        

        
        context.RegisterOptionValueProperty<PIP_IndicatorAndResults>(p => p.Cannot_Report_On_Indicator, () => PIP_Constants.NOT_REPORTABLE_INDICATOR);
        context.RegisterOptionValueProperty<PIP_IndicatorAndResults>(s => s.Can_Report_On_Indicator, () => PIP_Constants.YESNO);
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if(firstRender){
            StateHasChanged();
        }
    }


    private List<Func<PIP_IndicatorAndResults, RenderFragment>> GetRenderers()
    {

        if (_isUserAdmin)
        {
        return new List<Func<PIP_IndicatorAndResults, RenderFragment>>
            {
                null,
                null,
                null,
                indicator => 
            @<div class="help icon-container" @onclick="() => DeleteRecord(indicator.IndicatorAndResult_ID)"><i class="far fa-trash-alt"></i></div>
            };
        }
       
        return new List<Func<PIP_IndicatorAndResults, RenderFragment>>
            {
                null,
                null,
                null,
                null
            };
    }


    private async void OnConfirmDelete(bool isConfirmed, dynamic item)
    {
        if (isConfirmed && _indicator != null)
        {
            _indicator.IsDeleted = true;
            _indicator.UserIdWhoDeleted = CurrentUser.Id;
            await Context.TrackSaveChangesAsync(AuditingService);
        }

        _indicator = null;
        _indicators = Context.IndicatorAndResults.Where(p => p.PIP_Tombstone.Tombstone_ID == _tombstone.Tombstone_ID && !p.IsDeleted).ToList();
        await UI.ToggleModal();        

        StateHasChanged();
    }


    private async void DeleteRecord(int recordId)
    {
        var messages = new List<string>() { "Would you like to delete this record?" };
        await UI.ToggleModal(
        @<UserChoiceModal HeaderText="Save Data" ChoiceTextList=@messages OnDecision="(a) => OnConfirmDelete(a, recordId)" ConfirmText="Yes" CancelText="No"  />);
    }

    private List<Func<PIP_IndicatorAndResults, string>> accessorFunctions = new List<Func<PIP_IndicatorAndResults, string>>
{
        new Func<PIP_IndicatorAndResults, string>(p => { return p.Outcome_Level_DESC; }),
        new Func<PIP_IndicatorAndResults, string>(p => { return p.Program_Output_Or_Outcome_DESC; }),
        new Func<PIP_IndicatorAndResults, string>(p => { return p.Indicator_DESC; }),
        null
    };

    

    private async void OnConfirmSave(bool isConfirmed, dynamic item)
    {
        if (isConfirmed && _indicator != null)
        {
            _indicator.Last_Updated_DT = DateTime.Now;
            _indicator.Date_Updated_DT = DateTime.Now;
            _indicator.Last_Updated_UserId = CurrentUser.Id;
            if (_indicator.IndicatorAndResult_ID == 0)
            {
                _indicator = Context.IndicatorAndResults.Add(_indicator).Entity;
            }
            await Context.TrackSaveChangesAsync(AuditingService);
            await OnInitializedAsync();
        }
        else if (!isConfirmed && _indicator != null)
        {
            var entry = Context.Entry(_indicator);
            entry.CurrentValues.SetValues(entry.OriginalValues);
            entry.State = EntityState.Unchanged;
            
        }
        _indicator = item;
        
        await UI.ToggleModal();

        if (!string.IsNullOrEmpty(navigationUrl))        
            NavigationManager.NavigateTo(navigationUrl);

        StateHasChanged();
    }

    private async Task HandleValidSubmit()
    {
        var messages = new List<string>() { "Would you like to save indicator data?" };
        await UI.ToggleModal(
        @<UserChoiceModal HeaderText="Save Data" ChoiceTextList=@messages OnDecision="(a) => OnConfirmSave(a, null)" ConfirmText="Yes" CancelText="No"  />);
    }

    private async Task GoToNextSheet()
    {
        navigationUrl = $"/pip/risks/{_tombstone.Tombstone_ID}";
        if (_indicator == null || !Context.ChangeTracker.HasChanges())
            NavigationManager.NavigateTo(navigationUrl);
        else
            await HandleValidSubmit();
    }

    private async Task GoToPreviousSheet()
    {
        navigationUrl = $"/pip/programs/{_tombstone.Tombstone_ID}";
        if (_indicator == null || !Context.ChangeTracker.HasChanges())
            NavigationManager.NavigateTo(navigationUrl);
        else
            await HandleValidSubmit();        
    }


    private async Task SetFormEdit(PIP_IndicatorAndResults indicator)
    {
        if (Context.ChangeTracker.HasChanges())
        {
            var messages = new List<string>() { "Data has been edited, would you like to save?" };
            await UI.ToggleModal(@<UserChoiceModal HeaderText="Save Data" ChoiceTextList=@messages OnDecision="(a) => OnConfirmSave(a, indicator)" ConfirmText="Yes" CancelText="No" />
    );
        }
        else
        {
            _indicator = indicator;
            _indicator.Last_Updated_UserName = await MSGraphService.GetUserName(_indicator.Last_Updated_UserId, CancellationToken.None);

            
            UpdateRisks();
            StateHasChanged();
            _navToEdit = true;
        }
    }



    private void UpdateRisks()
    {
        _risks.Clear();
        _risks = Context.Risks.Include(r => r.PIP_IndicatorRisks).ToList();
    }

    private string getColor(PIP_IndicatorAndResults current)
    {
        if (current == _indicator)
        {
            return "yellow";
        }
        return "";
    }

    private async Task<PIP_IndicatorAndResults> ClearForm()
    {
        _indicator = null;
        StateHasChanged();
        return null;
    }

    public string GetDataLabel(string propName)
    {
        return DataLocalizer[propName];
    }

    private List<string> headers = new List<string>
{
        "Outcome Level","Program Output or Outcome", "Indicator", "Admin Actions"
    };

    private List<Func<PIP_Risks, RenderFragment>> renderFunctions = null;


    private void ToggleRisk(PIP_Risks risk)
    {
        var storedRisks = _risks.Where(r => r.Risks_ID == risk.Risks_ID).First().PIP_IndicatorRisks.Where(i => i.Pip_Indicator.IndicatorAndResult_ID == _indicator.IndicatorAndResult_ID).ToList();
        if (storedRisks.Any(r => r.Pip_Risk == risk))
        {
            var indicatorRisk = Context.IndicatorRisks.Where(r => r.Pip_Risk == risk && r.Pip_Indicator.IndicatorAndResult_ID == _indicator.IndicatorAndResult_ID).FirstOrDefault();
            Context.IndicatorRisks.Remove(indicatorRisk);
        }
        else
        {
            var pipIndicator = Context.IndicatorAndResults.Where(i => i.IndicatorAndResult_ID == _indicator.IndicatorAndResult_ID).First();
            var indicatorRisk = new PIP_IndicatorRisks() { Pip_Indicator = pipIndicator, Pip_Risk = risk };
            Context.IndicatorRisks.Add(indicatorRisk);
        }
        Context.TrackSaveChangesAsync(AuditingService);

        UpdateRisks();
        StateHasChanged();

    }

    public void Dispose() { Context.Dispose(); }


}
