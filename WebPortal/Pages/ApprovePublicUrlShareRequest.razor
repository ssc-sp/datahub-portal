@page "/project/{ProjectAcronym}/approveshare/{FileId}"
@inject NavigationManager NavManager
@inject IPublicDataFileService PublicFileService
@inject IMSGraphService GraphService

<AeFlex>

<AeFlex Vertical>

    <AeTypography Variant="h2">@Localizer["Public URL Sharing Request"]</AeTypography>

    @if (sharingRequest != null)
    {
    <AeFlex>
        <AeCard style="margin-left: 2rem;">
            <AeTypography Variant="h3">@Localizer["File Information"]</AeTypography>

            <div>@Localizer["Filename:"] @sharingRequest.Filename_TXT</div>
            <div>@Localizer["Requesting user:"] @GetUserDisplayName(sharingRequest.RequestingUser_ID)</div>
            <div>@Localizer["Submission date:"] @sharingRequest.SubmittedDate_DT?.ToShortDateString()</div>

            <AeButton OnClickEvent=@DownloadFile>@Localizer["Download file"]</AeButton>

            <div>&nbsp;</div>
        </AeCard>

        <AeCard>

            <AeTypography Variant="h3">@Localizer["Approve Sharing Request"]</AeTypography>

            <AeTypography Variant="p">@Localizer["You may approve or deny this file sharing request, and optionally specify a publication date after which the file will be publicly accessible."]</AeTypography>
            
            <EditForm Model=@dateHolder>
                <label for="publicationDateInput">@Localizer["Publication Date"]:</label>
                @if (!approved)
                {
                    @* TODO: limit dates *@
                    <InputDate id="publicationDateInput" @bind-Value=@dateHolder.Date />
                }
                else
                {
                    <div>@dateHolder.Date?.ToShortDateString()</div>
                }
            </EditForm>
            
            <div>
                <AeButton OnClickEvent=@ApproveRequest Disabled=@ButtonsDisabled >@Localizer["Approve"]</AeButton>
                <AeButton OnClickEvent=@DenyRequest Disabled=@ButtonsDisabled >@Localizer["Deny"]</AeButton>
                @if (processing)
                {
                    <Spinner Small=@true />
                }
            </div>

            <div>&nbsp;</div>
        </AeCard>

    </AeFlex>
    }

    <div>
        <AeButton To=@DataSharingDashboardUrl>@Localizer["Back to requests"]</AeButton>
    </div>
</AeFlex>
</AeFlex>



@code {

    [Parameter]
    public string ProjectAcronym { get; set; }

    [Parameter]
    public string FileId { get; set; }

    public class DateHolder
    {
        public DateTime? Date { get; set; }
    }

    private Guid fileIdGuid;

    private PublicDataFile sharingRequest;
    private DateHolder dateHolder = new DateHolder();


    private string DataSharingDashboardUrl => $"/project/{ProjectAcronym}/datasharing";

    private bool processing = false;
    private bool approved = false;
    private bool ButtonsDisabled => processing || approved;

    private string GetUserDisplayName(string userid) => GraphService.GetUserName(userid);

    private async Task DenyRequest()
    {
        processing = true;
        await PublicFileService.DenyPublicUrlShare(fileIdGuid);
        NavManager.NavigateTo(DataSharingDashboardUrl);
    }

    private async Task ApproveRequest()
    {
        processing = true;
        await PublicFileService.ApprovePublicUrlShare(fileIdGuid, dateHolder.Date);
        await ReloadPublicDataSharingRequest();
        processing = false;
    }

    private async Task DownloadFile()
    {
        var uri = await PublicFileService.DoDownloadFile(sharingRequest);
        NavManager.NavigateTo(uri.ToString());
    }

    private async Task ReloadPublicDataSharingRequest()
    {
        sharingRequest = await PublicFileService.LoadPublicDataFileInfo(fileIdGuid);
        if (sharingRequest == null)
        {
            NavManager.NavigateTo(DataSharingDashboardUrl);
        }

        approved = sharingRequest.ApprovedDate_DT.HasValue;
        dateHolder.Date = sharingRequest.PublicationDate_DT;
    }

    protected override async Task OnInitializedAsync()
    {
        if (!Guid.TryParse(FileId, out fileIdGuid))
        {
            NavManager.NavigateTo(DataSharingDashboardUrl);
        }

        await ReloadPublicDataSharingRequest();
    }
}
