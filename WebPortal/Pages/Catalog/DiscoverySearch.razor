@*DiscoverySearch.razor*@
@page "/discovery"
@using Datahub.Metadata.DTO
@using Datahub.Core.Utils
@using Datahub.Metadata.Model

@* TODO: transfer these rules to scss, apply it to metadata keywords *@
<style>
    div.with-bottom-margin {
        margin-bottom: 0.5rem;
    }
</style>

<div style="margin: 2rem">
    <DHPageTitle PageTitleKey=@Localizer["DISCOVERY-FILTERS.Search Catalog"] />
    <AeCard>
        <ChildContent>
            <div class="catalog-page">
                <div class="filter">
                    <AeFlex Vertical>
                        <AeTypography Variant="h3">
                                        @*<span title=@_filterSectionOpenTitle>
                                            <AeIcon class=@_filterSectionOpenIconClass />
                                        </span>*@
                                        <span>@Localizer["DISCOVERY-FILTERS.Keyword Search"]</span>
                                        @*<AeIcon class=@_filterActiveIconClass />*@
                        </AeTypography>
                        <div>
                            <AeSearchInput 
                                id="search" 
                                Placeholder=@Localizer["DISCOVERY-FILTERS.Enter Keywords"] 
                                OnInputChangeWithLastKey=@HandleSearch
                                SearchIconFAClass=null
                                ClearIconFAClass=null
                            />
                        </div>

                        <AeTypography Variant="h3">@Localizer["DISCOVERY-FILTERS.Filters"]</AeTypography>
                        
                        <label>
                            <input type="checkbox" checked=@_excludeIncompleteCatalogs @onchange=@(e => ChangeIncompleteCatalogFilter(e)) />
                            <span>@Localizer["DISCOVERY-FILTERS.HideIncomplete"]</span>
                        </label>

                        @*<AeCollapse OnSectionToggled=@OnSearchFilterToggled>
                            <AeCollapseSection DefaultOpen=@_searchFilterSectionOpen>
                                <Header>
                                    <AeTypography Variant="h3">
                                        <span title=@_filterSectionOpenTitle>
                                            <AeIcon class=@_filterSectionOpenIconClass />
                                        </span>
                                        <span>@Localizer["DISCOVERY-FILTERS.Keyword Search"]</span>
                                        <AeIcon class=@_filterActiveIconClass />
                                    </AeTypography>
                                </Header>
                                <ChildContent>
                                    <AeSearchInput 
                                        id="search" 
                                        Placeholder=@Localizer["DISCOVERY-FILTERS.Enter Keywords"] 
                                        OnInputChangeWithLastKey=@HandleSearch 
                                        ClearIconFAClass="null" 
                                    />
                                </ChildContent>
                            </AeCollapseSection>
                        </AeCollapse>*@

                        <AeCollapse OnSectionToggled=@OnSecurityFilterToggled>
                            <AeCollapseSection DefaultOpen=@_securityFilterSectionOpen>
                                <Header>
                                    <AeTypography Variant="h4">
                                        <span title=@_filterSectionOpenTitle>
                                            <AeIcon class=@_filterSectionOpenIconClass />
                                        </span>
                                        <span>@Localizer["DISCOVERY-FILTERS.Security Classification"]</span>
                                        <AeIcon class=@_filterActiveIconClass />
                                    </AeTypography>
                                </Header>
                                
                                <ChildContent>
                                    <AeFlex Vertical>
                                        <div class="with-bottom-margin">
                                            <MultiCheckboxSelect 
                                                T=MetadataClassificationType
                                                Options=@(Enum.GetValues<MetadataClassificationType>())
                                                OptionLabelFunction=@(t => GetLocalizedClassificationType(t))
                                                OptionSortFunction=@(t => GetLocalizedClassificationType(t))
                                                OnSelectionChanged=@UpdateClassificationTypeFilter
                                                @ref=@_classificationTypeFilter
                                            />
                                        </div>
                                    </AeFlex>
                                </ChildContent>
                            </AeCollapseSection>
                        </AeCollapse>

                        <AeCollapse OnSectionToggled=@OnFilterToggled>
                            <AeCollapseSection DefaultOpen=@_filterSectionOpen>
                                <Header>
                                    <AeTypography Variant="h4">
                                        <span title=@_filterSectionOpenTitle>
                                            <AeIcon class=@_filterSectionOpenIconClass />
                                        </span>
                                        <span>@Localizer["DISCOVERY-FILTERS.Data Type"]</span>
                                        <AeIcon class=@_filterActiveIconClass />
                                    </AeTypography>
                                </Header>
                                <ChildContent>
                                    <AeFlex Vertical>
                                        <div class="with-bottom-margin">
                                            <MultiCheckboxSelect 
                                                T=MetadataObjectType
                                                Options=@(Enum.GetValues<MetadataObjectType>())
                                                OptionLabelFunction=@(t => GetLocalizedDataType(t))
                                                OptionSortFunction=@(t => GetLocalizedDataType(t))
                                                OnSelectionChanged=@UpdateDataTypeFilter
                                                @ref=@_objectTypeFilter
                                            />
                                        </div>
                                    </AeFlex>
                                </ChildContent>
                            </AeCollapseSection>
                        </AeCollapse>

                        <AeCollapse OnSectionToggled=@OnSectorFilterToggled>
                            <AeCollapseSection DefaultOpen=@_sectorFilterSectionOpen>
                                <Header>
                                    <AeTypography Variant="h4">
                                        <span title=@_filterSectionOpenTitle>
                                            <AeIcon class=@_filterSectionOpenIconClass />
                                        </span>
                                        <span>@Localizer["Sectors"]</span>
                                        <AeIcon class=@_filterActiveIconClass />
                                    </AeTypography>
                                </Header>
                                
                                <ChildContent>
                                    <AeFlex Vertical>
                                        <div class="with-bottom-margin">
                                            <MultiCheckboxSelect 
                                                T=OrganizationLevel
                                                Options=@(_allSectors)
                                                OptionLabelFunction=@(t => _isFrench ? t.FrenchLabel : t.EnglishLabel)
                                                OptionSortFunction=@(t => _isFrench ? t.FrenchLabel : t.EnglishLabel)
                                                OnSelectionChanged=@UpdateSectorFilter
                                                @ref=@_sectorFilter
                                            />
                                        </div>
                                        <div class="dropdowns">                                                                                        
                                            <label>
                                                @if (_filteredBranches.Count > 0)
                                                {
                                                    <select class="ae input" @bind=@BranchFilter title=@Localizer["Branch"]>
                                                        <option value=@NO_FILTER_SELECTED>@Localizer["DISCOVERY-FILTERS.(All Branches)"]</option>
                                                        @foreach(var branch in _filteredBranches)
                                                        {
                                                            <option value=@branch.Id>@GetLabel(branch)</option>
                                                        }
                                                    </select>
                                                }
                                            </label>
                                        </div>
                                    </AeFlex>
                                </ChildContent>
                            </AeCollapseSection>
                        </AeCollapse>

                        <div>
                            <AeButton OnClickEvent=@ClearFilters Disabled=@_clearFilterDisabled>@Localizer["BUTTONS.Clear"]</AeButton>
                        </div>
                    </AeFlex>
                </div>
                <div class="cards">
                    <div class="catalog-cards">
                        @if (_searchResults.Any())
                        {
                            <div>
                            @foreach(var result in _searchResults)
                            {
                                <CatalogCards 
                                    @key=@result
                                    CatalogResult=@result 
                                    IsFrench=@_isFrench
                                    Project=@GetProject(result)
                                    MapSector=@GetSector
                                    MapBranch=@GetBranch
                                >
                                    @GetDownLoadFragment(result)
                                </CatalogCards>
                            }
                            </div>
                            <div>
                                @if (CanLoadMore())
                                {
                                    <AeButton OnClickEvent=@HandleLoadMore>More...</AeButton>
                                }
                            </div>
                        }
                        else
                        {
                            @if (_searching)
                            {
                                <Spinner Small=true />
                            }
                            else
                            {
                                if (HasValidFilters())
                                {
                                    <div>
                                        No catalog records found, try different keyword and filters.
                                    </div>
                                }
                                else
                                {
                                    <div>
                                        Discovery landing page goes here...
                                    </div>
                                }
                            }
                        }
                    </div>
                </div>
            </div>
            
        </ChildContent>
    </AeCard>
</div>

@code {

    [Inject]
    public IMetadataBrokerService MetadataBrokerService { get; set; }

    [Inject]
    public IOrganizationLevelsService OrganizationLevelsService { get; set; }

    [Inject]
    public DataRetrievalService RetrievalService { get; set; }

    [Inject]
    public IJSRuntime JSRuntime { get; set; }

    [Inject]
    public IPowerBiDataService PowerBiDataService { get; set; }

    [Inject]
    public NavigationManager NavigationManager { get; set; }

    [Inject]
    public IDbContextFactory<DatahubProjectDBContext> DatahubProjectDbFactory {get; set; }

    private const int NO_FILTER_SELECTED = -1;
    private const int PAGE_SIZE = 10;

    private bool _searching;
    private string _searchKeywords;
    private QueryThrottler<string> _searchThrottler;
    private List<CatalogObjectResult> _searchResults = new();
    private bool _isFrench;
    private CatalogObjectResult _selectedResult;
    private CatalogSearchRequest? _catalogSearchRequest;
    private int _lastQueryCount = 0;

    private HashSet<OrganizationLevel> _filteredSectors = new();
    private HashSet<MetadataObjectType> _filteredDataTypes = new();
    private HashSet<MetadataClassificationType> _filteredClassificationTypes = new();

    private MultiCheckboxSelect<OrganizationLevel> _sectorFilter;
    private MultiCheckboxSelect<MetadataObjectType> _objectTypeFilter;
    private MultiCheckboxSelect<MetadataClassificationType> _classificationTypeFilter;
    private int _filterSector = NO_FILTER_SELECTED;
    private int _filterBranch = NO_FILTER_SELECTED;
    private string _securityFilter = string.Empty;
    private List<OrganizationLevel> _filteredBranches => _branches.Values.Where(b => b.ParentId == _filterSector).OrderBy(b => GetLabel(b)).ToList();

    private bool _searchFilterSectionOpen = true;
    private bool _securityFilterSectionOpen = true;
    private bool _sectorFilterSectionOpen = true;
    private bool _filterSectionOpen = true;
    private bool _excludeIncompleteCatalogs = true;
    private string _filterSectionOpenIconClass => $"fad fa-caret-circle-{(_filterSectionOpen ? "down" : "right")}";
    private string _filterSectionOpenTitle => _filterSectionOpen ? Localizer["Collapse"] : Localizer["Expand"];
    private string _filterActiveIconClass => $"{(_filtersActive ? "fas" : "fad")} fa-filter";

    private List<OrganizationLevel> _allSectors = new();
    private Dictionary<int, OrganizationLevel> _sectors = new();
    private Dictionary<int, OrganizationLevel> _branches = new();    
    private bool _filtersActive = false;
    private bool _clearFilterDisabled => !_filtersActive;

    private Dictionary<string, Datahub_Project> _projects = new();

    protected override async Task OnInitializedAsync()
    {
        _isFrench = CultureInfo.CurrentCulture.Name.StartsWith("fr", StringComparison.InvariantCulture);
        _sectors = (await OrganizationLevelsService.GetSectors()).ToDictionary(s => s.Id);
        _allSectors = await OrganizationLevelsService.GetSectors();
        _branches = (await OrganizationLevelsService.GetBranches()).ToDictionary(b => b.Id);

        await LoadProjects();

        _searchThrottler = new(TimeSpan.FromSeconds(0.5), ThrottleSearch);
        await _searchThrottler.SetQuery(string.Empty);
    }

    private async Task LoadProjects()
    {
        using var ctx = await DatahubProjectDbFactory.CreateDbContextAsync();
        _projects = await ctx.Projects.ToDictionaryAsync(p => p.Project_Acronym_CD);
    }

    private Datahub_Project GetProject(CatalogObjectResult result)
    {
        if (result.DataType == MetadataObjectType.File && _projects.ContainsKey(result.Location))
            return _projects[result.Location];
        return null;
    }

    private async Task ChangeIncompleteCatalogFilter(ChangeEventArgs e)
    {
        if (e.Value is bool)
        {
            _excludeIncompleteCatalogs = (bool)e.Value;
            await UpdateFilter();            
        }        
    }

    private string GetLocalizedDataType(MetadataObjectType dataType) => Localizer[$"DISCOVERY-DATA-TYPES.{dataType}"];

    private string GetLocalizedClassificationType(MetadataClassificationType dataType) => Localizer[$"DISCOVERY-DATA-TYPES.{dataType}"];

    private async Task UpdateSectorFilter(IEnumerable<OrganizationLevel> filteredTypes)
    {
        _filteredSectors = filteredTypes.ToHashSet();
        _filterSector = _filteredSectors.Count == 1 ? filteredTypes.ToList()[0].Id : NO_FILTER_SELECTED;
        _filterBranch = _filteredSectors.Count != 1 ? NO_FILTER_SELECTED : _filterBranch;
        await UpdateFilter();
    }

    private async Task UpdateDataTypeFilter(IEnumerable<MetadataObjectType> filteredTypes)
    {
        _filteredDataTypes = filteredTypes.ToHashSet();
        await UpdateFilter();
    }

    private async Task UpdateClassificationTypeFilter(IEnumerable<MetadataClassificationType> filteredTypes)
    {
        _filteredClassificationTypes = filteredTypes.ToHashSet();
        await UpdateFilter();
    }

    private string BranchFilter
    {
        get => _filterBranch.ToString();
        set
        {
            if (int.TryParse(value, out var intval))
            {
                _filterBranch = intval;
            }
            else
            {
                _filterBranch = NO_FILTER_SELECTED;
            }
            _ = UpdateFilter();
        }
    }

    private void GetMetadataClassificationType(string securityClass)
    {
        var enumType = Enum.Parse(typeof(MetadataClassificationType), securityClass);
    }

    private async Task UpdateFilter()
    {
        await ThrottleSearch(_searchKeywords);

        _lastClicked = 0;

        _filtersActive = _filteredSectors.Count > 0 || _filteredDataTypes.Count > 0 || _filteredClassificationTypes.Count > 0 || _filterBranch != NO_FILTER_SELECTED || !string.IsNullOrEmpty(_securityFilter);
    }

    private bool CheckMetadataCompleted(CatalogObjectResult result)
    {
        if (_excludeIncompleteCatalogs)
        {
            var fieldValues = result.Metadata;

            // name
            if (string.IsNullOrEmpty(result.Name))
                return false;

            // contact
            if (string.IsNullOrEmpty(result.Contact))
                return false;

            // security class
            if (string.IsNullOrEmpty(result.SecurityClass))
                return false;

            // subject
            if (string.IsNullOrEmpty(fieldValues.GetValue("subject")))
                return false;

            // title
            if (string.IsNullOrEmpty(fieldValues.GetValue(_isFrench ? "title_translated_fr" : "title_translated_en")))
                return false;
        }
        return true;
    }

    private async Task ClearFilters()
    {
        if (_objectTypeFilter != null)
        {
            await _objectTypeFilter.Clear();
        }

        if (_sectorFilter != null)
        {
            await _sectorFilter.Clear();
        }

        if (_classificationTypeFilter != null)
        {
            await _classificationTypeFilter.Clear();
        }

        _filterSector = NO_FILTER_SELECTED;
        _filterBranch = NO_FILTER_SELECTED;
        _securityFilter = string.Empty;

        await UpdateFilter();
    }

    private void OnFilterToggled((AeCollapseSection Section, bool Open) e)
    {
        _filterSectionOpen = e.Open;
    }

    private void OnSearchFilterToggled((AeCollapseSection Section, bool Open) e)
    {
        _searchFilterSectionOpen = e.Open;
    }
    private void OnSecurityFilterToggled((AeCollapseSection Section, bool Open) e)
    {
        _securityFilterSectionOpen = e.Open;
    }

    private void OnSectorFilterToggled((AeCollapseSection Section, bool Open) e)
    {
        _sectorFilterSectionOpen = e.Open;
    }

    // accessor functions
    private string GetName(CatalogObjectResult result) => result.Name;
    private string GetSector(CatalogObjectResult result) => GetLabel(_sectors.GetValueOrDefault(result.Sector));
    private string GetBranch(CatalogObjectResult result) => GetLabel(_branches.GetValueOrDefault(result.Branch));
    private string GetContact(CatalogObjectResult result) => result.Contact;
    private string GetDataType(CatalogObjectResult result) => GetLocalizedDataType(result.DataType);
    private string GetSecurityClass(CatalogObjectResult result) => Localizer[result.SecurityClass];
    private string GetLabel(OrganizationLevel orgLevel) => (_isFrench ? orgLevel?.FrenchLabel : orgLevel?.EnglishLabel) ?? "-";

    // renderer functions
    private RenderFragment GetDownLoadFragment(CatalogObjectResult result) =>
        SecurityClassification.Unclassified.Equals(result.SecurityClass) 
            ? GetAuthorizedDownload(result) 
            : GetUnauthorizedDownload(result);

    private RenderFragment GetAuthorizedDownload(CatalogObjectResult result) =>
        @<AeButton class="blue" onclick=@(() => HandleDownload(result))>@Localizer[GetButtonText(result)]</AeButton>;

    private RenderFragment GetUnauthorizedDownload(CatalogObjectResult result) => 
        @<AeButton class="red" onclick=@(() => HandleDownload(result))>@(SecurityClassification.ProtectedA.Equals(result.SecurityClass) ? Localizer["Protected A - Request Access"] : Localizer["Protected B - Request Access"])</AeButton>
    ;    

    private async Task HandleDownload(CatalogObjectResult result)
    {
        if (result.DataType == MetadataObjectType.File)
        {
            await DownloadFile(result);
        }
        else if (result.DataType == MetadataObjectType.FileUrl)
        {
            await DownloadFileUrl(result);
        }
        else if (result.DataType == MetadataObjectType.PowerBIReport)
        {
            await ViewPowerBIReport(result);
        }
        else if (result.DataType == MetadataObjectType.DatasetUrl)
        {
            await RedirectAndDownload(result.Location);
        }
    }

    private string GetButtonText(CatalogObjectResult result)
    {
        if (result.DataType == MetadataObjectType.File || result.DataType == MetadataObjectType.FileUrl)
        {
            return Localizer["Download File"];
        }
        else if (result.DataType == MetadataObjectType.PowerBIReport)
        {
            return Localizer["Open Report"];
        }
        else if (result.DataType == MetadataObjectType.PowerBIWorkspace)
        {
            return Localizer["Open Workspace"];
        }
        else if (result.DataType == MetadataObjectType.PowerBIDataset)
        {
            return Localizer["Open Dataset"];
        }
        else if (result.DataType == MetadataObjectType.Database)
        {
            return Localizer["Open Database"];
        }
        else if (result.DataType == MetadataObjectType.GeoObject)
        {
            return Localizer["Open Geo Object"];
        }
        return Localizer["Download File"];
    }

    private async Task ViewPowerBIReport(CatalogObjectResult result)
    {
        var metadata = await MetadataBrokerService.GetMetadata(result.ObjectMetadataId);
        if (Guid.TryParse(metadata.ObjectId_TXT, out var guid))
        {
            var report = await PowerBiDataService.GetReportById(guid);
            // TODO this url template is also used in DHLink; should only be in raw form in one place
            NavigationManager.NavigateTo($"/powerbi-report/{report.Workspace_Id}/{report.Report_ID}");
        }
    }

    private async Task DownloadFile(CatalogObjectResult result)
    {
        var uri = await RetrievalService.GetDownloadAccessToSasBlob(DataRetrievalService.DEFAULT_CONTAINER_NAME, fileName: result.Name, projectUploadCode: result.Location);
        await Task.Run(() => RedirectAndDownload(uri.ToString()));
    }

    private async Task DownloadFileUrl(CatalogObjectResult result)
    {
        await Task.Run(() => RedirectAndDownload(result.Location));
    }

    private async void HandleSearch(string newValue, KeyboardEventArgs ev)
    {
        await _searchThrottler.SetQuery(newValue);
    }

    private async Task ThrottleSearch(string searchText)
    {
        _searchResults.Clear();
        _selectedResult = null;
        _searching = true;
        await InvokeAsync(StateHasChanged);
        try
        {
            _searchKeywords = searchText;
            _searchResults = await SearchCatalog(searchText);
            //CheckCompleteneses();
            //await UpdateFilter();
        }
        finally
        {
            _searching = false;
            await InvokeAsync(StateHasChanged);
        }
    }

    private async Task<List<CatalogObjectResult>> SearchCatalog(string searchText)
    {
        if (!HasValidFilters())
        {
            _catalogSearchRequest = null;
            _lastQueryCount = 0;
            return new();
        }
        else
        {
            var keywords = (_searchKeywords ?? "").Trim().Split(' ', StringSplitOptions.RemoveEmptyEntries).ToList(); 
            var sectors = _filteredSectors.Select(s => s.Id).ToList();
            var branches = GetBranches().ToList();

            _catalogSearchRequest = new(0, 10, _isFrench, keywords, _filteredClassificationTypes.ToList(), _filteredDataTypes.ToList(), sectors, branches);
            var results = await MetadataBrokerService.SearchCatalog(_catalogSearchRequest, CheckMetadataCompleted);
            _lastQueryCount = results.Count;

            return results;
        }
    }

    private IEnumerable<int> GetBranches()
    {
        if (_filterBranch != -1)
            yield return _filterBranch;
    }

    private int _lastClicked = 0;

    private void OnPageClick(int pageIndex)
    {
        _lastClicked = pageIndex;
        _selectedResult = null;
    }

    private void ShowDetails(CatalogObjectResult result)
    {
        _selectedResult = result;
    }

    private async Task RedirectAndDownload(string url)
    {
        await JSRuntime.InvokeAsync<object>("open", url, "_blank");
    }

    private bool HasValidFilters()
    {
        return !string.IsNullOrWhiteSpace(_searchKeywords) || _filteredSectors.Any() || _filteredDataTypes.Any() || _filteredClassificationTypes.Any();
    }

    private bool CanLoadMore()
    {
        return _lastQueryCount == PAGE_SIZE;
    }

    private async Task HandleLoadMore()
    {
        var newRequest = _catalogSearchRequest with
        {
            LastPageId = _searchResults.Last().CatalogObjectId
        };

        var results = await MetadataBrokerService.SearchCatalog(newRequest, CheckMetadataCompleted);
        _lastQueryCount = results.Count;
        _searchResults.AddRange(results);

        _catalogSearchRequest = newRequest;

        await InvokeAsync(StateHasChanged);
    }
}
