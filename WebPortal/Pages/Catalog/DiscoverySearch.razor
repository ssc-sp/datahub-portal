@*DiscoverySearch.razor*@
@page "/discovery"
@using Datahub.CatalogSearch
@using Datahub.Metadata.DTO
@using Datahub.Metadata.Model

<div>
	<DHPageTitle PageTitleKey=@Localizer["DISCOVERY-FILTERS.Search Catalog"] />
	<MudCard>
		<MudCardContent>
			<MudGrid Spacing="4">
				@*left side - filters*@
				<MudItem xs="3">
					<MudStack>
						@*search keywords*@
						<MudAutocomplete 
							T="string"
							@ref="_searchField"
							Label=@Localizer["Search"]
							@bind-Value=@AutoCompleteText
							SearchFunc=@AutocompleteSearch
							ResetValueOnEmptyText="true"
							CoerceText="false" 
							CoerceValue="false"
							Clearable="true"
							Variant="Variant.Outlined"
							Adornment="Adornment.End" 
							AdornmentIcon="@Icons.Filled.Search"/>

						<MudList Clickable="false">
							@*header*@
							<MudListItem>
								<MudPaper Class="d-flex justify-space-between flex-grow-1" Elevation="0">
									<MudText Typo="Typo.h6">@Localizer["Filters"]</MudText>
									<MudIconButton Icon="@Icons.Material.Filled.Clear" 
												   Disabled=@ClearFilterDisabled
												   OnClick=@ClearFilters												   													
												   aria-label=@Localizer["Clear"]>
									</MudIconButton>
								</MudPaper>
							</MudListItem>

							@*hide incomplete*@ 
							<MudListItem>
								<MudCheckBox 
									T="bool" 
									Checked=@_excludeIncompleteCatalogs 
									CheckedChanged=@HandleHideIncompledChanged
									Label=@Localizer["DISCOVERY-FILTERS.HideIncomplete"]
								/>
							</MudListItem>

							@*language filter*@
							<MudListItem Text=@Localizer["DISCOVERY-FILTERS.Language"] 
										 @bind-Expanded=@_languageFilterSectionOpen
										 Icon=@FilterIconClass>
								<NestedList>
									<CheckboxList 
										T=CatalogObjectLanguage
										Options=@(Enum.GetValues<CatalogObjectLanguage>())
										OptionLabelFunction=@(t => GetLocalizedLanguageType(t))
										OnSelectionChanged=@UpdateLanguageFilter
										DefaultOptions=@_filteredLanguageTypes
										@ref=@_languageTypeFilter 
									/>
								</NestedList>
							</MudListItem>

							@*security classification*@
							<MudListItem Text=@Localizer["DISCOVERY-FILTERS.Security Classification"] 
										 @bind-Expanded=@_securityFilterSectionOpen
										 Icon=@FilterIconClass>
								<NestedList>
									<CheckboxList 
										T=ClassificationType
										Options=@(Enum.GetValues<ClassificationType>())
										OptionLabelFunction=@(t => GetLocalizedClassificationType(t))
										OptionSortFunction=@(t => GetLocalizedClassificationType(t))
										OnSelectionChanged=@UpdateClassificationTypeFilter
										DefaultOptions=@_filteredClassificationTypes
										@ref=@_classificationTypeFilter 
									/>
								</NestedList>
							</MudListItem>

							@*data types*@
							<MudListItem Text=@Localizer["DISCOVERY-FILTERS.Data Type"] 
										 @bind-Expanded=@_dataTypeFilterSectionOpen
										 Icon=@FilterIconClass>
								<NestedList>
									<CheckboxList 
										T=MetadataObjectType
										Options=@GetNonPBITypes()
										OptionLabelFunction=@(t => GetLocalizedDataType(t))
										OptionSortFunction=@(t => GetLocalizedDataType(t))
										OnSelectionChanged=@UpdateDataTypeFilter
										DefaultOptions=@_filteredDataTypes
									/>
									<MudListItem>Power BI</MudListItem>
									<CheckboxList 
										T=MetadataObjectType
										Options=@_pbiDataTypes
										OptionLabelFunction=@(t => GetLocalizedDataType(t))
										OptionSortFunction=@(t => GetLocalizedDataType(t))
										OnSelectionChanged=@UpdateDataTypeFilter
										DefaultOptions=@_filteredDataTypes
									/>
								</NestedList>
							</MudListItem>

							@*sectors*@
							<MudListItem Text=@Localizer["Sectors"] 
										 @bind-Expanded=@_sectorFilterSectionOpen
										 Icon=@FilterIconClass>
								<NestedList>
									<CheckboxList 
										T=OrganizationLevel
										Options=@(_allSectors)
										OptionLabelFunction=@(t => _isFrench ? t.FrenchLabel : t.EnglishLabel)
										OptionSortFunction=@(t => _isFrench ? t.FrenchLabel : t.EnglishLabel)
										OnSelectionChanged=@UpdateSectorFilter
										DefaultOptions=@_filteredSectors
										@ref=@_sectorFilter
									/>
									@*branches*@
									@{
										var filteredBranches = GetFilteredBranches();
										if (filteredBranches.Count > 0)
										{
											<MudListItem>
												<select class="ae input" @bind=@BranchFilter title=@Localizer["Branch"]>
													<option value=@NO_FILTER_SELECTED>@Localizer["DISCOVERY-FILTERS.(All Branches)"]</option>
													@foreach (var branch in filteredBranches)
													{
														<option value=@branch.Id>@GetLabel(branch, _isFrench)</option>
													}
												</select>
											</MudListItem>
										}
									}
								</NestedList>
							</MudListItem>
						</MudList>
					</MudStack>
				</MudItem>
				@*right side - catalog results*@
				<MudItem xs="9">
					<div>
						@if (_searchResults.Any())
						{
							<div class="catalog-cards">
								<InfiniteScrolling Preloaded=@_searchResults ItemsProvider=@GetMore>
									<ItemTemplate Context="item">
										<CatalogCards 
											@key=@item
											CatalogResult=@item
											Project=@GetProject(item)
											MapSector=@GetSector
											MapBranch=@GetBranch
											OnShowLinks=@HandleShowLinks
											ShowLinks>
											@RenderTypeSpecificDownloadFragment(item)
										</CatalogCards>
									</ItemTemplate>
									<LoadingTemplate>
										<div>@Localizer["Loading..."]</div>
									</LoadingTemplate>
								</InfiniteScrolling>
							</div>
						}
						else
						{
							@if (_searching)
							{
								<Spinner Small=true />
							}
							else
							{
								if (HasValidFilters())
								{
									<div>
										@Localizer["No catalog records found, try different keyword and filters."]
									</div>
								}
								else
								{
									<div>
										<DiscoverySearchLanding Sectors=@_allSectors
													IsFrench=@_isFrench
													OnClickSector=@SelectSector />
									</div>
								}
							}
						}
					</div>
				</MudItem>
			</MudGrid>
		</MudCardContent>
	</MudCard>
</div>

@code {


	[Inject]
	public ICatalogSearchEngine CatalogSearchEngine { get; set; }

	[Inject]
	public IMetadataBrokerService MetadataBrokerService { get; set; }

	[Inject]
	public IOrganizationLevelsService OrganizationLevelsService { get; set; }

	[Inject]
	public DataRetrievalService RetrievalService { get; set; }

	[Inject]
	public IPowerBiDataService PowerBiDataService { get; set; }

	[Inject]
	public NavigationManager NavigationManager { get; set; }

	[Inject]
	public IDbContextFactory<DatahubProjectDBContext> DatahubProjectDbFactory { get; set; }

	[Inject]
	public UIControlsService uiControlService { get; set; }

	[Inject]
	public IJSRuntime jsRuntime { get; set; }

	[Parameter]
	[SupplyParameterFromQuery(Name = "excl")]
	public string QueryExcludeIncomplete { get; set; }

	[Parameter]
	[SupplyParameterFromQuery(Name = "kws")]
	public string QueryKeywords { get; set; }

	[Parameter]
	[SupplyParameterFromQuery(Name = "lngs")]
	public string QueryLanguages { get; set; }

	[Parameter]
	[SupplyParameterFromQuery(Name = "orgs")]
	public string QuerySectors { get; set; }

	[Parameter]
	[SupplyParameterFromQuery(Name = "org")]
	public string QuerySector { get; set; }

	[Parameter]
	[SupplyParameterFromQuery(Name = "brn")]
	public string QueryBranch { get; set; }

	[Parameter]
	[SupplyParameterFromQuery(Name = "tps")]
	public string QueryTypes { get; set; }

	[Parameter]
	[SupplyParameterFromQuery(Name = "cls")]
	public string QueryClassifications { get; set; }

	private MudAutocomplete<string> _searchField;

	private const int NO_FILTER_SELECTED = -1;
	private const int PAGE_SIZE = 10;

	private bool _searching;
	private string _autoCompleteText;
	private string _searchKeywords;
	private List<CatalogObjectResult> _searchResults = new();
	private bool _isFrench;
	private CatalogSearchRequest _catalogSearchRequest;
	private int _lastQueryCount = 0;

	private List<MetadataObjectType> _pbiDataTypes = new() { MetadataObjectType.PowerBIWorkspace, MetadataObjectType.PowerBIReport, MetadataObjectType.PowerBIDataset };

	private HashSet<CatalogObjectLanguage> _filteredLanguageTypes = new();
	private HashSet<OrganizationLevel> _filteredSectors = new();
	private HashSet<MetadataObjectType> _filteredDataTypes = new();
	private HashSet<ClassificationType> _filteredClassificationTypes = new();

	private bool _filtersActive = false;
	private string FilterIconClass => $"{(_filtersActive ? "fas" : "fad")} fa-filter";
	private bool ClearFilterDisabled => !HasValidFilters();

	private bool _excludeIncompleteCatalogs;
	private CheckboxList<CatalogObjectLanguage> _languageTypeFilter;
	private CheckboxList<ClassificationType> _classificationTypeFilter;
	private CheckboxList<OrganizationLevel> _sectorFilter;

	private int _filterSector = NO_FILTER_SELECTED;
	private int _filterBranch = NO_FILTER_SELECTED;

	private bool _languageFilterSectionOpen = false;
	private bool _securityFilterSectionOpen = false;
	private bool _dataTypeFilterSectionOpen = false;
	private bool _sectorFilterSectionOpen = false;

	private List<OrganizationLevel> _allSectors = new();
	private Dictionary<int, OrganizationLevel> _sectors = new();
	private Dictionary<int, OrganizationLevel> _branches = new();

	private Dictionary<string, Datahub_Project> _projects = new();

	private List<CatalogObjectResult> _currentGroup = new();

	protected override async Task OnInitializedAsync()
	{
		_isFrench = CultureInfo.CurrentCulture.Name.StartsWith("fr", StringComparison.InvariantCulture);
		_sectors = (await OrganizationLevelsService.GetSectors()).ToDictionary(s => s.Id);
		_allSectors = await OrganizationLevelsService.GetSectors();
		_branches = (await OrganizationLevelsService.GetBranches()).ToDictionary(b => b.Id);

		await LoadProjects();

		ParseHideIncomplete();
		ParseLanguages();
		ParseClassification();
		ParseDataTypes();
		ParseSectorAndBranches();

		_autoCompleteText = (QueryKeywords ?? string.Empty).Trim(); 
		_searchKeywords = _autoCompleteText; 
		await UpdateFilter();
	}

	private void ParseHideIncomplete()
	{
		_excludeIncompleteCatalogs = QueryExcludeIncomplete == "1";
	}

	private void ParseLanguages()
	{
		_filteredLanguageTypes = new(ParseSet<CatalogObjectLanguage>(QueryLanguages, ',', isByte: false));
		_languageFilterSectionOpen = _filteredLanguageTypes.Count > 0;
	}

	private void ParseClassification()
	{
		_filteredClassificationTypes = new(ParseSet<ClassificationType>(QueryClassifications, ',', isByte: true));
		_securityFilterSectionOpen = _filteredClassificationTypes.Count > 0;
	}

	private void ParseDataTypes()
	{
		_filteredDataTypes = new(ParseSet<MetadataObjectType>(QueryTypes, ',', isByte: true));
		_dataTypeFilterSectionOpen = _filteredDataTypes.Count > 0;
	}

	private IEnumerable<E> ParseSet<E>(string text, char sep, bool isByte) where E: Enum
	{
		var values = (text ?? "").Split(sep, StringSplitOptions.RemoveEmptyEntries);
		foreach (var v in values)
		{
			// note: this is because the CatalogObjectLanguage is a not byte type enum
			if (isByte)
			{
				if (byte.TryParse(v, out byte ordValue) && Enum.IsDefined(typeof(E), ordValue))
				{
					yield return (E)Enum.ToObject(typeof(E), ordValue);
				}
			}
			else
			{
				if (int.TryParse(v, out int ordValue) && Enum.IsDefined(typeof(E), ordValue))
				{
					yield return (E)Enum.ToObject(typeof(E), ordValue);
				}
			}
		}
	}

	private void ParseSectorAndBranches()
	{
		var sectors = new HashSet<OrganizationLevel>();
		var values = (QuerySectors ?? "").Split(',', StringSplitOptions.RemoveEmptyEntries);
		foreach (var v in values)
		{
			if (int.TryParse(v, out int ordValue) && _sectors.TryGetValue(ordValue, out OrganizationLevel s))
			{
				sectors.Add(s);
			}
		}
		_filteredSectors = sectors;
		_filterSector = int.TryParse(QuerySector, out int sector) ? sector : NO_FILTER_SELECTED;
		_filterBranch = int.TryParse(QueryBranch, out int branch) ? sector : NO_FILTER_SELECTED;
		_sectorFilterSectionOpen = sectors.Count > 0;
	}

	private async Task LoadProjects()
	{
		using var ctx = await DatahubProjectDbFactory.CreateDbContextAsync();
		_projects = await ctx.Projects.ToDictionaryAsync(p => p.Project_Acronym_CD);
	}

	private Datahub_Project GetProject(CatalogObjectResult result)
	{
		if (result.DataType == MetadataObjectType.File && _projects.ContainsKey(result.Location))
			return _projects[result.Location];
		return null;
	}

	private async Task ChangeIncompleteCatalogFilter(ChangeEventArgs e)
	{
		if (e.Value is bool)
		{
			_excludeIncompleteCatalogs = (bool)e.Value;
			await UpdateFilter();
		}
	}

	private string GetLocalizedDataType(MetadataObjectType value) => Localizer[$"DISCOVERY-DATA-TYPES.{value}"];

	private string GetLocalizedClassificationType(ClassificationType value) => Localizer[$"DISCOVERY-CLASSIFICATION-TYPES.{value}"];

	private string GetLocalizedLanguageType(CatalogObjectLanguage value) => Localizer[$"DISCOVERY-LANGUAGE-TYPES.{value}"];

	private async Task UpdateSectorFilter(IEnumerable<OrganizationLevel> filteredTypes)
	{
		_filteredSectors = filteredTypes.ToHashSet();
		_filterSector = _filteredSectors.Count == 1 ? filteredTypes.ToList()[0].Id : NO_FILTER_SELECTED;
		_filterBranch = _filteredSectors.Count != 1 ? NO_FILTER_SELECTED : _filterBranch;
		await UpdateFilter();
	}

	private async Task SelectSector(OrganizationLevel sector)
	{
		_filteredSectors.Clear();
		_filteredSectors.Add(sector);
		_sectorFilterSectionOpen = true;
		await UpdateFilter();
	}

	private async Task UpdateDataTypeFilter(IEnumerable<MetadataObjectType> filteredTypes)
	{
		_filteredDataTypes = filteredTypes.ToHashSet();
		await UpdateFilter();
	}

	private async Task UpdateClassificationTypeFilter(IEnumerable<ClassificationType> filteredTypes)
	{
		_filteredClassificationTypes = filteredTypes.ToHashSet();
		await UpdateFilter();
	}

	private async Task UpdateLanguageFilter(IEnumerable<CatalogObjectLanguage> filteredTypes)
	{
		_filteredLanguageTypes = filteredTypes.ToHashSet();
		await UpdateFilter();
	}

	private string BranchFilter
	{
		get => _filterBranch.ToString();
		set
		{
			if (int.TryParse(value, out var intval))
			{
				_filterBranch = intval;
			}
			else
			{
				_filterBranch = NO_FILTER_SELECTED;
			}
			_ = UpdateFilter();
		}
	}

	private void GetMetadataClassificationType(string securityClass)
	{
		var enumType = Enum.Parse(typeof(ClassificationType), securityClass);
	}

	private async Task UpdateFilter()
	{
		await ThrottleSearch();
		_filtersActive = HasValidFilters();
	}

	private bool CheckValidResult(CatalogObjectResult result)
	{
		// filter incomplete metadata
		if (_excludeIncompleteCatalogs)
		{
			var fieldValues = result.Metadata;

			// name
			if (string.IsNullOrEmpty(result.Name_English))
				return false;

			// contact
			if (string.IsNullOrEmpty(result.Contact))
				return false;

			// subject
			if (string.IsNullOrEmpty(fieldValues.GetValue("subject")))
				return false;

			// title
			if (string.IsNullOrEmpty(fieldValues.GetValue(_isFrench ? "title_translated_fr" : "title_translated_en")))
				return false;
		}

		// filter Power BI workspaces
		if (result.DataType == MetadataObjectType.PowerBIWorkspace && !_filteredDataTypes.Contains(MetadataObjectType.PowerBIWorkspace))
			return false;

		// filter Power BI datasets
		if (result.DataType == MetadataObjectType.PowerBIDataset && !_filteredDataTypes.Contains(MetadataObjectType.PowerBIDataset))
			return false;

		return true;
	}

	private async Task ClearFilters()
	{
		_autoCompleteText = string.Empty;
		_searchKeywords = string.Empty;
		QueryKeywords = string.Empty;

		_filteredLanguageTypes.Clear();
		_filteredClassificationTypes.Clear();
		_filteredDataTypes.Clear();
		_filteredSectors.Clear();

		_filterSector = NO_FILTER_SELECTED;
		_filterBranch = NO_FILTER_SELECTED;

		_languageFilterSectionOpen = false;
		_securityFilterSectionOpen = false;
		_dataTypeFilterSectionOpen = false;
		_sectorFilterSectionOpen = false;

		await UpdateFilter();
		await _searchField.Clear();
		await _searchField.FocusAsync();
	}

	private string GetSector(CatalogObjectResult result, bool french) => GetLabel(_sectors.GetValueOrDefault(result.Sector), french);

	private string GetBranch(CatalogObjectResult result, bool french) => GetLabel(_branches.GetValueOrDefault(result.Branch), french);

	private string GetLabel(OrganizationLevel orgLevel, bool french) => (french ? orgLevel?.FrenchLabel : orgLevel?.EnglishLabel) ?? "-";

	// renderer functions
	private Action GetButtonAction(CatalogObjectResult result) => result.DataType switch
	{
		MetadataObjectType.File => async () => await DownloadFile(result),
		MetadataObjectType.FileUrl => async () => await DownloadFileUrl(result),
		MetadataObjectType.PowerBIReport => async () => await ViewPowerBIReport(result),
		MetadataObjectType.DatasetUrl => async () => await DownloadDatasetUrl(result),
		MetadataObjectType.DataInitiative => () => NavigationManager.NavigateTo($"projects/{result.Location}"),
		MetadataObjectType.Databricks => async () => await RedirectAndDownload(result.Location),
		_ => null
	};

	private string GetButtonCaption(CatalogObjectResult result) => result.ClassificationType switch
	{
		ClassificationType.ProtectedA => Localizer["Protected A - Request Access"],
		ClassificationType.ProtectedB => Localizer["Protected B - Request Access"],
		_ => GetButtonText(result)
	};

	private string GetButtonClass(CatalogObjectResult result) => result.ClassificationType == ClassificationType.Unclassified ? "blue" : "red";

	private RenderFragment RenderGenericDownloadButton(CatalogObjectResult result)
	{
		var action = GetButtonAction(result);
		if (action == null)
		{
			return @<MudSpacer/>;
		}
		else
		{
			return @<AeButton class=@GetButtonClass(result) onclick=@GetButtonAction(result)>@GetButtonCaption(result)</AeButton>;
		}
	}

	private RenderFragment RenderPowerBiReportFragment(CatalogObjectResult result) =>
		@<MudStack Row AlignItems=@AlignItems.Center>
			<Datahub.Portal.Pages.PowerBI.InternalPublishedPowerBIReportLinks ReportID=@result.MetadataObjectId_TXT />
			@RenderGenericDownloadButton(result)
		</MudStack>;

	private  RenderFragment RenderTypeSpecificDownloadFragment(CatalogObjectResult result) => result.DataType switch
	{
		MetadataObjectType.PowerBIReport => RenderPowerBiReportFragment(result),
		_ => RenderGenericDownloadButton(result)
	};

	private async Task DownloadDatasetUrl(CatalogObjectResult result) => await RedirectAndDownload(result.IsFrench ? result.Url_French : result.Url_English);

	private string GetButtonText(CatalogObjectResult result)
	{
		return result.DataType switch
		{
			MetadataObjectType.File or MetadataObjectType.FileUrl => Localizer["Download File"],
			MetadataObjectType.PowerBIReport => Localizer["Open Report"],
			MetadataObjectType.PowerBIWorkspace => Localizer["Open Workspace"],
			MetadataObjectType.PowerBIDataset => Localizer["Open Dataset"],
			MetadataObjectType.Database => Localizer["Open Database"],
			MetadataObjectType.GeoObject => Localizer["Open Geo Object"],
			MetadataObjectType.DataInitiative => Localizer["Open Initiative"],
			MetadataObjectType.Databricks => Localizer["Open Databricks"],
			_ => Localizer["Download"]
		};
	}

	private async Task ViewPowerBIReport(CatalogObjectResult result)
	{
		if (Guid.TryParse(result.MetadataObjectId_TXT, out var guid))
		{
			var report = await PowerBiDataService.GetReportById(guid);
			// TODO this url template is also used in DHLink; should only be in raw form in one place
			NavigationManager.NavigateTo($"/powerbi-report/{report.Workspace_Id}/{report.Report_ID}");
		}
	}

	private async Task DownloadFile(CatalogObjectResult result)
	{
		var uri = await RetrievalService.GetDownloadAccessToSasBlob(DataRetrievalService.DEFAULT_CONTAINER_NAME, fileName: result.Name_English, projectUploadCode: result.Location);
		await Task.Run(() => RedirectAndDownload(uri.ToString()));
	}

	private async Task DownloadFileUrl(CatalogObjectResult result)
	{
		await Task.Run(() => RedirectAndDownload(result.Location));
	}

	private async Task HandleSearchTextChanged(string newValue)
	{
		if (_searchKeywords != newValue)
		{
			_searchKeywords = newValue;
			await UpdateFilter();
		}
	}

	private async Task<IEnumerable<string>> AutocompleteSearch(string text)
	{
		if (!string.IsNullOrWhiteSpace(text))
		{
			var searchText = text.ToLower();
			List<string> results = new() { searchText };
			var searchEngine = _isFrench ? CatalogSearchEngine.GetFrenchSearchEngine() : CatalogSearchEngine.GetEnglishSearchEngine();
			results.AddRange(searchEngine.GetAutocompleteSuggestions(searchText, 10));
			return await Task.FromResult(results);
		}
		else
		{
			return await Task.FromResult(new string[0]);
		}
	}

	private string AutoCompleteText
	{
		get 
		{
			return _autoCompleteText;
		}
		set 
		{
			if (_autoCompleteText != value)
			{
				_autoCompleteText = value;
				_ = HandleSearchTextChanged(value);
			}
		}
	}

	private async Task ThrottleSearch()
	{
		_searchResults.Clear();
		_searching = true;
		await InvokeAsync(StateHasChanged);
		try
		{
			_searchResults = await SearchCatalog(_searchKeywords);
		}
		finally
		{
			_searching = false;
			await InvokeAsync(StateHasChanged);
		}
	}

	private async Task<List<CatalogObjectResult>> SearchCatalog(string searchText)
	{
		if (!HasValidFilters())
		{
			_catalogSearchRequest = null;
			_lastQueryCount = 0;

			await RewriteQueryString();

			return new();
		}
		else
		{
			var keywords = (_searchKeywords ?? "").Trim().Split(' ', StringSplitOptions.RemoveEmptyEntries).ToList();
			var sectors = _filteredSectors.Select(s => s.Id).ToList();
			var branches = GetBranches().ToList();

			_catalogSearchRequest = new(0, 10, _isFrench, keywords, 
				_filteredLanguageTypes.ToList(), _filteredClassificationTypes.ToList(), _filteredDataTypes.ToList(), sectors, branches);

			var results = await MetadataBrokerService.SearchCatalog(_catalogSearchRequest, CheckValidResult);
			_lastQueryCount = results.Count;

			// apply localization on bilingual entries
			ApplyLocalization(results);

			await RewriteQueryString();

			return results;
		}		
	}

	private async Task RewriteQueryString()
	{
		var queryString = GetQueryFromFilters();
		var baseUrl = GetBaseUrl();
		var newUrl = string.IsNullOrEmpty(queryString) ? baseUrl : $"{baseUrl}?{queryString}";
		await jsRuntime.InvokeVoidAsync("overrideUrl", newUrl);
	}

	private string GetQueryFromFilters()
	{
		var query = new List<string>();

		if (!string.IsNullOrEmpty(_searchKeywords))
			query.Add($"kws={_searchKeywords}");

		var langs = string.Join(",", _filteredLanguageTypes.Select(v => (int)v));
		if (!string.IsNullOrEmpty(langs))
			query.Add($"lngs={langs}");

		var classifications = string.Join(",", _filteredClassificationTypes.Select(v => (int)v));
		if (!string.IsNullOrEmpty(classifications))
			query.Add($"cls={classifications}");
		
		var types = string.Join(",", _filteredDataTypes.Select(v => (int)v));
		if (!string.IsNullOrEmpty(types))
			query.Add($"tps={types}");

		var sectors = string.Join(",", _filteredSectors.Select(s => s.Id));
		if (!string.IsNullOrEmpty(sectors))
			query.Add($"orgs={sectors}");

		if (_filterSector != NO_FILTER_SELECTED)
			query.Add($"org={_filterSector}");

		if (_filterBranch != NO_FILTER_SELECTED)
			query.Add($"brn={_filterBranch}");

		if (_excludeIncompleteCatalogs)
			query.Add($"excl=1");

		return string.Join("&", query);
	}

	private string GetBaseUrl()
    {
		var url = NavigationManager.Uri;
		var hashIndex = url.IndexOf('?');
        return hashIndex > 0 ? url.Substring(0, hashIndex) : url;
    }

	private void ApplyLocalization(List<CatalogObjectResult> results)
	{
		foreach (var r in results)
		{
			r.IsFrench = r.Language == CatalogObjectLanguage.Bilingual ? _isFrench : r.Language == CatalogObjectLanguage.French;
		}
	}

	private IEnumerable<int> GetBranches()
	{
		if (_filterBranch != -1)
			yield return _filterBranch;
	}

	private async Task RedirectAndDownload(string url)
	{
		await jsRuntime.InvokeAsync<object>("open", url, "_blank");
	}

	private bool HasValidFilters(string query = null)
	{
		return !string.IsNullOrWhiteSpace(query) || !string.IsNullOrWhiteSpace(_searchKeywords) || _filteredLanguageTypes.Any() ||
			_filteredSectors.Any() || _filteredDataTypes.Any() || _filteredClassificationTypes.Any() || _filteredLanguageTypes.Any();
	}

	private async Task<IEnumerable<CatalogObjectResult>> GetMore(InfiniteScrollingItemsProviderRequest<CatalogObjectResult> request)
	{
		// if keywords are used there is no more results
		if (_catalogSearchRequest.Keywords.Count > 0)
			return new List<CatalogObjectResult>();

		var newRequest = _catalogSearchRequest with
        {
            LastPageId = request.Items.LastOrDefault()?.CatalogObjectId ?? 0
        };

		var newResults = await MetadataBrokerService.SearchCatalog(newRequest, CheckValidResult);
		_searchResults.AddRange(newResults);

		return newResults;
	}

	private async Task ShowGroup(List<CatalogObjectResult> group)
    {
        RenderFragment groupFragment = 
			@<div class="cards">
				<div class="catalog-cards">
					<CatalogCardGroup
						CatalogResults=@group
						GetProject=@GetProject
						MapSector=@GetSector
						MapBranch=@GetBranch
						GetDownLoadFragment=@RenderTypeSpecificDownloadFragment />
				</div>
			</div>;
		await uiControlService.ToggleModal(@<RenderFragmentModal Fragment=@groupFragment />);
	}

	private async Task HandleShowLinks(CatalogObjectResult result)
	{
		if (result.GroupId.HasValue)
		{
			var group = await MetadataBrokerService.GetCatalogGroup(result.GroupId.Value);

			// apply localization on bilingual entries
			ApplyLocalization(group);

			await ShowGroup(group);
		}
	}

	private async Task HandleHideIncompledChanged(bool value)
	{
		_excludeIncompleteCatalogs = value;
		await UpdateFilter();
	}

	private List<OrganizationLevel> GetFilteredBranches()
	{
		return _branches.Values
			.Where(b => b.ParentId == _filterSector)
			.OrderBy(b => GetLabel(b, _isFrench))
			.ToList();
	}

	private IEnumerable<MetadataObjectType> GetNonPBITypes()
	{
		return Enum.GetValues<MetadataObjectType>().Where(t => !_pbiDataTypes.Contains(t));
	}
}
