@*DiscoverySearch.razor*@

@page "/discovery"
@using Datahub.Metadata.DTO
@using Datahub.Core.Utils
@using Datahub.Metadata.Model
@inject UIControlsService uiControlService
@inject IJSRuntime jsRuntime

@* TODO: transfer these rules to scss, apply it to metadata keywords *@
<style>
	div.with-bottom-margin {
		margin-bottom: 0.5rem;
	}
</style>

<div style="margin: 2rem">
	<DHPageTitle PageTitleKey=@Localizer["DISCOVERY-FILTERS.Search Catalog"] />
	<AeCard>
		<ChildContent>
			<div class="catalog-page">
				<div class="filter">
					<AeFlex Vertical>
						<AeTypography Variant="h3">
							@*<span title=@_filterSectionOpenTitle>
							<MudIcon Icon=@_filterSectionOpenIconClass />
							</span>*@
							<span>@Localizer["DISCOVERY-FILTERS.Keyword Search"]</span>
							@*<MudIcon Icon=@_filterActiveIconClass />*@
						</AeTypography>
						<div>
							<AeSearchInput id="search"
										   Placeholder=@Localizer["DISCOVERY-FILTERS.Enter Keywords"]
										   DefaultValue=@QueryKeywords
										   OnInputChangeWithLastKey=@HandleSearch
										   SearchIconFAClass=null
										   ClearIconFAClass=null />
						</div>

						<AeTypography Variant="h3">@Localizer["DISCOVERY-FILTERS.Filters"]</AeTypography>

						<label>
							<input type="checkbox" checked=@_excludeIncompleteCatalogs @onchange=@ChangeIncompleteCatalogFilter />
							<span>@Localizer["DISCOVERY-FILTERS.HideIncomplete"]</span>
						</label>

						<AeCollapse>
							<AeCollapseSection DefaultOpen=@_languageFilterSectionOpen>
								<Header>
									<AeTypography Variant="h4">
										<span title=@_filterSectionOpenTitle>
											<MudIcon Icon=@_filterSectionOpenIconClass />
										</span>
										<span>@Localizer["DISCOVERY-FILTERS.Language"]</span>
										<MudIcon Icon=@_filterActiveIconClass />
									</AeTypography>
								</Header>

								<ChildContent>
									<AeFlex Vertical>
										<div class="with-bottom-margin">
											<MultiCheckboxSelect T=CatalogObjectLanguage
																 Options=@(Enum.GetValues<CatalogObjectLanguage>())
																 OptionLabelFunction=@(t => GetLocalizedLanguageType(t))
																 OptionSortFunction=@(t => GetLocalizedLanguageType(t))
																 OnSelectionChanged=@UpdateLanguageFilter
																 DefaultOptions=@_filteredLanguageTypes
																 @ref=@_languageTypeFilter />
										</div>
									</AeFlex>
								</ChildContent>
							</AeCollapseSection>
						</AeCollapse>

						<AeCollapse>
							<AeCollapseSection DefaultOpen=@_securityFilterSectionOpen>
								<Header>
									<AeTypography Variant="h4">
										<span title=@_filterSectionOpenTitle>
											<MudIcon Icon=@_filterSectionOpenIconClass />
										</span>
										<span>@Localizer["DISCOVERY-FILTERS.Security Classification"]</span>
										<MudIcon Icon=@_filterActiveIconClass />
									</AeTypography>
								</Header>

								<ChildContent>
									<AeFlex Vertical>
										<div class="with-bottom-margin">
											<MultiCheckboxSelect T=ClassificationType
																 Options=@(Enum.GetValues<ClassificationType>())
																 OptionLabelFunction=@(t => GetLocalizedClassificationType(t))
																 OptionSortFunction=@(t => GetLocalizedClassificationType(t))
																 OnSelectionChanged=@UpdateClassificationTypeFilter
																 DefaultOptions=@_filteredClassificationTypes
																 @ref=@_classificationTypeFilter />
										</div>
									</AeFlex>
								</ChildContent>
							</AeCollapseSection>
						</AeCollapse>

						<AeCollapse>
							<AeCollapseSection DefaultOpen=@_filterSectionOpen>
								<Header>
									<AeTypography Variant="h4">
										<span title=@_filterSectionOpenTitle>
											<MudIcon Icon=@_filterSectionOpenIconClass />
										</span>
										<span>@Localizer["DISCOVERY-FILTERS.Data Type"]</span>
										<MudIcon Icon=@_filterActiveIconClass />
									</AeTypography>
								</Header>
								<ChildContent>
									<AeFlex Vertical>
										<div class="with-bottom-margin">
											<MultiCheckboxSelect T=MetadataObjectType
																 Options=@(Enum.GetValues<MetadataObjectType>())
																 OptionLabelFunction=@(t => GetLocalizedDataType(t))
																 OptionSortFunction=@(t => GetLocalizedDataType(t))
																 OnSelectionChanged=@UpdateDataTypeFilter
																 DefaultOptions=@_filteredDataTypes
																 @ref=@_objectTypeFilter />
										</div>
									</AeFlex>
								</ChildContent>
							</AeCollapseSection>
						</AeCollapse>

						<AeCollapse>
							<AeCollapseSection DefaultOpen=@_sectorFilterSectionOpen>
								<Header>
									<AeTypography Variant="h4">
										<span title=@_filterSectionOpenTitle>
											<MudIcon Icon=@_filterSectionOpenIconClass />
										</span>
										<span>@Localizer["Sectors"]</span>
										<MudIcon Icon=@_filterActiveIconClass />
									</AeTypography>
								</Header>

								<ChildContent>
									<AeFlex Vertical>
										<div class="with-bottom-margin">
											<MultiCheckboxSelect T=OrganizationLevel
																 Options=@(_allSectors)
																 OptionLabelFunction=@(t => _isFrench ? t.FrenchLabel : t.EnglishLabel)
																 OptionSortFunction=@(t => _isFrench ? t.FrenchLabel : t.EnglishLabel)
																 OnSelectionChanged=@UpdateSectorFilter
																 DefaultOptions=@_filteredSectors
																 @ref=@_sectorFilter />
										</div>
										<div class="dropdowns">
											<label>
												@if (_filteredBranches.Count > 0)
												{
													<select class="ae input" @bind=@BranchFilter title=@Localizer["Branch"]>
														<option value=@NO_FILTER_SELECTED>@Localizer["DISCOVERY-FILTERS.(All Branches)"]</option>
														@foreach (var branch in _filteredBranches)
														{
															<option value=@branch.Id>@GetLabel(branch, _isFrench)</option>
														}
													</select>
												}
											</label>
										</div>
									</AeFlex>
								</ChildContent>
							</AeCollapseSection>
						</AeCollapse>

						<div>
							<AeButton OnClickEvent=@ClearFilters Disabled=@ClearFilterDisabled>@Localizer["BUTTONS.Clear"]</AeButton>
						</div>
					</AeFlex>
				</div>
				<div class="cards">
					<div>
						@if (_searchResults.Any())
						{
							<div class="catalog-cards">
								<InfiniteScrolling Preloaded=@_searchResults ItemsProvider=@GetMore>
									<ItemTemplate Context="item">
										<CatalogCards @key=@item
												  CatalogResult=@item
												  Project=@GetProject(item)
												  MapSector=@GetSector
												  MapBranch=@GetBranch
												  OnShowLinks=@HandleShowLinks
												  ShowLinks>
											@GetDownLoadFragment(item)
										</CatalogCards>
									</ItemTemplate>
									<LoadingTemplate>
										<div>@Localizer["Loading..."]</div>
									</LoadingTemplate>
								</InfiniteScrolling>
							</div>
						}
						else
						{
							@if (_searching)
							{
								<Spinner Small=true />
							}
							else
							{
								if (HasValidFilters())
								{
									<div>
										No catalog records found, try different keyword and filters.
									</div>
								}
								else
								{
									<div>
                                        <DiscoverySearchLanding Sectors=@_allSectors 
                                                                IsFrench=@_isFrench 
                                                                OnClickSector=@SelectSector />
									</div>
								}
							}
						}
					</div>
				</div>
			</div>

		</ChildContent>
	</AeCard>
</div>

@code {

	[Inject]
	public IMetadataBrokerService MetadataBrokerService { get; set; }

	[Inject]
	public IOrganizationLevelsService OrganizationLevelsService { get; set; }

	[Inject]
	public DataRetrievalService RetrievalService { get; set; }

	[Inject]
	public IJSRuntime JSRuntime { get; set; }

	[Inject]
	public IPowerBiDataService PowerBiDataService { get; set; }

	[Inject]
	public NavigationManager NavigationManager { get; set; }

	[Inject]
	public IDbContextFactory<DatahubProjectDBContext> DatahubProjectDbFactory { get; set; }

	[Parameter]
	[SupplyParameterFromQuery(Name = "excl")]
	public string QueryExcludeIncomplete { get; set; }

	[Parameter]
	[SupplyParameterFromQuery(Name = "kws")]
	public string QueryKeywords { get; set; }

	[Parameter]
	[SupplyParameterFromQuery(Name = "lngs")]
	public string QueryLanguages { get; set; }

	[Parameter]
	[SupplyParameterFromQuery(Name = "orgs")]
	public string QuerySectors { get; set; }

	[Parameter]
	[SupplyParameterFromQuery(Name = "org")]
	public string QuerySector { get; set; }

	[Parameter]
	[SupplyParameterFromQuery(Name = "brn")]
	public string QueryBranch { get; set; }

	[Parameter]
	[SupplyParameterFromQuery(Name = "tps")]
	public string QueryTypes { get; set; }

	[Parameter]
	[SupplyParameterFromQuery(Name = "cls")]
	public string QueryClassifications { get; set; }

	private const int NO_FILTER_SELECTED = -1;
	private const int PAGE_SIZE = 10;

	private bool _searching;
	private string _searchKeywords;
	private QueryThrottler<string> _searchThrottler;
	private List<CatalogObjectResult> _searchResults = new();
	private bool _isFrench;
	private CatalogSearchRequest _catalogSearchRequest;
	private int _lastQueryCount = 0;

	private HashSet<CatalogObjectLanguage> _filteredLanguageTypes = new();
	private HashSet<OrganizationLevel> _filteredSectors = new();
	private HashSet<MetadataObjectType> _filteredDataTypes = new();
	private HashSet<ClassificationType> _filteredClassificationTypes = new();

	private MultiCheckboxSelect<CatalogObjectLanguage> _languageTypeFilter;
	private MultiCheckboxSelect<OrganizationLevel> _sectorFilter;
	private MultiCheckboxSelect<MetadataObjectType> _objectTypeFilter;
	private MultiCheckboxSelect<ClassificationType> _classificationTypeFilter;

	private int _filterSector = NO_FILTER_SELECTED;
	private int _filterBranch = NO_FILTER_SELECTED;
	private string _securityFilter = string.Empty;
	private List<OrganizationLevel> _filteredBranches => _branches.Values.Where(b => b.ParentId == _filterSector).OrderBy(b => GetLabel(b, _isFrench)).ToList();

	private bool _searchFilterSectionOpen = true;
	private bool _languageFilterSectionOpen = true;
	private bool _securityFilterSectionOpen = true;
	private bool _sectorFilterSectionOpen = true;
	private bool _filterSectionOpen = true;
	private bool _excludeIncompleteCatalogs;
	private string _filterSectionOpenIconClass => $"fad fa-caret-circle-{(_filterSectionOpen ? "down" : "right")}";
	private string _filterSectionOpenTitle => _filterSectionOpen ? Localizer["Collapse"] : Localizer["Expand"];
	private string _filterActiveIconClass => $"{(_filtersActive ? "fas" : "fad")} fa-filter";

	private List<OrganizationLevel> _allSectors = new();
	private Dictionary<int, OrganizationLevel> _sectors = new();
	private Dictionary<int, OrganizationLevel> _branches = new();
	private bool _filtersActive = false;
	private bool ClearFilterDisabled => !HasValidFilters();

	private Dictionary<string, Datahub_Project> _projects = new();

	private List<CatalogObjectResult> _currentGroup = new();

	protected override async Task OnInitializedAsync()
	{
		_isFrench = CultureInfo.CurrentCulture.Name.StartsWith("fr", StringComparison.InvariantCulture);
		_sectors = (await OrganizationLevelsService.GetSectors()).ToDictionary(s => s.Id);
		_allSectors = await OrganizationLevelsService.GetSectors();
		_branches = (await OrganizationLevelsService.GetBranches()).ToDictionary(b => b.Id);

		await LoadProjects();

		ParseHideIncomplete();
		ParseLanguages();
		ParseClassification();
		ParseDataTypes();
		ParseSectorAndBranches();

		_searchThrottler = new(TimeSpan.FromSeconds(1), ThrottleSearch);
		await _searchThrottler.SetQuery(QueryKeywords ?? string.Empty);

		_filtersActive = HasValidFilters();
	}

	private void ParseHideIncomplete()
	{
		_excludeIncompleteCatalogs = QueryExcludeIncomplete == "1";
	}

	private void ParseLanguages()
	{
		_filteredLanguageTypes = new(ParseSet<CatalogObjectLanguage>(QueryLanguages, ',', isByte: false));
	}

	private void ParseClassification()
	{
		_filteredClassificationTypes = new(ParseSet<ClassificationType>(QueryClassifications, ',', isByte: true));
	}

	private void ParseDataTypes()
	{
		_filteredDataTypes = new(ParseSet<MetadataObjectType>(QueryTypes, ',', isByte: true));
	}

	private IEnumerable<E> ParseSet<E>(string text, char sep, bool isByte) where E: Enum
	{
		var values = (text ?? "").Split(sep, StringSplitOptions.RemoveEmptyEntries);
		foreach (var v in values)
		{
			// note: this is because the CatalogObjectLanguage is a not byte type enum
			if (isByte)
			{
				if (byte.TryParse(v, out byte ordValue) && Enum.IsDefined(typeof(E), ordValue))
				{
					yield return (E)Enum.ToObject(typeof(E), ordValue);
				}
			}
			else
			{
				if (int.TryParse(v, out int ordValue) && Enum.IsDefined(typeof(E), ordValue))
				{
					yield return (E)Enum.ToObject(typeof(E), ordValue);
				}
			}
		}
	}

	private void ParseSectorAndBranches()
	{
		var sectors = new HashSet<OrganizationLevel>();
		var values = (QuerySectors ?? "").Split(',', StringSplitOptions.RemoveEmptyEntries);
		foreach (var v in values)
		{
			if (int.TryParse(v, out int ordValue) && _sectors.TryGetValue(ordValue, out OrganizationLevel s))
			{
				sectors.Add(s);
			}
		}
		_filteredSectors = sectors;
		_filterSector = int.TryParse(QuerySector, out int sector) ? sector : NO_FILTER_SELECTED;
		_filterBranch = int.TryParse(QueryBranch, out int branch) ? sector : NO_FILTER_SELECTED;
	}

	private async Task LoadProjects()
	{
		using var ctx = await DatahubProjectDbFactory.CreateDbContextAsync();
		_projects = await ctx.Projects.ToDictionaryAsync(p => p.Project_Acronym_CD);
	}

	private Datahub_Project GetProject(CatalogObjectResult result)
	{
		if (result.DataType == MetadataObjectType.File && _projects.ContainsKey(result.Location))
			return _projects[result.Location];
		return null;
	}

	private async Task ChangeIncompleteCatalogFilter(ChangeEventArgs e)
	{
		if (e.Value is bool)
		{
			_excludeIncompleteCatalogs = (bool)e.Value;
			await UpdateFilter();
		}
	}

	private string GetLocalizedDataType(MetadataObjectType dataType) => Localizer[$"DISCOVERY-DATA-TYPES.{dataType}"];

	private string GetLocalizedClassificationType(ClassificationType dataType) => Localizer[$"DISCOVERY-DATA-TYPES.{dataType}"];

	private string GetLocalizedLanguageType(CatalogObjectLanguage dataType) => Localizer[$"DISCOVERY-DATA-TYPES.{dataType}"];

	private async Task UpdateSectorFilter(IEnumerable<OrganizationLevel> filteredTypes)
	{
		_filteredSectors = filteredTypes.ToHashSet();
		_filterSector = _filteredSectors.Count == 1 ? filteredTypes.ToList()[0].Id : NO_FILTER_SELECTED;
		_filterBranch = _filteredSectors.Count != 1 ? NO_FILTER_SELECTED : _filterBranch;
		await UpdateFilter();
	}

	private async Task SelectSector(OrganizationLevel sector)
	{
		await _sectorFilter.Clear();
		await _sectorFilter.Select(sector);
	}

	private async Task UpdateDataTypeFilter(IEnumerable<MetadataObjectType> filteredTypes)
	{
		_filteredDataTypes = filteredTypes.ToHashSet();
		await UpdateFilter();
	}

	private async Task UpdateClassificationTypeFilter(IEnumerable<ClassificationType> filteredTypes)
	{
		_filteredClassificationTypes = filteredTypes.ToHashSet();
		await UpdateFilter();
	}

	private async Task UpdateLanguageFilter(IEnumerable<CatalogObjectLanguage> filteredTypes)
	{
		_filteredLanguageTypes = filteredTypes.ToHashSet();
		await UpdateFilter();
	}

	private string BranchFilter
	{
		get => _filterBranch.ToString();
		set
		{
			if (int.TryParse(value, out var intval))
			{
				_filterBranch = intval;
			}
			else
			{
				_filterBranch = NO_FILTER_SELECTED;
			}
			_ = UpdateFilter();
		}
	}

	private void GetMetadataClassificationType(string securityClass)
	{
		var enumType = Enum.Parse(typeof(ClassificationType), securityClass);
	}

	private async Task UpdateFilter()
	{
		await ThrottleSearch(_searchKeywords);
		_filtersActive = HasValidFilters();
	}

	private bool CheckMetadataCompleted(CatalogObjectResult result)
	{
		if (_excludeIncompleteCatalogs)
		{
			var fieldValues = result.Metadata;

			// name
			if (string.IsNullOrEmpty(result.Name_English))
				return false;

			// contact
			if (string.IsNullOrEmpty(result.Contact))
				return false;

			// subject
			if (string.IsNullOrEmpty(fieldValues.GetValue("subject")))
				return false;

			// title
			if (string.IsNullOrEmpty(fieldValues.GetValue(_isFrench ? "title_translated_fr" : "title_translated_en")))
				return false;
		}
		return true;
	}

	private async Task ClearFilters()
	{
		_searchKeywords = string.Empty;
		QueryKeywords = string.Empty;

		if (_languageTypeFilter != null)
		{
			await _languageTypeFilter.Clear();
		}

		if (_objectTypeFilter != null)
		{
			await _objectTypeFilter.Clear();
		}

		if (_sectorFilter != null)
		{
			await _sectorFilter.Clear();
		}

		if (_classificationTypeFilter != null)
		{
			await _classificationTypeFilter.Clear();
		}

		_filterSector = NO_FILTER_SELECTED;
		_filterBranch = NO_FILTER_SELECTED;
		_securityFilter = string.Empty;

		await UpdateFilter();
	}

	private void OnFilterToggled((AeCollapseSection Section, bool Open) e)
	{
		_filterSectionOpen = e.Open;
	}

	private void OnSearchFilterToggled((AeCollapseSection Section, bool Open) e)
	{
		_searchFilterSectionOpen = e.Open;
	}

	private void OnSecurityFilterToggled((AeCollapseSection Section, bool Open) e)
	{
		_securityFilterSectionOpen = e.Open;
	}

	private void OnSectorFilterToggled((AeCollapseSection Section, bool Open) e)
	{
		_sectorFilterSectionOpen = e.Open;
	}

	private void OnLanguageFilterToggled((AeCollapseSection Section, bool Open) e)
	{
		_languageFilterSectionOpen = e.Open;
	}

    private string GetSector(CatalogObjectResult result, bool french) => GetLabel(_sectors.GetValueOrDefault(result.Sector), french);

    private string GetBranch(CatalogObjectResult result, bool french) => GetLabel(_branches.GetValueOrDefault(result.Branch), french);

    private string GetLabel(OrganizationLevel orgLevel, bool french) => (french ? orgLevel?.FrenchLabel : orgLevel?.EnglishLabel) ?? "-";

    // renderer functions
    private RenderFragment GetDownLoadFragment(CatalogObjectResult result) => 
		result.ClassificationType == ClassificationType.Unclassified ? GetAuthorizedDownload(result) : GetUnauthorizedDownload(result);

    private RenderFragment GetAuthorizedDownload(CatalogObjectResult result) =>
		@<AeButton class="blue" onclick=@(() => HandleDownload(result))>@Localizer[GetButtonText(result)]</AeButton>;

	private RenderFragment GetUnauthorizedDownload(CatalogObjectResult result)
	{
		var label = result.ClassificationType == ClassificationType.ProtectedA ? Localizer["Protected A - Request Access"] : Localizer["Protected B - Request Access"];
		return @<AeButton class="red" onclick=@(() => HandleDownload(result))>@label</AeButton>
	;
	}

	private async Task HandleDownload(CatalogObjectResult result)
	{
		if (result.DataType == MetadataObjectType.File)
		{
			await DownloadFile(result);
		}
		else if (result.DataType == MetadataObjectType.FileUrl)
		{
			await DownloadFileUrl(result);
		}
		else if (result.DataType == MetadataObjectType.PowerBIReport)
		{
			await ViewPowerBIReport(result);
		}
		else if (result.DataType == MetadataObjectType.DatasetUrl)
		{
			await RedirectAndDownload(result.IsFrench ? result.Url_French : result.Url_English);
		}
	}

	private string GetButtonText(CatalogObjectResult result)
	{
		if (result.DataType == MetadataObjectType.File || result.DataType == MetadataObjectType.FileUrl)
		{
			return Localizer["Download File"];
		}
		else if (result.DataType == MetadataObjectType.PowerBIReport)
		{
			return Localizer["Open Report"];
		}
		else if (result.DataType == MetadataObjectType.PowerBIWorkspace)
		{
			return Localizer["Open Workspace"];
		}
		else if (result.DataType == MetadataObjectType.PowerBIDataset)
		{
			return Localizer["Open Dataset"];
		}
		else if (result.DataType == MetadataObjectType.Database)
		{
			return Localizer["Open Database"];
		}
		else if (result.DataType == MetadataObjectType.GeoObject)
		{
			return Localizer["Open Geo Object"];
		}
		return Localizer["Download File"];
	}

	private async Task ViewPowerBIReport(CatalogObjectResult result)
	{
		var metadata = await MetadataBrokerService.GetMetadata(result.ObjectMetadataId);
		if (Guid.TryParse(metadata.ObjectId_TXT, out var guid))
		{
			var report = await PowerBiDataService.GetReportById(guid);
			// TODO this url template is also used in DHLink; should only be in raw form in one place
			NavigationManager.NavigateTo($"/powerbi-report/{report.Workspace_Id}/{report.Report_ID}");
		}
	}

	private async Task DownloadFile(CatalogObjectResult result)
	{
		var uri = await RetrievalService.GetDownloadAccessToSasBlob(DataRetrievalService.DEFAULT_CONTAINER_NAME, fileName: result.Name_English, projectUploadCode: result.Location);
		await Task.Run(() => RedirectAndDownload(uri.ToString()));
	}

	private async Task DownloadFileUrl(CatalogObjectResult result)
	{
		await Task.Run(() => RedirectAndDownload(result.Location));
	}

	private async void HandleSearch(string newValue, KeyboardEventArgs ev)
	{
		await _searchThrottler.SetQuery(newValue);
	}

	private async Task ThrottleSearch(string searchText)
	{
		_searchResults.Clear();
		_searching = true;
		await InvokeAsync(StateHasChanged);
		try
		{
			_searchKeywords = searchText;
			_searchResults = await SearchCatalog(searchText);
		}
		finally
		{
			_searching = false;
			await InvokeAsync(StateHasChanged);
		}
	}

	private async Task<List<CatalogObjectResult>> SearchCatalog(string searchText)
	{
		if (!HasValidFilters())
		{
			_catalogSearchRequest = null;
			_lastQueryCount = 0;

			await RewriteQueryString();

			return new();
		}
		else
		{
			var keywords = (_searchKeywords ?? "").Trim().Split(' ', StringSplitOptions.RemoveEmptyEntries).ToList();
			var sectors = _filteredSectors.Select(s => s.Id).ToList();
			var branches = GetBranches().ToList();

			_catalogSearchRequest = new(0, 10, _isFrench, keywords, 
				_filteredLanguageTypes.ToList(), _filteredClassificationTypes.ToList(), _filteredDataTypes.ToList(), sectors, branches);

			var results = await MetadataBrokerService.SearchCatalog(_catalogSearchRequest, CheckMetadataCompleted);
			_lastQueryCount = results.Count;

			// apply localization on bilingual entries
			ApplyLocalization(results);

			await RewriteQueryString();

			return results;
		}		
	}

	private async Task RewriteQueryString()
	{
		var queryString = GetQueryFromFilters();
		var baseUrl = GetBaseUrl();
		var newUrl = string.IsNullOrEmpty(queryString) ? baseUrl : $"{baseUrl}?{queryString}";
		await jsRuntime.InvokeVoidAsync("overrideUrl", newUrl);
	}

	private string GetQueryFromFilters()
	{
		var query = new List<string>();

		if (!string.IsNullOrEmpty(_searchKeywords))
			query.Add($"kws={_searchKeywords}");

		var langs = string.Join(",", _filteredLanguageTypes.Select(v => (int)v));
		if (!string.IsNullOrEmpty(langs))
			query.Add($"lngs={langs}");

		var classifications = string.Join(",", _filteredClassificationTypes.Select(v => (int)v));
		if (!string.IsNullOrEmpty(classifications))
			query.Add($"cls={classifications}");
		
		var types = string.Join(",", _filteredDataTypes.Select(v => (int)v));
		if (!string.IsNullOrEmpty(types))
			query.Add($"tps={types}");

		var sectors = string.Join(",", _filteredSectors.Select(s => s.Id));
		if (!string.IsNullOrEmpty(sectors))
			query.Add($"orgs={sectors}");

		if (_filterSector != NO_FILTER_SELECTED)
			query.Add($"org={_filterSector}");

		if (_filterBranch != NO_FILTER_SELECTED)
			query.Add($"brn={_filterBranch}");

		if (_excludeIncompleteCatalogs)
			query.Add($"excl=1");

		return string.Join("&", query);
	}

	private string GetBaseUrl()
    {
		var url = NavigationManager.Uri;
		var hashIndex = url.IndexOf('?');
        return hashIndex > 0 ? url.Substring(0, hashIndex) : url;
    }

	private void ApplyLocalization(List<CatalogObjectResult> results)
	{
		foreach (var r in results)
		{
			r.IsFrench = r.Language == CatalogObjectLanguage.Bilingual ? _isFrench : r.Language == CatalogObjectLanguage.French;
		}
	}

	private IEnumerable<int> GetBranches()
	{
		if (_filterBranch != -1)
			yield return _filterBranch;
	}

	private async Task RedirectAndDownload(string url)
	{
		await JSRuntime.InvokeAsync<object>("open", url, "_blank");
	}

	private bool HasValidFilters(string query = null)
	{
		return !string.IsNullOrWhiteSpace(query) || !string.IsNullOrWhiteSpace(_searchKeywords) || _filteredLanguageTypes.Any() ||
			_filteredSectors.Any() || _filteredDataTypes.Any() || _filteredClassificationTypes.Any() || _filteredLanguageTypes.Any();
	}

	private async Task<IEnumerable<CatalogObjectResult>> GetMore(InfiniteScrollingItemsProviderRequest<CatalogObjectResult> request)
	{
		var newRequest = _catalogSearchRequest with
        {
            LastPageId = request.Items.LastOrDefault()?.CatalogObjectId ?? 0
        };

		var newResults = await MetadataBrokerService.SearchCatalog(newRequest, CheckMetadataCompleted);
		_searchResults.AddRange(newResults);

		return newResults;
	}

	private async Task ShowGroup(List<CatalogObjectResult> group)
    {
        RenderFragment groupFragment = 
		@<div class="cards">
			<div class="catalog-cards">
				<CatalogCardGroup
					CatalogResults=@group
					GetProject=@GetProject
					MapSector=@GetSector
					MapBranch=@GetBranch
					GetDownLoadFragment=@GetDownLoadFragment
				/>
			</div>
		</div>;
		await uiControlService.ToggleModal(@<RenderFragmentModal Fragment=@groupFragment />);
	}

	private async Task HandleShowLinks(CatalogObjectResult result)
	{
		if (result.GroupId.HasValue)
		{
			var group = await MetadataBrokerService.GetCatalogGroup(result.GroupId.Value);

			// apply localization on bilingual entries
			ApplyLocalization(group);

			await ShowGroup(group);
		}
	}
}
