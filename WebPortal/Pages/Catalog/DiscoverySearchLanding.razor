@*DiscoverySearchLanding.razor*@
@using Datahub.Core.Components.FileUpload
@using Datahub.Metadata.Model;
@inject CatalogImportService CatalogImportService
@inject IConfiguration Configuration
@inject ILogger<DiscoverySearchLanding> Logger

<MudStack>
	<MudText Typo="Typo.h4">@Localizer["DataHub Data Catalog"]</MudText>
	
	<MudText>
		@Localizer["The DataHub Data Catalog provides a collection of various NRCan data assets, such as DataHub files and initiatives; CFS data catalog items; and Power BI datasets, reports and workspaces."]
	</MudText>

	@if (Sectors.Any())
	{
		<MudStack Spacing="2">
			<MudStack>
				<MudText Typo="Typo.h5">@Localizer["Browse by Type"]</MudText>
				<MudGrid>
					<MudItem xs="6" sm="6" onclick=@(() => ClickType(MetadataObjectType.File)) style="cursor: pointer;">
						<MudCard Class="d-flex align-center justify-center mud-width-full pa-8" style="height: 100%">
							<MudGrid>
								<MudItem sm="2">
									<MudIcon Icon="@Icons.Outlined.InsertDriveFile" Size="Size.Large" />
								</MudItem>
								<MudItem sm="8">
									<MudText Typo="Typo.h6">@Localizer["Files"]</MudText>
								</MudItem>
							</MudGrid>
						</MudCard>
					</MudItem>
					<MudItem xs="6" sm="6" onclick=@(() => ClickType(MetadataObjectType.PowerBIReport)) style="cursor: pointer;">
						<MudCard Class="d-flex align-center justify-center mud-width-full pa-8" style="height: 100%">
							<MudGrid>
								<MudItem sm="2">
									<MudIcon Icon="@Icons.Outlined.BarChart" Size="Size.Large" />
								</MudItem>
								<MudItem sm="8">
									<MudText Typo="Typo.h6">@Localizer["Power BI Reports"]</MudText>
								</MudItem>
							</MudGrid>
						</MudCard>
					</MudItem>
				</MudGrid>
			</MudStack>

			<MudStack Class="mt-4">
				<MudText Typo="Typo.h5">@Localizer["Browse by Sector"]</MudText>
				<MudGrid>
					@foreach (var sector in Sectors)
					{
						<MudItem xs="6" sm="6" onclick=@(() => ClickSector(sector)) style="cursor: pointer;">
							<MudCard Class="d-flex align-center justify-center mud-width-full pa-8" style="height: 100%">
								<MudGrid>
									<MudItem sm="2">
										<MudIcon Icon=@GetSectorIconClass(sector.Id) Size="Size.Large" />
									</MudItem>
									<MudItem sm="8">
										<MudText Typo="Typo.h6">@(IsFrench ? sector.FrenchLabel : sector.EnglishLabel)</MudText>
									</MudItem>
								</MudGrid>
							</MudCard>
						</MudItem>
					}
				</MudGrid>
			</MudStack>

			<MudStack Class="mt-4">
				<MudText Typo="Typo.h5">@Localizer["Search"]</MudText>
				<MudText>@Localizer["Search the Data Catalog to find and discover NRCan datasets on energy, finance, science, forestry or human resources, and more."]</MudText>
			</MudStack>

			<MudStack Class="mt-4">
				<MudText Typo="Typo.h5">@Localizer["Publish"]</MudText>
				<AuthorizeView Roles=@RoleConstants.DATAHUB_ROLE_ADMIN>
					<Authorized>
						<MudStack>
							<MudText>@Localizer["Since you are an Admin in Datahub use the Upload button below to import a valid catalog dump file."]</MudText>
							<MudStack Class="mt-4">
								<InputFile id="fileInput" OnChange="UploadFiles" accept=".json" hidden />
								<MudButton HtmlTag="label"
									   Variant="Variant.Text"
									   Color="Color.Primary"
									   StartIcon="@Icons.Filled.CloudUpload"
									   for="fileInput">
									@Localizer["Upload"]
								</MudButton>
							</MudStack>
						</MudStack>
					</Authorized>
					<NotAuthorized>
						<MudText>@GetContactDatahubTeamMessage()</MudText>
					</NotAuthorized>
				</AuthorizeView>
			</MudStack>
		</MudStack>
	}
</MudStack>

@code {

	[Parameter]
	public List<OrganizationLevel> Sectors { get; set; } = new();

	[Parameter]
	public List<MetadataObjectType> ObjectTypes { get; set; } = new() { MetadataObjectType.File, MetadataObjectType.PowerBIReport };

	[Parameter]
	public bool IsFrench { get; set; }

	[Parameter]
	public EventCallback<OrganizationLevel> OnClickSector { get; set; }

	[Parameter]
	public EventCallback<MetadataObjectType> OnClickType { get; set; }

	static Dictionary<int, string> _sectorIcons = GetSectorIcons();

	private async void ClickSector(OrganizationLevel sector)
	{
		await OnClickSector.InvokeAsync(sector);
	}

	private async void ClickType(MetadataObjectType type)
	{
		await OnClickType.InvokeAsync(type);
	}

	private string GetSectorIconClass(int id)
	{
		var iconClass = _sectorIcons.ContainsKey(id) ? _sectorIcons[id] : "fa-info-circle";
		return $"fad {iconClass} card-icon fa-xs";
	}

	private string GetContactDatahubTeamMessage()
	{
		var localized = Localizer[$"Contact the DataHub team (EMAIL_PLACEHOLDER) for details on how to publish your data to the Data Catalog."].ToString();
		return localized.Replace("EMAIL_PLACEHOLDER", GetConfiguredEmail());
	}

	private string GetConfiguredEmail()
	{
		return Configuration[ConfigurationConstants.CONTACT_EMAIL] ?? ConfigurationConstants.DEFAULT_EMAIL;
	}

	static Dictionary<int, string> GetSectorIcons()
	{
		return new()
		{
			{ 526,		"fa-trees" },			// Canadian Forest Service
			{ 2,		"fa-search-dollar" },	// Audit and Evaluation Branch 
			{ 43,		"fa-fire" },			// Energy Systems Sector
			{ 81,		"fa-building" },		// Corporate Management and Services Sector
			{ 133,		"fa-balance-scale" },	// Legal Services
			{ 7291,		"fa-lightbulb-dollar" },// Energy Efficiency and Technology Sector
			{ 9752,		"fa-stream" },			// Northern Pipeline Agency
			{ 7891,		"fa-lightbulb-on" },	// Strategic Policy and Innovation Sector
			{ 11573,	"fa-project-diagram" },	// Major Projects Management Office
			{ 11993,	"fa-broadcast-tower" },	// Communications and Portfolio Sector
			{ 15433,	"fa-chair-office" },	// Office of the Chief Scientist
			{ 14913,	"fa-share" },			// Shared Services Canada
			{ 16493,	"fa-mountains" },		// Lands and Minerals Sector
			{ 16873,	"fa-gas-pump" },		// Fuels Sector
			{ 16393,	"fa-phone-office" },	// Associate Deputy Minister's Office
			{ 16613,	"fa-leaf-maple" }		// Indigenous Affairs and Reconciliation Sector
		};
	}

	private async Task UploadFiles(InputFileChangeEventArgs e)
	{
		foreach (var browserFile in e.GetMultipleFiles())
		{
			try
			{
				var stream = browserFile.OpenReadStream(int.MaxValue);
				await CatalogImportService.Import(stream);
			}
			catch (Exception ex)
			{
				Logger.LogError(ex, "Failed to upload the file.");
			}
		}
	}
}
