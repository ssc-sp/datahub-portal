@using Microsoft.EntityFrameworkCore.Query
@using Microsoft.EntityFrameworkCore;
@using Datahub.Portal.Data
@using System.Text
@using Microsoft.Extensions.Options
@inject IStringLocalizer<DataProject> DataLocalizer
@inject NavigationManager NavigationManager
@inject UIControlsService UIControlService
@inject IUserInformationService UserInformationService
@inject IJSRuntime JsInterop
@implements IDisposable
@inject IDbContextFactory<DatahubProjectDBContext> DbFactoryProject
@inject IDbContextFactory<DatahubETLStatusContext> DbFactoryEtl
@inject IEmailNotificationService EmailNotificationService
@inject IPublicDataFileService PublicDataFileService
@inject IProjectDatabaseService ProjectDatabaseService
@inject ServiceAuthManager ServiceAuthManager
@inject IMSGraphService MSGraphService
@inject ISystemNotificationService SystemNotificationService
@inject IOptions<DataProjectsConfiguration> Configuration

@page "/project/{projectAcronym}"

<DHPageTitle PageTitleKey=@_project.ProjectName />

<div style="padding-left: 2rem;padding-right: 2rem">
    @if (_project is null)
    {
        <Spinner Small=@true />
    }
    else
    {
        <AeFlex Vertical>
            <h2>@DataLocalizer["Data Project"]</h2>
        </AeFlex>
        @* Project Info *@
        <AeCard CardPosition="AeCard.CardStyle.Horizontal">
            <Header>
                <div style="width:180px;">
                    <i class="@($"fad fa-{_project.Project_Icon}")" />
                </div>
            </Header>
            <ChildContent>
                <AeTypography Variant="h1">@_project.ProjectName</AeTypography>
                <AeMarkdown Content="@($"{_project.ProjectDescription}")"></AeMarkdown>
                <AuthorizeView Roles="@($"{projectAcronym}, {projectAcronym}-admin, {RoleConstants.DATAHUB_ROLE_ADMIN}")">
                    <NotAuthorized>
                        <AeTypography Variant="h3">@DataLocalizer["Access Denied"]</AeTypography>
                        <AeTypography class="warning">@DataLocalizer["You currently do not have access to this project."]</AeTypography>
                        @if (!_isProjectUserPendingApproval)
                        {
                            <AeButton @onclick="@(async () => await RequestProjectAccess())">@DataLocalizer["Request Access"]</AeButton>
                        }
                        else
                        {
                            <AeTypography class="warning">@DataLocalizer["Access Request is being reviewed"]</AeTypography>
                        }
                    </NotAuthorized>
                    <Authorized>
                        <AeTypography><b>@DataLocalizer["Project Administrators:"]</b> @_admins</AeTypography>
                        <AeTypography><b>@DataLocalizer["Project Users:"]</b> @_users</AeTypography>
                    </Authorized>
                </AuthorizeView>
                <AeTypography><b>@DataLocalizer["Data Sensitivity:"]</b> @DataLocalizer[_project.Data_Sensitivity]</AeTypography>

            </ChildContent>
        </AeCard>


        <AuthorizeView Roles="@($"{projectAcronym}, {projectAcronym}-admin, {RoleConstants.DATAHUB_ROLE_ADMIN}")">


            @if (_pipelineStatus?.Count > 0)
            {
                <AeFlex Vertical>
                    <h2>@DataLocalizer["Data Pipeline Status"]</h2>
                    <AeTable Accessors="accessorFunctions" Renderers="renderFunctions"
                     GridTemplateColumns="4fr 4fr 3fr 3fr"
                     Dataset="_pipelineStatus"
                     Headers="pipelineHeaders" />
                </AeFlex>
            }

            <h2>@DataLocalizer["Data Project Tools"]</h2>
            @if (_isLoading)
            {
                <Spinner Small=@true />
            }
            else
            {
            <div class="ae flex wrap">

                @if (Configuration.Value.Databricks)
                {
                    <AeCard class="facard1" CardPosition="AeCard.CardStyle.Horizontal">
                        <Header>
                            <div style="width:180px">
                                <img src="/icons/svg/databricks.svg" alt="Databricks">
                            </div>
                        </Header>
                        <ChildContent>
                            @if (!string.IsNullOrWhiteSpace(_project.Databricks_URL))
                            {
                                <DHLink Variant="h3" DataProject="@projectAcronym" DatabricksURL="@_project.Databricks_URL">@DataLocalizer["Azure Databricks"]</DHLink>
                            }
                            else
                            {
                                <AeTypography Variant="h3">@DataLocalizer["Azure Databricks"]</AeTypography>
                            }
                            <AeTypography>@DataLocalizer["Run your Python, R and SQL notebooks in the cloud with Databricks for analytics, machine learning and data pipelines"]</AeTypography>
                        </ChildContent>
                        <Footer>
                            <AeFlex Vertical>
                                @if (!_databricksAuthorized)
                                {
                                    @if (!string.IsNullOrWhiteSpace(_project.Databricks_URL))
                                    {
                                        @if (_databricksRequested)
                                        {
                                            <AeTypography class="warning">@DataLocalizer["Access Request is being reviewed"]</AeTypography>
                                        }
                                        else
                                        {
                                            <AeTypography class="warning">@DataLocalizer["Access not authorized"]</AeTypography>
                                            <AeButton @onclick="@(async () => await RequestAccess(true, false, false))">@DataLocalizer["Request Access"]</AeButton>
                                        }
                                    }
                                    else
                                    {
                                        @if (_serviceRequests.Any(r => r.ServiceType == RequestManagementService.DATABRICKS && r.Is_Completed == null))
                                        {
                                            <AeTypography class="warning">@DataLocalizer["Service Request is being reviewed"]</AeTypography>
                                        }
                                        else
                                        {
                                            @* <AeTypography class="warning">Service not available</AeTypography> *@
                                            <AeButton @onclick="@(async () => await RequestServiceAccess(RequestManagementService.POWERBI))">@DataLocalizer["Request Service Creation"]</AeButton>
                                        }
                                    }
                                }
                            </AeFlex>
                        </Footer>
                    </AeCard>
                }
                @if (Configuration.Value.PowerBI)
                {
                    <AeCard class="facard1" CardPosition="AeCard.CardStyle.Horizontal">
                        <Header>
                            <div style="width:180px">
                                <img src="/icons/svg/powerbi.svg" alt="Power bi">
                            </div>
                        </Header>
                        <ChildContent>
                            @if (!string.IsNullOrWhiteSpace(_project.PowerBI_URL))
                            {
                                <DHLink Variant="h3" DataProject="@projectAcronym" LinkType="DatahubLinkType.PowerBIReport">PowerBI</DHLink>
                            }
                            else
                            {
                                <AeTypography Variant="h3">@Localizer["Power BI"]</AeTypography>
                            }
                            <AeTypography>@Localizer["Power BI Workspace"]</AeTypography>
                        </ChildContent>
                        <Footer>
                            @if (!_powerBIAuthorized)
                            {
                                @if (!string.IsNullOrWhiteSpace(_project.PowerBI_URL))
                                {
                                    @if (_powerBIRequested)
                                    {
                                        <AeTypography class="warning">@DataLocalizer["Access Request is being reviewed"]</AeTypography>
                                    }
                                    else
                                    {
                                        <AeTypography class="warning">@DataLocalizer["Access not authorized"]</AeTypography>
                                        <AeButton @onclick="@(async () => await RequestAccess(false, true, false))">@DataLocalizer["Request Access"]</AeButton>
                                    }
                                }
                                else
                                {
                                    @if (_serviceRequests.Any(r => r.ServiceType == RequestManagementService.POWERBI && r.Is_Completed == null))
                                    {
                                        <AeTypography class="warning">@DataLocalizer["Service Request is being reviewed"]</AeTypography>
                                    }
                                    else
                                    {
                                        @*<AeTypography class="warning">Service not available</AeTypography>*@
                                        <AeButton @onclick="@(async () => await RequestServiceAccess(RequestManagementService.POWERBI))">@DataLocalizer["Request Service Creation"]</AeButton>
                                    }
                                }
                            }
                        </Footer>
                    </AeCard>
                }

                @if (!string.IsNullOrEmpty(_project.WebForms_URL) && Configuration.Value.WebForms)
                {
                    <AeCard class="facard1" CardPosition="AeCard.CardStyle.Horizontal">
                        <Header>
                            <div class="purple" style="width:180px">
                                <AeIcon class="fad fa-keyboard card-icon fa-xs" />
                            </div>
                        </Header>
                        <ChildContent>
                            @if (!_userAccessLoaded)
                            {
                                <Spinner Small="true" />
                            }
                            else
                            {
                                @if (!string.IsNullOrWhiteSpace(_project.WebForms_URL) && _webFormsAuthorized)
                                {
                                    <DHLink Variant="h3" DataProject="@projectAcronym" WebFormsURL="@_project.WebForms_URL">@DataLocalizer["Data Entry"]</DHLink>
                                }
                                else
                                {
                                    <AeTypography Variant="h3">@DataLocalizer["Data Entry"]</AeTypography>
                                }
                            }
                            <AeTypography>@DataLocalizer["Start the Data Entry application enabled for this project"]</AeTypography>
                        </ChildContent>
                        <Footer>
                            @if (!_webFormsAuthorized & _userAccessLoaded)
                            {
                                @if (_webFormsRequested)
                                {
                                    <AeTypography class="warning">@DataLocalizer["Access Request is being reviewed"]</AeTypography>
                                }
                                else
                                {
                                    <AeTypography class="warning">@DataLocalizer["Access not authorized"]</AeTypography>
                                    <AeButton @onclick="@(async () => await RequestAccess(false, false, true))">@DataLocalizer["Request Access"]</AeButton>
                                }
                            }

                        </Footer>
                    </AeCard>
                }

                @if (Configuration.Value.WebForms)
                {
                    <AeCard class="facard1" CardPosition="AeCard.CardStyle.Horizontal">
                        <Header>
                            <div class="blue" style="width:180px">
                                <AeIcon class="fad fa-file-alt card-icon fa-xs" />
                            </div>
                        </Header>
                        <ChildContent>
                            <AeFlex Vertical>
                                <DHLink Variant="h3" DataProject="@projectAcronym" LinkType="DatahubLinkType.FormBuilder">@DataLocalizer["Form Builder"]</DHLink>
                                <AeTypography>@DataLocalizer["Design custom data entry forms"]</AeTypography>
                            </AeFlex>
                        </ChildContent>
                    </AeCard>
                }

                @if (Configuration.Value.Storage)
                {
                    <AeCard class="facard1" CardPosition="AeCard.CardStyle.Horizontal">
                        <Header>
                            <div class="indigo" style="width:180px">
                                <AeIcon class="fad fa-hdd card-icon fa-xs" />
                            </div>
                        </Header>
                        <ChildContent>
                            <AeFlex Vertical>

                                @if (_serviceRequests.Any(r => r.ServiceType == RequestManagementService.STORAGE && r.Is_Completed != null))
                                {
                                    <DHLink Variant="h3" DataProject="@projectAcronym" LinkType="DatahubLinkType.Storage">@DataLocalizer["Project Storage"]</DHLink>
                                }
                                else
                                {
                                    <AeTypography Variant="h3">@DataLocalizer["Project Storage"]</AeTypography>
                                }
                                <AeTypography>@DataLocalizer["Access the storage account for this project to upload, download and share datasets with all project members."]</AeTypography>

                            </AeFlex>
                        </ChildContent>
                        <Footer>
                            @if (_serviceRequests.Any(r => r.ServiceType == "storage" && r.Is_Completed != null))
                            {
                            }
                            else if (_serviceRequests.Any(r => r.ServiceType == "storage" && r.Is_Completed == null))
                            {
                                <AeTypography class="warning">@DataLocalizer["Service Request is being reviewed"]</AeTypography>
                            }
                            else
                            {
                                <AeButton @onclick="@(async () => await RequestServiceAccess("storage"))">@DataLocalizer["Request Service Creation"]</AeButton>
                            }
                        </Footer>
                    </AeCard>
                }


                @if (Configuration.Value.PublicSharing)
                {
                    <AeCard class="facard1" CardPosition="AeCard.CardStyle.Horizontal">
                        <Header>
                            <div>
                                <AeIcon class="fad fa-share-square card-icon fa-xs" />
                            </div>
                        </Header>
                        <ChildContent>
                            <DHLink Variant="h3" DataProject="@projectAcronym" LinkType="DatahubLinkType.DataSharingDashboard">
                                @Localizer["PROJECT-PAGE.PUBLIC-SHARING-CARD.Title"]
                            </DHLink>
                            <AeTypography>@Localizer["PROJECT-PAGE.PUBLIC-SHARING-CARD.UsersOwnSharedFiles"]: @_ownSharingRequestCount</AeTypography>
                            @if (_isDataApprover)
                            {
                                <AeTypography>
                                    @Localizer["PROJECT-PAGE.PUBLIC-SHARING-CARD.SharedFilesAwaitingApproval"]: @_sharingRequestAwaitingApprovalCount
                                </AeTypography>
                            }
                        </ChildContent>
                    </AeCard>
                }

                @if (Configuration.Value.Costing)
                {
                    <AuthorizeView Roles="@($"{projectAcronym}-admin")" Context="Project_Cost">
                        <AeCard class="facard1" CardPosition="AeCard.CardStyle.Horizontal">
                            <Header>
                                <div class="indigo" style="width:180px">
                                    <AeIcon class="fad fa-dollar-sign card-icon fa-xs" />
                                </div>
                            </Header>
                            <ChildContent>
                                <AeFlex Vertical>
                                    <AeTypography Variant="h3">
                                        @DataLocalizer["Cost"]
                                    </AeTypography>
                                    <AeTypography>
                                        @_projectCostFormatted
                                    </AeTypography>
                                </AeFlex>
                            </ChildContent>
                            <Footer>
                                <AeButton>@DataLocalizer["Project_Cost_Button"]</AeButton>
                            </Footer>
                        </AeCard>
                    </AuthorizeView>
                }

                @if (ShowDatabaseCard && Configuration.Value.PostgreSQL)
                {
                    <AeCard class="facard1" CardPosition="AeCard.CardStyle.Horizontal">
                        <Header>
                            <div>
                                <AeIcon class="fad fa-database card-icon fa-xs" />
                            </div>
                        </Header>
                        <ChildContent>
                            <AeFlex Vertical>
                                <AeTypography Variant="h3">
                                    @Localizer["PROJECT-PAGE.DATABASE-CARD.CardTitlePG"]
                                </AeTypography>
                                <AeTypography>@Localizer["Access the project PostgreSQL database and leverage your credentials for data connections"]</AeTypography>
                            </AeFlex>
                        </ChildContent>
                        <Footer>
                            <div>
                                <AeButton OnClickEvent=@ShowDatabaseInformationPopupWithoutToken>@Localizer["PROJECT-PAGE.DATABASE-CARD.MoreInfo_button"]</AeButton>
                            </div>
                            @if (_project.IsDatabasePostgres && ProjectDatabaseService.IsServiceAvailable())
                            {
                                <div>
                                    <AeButton OnClickEvent=@ShowDatabaseInformationPopupWithToken>@Localizer["PROJECT-PAGE.DATABASE-CARD.GetToken_button"]</AeButton>
                                </div>
                            }
                            else
                            {
                                <AeButton @onclick="@(async () => await RequestServiceAccess("psql"))">@DataLocalizer["Request Service Creation"]</AeButton>
                            }
                        </Footer>
                    </AeCard>
                }

                @if (Configuration.Value.SQLServer)
                {
                    <AeCard class="facard1" CardPosition="AeCard.CardStyle.Horizontal">
                        <Header>
                            <div>
                                <AeIcon class="fad fa-database card-icon fa-xs" />
                            </div>
                        </Header>
                        <ChildContent>
                            <AeFlex Vertical>
                                <AeTypography Variant="h3">
                                    @Localizer["PROJECT-PAGE.DATABASE-CARD.CardTitleSQL"]
                                </AeTypography>
                            </AeFlex>
                        </ChildContent>
                        <Footer>
                            <AeButton @onclick="@(async () => await RequestServiceAccess("sql"))">@DataLocalizer["Request Service Creation"]</AeButton>
                        </Footer>
                    </AeCard>
                }


                <AuthorizeView Roles="DHPGLIST-admin" Context="Admin_Card">
                    <AeCard class="facard1" CardPosition="AeCard.CardStyle.Horizontal">
                        <Header>
                            <div>
                                <AeIcon class="fad fa-user-crown fa-xs" />
                            </div>
                        </Header>
                        <ChildContent>
                            <AeTypography Variant="h3">
                                @Localizer["PROJECT-PAGE.ADMIN-CARD.Title"]
                            </AeTypography>
                        </ChildContent>
                        <Footer>
                            <NavLink href="@($"/edit-project/{projectAcronym}")"><AeButton>@DataLocalizer["Edit Project"]</AeButton></NavLink>
                            <NavLink href="@($"/tracker/{projectAcronym}")"><AeButton>@DataLocalizer["Project Tracker"]</AeButton></NavLink>
                            <NavLink href="@($"/admin/powerbi/{projectAcronym}")"><AeButton>@DataLocalizer["Power BI Links"]</AeButton></NavLink>
                            <NavLink href="@($"/admin/onboardusers/{projectAcronym}")"><AeButton>@DataLocalizer["Onboard Users"]</AeButton></NavLink>
                        </Footer>

                    </AeCard>
                </AuthorizeView>

            </div>
            }

        </AuthorizeView>
    }

</div>



@code {
    //Service Types - 1 = DataBricks, 2 = PowerBi
    //Service Status - 0 = pending creation, 1 = created

    private DatahubProjectDBContext projectContext;
    private DatahubETLStatusContext etlContext;


    private bool _isProjectUserPendingApproval;
    private string _admins;
    private string _users;
    private bool _isDataApprover;
    private int _sharingRequestAwaitingApprovalCount;
    private int _ownSharingRequestCount;
    //private bool _showSharingRequestCard => _isDataApprover && _sharingRequestAwaitingApprovalCount > 0;

    // Define the headers at the top of the table
    private List<string> pipelineHeaders = new List<string>
    {
    "Data Factory Pipeline", "Last Update", "Result", "Data Quality & Integrity Checks"
    };

    // Accessor functions to retrieve cell value
    private List<Func<ETL_CONTROL_TBL, string>> accessorFunctions = new List<Func<ETL_CONTROL_TBL, string>>
    {
    new Func<ETL_CONTROL_TBL, string>(etl => etl.PROCESS_NM),
    new Func<ETL_CONTROL_TBL, string>(etl => etl.END_TS?.ToString("g")),
    new Func<ETL_CONTROL_TBL, string>(etl => etl.STATUS_FLAG),
    new Func<ETL_CONTROL_TBL, string>(etl => "S")
    };

    private List<Func<ETL_CONTROL_TBL, RenderFragment>> renderFunctions = new List<Func<ETL_CONTROL_TBL, RenderFragment>>
    {
    null,
    null,
    new Func<ETL_CONTROL_TBL, RenderFragment>(etl =>  { if (etl.STATUS_FLAG == "S")
                                                        return
    @<div><i class="fad fa-check"></i> OK</div>
    ;
                                                    else
                                                        return
    @<div><i class="fad fa-exclamation-triangle"></i> Error</div>
    ;}),
    new Func<ETL_CONTROL_TBL, RenderFragment>(etl => { return
    @<div><i class="fad fa-check"></i> OK</div>
    ; })
    };

    [Parameter]
    public string projectAcronym { get; set; }


    private Datahub_Project _project;
    private List<Datahub_ProjectServiceRequests> _serviceRequests = new List<Datahub_ProjectServiceRequests>();

    private Microsoft.Graph.User _user;
    private string _userId;

    private bool _databricksRequested = false;
    private bool _powerBIRequested = false;
    private bool _webFormsRequested = false;
    private bool _databricksAuthorized = false;
    private bool _powerBIAuthorized = false;
    private bool _webFormsAuthorized = false;
    private bool _projectRequested = false;
    private bool _userAccessLoaded = false;
    private bool _isLoading = true;

    private List<ETL_CONTROL_TBL> _pipelineStatus = new List<ETL_CONTROL_TBL>();

    private string _projectCostFormatted;

    private bool ShowDatabaseCard => _project != null && _project.HasAssociatedDatabase;

    private async Task UpdateFeatured(bool changed)
    {
        _project.Is_Featured = changed;
        await projectContext.SaveChangesAsync();
        StateHasChanged();

    }

    protected override async Task OnInitializedAsync()
    {
        _isLoading = true;
        projectContext = DbFactoryProject.CreateDbContext();
        etlContext = DbFactoryEtl.CreateDbContext();
        _userId = await UserInformationService.GetUserIdString();
        _user = await UserInformationService.GetUserAsync();
        await RefreshComponents(false);

        var projectUsers = await projectContext.Project_Users.Where(u => u.User_ID == _userId && _project == u.Project).ToListAsync();
        if (projectUsers != null && projectUsers.Count > 0)
        {
            _isDataApprover = projectUsers.Any(u => u.IsDataApprover);
        }

        _admins = await ServiceAuthManager.GetAdminUserString(projectAcronym);
        await LoadUserList();

        _sharingRequestAwaitingApprovalCount = await PublicDataFileService.GetDataSharingRequestsAwaitingApprovalCount(projectAcronym);
        _ownSharingRequestCount = await PublicDataFileService.GetUsersOwnDataSharingRequestsCount(projectAcronym, _userId);

        var allPipelines = _project.Pipelines?.Select(p => p.Process_Nm).ToList();
        if (allPipelines != null && allPipelines.Count > 0)
        {
            _pipelineStatus = await etlContext.ETL_CONTROL_TBL.Where(t => allPipelines.Contains(t.PROCESS_NM)).ToListAsync();
            _pipelineStatus = _pipelineStatus.Where(t => t.STATUS_FLAG != "T").GroupBy(t => t.PROCESS_NM).Select(gp => gp.OrderByDescending(g => g.END_TS).First()).OrderBy(s => s.PROCESS_NM).ToList();
        }

        if (_userId != null)
        {
            var userRequests = _project.Requests?.Where(r => r.User_ID == _userId && r.Completion_DT is null).ToList();
            if (userRequests != null)
            {
                _databricksRequested = userRequests.Any(r => r.Databricks);
                _powerBIRequested = userRequests.Any(r => r.PowerBI);
                _webFormsRequested = userRequests.Any(r => r.WebForms);
            }
            var userAccess = _project.Requests?.Where(r => r.User_ID == _userId && r.Completion_DT != null).ToList();
            if (userAccess != null)
            {
                _databricksAuthorized = userAccess.Any(r => r.Databricks);
                _powerBIAuthorized = userAccess.Any(r => r.PowerBI);
                _webFormsAuthorized = userAccess.Any(r => r.WebForms);
            }

        }
        _projectCostFormatted = await GetProjectCostFormatted();
        _isLoading = false;

    }
    protected override void OnAfterRender(bool firstRender)
    {
        _userAccessLoaded = true;
    }
    private async Task LoadUserList()
    {
        var userList = projectContext.Project_Users.Where(u => !u.IsAdmin && _project == u.Project).ToList();
        StringBuilder sbUsers = new();
        foreach (var user in userList)
        {
            var username = await MSGraphService.GetUserName(user.User_ID, CancellationToken.None);
            if (username == "...")
            {
                username = string.Empty;
            }
            sbUsers.Append($"{username}; ");
        }
        _users = sbUsers.ToString().Trim().TrimEnd(';');
    }

    private async Task<string> GetProjectCostFormatted()
    {
        using var ctx = DbFactoryProject.CreateDbContext();

        var acronym = projectAcronym; // "CITSM"

        var prjCost = await ctx.Project_Costs
            .Where(pc => pc.Project_Acronym_CD == acronym)
            .OrderByDescending(pc => pc.Usage_DT)
            .FirstOrDefaultAsync();

        if (prjCost == null)
            return DataLocalizer["No cost data found."];

        var cost = Convert.ToDecimal(prjCost.Cost_AMT).ToString("C2");
        var fromDate = prjCost.Usage_DT.AddMonths(-1).ToShortDateString();
        var toDate = prjCost.Usage_DT.ToShortDateString();
        var asofDate = prjCost.Updated_DT.ToShortDateString();
        var template = DataLocalizer["As of {0}, total resource cost is {1} for the period from {2} to {3}."];

        return string.Format(template, asofDate, cost, toDate, asofDate);
    }

    private async Task<List<string>> GetProjectAdministratorEmailsAndIds()
    {
        var loadUsersTask = projectContext.Entry(_project).Collection(p => p.Users).LoadAsync();
        var adminEmails = ServiceAuthManager.ExtractEmails(_project.Project_Admin ?? string.Empty);
        await loadUsersTask;
        var adminUsers = _project.Users.Where(u => u.IsAdmin).Select(u => u.User_ID);
        return adminEmails.Concat(adminUsers).ToList();
    }

    private async Task RequestProjectAccess()
    {
        var request = new Datahub_Project_User_Request()
            {
                User_ID = _userId,
                Project = _project,
                Requested_DT = DateTime.Now
            };

        projectContext.Project_Users_Requests.Add(request);
        await projectContext.SaveChangesAsync();

        var admins = await GetProjectAdministratorEmailsAndIds();
        await EmailNotificationService.SendServiceAccessRequestNotification(_user.DisplayName, "project", _project.ProjectInfo, admins);

        await RefreshComponents(true);
    }

    private async Task RequestAccess(bool databricks, bool powerbi, bool webforms)
    {
        _databricksRequested = databricks || _databricksRequested;
        _powerBIRequested = powerbi || _powerBIRequested;
        _webFormsRequested = webforms || _webFormsRequested;
        var request = new Datahub_Project_Access_Request()
            {
                Request_DT = DateTime.Now,
                User_Name = _user.UserPrincipalName,
                User_ID = _userId,
                Project = _project,
                PowerBI = powerbi,
                WebForms = webforms,
                Databricks = databricks
            };
        projectContext.Access_Requests.Add(request);
        await projectContext.SaveChangesAsync();

        var serviceName = request.RequestServiceType;

        var admins = await GetProjectAdministratorEmailsAndIds();
        await EmailNotificationService.SendServiceAccessRequestNotification(request.User_Name, serviceName, _project.ProjectInfo, admins);
        var adminUserIds = admins.Where(a => Guid.TryParse(a, out _)).ToList();
        await SystemNotificationService.CreateSystemNotificationsWithLink(adminUserIds, $"/admin", "SYSTEM-NOTIFICATION.GoToAdminPage",
            "SYSTEM-NOTIFICATION.NOTIFICATION-TEXT.ServiceAccessRequested",
            _user.UserPrincipalName, serviceName, new BilingualStringArgument(_project.ProjectInfo.ProjectNameEn, _project.ProjectInfo.ProjectNameFr));

        await RefreshComponents(true);
    }

    private async Task RequestStorageAccess()
    {
        await RequestServiceAccess("storage");
    }

    private async Task RequestServiceAccess(string serviceType)
    {
        var serviceRequest = new Datahub_ProjectServiceRequests()
            {
                ServiceType = serviceType,
                ServiceRequests_Date_DT = DateTime.Now,
                Is_Completed = null,
                Project = _project,
                User_ID = _userId,
                User_Name = _user.UserPrincipalName
            };

        if (serviceType == "sql" || serviceType == "storage" || serviceType == "psql")
        {
            CreateProjectResource(serviceType);
        }
        projectContext.Project_Requests.Add(serviceRequest);
        await projectContext.SaveChangesAsync();

        var admins = await GetProjectAdministratorEmailsAndIds();
        await EmailNotificationService.SendServiceCreationRequestNotification(serviceRequest.User_Name, serviceType, _project.ProjectInfo, admins);
        var adminUserIds = admins.Where(a => Guid.TryParse(a, out _)).ToList();
        await SystemNotificationService.CreateSystemNotificationsWithLink(adminUserIds, $"/admin", "SYSTEM-NOTIFICATION.GoToAdminPage",
            "SYSTEM-NOTIFICATION.NOTIFICATION-TEXT.ServiceCreationRequested",
            _user.UserPrincipalName, serviceType, new BilingualStringArgument(_project.ProjectInfo.ProjectNameEn, _project.ProjectInfo.ProjectNameFr));

        await RefreshComponents(true);
    }

    private void CreateProjectResource(string serviceType)
    {
        string attributes = serviceType == "sql" ? "\"type\":\"sql\"" : "\"type\":\"gen2\"";

        switch (serviceType)
        {
            case "sql":
                attributes = "\"type\":\"sql\"";
                break;
            case "psql":
                attributes = "\"type\":\"psql\"";
                break;
            case "storage":
                attributes = "\"type\":\"gen2\"";
                break;
            default:
                attributes = $"\"type\":\"{serviceType}\"";
                break;
        }
        var resource = new Project_Resources
            {
                ResourceType = serviceType,
                ResourceName = projectAcronym,
                TimeRequested = DateTime.Now,
                Attributes = attributes,
                Project = _project
            };

        projectContext.Project_Resources.Add(resource);
    }

    private async Task RefreshComponents(bool refreshState)
    {
        _project = projectContext.Projects.Include(p => p.Requests).Include(p => p.Pipelines).Single(p => p.Project_Acronym_CD == projectAcronym);
        _serviceRequests = projectContext.Project_Requests.Where(p => p.Project == _project).ToList();
        _isProjectUserPendingApproval = projectContext.Project_Users_Requests.Any(u => u.User_ID == _user.Id && _project == u.Project && u.Approved_DT == null);
        StateHasChanged();
    }

    private async Task ShowDatabaseInformationPopup(bool getToken = false)
    {
        RenderFragment popupHtml =
    @<DataProjectDbInformation DataProject=@_project GetAccessTokenImmediately=@getToken />;
        await UIControlService.ToggleModal(@<RenderFragmentModal Fragment=@popupHtml />);
    }

    private async Task ShowDatabaseInformationPopupWithToken() => await ShowDatabaseInformationPopup(true);
    private async Task ShowDatabaseInformationPopupWithoutToken() => await ShowDatabaseInformationPopup(false);

    public void Dispose()
    {
        projectContext.Dispose();
        etlContext.Dispose();
    }
}
