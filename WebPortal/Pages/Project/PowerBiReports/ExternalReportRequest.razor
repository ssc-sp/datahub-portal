@using Datahub.Metadata.DTO
@using Datahub.Metadata.Model
@inject IPowerBiDataService PowerBiDataService
@inject IUserInformationService UserInformationService
@inject ServiceAuthManager ServiceAuthManager
@inject IEmailNotificationService EmailService

<AuthorizeView Roles=@RoleConstants.DATAHUB_ROLE_ADMIN>
    @if (!currentUserIsAdmin)
    {
        currentUserIsAdmin = true;
    }
</AuthorizeView>

@if (_isWorking)
{
    <MudStack Row AlignItems=@AlignItems.Center>
        <MudProgressCircular Indeterminate/>
        <MudText>@Localizer["Working"]</MudText>
    </MudStack>
}
else if (externalReport == null)
{
    <MudStack Row AlignItems=@AlignItems.Center @onclick="() => _requestPopupOpen = !_requestPopupOpen" style="cursor:pointer;">
        <MudIcon Icon=@Icons.TwoTone.AddBox />
        <MudText>@Localizer["Request External Report"]</MudText>
        <MudPopover Class="pa-8" Open=@_requestPopupOpen TransformOrigin=@Origin.TopRight>
            <MudText>@Localizer["RequestExternalSharingFor", @Report.Report_Name]</MudText>
            <MudButton Color=@Color.Primary Variant=@Variant.Filled OnClick=@(() => OnCreateClick(Report.Report_ID))>@Localizer["BUTTONS.Confirm"]</MudButton>
            <MudButton OnClick=@(() => _requestPopupOpen = false)>@Localizer["BUTTONS.Cancel"]</MudButton>
        </MudPopover>
    </MudStack>
}
else
{
    /* request exists, either pending or active */
    <MudStack Row AlignItems=@AlignItems.Center @onclick=@(() => _infoPopupOpen = !_infoPopupOpen) Style="cursor:pointer;">
        <MudIcon Icon=@StatusIcon />
        <MudText>@StatusText</MudText>
        <MudPopover Open=@_infoPopupOpen TransformOrigin=@Origin.TopRight Class="pa-8">
            <MudText>@Localizer["RequestingUser"]: @externalReport.RequestingUser</MudText>
            
            @if(_isReportActive)
            {
                <MudText>@Localizer["TemporaryExternalLink"]: <MudLink Href=@TempExternalReportLink>@Report.Report_Name</MudLink></MudText>
            }

            @if (_canRevokeExternalLink)
            {
                <MudButton Color=@Color.Error OnClick=@(() => _revokePopupOpen = true)>@RevokeButtonCaption</MudButton>
            }

            <MudPopover Class="pa-8" Open=@_revokePopupOpen >
                <MudText>@RevokeDialogPrompt</MudText>
                <MudButton Color=@Color.Error Variant=@Variant.Filled OnClick=@(() => OnRevokeClick(Report.Report_ID))>@Localizer["BUTTONS.Confirm"]</MudButton>
                <MudButton OnClick=@(() => _revokePopupOpen = false)>@Localizer["BUTTONS.Cancel"]</MudButton>
            </MudPopover>
        </MudPopover>
    </MudStack>
}

@code {

    private const string PROJECTACRONYM = "DHPGLIST";

    [Parameter]
    public PowerBi_Report Report { get; set; }

    [Parameter]
    public string CurrentUserEmail { get; set; }

    [Parameter]
    public EventCallback RefreshTable { get; set; }

    private ExternalPowerBiReport externalReport;

    private bool currentUserIsFrench;
    private bool currentUserIsAdmin = false;

    private bool _canRevokeExternalLink => currentUserIsAdmin || externalReport?.RequestingUser == CurrentUserEmail;


    private bool _infoPopupOpen = false;
    private bool _requestPopupOpen = false;
    private bool _revokePopupOpen = false;
    private bool _isWorking = true;


    private bool _reportExists => externalReport != null;
    private bool _reportNotExpired => !externalReport.IsExpired;

    private bool _isReportActive => _reportExists && _reportNotExpired && externalReport.Is_Created;
    private bool _isReportRequested => _reportExists && _reportNotExpired && !externalReport.Is_Created;

    private string StatusIcon => _isReportActive ? Icons.TwoTone.CheckBox : Icons.TwoTone.HourglassBottom;
    private string StatusKey => _isReportActive ? "Show info" : "Requested";
    private string StatusText => Localizer[StatusKey];
    private string RevokeButtonKey => _isReportActive ? "Revoke external sharing" : "Cancel external sharing request";
    private string RevokeButtonCaption => Localizer[RevokeButtonKey];
    private string RevokeDialogKey => _isReportActive ? $"RevokeExtSharingFor" : $"CancelExtSharingRequestFor";
    private string RevokeDialogPrompt => Localizer[RevokeDialogKey, Report.Report_Name];

    private string TempExternalReportLink => $"/powerbi-report/embed/{Report.Report_ID.ToString()}";

    protected override async Task OnInitializedAsync()
    {
        _isWorking = true;

        externalReport = await PowerBiDataService.GetExternalReportRecord(Report.Report_ID);
        currentUserIsFrench = await UserInformationService.IsFrench();
        
        _isWorking = false;
    }
    
    private async void OnCreateClick(Guid reportId)
    {
        _requestPopupOpen = false;
        _isWorking = true;

        await PowerBiDataService.CreateExternalPowerBiReportRequest(CurrentUserEmail, reportId);
        PowerBiExternalReportParameters powerbiExternalParameters = new() { 
                            AppUrl = $"/administration",
                            App = null, 
                            AdminEmailAddresses =  ServiceAuthManager.GetProjectMailboxEmails(PROJECTACRONYM)
                        };
        await EmailService.SendExternalPowerBiCreationRequested(powerbiExternalParameters);

        await RefreshTable.InvokeAsync();
    }

    private async void OnRevokeClick(Guid reportId)
    {
        _infoPopupOpen = false;
        _isWorking = true;

        await PowerBiDataService.RevokePowerBiReportRequest(reportId);
        await RefreshTable.InvokeAsync();
    }

}
