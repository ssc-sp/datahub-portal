@using Datahub.Core.Data.DTO
@using Datahub.Core.Components.Skeleton
@using System

@inject ServiceAuthManager _serviceAuthManager
@inject IDbContextFactory<DatahubProjectDBContext> _dbFactoryProject
@inject IUserInformationService _userInformationService


@if (_isLoading)
{
    <span class="project-members-skeleton-positioning">
        <Skeleton Width="100px" Height="1.5rem" />
        <span style="display: flex; margin: 1rem 0">
            <Skeleton Circle Width="2rem" Height="2rem"/>
            <span style="display: block; width: .5rem"></span>
            <Skeleton Width="150px" Height="2rem"/>
        </span>
        <span style="display: flex; margin: 1rem 0">
            <Skeleton Circle Width="2rem" Height="2rem"/>
            <span style="display: block; width: .5rem"></span>
            <Skeleton Width="150px" Height="2rem"/>
        </span>
        
        <span style="display: block; height: 2rem"></span>
        
        <Skeleton Width="100px" Height="1.5rem" />
        @for (var i = 0; i < 10; i++)
        {
            <span style="display: flex; margin: 1rem 0">
                <Skeleton Circle Width="2rem" Height="2rem"/>
                <span style="display: block; width: .5rem"></span>
                <Skeleton Width="150px" Height="2rem"/>
            </span>
        }
    </span>
}
else
{
    <AuthorizeView Roles="@string.Join(',', _authorizedRoles)">
        <Authorized>
            <div class="project-members">

                <div class="member-list">
                    <span class="group-name">
                        <AeTypography>
                            <b>@Localizer["Admins"]</b>
                        </AeTypography>
                        <AeTypography class="member-count">@_projectUsers.Count(u => u.IsAdmin) @Localizer["members"]</AeTypography>
                    </span>
                    <ul class="members">
                        @foreach (var admin in _projectUsers.Where(u => u.IsAdmin))
                        {
                            <li>
                                <ProfileCircle FullName="@admin.Name"/>
                                <AeTypography class="name">@admin.Name</AeTypography>
                                <a class="profile-icon" href="/profile/@System.Convert.ToBase64String(@System.Text.Encoding.UTF8.GetBytes(@admin.UserId))">
                                    <i class="fa-solid fa-user"></i>
                                </a>
                                <a class="email-icon" href="@($"mailto:{admin.Email}")">
                                    <i class="fas fa-envelope"></i>
                                </a>
                            </li>
                        }
                    </ul>
                    <span style="display: block; height: 2rem"></span>
                    <span class="group-name">
                        <AeTypography>
                            <b>@Localizer["Members"]</b>
                        </AeTypography>
                        <AeTypography class="member-count">@_projectUsers.Count(u => !u.IsAdmin) @Localizer["members"]</AeTypography>
                    </span>
                    <ul class="members">
                        @foreach (var member in _projectUsers.Where(u => !u.IsAdmin))
                        {
                            <li>
                                <ProfileCircle FullName="@member.Name"/>
                                <AeTypography class="name">@member.Name</AeTypography>
                                <a class="profile-icon" href="/profile/@System.Convert.ToBase64String(@System.Text.Encoding.UTF8.GetBytes(@member.UserId))">
                                    <i class="fa-solid fa-user"></i>
                                </a>
                                <a class="email-icon" href="@($"mailto:{member.Email}")">
                                    <i class="fas fa-envelope"></i>
                                </a>
                            </li>
                        }
                    </ul>
                </div>
            </div>
        </Authorized>
    </AuthorizeView>
}

@code {

    [CascadingParameter(Name = "ProjectAcronym")]
    public string ProjectAcronym { get; set; }

    private bool _isLoading = true;

    private List<string> _authorizedRoles = new();

    private List<ProjectMember> _projectUsers;
    private Microsoft.Graph.User _user;

    protected override async Task OnInitializedAsync()
    {
        await using var projectContext = await _dbFactoryProject.CreateDbContextAsync();

        _user = await _userInformationService.GetCurrentGraphUserAsync();

        _projectUsers = await _serviceAuthManager.GetProjectMembers(ProjectAcronym);

        _authorizedRoles = new() { ProjectAcronym, $"{ProjectAcronym}-admin" };

        if (!_serviceAuthManager.GetViewingAsGuest(_user.Id))
        {
            _authorizedRoles.Add(RoleConstants.DATAHUB_ROLE_ADMIN);
        }
        
        _isLoading = false;
    }
}