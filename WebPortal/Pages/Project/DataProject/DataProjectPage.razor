@using Datahub.Portal.Pages.Project.DataProject.ProjectTools
@using Datahub.Core.Components.PageBanner
@using Datahub.Achievements.Models

@inject IDbContextFactory<DatahubProjectDBContext> _dbFactoryProject
@inject IUserInformationService _userInformationService
@inject ServiceAuthManager _serviceAuthManager
@inject AchievementService _achievementService
@inject IDatahubAuditingService _auditingService
@inject ILogger<DataProjectPage> logger

@page "/projects/{ProjectAcronymParam}"

<DHPageAlert Title="Welcome to your Data Project" Key="@PageAlert.ProjectFeatures" WikiLinkEN="Onboarding---Data-Project" WikiLinkFR="Onboarding---Data-Project"/>

<DHPageTitle PageTitleKey="@_projectName"/>

@if (_project is not null)
{
    <div class="project-page">
        <CascadingValue Value=@_project Name="Project">
            <CascadingValue Value=@ProjectAcronymParam Name="ProjectAcronym">
                <CascadingValue Value=@_userId Name="UserId">
                    <CascadingValue Value=@_isDatahubAdmin Name="IsDatahubAdmin">
                        <CascadingValue Value=@_user Name="GraphUser">
                            <CascadingValue Value=@_projectId Name="ProjectId">
                                <ProjectInfo />
                                <ProjectEngagements />
                                <ProjectCatalog IsFrench=@_isFrench />
                                <ProjectMembers />
                                <ProjectToolListing />
                            </CascadingValue>
                        </CascadingValue>
                    </CascadingValue>
                </CascadingValue>
            </CascadingValue>
        </CascadingValue>
    </div>
}

@code {

    [Parameter]
    public string ProjectAcronymParam { get; set; }

    private Datahub_Project _project;
    private Microsoft.Graph.User _user;
    private string _userId;
    private string _projectName;
    private int _projectId;
    private bool _isDatahubAdmin;
    private bool _isFrench;
    private bool _showCosts;
    
    protected override async Task OnInitializedAsync()
    {
        await using var projectContext = await _dbFactoryProject.CreateDbContextAsync();

        _project = await projectContext.Projects
            .Include(p => p.Requests)
            .Include(p => p.ServiceRequests)
            .Include(p => p.Pipelines)
            .AsSingleQuery()
            .Where(p => p.Project_Acronym_CD == ProjectAcronymParam)
            .FirstOrDefaultAsync();

        _isFrench = Thread.CurrentThread.CurrentCulture.Name.Equals("fr-ca", StringComparison.OrdinalIgnoreCase);
        _projectName = _project?.ProjectName;
        _projectId = _project?.Project_ID ?? 0;

        _userId = await _userInformationService.GetUserIdString();
        if (_userId is null) logger.LogError("UserId is null");

        _user = await _userInformationService.GetUserAsync();
        var authUser = (await _userInformationService.GetAuthenticatedUser());
        _isDatahubAdmin = !_serviceAuthManager.GetViewingAsGuest(_userId) && authUser.IsInRole(RoleConstants.DATAHUB_ROLE_ADMIN);

        var isMemberOfProject = projectContext.Project_Users
            .Any(p => p.User_ID == _userId && p.Project.Project_Acronym_CD == ProjectAcronymParam);

        if (!isMemberOfProject)
        {
            await _achievementService.AddOrIncrementTelemetryEvent(DatahubUserTelemetry.TelemetryEvents.UserViewProjectNotMemberOf);
        }

        await _auditingService.TrackEvent("Open Initiative", ("Initiative", _projectName), ("Acronym", ProjectAcronymParam));
    }

    private void HandleToggleCosts()
    {
        _showCosts = !_showCosts;
    }
}