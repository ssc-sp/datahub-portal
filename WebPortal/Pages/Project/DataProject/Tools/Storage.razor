@inject IDbContextFactory<DatahubProjectDBContext> _dbFactoryProject
@inject RequestManagementService _requestManagementService


@if (_project is null)
{
    <ToolCard Loading/>
}
else
{
    <ToolCard
        Title="@Localizer["Project Storage"]"
        Description="@Localizer["Access the storage account for this project to upload, download and share datasets with all project members."]">
        <Logo>
            <i class="fas fa-hdd"></i>
        </Logo>
        <ToolActionsList>
            <ul>
                @if (_storageDeployed)
                {
                    <li>
                        
                    <DHLink Variant="h3" DataProject="@ProjectAcronym" LinkType="DatahubLinkType.Storage">
                        <AeButton class="light">@Localizer["View Storage"]</AeButton>
                    </DHLink>
                    </li>
                }
                else
                {
                    if (_storageServiceRequested)
                    {
                        <li>
                        <AeTypography>@Localizer["Service Request is being reviewed"]</AeTypography>
                        </li>
                    }
                    else
                    {
                        <AeButton class="light" @onclick="@HandleRequestService">@Localizer["Request Service Creation"]</AeButton>
                    }
                }
            </ul>
        </ToolActionsList>
    </ToolCard>
}

@code {

    [CascadingParameter(Name = "ProjectAcronym")]
    public string ProjectAcronym { get; set; }

    [CascadingParameter(Name = "UserId")]
    public string UserId { get; set; }

    [CascadingParameter(Name = "GraphUser")]
    public Microsoft.Graph.User GraphUser { get; set; }

    private bool _storageServiceRequested;
    private bool _storageDeployed;

    private Datahub_Project _project;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        await using var projectDbContext = await _dbFactoryProject.CreateDbContextAsync();

        _project = await projectDbContext.Projects
            .Include(p => p.Requests)
            .SingleAsync(p => p.Project_Acronym_CD == ProjectAcronym);

        if (UserId != null)
        {
            var storageServiceRequests = await projectDbContext.Project_Requests
                .Where(pr => pr.Project == _project)
                .Where(pr => pr.ServiceType == RequestManagementService.STORAGE)
                .ToListAsync();

            _storageDeployed = storageServiceRequests
                .Any(pr => pr.Is_Completed != null);
            _storageServiceRequested = storageServiceRequests
                .Any(pr => pr.Is_Completed == null);
        }
    }

    private async Task HandleRequestService()
    {
        var serviceRequest = new Datahub_ProjectServiceRequests()
        {
            ServiceType = RequestManagementService.STORAGE,
            ServiceRequests_Date_DT = DateTime.Now,
            Is_Completed = null,
            Project = _project,
            User_ID = UserId,
            User_Name = GraphUser.UserPrincipalName
        };

        await _requestManagementService.RequestService(serviceRequest);
    }

}