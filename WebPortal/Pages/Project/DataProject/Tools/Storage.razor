@inject IDbContextFactory<DatahubProjectDBContext> _dbFactoryProject
@inject RequestManagementService _requestManagementService


@if (_project is null)
{
    <div>Loading... stroage.razor</div>
}
else
{
    <AeCard class="facard1" CardPosition="AeCard.CardStyle.Horizontal">
        <Header>
            <div class="indigo" style="width:180px">
                <AeIcon class="fad fa-hdd card-icon fa-xs"/>
            </div>
        </Header>
        <ChildContent>
            <AeFlex Vertical>
                @if (_storageDeployed)
                {
                    <DHLink Variant="h3" DataProject="@ProjectAcronym" LinkType="DatahubLinkType.Storage">@Localizer["Project Storage"]</DHLink>
                }
                else
                {
                    <AeTypography Variant="h3">@Localizer["Project Storage"]</AeTypography>
                }
                <AeTypography>@Localizer["Access the storage account for this project to upload, download and share datasets with all project members."]</AeTypography>

            </AeFlex>
        </ChildContent>
        <Footer>
            @if (!_storageDeployed)
            {
                @if (_storageServiceRequested)
                {
                    <AeTypography class="warning">@Localizer["Service Request is being reviewed"]</AeTypography>
                }
                else
                {
                    <AeButton @onclick="@HandleRequestService">@Localizer["Request Service Creation"]</AeButton>
                }
            }
        </Footer>
    </AeCard>
}

@code {

    [CascadingParameter(Name = "ProjectAcronym")]
    public string ProjectAcronym { get; set; }

    [CascadingParameter(Name = "UserId")]
    public string UserId { get; set; }

    [CascadingParameter(Name = "GraphUser")]
    public Microsoft.Graph.User GraphUser { get; set; }

    private bool _storageServiceRequested;
    private bool _storageDeployed;

    private Datahub_Project _project;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        await using var projectDbContext = await _dbFactoryProject.CreateDbContextAsync();
        
        _project = await projectDbContext.Projects
            .Include(p => p.Requests)
            .SingleAsync(p => p.Project_Acronym_CD == ProjectAcronym);

        if (UserId != null)
        {
            var storageServiceRequests = await projectDbContext.Project_Requests
                .Where(pr => pr.Project == _project)
                .Where(pr => pr.ServiceType == RequestManagementService.STORAGE)
                .ToListAsync();

            _storageDeployed = storageServiceRequests
                .Any(pr => pr.Is_Completed != null);
            _storageServiceRequested = storageServiceRequests
                .Any(pr => pr.Is_Completed == null);
        }
    }

    private async Task HandleRequestService()
    {
        var serviceRequest = new Datahub_ProjectServiceRequests()
        {
            ServiceType = RequestManagementService.STORAGE,
            ServiceRequests_Date_DT = DateTime.Now,
            Is_Completed = null,
            Project = _project,
            User_ID = UserId,
            User_Name = GraphUser.UserPrincipalName
        };

        await _requestManagementService.RequestService(serviceRequest);
    }

}