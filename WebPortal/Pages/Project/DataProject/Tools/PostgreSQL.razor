@inject IDbContextFactory<DatahubProjectDBContext> _dbFactoryProject
@inject RequestManagementService _requestManagementService
@inject UIControlsService _uiControlService
@inject IProjectDatabaseService _projectDatabaseService

@if (_project is null)
{
    <div>Loading... databraicks.razor</div>
}
else
{
    <AeCard class="facard1" CardPosition="AeCard.CardStyle.Horizontal">
        <Header>
            <div>
                <AeIcon class="fad fa-database card-icon fa-xs"/>
            </div>
        </Header>
        <ChildContent>
            <AeFlex Vertical>
                <AeTypography Variant="h3">
                    @Localizer["PROJECT-PAGE.DATABASE-CARD.CardTitlePG"]
                </AeTypography>
                <AeTypography>@Localizer["Access the project PostgreSQL database and leverage your credentials for data connections"]</AeTypography>
            </AeFlex>
        </ChildContent>
        <Footer>
            <div>
                <AeButton OnClickEvent=@ShowDatabaseInformationPopupWithoutToken>@Localizer["PROJECT-PAGE.DATABASE-CARD.MoreInfo_button"]</AeButton>
            </div>
            @if (_project.IsDatabasePostgres && _projectDatabaseService.IsServiceAvailable())
            {
                <div>
                    <AeButton OnClickEvent=@ShowDatabaseInformationPopupWithToken>@Localizer["PROJECT-PAGE.DATABASE-CARD.GetToken_button"]</AeButton>
                </div>
            }
            else
            {
                <AeButton @onclick="@HandleRequestService">@Localizer["Request Service Creation"]</AeButton>
            }
        </Footer>
    </AeCard>
}

@code {

    [CascadingParameter(Name = "ProjectAcronym")]
    public string ProjectAcronym { get; set; }

    [CascadingParameter(Name = "UserId")]
    public string UserId { get; set; }

    [CascadingParameter(Name = "GraphUser")]
    public Microsoft.Graph.User GraphUser { get; set; }

    private bool _powerBiRequested;
    private bool _powerBiServiceRequested;
    private bool _powerBiAuthorized;

    private Datahub_Project _project;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        
        await using var projectDbContext = await _dbFactoryProject.CreateDbContextAsync();

        _project = await projectDbContext.Projects
            .Include(p => p.Requests)
            .SingleAsync(p => p.Project_Acronym_CD == ProjectAcronym);

        if (UserId != null)
        {
            _powerBiRequested = _project.Requests.Any(r => r.Databricks);
            _powerBiAuthorized = _project.Requests
                .Where(r => r.User_ID == UserId && r.Completion_DT != null)
                .Any(r => r.PowerBI);
            _powerBiServiceRequested = await projectDbContext.Project_Requests
                .Where(p => p.Project == _project)
                .AnyAsync(r =>
                    r.ServiceType == RequestManagementService.POWERBI
                    && r.Is_Completed == null);
        }
    }

    private async Task HandleRequestService()
    {
        var serviceRequest = new Datahub_ProjectServiceRequests()
        {
            ServiceType = RequestManagementService.POSTGRESQL,
            ServiceRequests_Date_DT = DateTime.Now,
            Is_Completed = null,
            Project = _project,
            User_ID = UserId,
            User_Name = GraphUser.UserPrincipalName
        };

        await _requestManagementService.RequestService(serviceRequest);
    }


    private async Task ShowDatabaseInformationPopup(bool getToken = false)
    {
        RenderFragment popupHtml =
            @<DataProjectDbInformation DataProject=@_project GetAccessTokenImmediately="@getToken"/>;
        await _uiControlService.ToggleModal(@<RenderFragmentModal Fragment=@popupHtml/>);
    }

    private async Task ShowDatabaseInformationPopupWithToken() => await ShowDatabaseInformationPopup(true);
    private async Task ShowDatabaseInformationPopupWithoutToken() => await ShowDatabaseInformationPopup();


}