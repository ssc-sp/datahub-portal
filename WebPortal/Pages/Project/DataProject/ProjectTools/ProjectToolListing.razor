@using Microsoft.Extensions.Options
@using Datahub.Portal.Pages.Project.DataProject.ProjectTools

@inject ServiceAuthManager _serviceAuthManager
@inject IUserInformationService _userInformationService
@inject IDbContextFactory<DatahubProjectDBContext> _dbFactoryProject
@inject IOptions<DataProjectsConfiguration> _configuration
@inject ServiceAuthManager ServiceAuthManager

<AuthorizeView Roles="@string.Join(',', _authorizedRoles)">

    <div class="project-tools">

        @*<AeTypography Variant="h2">@Localizer["Project Tools"]</AeTypography>*@
        <MudText Typo="Typo.h4">@Localizer["Project Tools"]</MudText>

        <div class="controls">
            <span class="icon-wrapper @(_isDense ? "active" : "")" @onclick="@(() => ToggleDense(true))">
                <i class="fas fa-list-ul"></i>
            </span>
            <span class="icon-wrapper @(!_isDense ? "active" : "")" @onclick="@(() => ToggleDense(false))">
                <i class="fas fa-th-large"></i>
            </span>
        </div>
        @if (_isLoading)
        {
            @*<Spinner/>*@
        }
        else
        {
            <div class="tools-container @(_isDense ? "dense" : "")">
                @if (_configuration.Value.Databricks && _canViewDatabricks)
                {
                    <Databricks/>
                }
                @if (_configuration.Value.PowerBI && _canViewPowerBi)
                {
                    <PowerBI/>
                }
                @if (!string.IsNullOrEmpty(_project.WebForms_URL) && _configuration.Value.WebForms)
                {
                    <DataEntry/>
                }
                @if (_configuration.Value.WebForms)
                {
                    <FormBuilder/>
                }
                @if (_configuration.Value.Storage)
                {
                    <Storage/>
                }
                @if (_configuration.Value.PublicSharing)
                {
                    <PublicSharing/>
                }

                @if (_configuration.Value.Costing)
                {
                    <Costing/>
                }
                @if (_configuration.Value.DataManagement)
                {
                    <IoT/>
                }

                @if (_configuration.Value.IoT)
                {
                    <DataManagement/>
                }

                @if (_configuration.Value.PostgreSQL)
                {
                    @if (_projectDatabaseResources.Count < 1)
                    {
                        <ProjectDatabase />
                    }
                    else
                    {
                        foreach(var db in _projectDatabaseResources)
                        {
                            <ProjectDatabase ResourceID=@db.ResourceId />
                        }
                    }
                }
                <Admin/>

                @if (_configuration.Value.StorageCost)
                {
                    <StorageCost />
                }

                @if (_configuration.Value.ComputeCost)
                {
                    <ComputeCost />
                }
            </div>
        }
    </div>
</AuthorizeView>

@code {

    [CascadingParameter(Name = "ProjectAcronym")]
    public string ProjectAcronym { get; set; }
    [CascadingParameter(Name = "IsDatahubAdmin")]
    public bool IsDatahubAdmin { get; set; }

    private bool _isLoading = true;
    private bool _isDense = false;
    private Datahub_Project _project;
    private System.Security.Claims.ClaimsPrincipal _user;
    private bool _canViewDatabricks;
    private bool _canViewPowerBi;
    private List<string> _authorizedRoles;

    private List<Project_Resources2> _projectDatabaseResources = new();

    protected override async Task OnInitializedAsync()
    {

        var user = await _userInformationService.GetUserAsync();
        _authorizedRoles = new List<string>
        {
            ProjectAcronym, $"{ProjectAcronym}-admin"
        };

        if (!_serviceAuthManager.GetViewingAsGuest(user.Id))
        {
            _authorizedRoles.Add(RoleConstants.DATAHUB_ROLE_ADMIN);
        }

        _user = await _userInformationService.GetAuthenticatedUser();

        await using var projectDbContext = await _dbFactoryProject.CreateDbContextAsync();
        _project = await projectDbContext.Projects.FirstOrDefaultAsync(p => p.Project_Acronym_CD == ProjectAcronym);

        var _serviceRequests = await projectDbContext.Project_Requests
            .Where(p => p.Project == _project)
            .ToListAsync();

        var isUserAdmin = _user.IsInRole($"{ProjectAcronym}-admin");
        _canViewDatabricks = isUserAdmin || !string.IsNullOrEmpty(_project.Databricks_URL) || IsDatahubAdmin;

        var isPowerBiActiveForNonAdmin = !string.IsNullOrEmpty(_project.PowerBI_URL) || 
                _serviceRequests.Any(r => r.ServiceType == RequestManagementService.POWERBI && r.Is_Completed.HasValue);

        _canViewPowerBi = isUserAdmin || isPowerBiActiveForNonAdmin || IsDatahubAdmin;

        var allProjectResources = await projectDbContext.Project_Resources2.Where(r => r.Project == _project).ToListAsync();

        _projectDatabaseResources = allProjectResources
            .Where(r => r.ResourceType == RequestManagementService.POSTGRESQL || r.ResourceType == RequestManagementService.SQLSERVER)
            .ToList();

        _isLoading = false;
    }

    private void ToggleDense(bool isDense)
    {
        _isDense = isDense;
    }
}