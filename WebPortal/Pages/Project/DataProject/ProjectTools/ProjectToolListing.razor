@using Datahub.Core.Services.Projects;
@using Datahub.ProjectTools.Services;
@using Microsoft.Extensions.Options
@using Datahub.Portal.Pages.Project.DataProject.ProjectTools

@inject ServiceAuthManager _serviceAuthManager
@inject IUserInformationService _userInformationService
@inject IDbContextFactory<DatahubProjectDBContext> _dbFactoryProject
@inject IOptions<DataProjectsConfiguration> _configuration
@inject ServiceAuthManager ServiceAuthManager
@inject IEmailNotificationService _emailNotificationService
@inject ProjectResourcesListingService ProjectResourcesListingService

<div>

    <AuthorizeView Roles="@string.Join(',', _authorizedRoles)">
        <NotAuthorized>
            <div class="access-denied">
                <AeTypography Variant="h3">@Localizer["Access Denied"]</AeTypography>
                <AeTypography class="danger">@Localizer["You are not a member of this project."]</AeTypography>
                @if (_isProjectUserPendingApproval)
                {
                    <AeTypography class="access-request-reviewing">@Localizer["Access Request is being reviewed"]</AeTypography>
                }
                else
                {
                    <span class="button-wrapper">
                        <AeButton @onclick="RequestProjectAccess">@Localizer["Request Access"]</AeButton>
                    </span>
                }
            </div>
        </NotAuthorized>
        <Authorized>
            @if (_activeResources?.Count > 0)
            {
                <div class="project-tools" style="margin-bottom: 2rem;">
                <MudText Typo="Typo.h4">@Localizer["Active Project Tools"]</MudText>


                <div class="controls">
                    <span class="icon-wrapper @(_isDense ? "active" : "")" @onclick="@(() => ToggleDense(true))">
                        <i class="fas fa-list-ul"></i>
                    </span>
                    <span class="icon-wrapper @(!_isDense ? "active" : "")" @onclick="@(() => ToggleDense(false))">
                        <i class="fas fa-th-large"></i>
                    </span>
                </div>
                @if (_isLoading)
                {
                    @*<Spinner/>*@
                }
                else
                {
                    <div class="tools-container @(_isDense ? "dense" : "")">
                        @foreach (var active in _activeResources)
                        {
                            <DynamicComponent Parameters="active.parameters" Type="active.type" />
                        }
@*                        @if (_configuration.Value.WebForms)
                        {
                            <FormBuilder/>
                        }
                        @if (_configuration.Value.Costing)
                        {
                            <Costing/>
                        }
                        @if (_configuration.Value.DataManagement)
                        {
                            <IoT/>
                        }

                        @if (_configuration.Value.IoT)
                        {
                            <DataManagement/>
                        }

                        @if (_configuration.Value.PostgreSQL)
                        {
                            @if (_projectDatabaseResources.Count < 1)
                            {
                                <ProjectDatabase />
                            }
                            else
                            {
                                foreach(var db in _projectDatabaseResources)
                                {
                                    <ProjectDatabase ResourceID=@db.ResourceId />
                                }
                            }
                        }*@
                        <Admin/>

                        @if (_configuration.Value.StorageCost)
                        {
                            <StorageCost />
                        }

                        @if (_configuration.Value.ComputeCost)
                        {
                            <ComputeCost />
                    }
                </div>
            }
            </div>
            }

            @if (_inactiveResources?.Count > 0)
            {
            <div class="project-tools">
                <MudText Typo="Typo.h4">@Localizer["Available Project Tools"]</MudText>


                <div class="controls">
                    <span class="icon-wrapper @(_isDense ? "active" : "")" @onclick="@(() => ToggleDense(true))">
                        <i class="fas fa-list-ul"></i>
                    </span>
                    <span class="icon-wrapper @(!_isDense ? "active" : "")" @onclick="@(() => ToggleDense(false))">
                        <i class="fas fa-th-large"></i>
                    </span>
                </div>
                @if (_isLoading)
                {
                    @*<Spinner/>*@
                }
                else
                {
                    <div class="tools-container @(_isDense ? "dense" : "")">
                        @foreach (var resource in _inactiveResources)
                        {
                                <DynamicComponent Parameters="resource.parameters" Type="resource.type" />
                        }
                    </div>
                }
            </div>
            }
        </Authorized>
    </AuthorizeView>
</div>

@code {

    [CascadingParameter(Name = "Project")]
    private Datahub_Project Project { get; set; }

    private bool _isLoading = true;
    private bool _isDense = false;
    private System.Security.Claims.ClaimsPrincipal _user;
    private bool _canViewPowerBi;
    private List<string> _authorizedRoles;
    private Microsoft.Graph.User _graphUser;

    private string ProjectAcronym => Project?.Project_Acronym_CD;

    private List<Project_Resources2> _projectDatabaseResources = new();

    private bool _isProjectUserPendingApproval;

    private List<(Type type, IDictionary<string, object> parameters)> _activeResources;
    private List<(Type type, IDictionary<string, object> parameters)> _inactiveResources;

    protected override async Task OnInitializedAsync()
    {
        await using var projectDbContext = await _dbFactoryProject.CreateDbContextAsync();

        var user = await _userInformationService.GetCurrentGraphUserAsync();
        _authorizedRoles = new List<string>
        {
            ProjectAcronym, $"{ProjectAcronym}-admin"
        };

        if (!_serviceAuthManager.GetViewingAsGuest(user.Id))
        {
            _authorizedRoles.Add(RoleConstants.DATAHUB_ROLE_ADMIN);
        }

        _user = await _userInformationService.GetAuthenticatedUser();

        _graphUser = await _userInformationService.GetCurrentGraphUserAsync();


        _isProjectUserPendingApproval = projectDbContext.Project_Users_Requests
            .Any(u => u.User_ID == _graphUser.Id && Project == u.Project && u.Approved_DT == null);


        var _serviceRequests = await projectDbContext.Project_Requests.Where(p => p.Project == Project).ToListAsync();

        var isPowerBiActiveForNonAdmin = !string.IsNullOrEmpty(Project.PowerBI_URL) || 
            _serviceRequests.Any(r => r.ServiceType == IRequestManagementService.POWERBI && r.Is_Completed.HasValue);

        //_canViewPowerBi = isUserAdmin || isPowerBiActiveForNonAdmin || IsDatahubAdmin;

        var allProjectResources = await projectDbContext.Project_Resources2.Where(r => r.Project == Project).ToListAsync();

        _projectDatabaseResources = allProjectResources
            .Where(r => r.ResourceType == IRequestManagementService.POSTGRESQL || r.ResourceType == IRequestManagementService.SQLSERVER)
            .ToList();

        var allResources = await ProjectResourcesListingService.GetResourcesForProject(Project);
        _activeResources = allResources.SelectMany(a => a.GetActiveResources()).ToList();
        _inactiveResources = allResources.Select(a => a.GetInactiveResource()).Where(a => a != null).Select(a => a.Value).ToList();
        _isLoading = false;
    }

    private async Task RequestProjectAccess()
    {
        await using var projectContext = await _dbFactoryProject.CreateDbContextAsync();

        projectContext.Attach(Project);

        var request = new Datahub_Project_User_Request()
        {
            User_ID = _graphUser.Id,
            Project = Project,
            Requested_DT = DateTime.Now
        };

        projectContext.Project_Users_Requests.Add(request);
        await projectContext.SaveChangesAsync();

        var admins = await GetProjectAdministratorEmailsAndIds();

        await _emailNotificationService.SendServiceAccessRequestNotification(_graphUser.DisplayName, "project", Project.ProjectInfo, admins);

        _isProjectUserPendingApproval = true;
    }

    private async Task<List<string>> GetProjectAdministratorEmailsAndIds()
    {
        await using var projectContext = await _dbFactoryProject.CreateDbContextAsync();
        projectContext.Attach(Project);
        var loadUsersTask = projectContext
            .Entry(Project)
            .Collection(p => p.Users)
            .LoadAsync();

        await loadUsersTask;

        var adminUsers = Project.Users
            .Where(u => u.IsAdmin)
            .Select(u => u.User_ID)
            .ToList();

        return adminUsers;
    }

    private void ToggleDense(bool isDense)
    {
        _isDense = isDense;
    }
}