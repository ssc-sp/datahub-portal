@using Microsoft.Extensions.Options
@using Datahub.Portal.Pages.Project.DataProject.ProjectTools

@inject IDbContextFactory<DatahubProjectDBContext> _dbFactoryProject
@inject IOptions<DataProjectsConfiguration> _dataProjectConfiguration
@inject IConfiguration _configuration


<AuthorizeView Roles="@($"{ProjectAcronym}, {ProjectAcronym}-admin, {RoleConstants.DATAHUB_ROLE_ADMIN}")">

    <div class="project-tools">

        <AeTypography Variant="h2">@Localizer["Project Tools"]</AeTypography>
        <div class="controls">
            <span class="icon-wrapper @(_isDense ? "active" : "")" @onclick="@(() => ToggleDense(true))">
                <i class="fas fa-list-ul"></i>
            </span>
            <span class="icon-wrapper @(!_isDense ? "active" : "")" @onclick="@(() => ToggleDense(false))">
                <i class="fas fa-th-large"></i>
            </span>
        </div>
        @if (_isLoading)
        {
            <Spinner/>
        }
        else
        {
            <div class="tools-container @(_isDense ? "dense" : "")">
                @if (_dataProjectConfiguration.Value.Databricks)
                {
                    <Databricks/>
                }
                @if (_dataProjectConfiguration.Value.PowerBI)
                {
                    <PowerBI/>
                }
                @if (!string.IsNullOrEmpty(_project.WebForms_URL) && _dataProjectConfiguration.Value.WebForms)
                {
                    <DataEntry/>
                }
                @if (_dataProjectConfiguration.Value.WebForms)
                {
                    <FormBuilder/>
                }
                @if (_dataProjectConfiguration.Value.Storage)
                {
                    <Storage/>
                }
                @if (_dataProjectConfiguration.Value.PublicSharing)
                {
                    <PublicSharing/>
                }

                @if (_dataProjectConfiguration.Value.Costing)
                {
                    <Costing/>
                }

                @if (_configuration["ProjectTools:DataManagement"] == "enabled")
                {
                    <IoT/>
                }

                @if (_configuration["ProjectTools:IoT"] == "enabled")
                {
                    <DataManagement/>
                }

                @if (_dataProjectConfiguration.Value.PostgreSQL)
                {
                    <PostgreSQL/>
                }

                @if (_dataProjectConfiguration.Value.SQLServer)
                {
                    <SQLServer/>
                }


                <Admin/>
            </div>
        }
    </div>
</AuthorizeView>

@code {

    [CascadingParameter(Name = "ProjectAcronym")]
    public string ProjectAcronym { get; set; }

    private bool _isLoading = true;
    private bool _isDense = false;
    private Datahub_Project _project;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        await using var projectContext = await _dbFactoryProject.CreateDbContextAsync();
        _project = await projectContext.Projects
            .SingleOrDefaultAsync(p => p.Project_Acronym_CD == ProjectAcronym);

        _isLoading = false;
    }

    private void ToggleDense(bool isDense)
    {
        _isDense = isDense;
    }
}