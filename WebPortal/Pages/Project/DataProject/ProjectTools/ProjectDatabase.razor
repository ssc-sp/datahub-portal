@using Datahub.Portal.Data.ProjectResource
@inject IDbContextFactory<DatahubProjectDBContext> _dbFactoryProject
@inject RequestManagementService _requestManagementService
@inject IProjectDatabaseService _projectDatabaseService;
@inject IHttpClientFactory _httpClientFactory;
@inject ILogger<ProjectDatabase> _logger;
@inject UIControlsService _uiControlService

@if(_isLoading)
{
    <ToolCard Loading />
}
else
{
    <ToolCard
        Title=@CardTitle
        Description=@CardDescription>

        <Logo>
            <div>
                <AeIcon class="fad fa-database card-icon fa-xs"/>
            </div>
        </Logo>

        <ToolActionsList>
            <ul>
                @if (_showDatabaseInfo)
                {
                    <li>@Localizer[$"{LOCALIZATION_PREFIX}.DatabaseType"]: @Localizer[$"RESOURCE-TYPE.{_databaseResource.Database_Type}"]</li>
                    <li>@Localizer[$"{LOCALIZATION_PREFIX}.DatabaseServer"]: @_databaseResource.Database_Server</li>
                    <li>@Localizer[$"{LOCALIZATION_PREFIX}.DatabaseName"]: @_databaseResource.Database_Name</li>
                    @if (_showPostgresInfo)
                    {
                        <li>@Localizer[$"{LOCALIZATION_PREFIX}.DbUsername"]: @($"{GraphUser.Mail.ToLowerInvariant()}@{_databaseResource.Database_Server}")</li>
                        <li>@Localizer[$"{LOCALIZATION_PREFIX}.DbHostname"]: @($"{_databaseResource.Database_Server}.{POSTGRES_HOST_SUFFIX}")</li>
                        @if (_showPostgresTokenSection)
                        {
                            @if(_showPostgresToken)
                            {
                                <li>
                                    <label>@Localizer[$"{LOCALIZATION_PREFIX}.AccessToken"]:</label>
                                    <a href="#" onclick="copyToClipboard('dbAccessToken')" @onclick:preventDefault=@true>
                                        <i class="fas fa-copy" title=@Localizer[$"{LOCALIZATION_PREFIX}.Copy"] >&nbsp;</i>
                                    </a>
                                    <AeInput disabled DefaultValue=@_postgresAuthResult.AccessToken class="formuserinput" id="dbAccessToken" />
                                </li>
                                <li>@Localizer[$"{LOCALIZATION_PREFIX}.Expires"]: @_postgresAuthResult.ExpiresOn.ToLocalTime()</li>
                            }
                            else
                            {
                                <li>
                                    <AeButton OnClickEvent=@GetPostgresToken Disabled=@_awaitingToken>@Localizer[$"{LOCALIZATION_PREFIX}.GetToken_button"]</AeButton>
                                    @if (_awaitingToken)
                                    {
                                        <div style="display: inline-block;">
                                            <Spinner Small/>
                                        </div>
                                    }
                                </li>
                            }
                        }
                        @if (_showPostgresInstructionsButton)
                        {
                            <li><AeButton OnClickEvent=@ShowPostgresResources class="light">@Localizer[$"{LOCALIZATION_PREFIX}.PostgresResources"]</AeButton></li>
                        }
                        else if (_showPostgresInstructionError)
                        {
                            <li><AeTypography>@Localizer[$"{LOCALIZATION_PREFIX}.ErrorLoadingPostgresInfo"]</AeTypography></li>
                        }
                    }
                    else if (_showSqlServerInfo)
                    {
                        <li>
                            <label>@Localizer[$"{LOCALIZATION_PREFIX}.ConnectionString"]:</label>
                            <a href="#" onclick="copyToClipboard('sqlConnString')" @onclick:preventDefault=@true>
                                <i class="fas fa-copy" title=@Localizer[$"{LOCALIZATION_PREFIX}.Copy"] >&nbsp;</i>
                            </a>
                            <AeInput disabled DefaultValue=@BuildSqlServerConnectionString(_databaseResource) class="formuserinput" id="sqlConnString" />
                        </li>
                    }
                    <li><AeButton OnClickEvent=@ShowMetadataEditor>@Localizer[$"{LOCALIZATION_PREFIX}.EditMetadata"]</AeButton></li>
                }
                else if (_showExistingRequest)
                {
                    <li>
                        <AeTypography class="light">@Localizer[$"{LOCALIZATION_PREFIX}.RequestBeingReviewed", Localizer[$"RESOURCE-TYPE.{_existingRequestType}"]]</AeTypography>
                    </li>
                }
                else if (_showRequestButtons)
                {
                    <li>
                        <AeButton OnClickEvent=@RequestPostgres>@Localizer["Request PostgreSQL Database"]</AeButton>
                    </li>
                    <li>
                        <AeButton OnClickEvent=@RequestSqlServer>@Localizer["Request SQL Server Database"]</AeButton>
                    </li>
                }
                else
                {
                    <li>
                        <AeTypography>@Localizer[$"{LOCALIZATION_PREFIX}.ErrorLoadingDisplaying", ProjectAcronym]</AeTypography>
                    </li>
                }
            </ul>
        </ToolActionsList>


    </ToolCard>
}

@code {
    private readonly string LOCALIZATION_PREFIX = "PROJECT-PAGE.DATABASE-CARD";

    // TODO make this configurable, and/or store the whole hostname in the db record
    private readonly string POSTGRES_HOST_SUFFIX = "postgres.database.azure.com";

    private readonly string POSTGRES_RESOURCES_URL = "https://raw.githubusercontent.com/wiki/NRCan/datahub-portal/Postgresql-Resources.md";

    [CascadingParameter(Name = "ProjectAcronym")]
    public string ProjectAcronym { get; set; }

    [CascadingParameter(Name = "UserId")]
    public string UserId { get; set; }

    [CascadingParameter(Name = "GraphUser")]
    public Microsoft.Graph.User GraphUser { get; set; }

    [Parameter]
    public Guid? ResourceID { get; set; } = null;

    private bool _showRequestButtons => ResourceID == null && _databaseRequests.Count < 1;
    private bool _showExistingRequest => !string.IsNullOrEmpty(_existingRequestType);
    private bool _showDatabaseInfo => _databaseResource != null;
    private bool _showPostgresInfo => _showDatabaseInfo && _databaseResource.IsPostgres;
    private bool _showSqlServerInfo => _showDatabaseInfo && _databaseResource.IsSqlServer;
    private bool _showPostgresTokenSection => _showPostgresInfo && _projectDatabaseService.IsServiceAvailable();
    private bool _showPostgresToken => _postgresAuthResult != null;
    private bool _showPostgresInstructionsButton => !string.IsNullOrEmpty(_postgresInstructionsMd);
    private bool _showPostgresInstructionError = false;

    private bool _awaitingToken;
    private Microsoft.Azure.Services.AppAuthentication.AppAuthenticationResult _postgresAuthResult;
    private string _postgresInstructionsMd;

    private string BuildSqlServerConnectionString(ProjectResource_Database db) => $"Server={db.Database_Server};Database={db.Database_Name};Authentication=Active Directory Integrated;";

    private Datahub_Project _project;
    private Project_Resources2 _resource;
    private List<Datahub_ProjectServiceRequests> _databaseRequests = new();
    private string _existingRequestType;
    private ProjectResource_Database _databaseResource;

    private string CardTitle
    {
        get
        {
            if (_showDatabaseInfo)
            {
                return string.Format("{0}: {1} ({2})", 
                    Localizer[$"{LOCALIZATION_PREFIX}.Database"], 
                    _databaseResource.Database_Name, 
                    Localizer[$"RESOURCE-TYPE.{_databaseResource.Database_Type}"]);
            }
            else if (_showExistingRequest)
            {
                return string.Format("{0}: {1}", 
                    Localizer[$"{LOCALIZATION_PREFIX}.PendingRequest"], 
                    Localizer[$"RESOURCE-TYPE.{_existingRequestType}"]);
            }
            else
            {
                return Localizer[$"{LOCALIZATION_PREFIX}.Database"];
            }
        }
    }

    private string CardDescription
    {
        get
        {
            if (_showPostgresInfo)
            {
                return Localizer["Access the project PostgreSQL database and leverage your credentials for data connections"];
            }
            else if (_showSqlServerInfo)
            {
                return Localizer["Azure SQL Database is a scalable database service built for the cloud to store structured datasets and access them through Tableau, Power BI, Web forms or other tools."];
            }
            else
            {
                return string.Empty;
            }
        }
    }

    private bool _isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        await LoadProjectsAndRequests();
        _isLoading = false;
        await LoadPostgresResourcesContent();
    }

    private async Task LoadPostgresResourcesContent()
    {
        _postgresInstructionsMd = null;
        _showPostgresInstructionError = false;

        using var httpClient = _httpClientFactory.CreateClient();

        using (var res = await httpClient.GetAsync(POSTGRES_RESOURCES_URL))
        {
            try
            {
                res.EnsureSuccessStatusCode();

                var content = await res.Content.ReadAsStringAsync();

                _postgresInstructionsMd = content;
            }
            catch (HttpRequestException ex)
            {
                _logger.LogError(ex, $"Error loading Postgres information from {POSTGRES_RESOURCES_URL}");
                _showPostgresInstructionError = true;
            }
        }

        StateHasChanged();
    }

    private async Task ShowPostgresResources()
    {
        RenderFragment popupHtml = @<AeMarkdown Content=@_postgresInstructionsMd />;
        await _uiControlService.ToggleModal(@<RenderFragmentModal Fragment=@popupHtml/>);
    }

    private async Task ShowMetadataEditor()
    {
        RenderFragment metadataEditor = @<ObjectMetadataEditor 
                            ObjectId=@ResourceID.ToString()
                            Location="Azure"
                            ProfileName="catalog"
                            ObjectType=@Metadata.Model.MetadataObjectType.Database
                            UpdateCatalog=@true
                            ValidateRequired=@false
                            Name=@_databaseResource.Database_Name
                            OnSave=@HandleClose
                            OnDiscard=@HandleClose
                        />;
        await _uiControlService.ToggleModal(@<RenderFragmentModal Fragment=@metadataEditor />
    );
    }

    private async Task HandleClose()
    {
        await _uiControlService.ToggleModal();
    }

    private async Task GetPostgresToken()
    {
        _awaitingToken = true;
        StateHasChanged();
        _postgresAuthResult = await _projectDatabaseService.GetPostgresAuthenticationObject();
        _awaitingToken = false;
        StateHasChanged();
    }


    private async Task LoadProjectsAndRequests()
    {
        using var projectDbContext = await _dbFactoryProject.CreateDbContextAsync();
        _project = await projectDbContext.Projects
            .Include(p => p.Requests)
            .Include(p => p.ServiceRequests)
            .SingleAsync(p => p.Project_Acronym_CD == ProjectAcronym);

        if (ResourceID.HasValue)
        {
            _resource = await projectDbContext.Project_Resources2.FirstOrDefaultAsync(r => r.ResourceId == ResourceID.Value);
            _existingRequestType = _resource?.ResourceType;
            if (_resource.IsValid<ProjectResource_Database>())
            {
                _databaseResource = _resource?.GetResourceObject<ProjectResource_Database>();
            }
        }

        _databaseRequests = _project?.ServiceRequests
            .Where(r => r.ServiceType == RequestManagementService.POSTGRESQL || r.ServiceType == RequestManagementService.SQLSERVER)
            .ToList();

        _existingRequestType = _existingRequestType ?? _databaseRequests.FirstOrDefault()?.ServiceType;
    }

    private async Task RequestSqlServer() => await RequestDatabase(RequestManagementService.SQLSERVER);

    private async Task RequestPostgres() => await RequestDatabase(RequestManagementService.POSTGRESQL);

    private async Task RequestDatabase(string which)
    {
        var serviceRequest = new Datahub_ProjectServiceRequests()
        {
            ServiceType = which,
            ServiceRequests_Date_DT = DateTime.Now,
            Is_Completed = null,
            Project = _project,
            User_ID = UserId,
            User_Name = GraphUser.UserPrincipalName
        };

        await _requestManagementService.RequestServiceWithDefaults(serviceRequest);
        await LoadProjectsAndRequests();
        StateHasChanged();
    }

}
