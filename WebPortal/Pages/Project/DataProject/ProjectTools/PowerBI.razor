@using Datahub.ProjectTools.Services;
@inject IDbContextFactory<DatahubProjectDBContext> _dbFactoryProject
@inject RequestManagementService _requestManagementService
@inject ILogger<PowerBI> _logger
@inject IUserInformationService _userInformationService

@if (Project is null)
{
    <ToolCard Loading/>
}
else
{
    <ToolCard
        Title=@Localizer["Power BI Workspace"]
        Description="@Localizer["Access the project Workspace in the Power BI Service"]">
        <Logo>
           <img src="/icons/svg/powerbi.svg" alt="Power bi">
        </Logo>
        <ToolActionsList>
            <ul>
                @if (!ServiceError)
                {
                    @if (_powerBiServiceCreated)
                    {
                            <li>
                                <DHLink Variant="h3" DataProject="@ProjectAcronym" LinkType="DatahubLinkType.PowerBIReport">
                                    <ToolActionButton LinkType="LinkType.External">
                                        @Localizer["Open Power BI"]
                                    </ToolActionButton>
                                </DHLink>
                            </li>
                    }
                    else if (_powerBiServiceRequested)
                    {
                        <AuthorizeView Roles=@RoleConstants.DATAHUB_ROLE_ADMIN Context="PowerBi_admin">
                            <Authorized>
                                <li>
                                    <NavLink href="@($"/project/{ProjectAcronym}/powerbirequest")">
                                        <ToolActionButton LinkType="LinkType.Request" >
                                            @Localizer["Review PowerBI Request"]
                                        </ToolActionButton>
                                    </NavLink>
                                </li>
                            </Authorized>
                            <NotAuthorized>
                                <li>
                                    <ToolActionButton LinkType="LinkType.Request">
                                        @Localizer["Service Request is being reviewed"]
                                    </ToolActionButton>
                                </li>
                            </NotAuthorized>
                        </AuthorizeView>
                    }
                    else
                    {
                        <li>
                            <ToolActionButton LinkType="LinkType.Request"  OnClick="@HandleRequestService" Disabled=@_isWorking>
                                @Localizer["Request Service Creation"]
                            </ToolActionButton>
                            <SuccessIndicator @bind-IsLoading=@_isWorking @ref=@_serviceReqInd />
                        </li>
                    }
                } else
                {
                    <MudAlert Severity="Severity.Error" Style="width: fit-content" Class="my-4">
                        <MudText Typo="Typo.body1">@Localizer["Error configuring PowerBI service"]</MudText>
                    </MudAlert>
                }
            </ul>
        </ToolActionsList>
    </ToolCard>


}

@code {

    [CascadingParameter(Name = "Project")]
    private Datahub_Project Project { get; set; }

    public string UserId { get; set; }

    [CascadingParameter(Name = "GraphUser")]
    public Microsoft.Graph.User GraphUser { get; set; }

    private bool _powerBiServiceRequested = false;
    private bool _powerBiServiceCreated = false;

    private bool ServiceError { get; set; } = false;

    private bool _isWorking { get; set; } = false;
    private SuccessIndicator _serviceReqInd;
    private SuccessIndicator _accessReqInd;

    private string ProjectAcronym => Project?.Project_Acronym_CD;

    protected override async Task OnInitializedAsync()
    {
        await LoadProjectAndRequests();
    }

    private async Task LoadProjectAndRequests()
    {
        await using var projectDbContext = await _dbFactoryProject.CreateDbContextAsync();

        var _serviceRequests = await projectDbContext.Project_Requests
            .Where(p => p.Project == Project)
            .ToListAsync();

        UserId = await _userInformationService.GetUserIdString();
        if (UserId != null)
        {
            _powerBiServiceRequested = _serviceRequests.Any(r => r.ServiceType == RequestManagementService.POWERBI && r.Is_Completed == null);
            _powerBiServiceCreated = !string.IsNullOrEmpty(Project.PowerBI_URL) || 
                _serviceRequests.Any(r => r.ServiceType == RequestManagementService.POWERBI && r.Is_Completed.HasValue);
        }
        else
        {
            ServiceError = true;
        }
    }

    private async Task HandleRequestAccess()
    {
        _isWorking = true;
        StateHasChanged();

        await LoadProjectAndRequests();
    }

    private async Task HandleRequestService()
    {
        _isWorking = true;
        StateHasChanged();

        var serviceRequest = new Datahub_ProjectServiceRequests()
        {
            ServiceType = RequestManagementService.POWERBI,
            ServiceRequests_Date_DT = DateTime.Now,
            Is_Completed = null,
            Project = Project,
            User_ID = UserId,
            User_Name = GraphUser.UserPrincipalName
        };

        var success = true;

        try
        {
            await _requestManagementService.RequestServiceWithDefaults(serviceRequest);
        }
        catch (Exception ex)
        {
            success = false;
            _logger.LogError(ex, $"Error requesting powerbi service in project {ProjectAcronym}");
        }

        if (success)
        {
            await _serviceReqInd.SignalSuccess();
        }
        else
        {
            await _serviceReqInd.SignalFailure();
        }

        await LoadProjectAndRequests();
    }
}
