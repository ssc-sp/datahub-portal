@*Storage.razor*@
@using Datahub.Portal.Data.ProjectResource
@inject IDbContextFactory<DatahubProjectDBContext> _dbFactoryProject
@inject RequestManagementService _requestManagementService

@if (Project is null)
{
    <ToolCard Loading/>
}
else
{
    <ToolCard
        Title="@Localizer["Project Storage"]"
        Description="@Localizer["Access the storage account for this project to upload, download and share datasets with all project members."]">
        <Logo>
            <i class="fas fa-hdd fa-2x"></i>
        </Logo>
        <ToolActionsList>
            <ul>
                @if (_storageDeployed)
                {
                    <li>
                        <DHLink DataProject="@ProjectAcronym" LinkType="DatahubLinkType.Storage">
                            <ToolActionButton LinkType="LinkType.Internal">
                                @Localizer["View Storage"]
                            </ToolActionButton>
                        </DHLink>
                    </li>
                }
                else
                {
                    if (_storageServiceRequested)
                    {
                        <li>
                            <AeTypography class="access-text">@Localizer["Service Request is being reviewed"]</AeTypography>
                        </li>
                    }
                    else
                    {
                        <ToolActionButton OnClick="@HandleRequestService" LinkType="_storageServiceRequestPending ? LinkType.Pending : LinkType.Request">
                            @Localizer["Request Service Creation"]
                        </ToolActionButton>
                    }
                }
            </ul>
        </ToolActionsList>
    </ToolCard>
}

@code {

    [CascadingParameter(Name = "Project")]
    private Datahub_Project Project { get; set; }

    [CascadingParameter(Name = "UserId")]
    public string UserId { get; set; }

    [CascadingParameter(Name = "GraphUser")]
    public Microsoft.Graph.User GraphUser { get; set; }

    private bool _storageServiceRequested;
    private bool _storageServiceRequestPending;
    private bool _storageDeployed;

    private string ProjectAcronym => Project?.Project_Acronym_CD;

    protected override async Task OnInitializedAsync()
    {
        await using var projectDbContext = await _dbFactoryProject.CreateDbContextAsync();
        if (UserId != null)
        {
            var storageServiceRequests = await projectDbContext.Project_Requests
                .Where(pr => pr.Project == Project)
                .Where(pr => pr.ServiceType == RequestManagementService.STORAGE)
                .ToListAsync();

            _storageDeployed = storageServiceRequests
                .Any(pr => pr.Is_Completed != null);

            _storageServiceRequested = storageServiceRequests
                .Any(pr => pr.Is_Completed == null);
        }
    }

    private async Task HandleRequestService()
    {
        if (_storageServiceRequestPending)
            return;

        _storageServiceRequestPending = true;
        StateHasChanged();

        var serviceRequest = new Datahub_ProjectServiceRequests()
        {
            ServiceType = RequestManagementService.STORAGE,
            ServiceRequests_Date_DT = DateTime.Now,
            Is_Completed = null,
            Project = Project,
            User_ID = UserId,
            User_Name = GraphUser.UserPrincipalName
        };

        await _requestManagementService.RequestServiceWithDefaults(serviceRequest);
        _storageServiceRequested = true;
    }
}
