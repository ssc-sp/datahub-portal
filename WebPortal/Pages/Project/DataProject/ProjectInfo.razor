@*ProjectInfo.razor*@

@using Datahub.Core.Components.Skeleton
@inject IDbContextFactory<DatahubProjectDBContext> _dbFactoryProject
@inject UIControlsService _uiControlService;

<div class="project-info">
    @if (_loading)
    {
        <Skeleton Height="2.5rem" Width="150px"/>
        <Skeleton Height="2.5rem" Width="150px"/>
        <Skeleton Height="5rem" Width="650px"/>
        <Skeleton Height="2rem" Width="900px"/>
        <Skeleton Height="2rem" Width="900px"/>
        <Skeleton Height="2rem" Width="300px"/>
    }
    else
    {
        <MudChip Color="Color.Dark" class="project-data-sensitivity">@Localizer[_project.Data_Sensitivity]</MudChip>
        @if (_currentProjectMonthlyCost is not null)
        {
            <MudTooltip Text="@GetToolTipText()" Arrow="true">
                <MudBadge Icon="@Icons.Filled.QuestionMark" Color="GetCostChipColor()" Overlap="true" Bordered="true">  
                    <MudChip Icon="@Icons.Filled.AttachMoney" IconColor="GetCostChipColor()" Variant="Variant.Text"
                             Color="GetCostChipColor()" class="project-data-sensitivity" OnClick=@HandleToggleCosts>
                        @($"{_currentProjectMonthlyCost:C} / {Localizer["month"]}")
                    </MudChip>
                </MudBadge>
            </MudTooltip>
        }

        <AeTypography class="project-title" Variant="h1">
            <span class="project-icon">
                <i class="@($"{_projectIcon}")"></i>
            </span>
            @_project.ProjectName
        </AeTypography>
        
        <DHMarkdown class="description" Content="@($"{_project.ProjectDescription}")"/>

        @if (_showCosts && _currentProjectMonthlyCost.HasValue && _currentProjectMonthlyCost.Value < _projectBudget)
        {
            <ProjectCosting ProjectBudget=@_projectBudget ConsumedBudget=@_currentProjectMonthlyCost.Value />
        }
    }
</div>

@code {

    [CascadingParameter(Name = "ProjectAcronym")]
    public string ProjectAcronym { get; set; }

    private Datahub_Project _project;
    private decimal? _currentProjectMonthlyCost;
    private string _projectIcon => $"fas fa-{_project?.Project_Icon ?? Icon.DEFAULT_PROJECT_ICON}";
    private decimal _projectBudget;
    private bool _loading = true;
    private bool _showCosts;

    protected override async Task OnInitializedAsync()
    {
        using var projectContext = _dbFactoryProject.CreateDbContext();

        _project = await projectContext.Projects.FirstOrDefaultAsync(p => p.Project_Acronym_CD == ProjectAcronym);

        var projectMonthlyCost = await projectContext.Project_Current_Monthly_Costs.FirstOrDefaultAsync(mc => mc.ProjectAcronym == ProjectAcronym.ToLower());
        if (projectMonthlyCost != null)
            _currentProjectMonthlyCost = projectMonthlyCost.TotalCost;

        _projectBudget = _project.Project_Budget;

        _loading = false;
    }

    private Color GetCostChipColor()
    {
        if (_currentProjectMonthlyCost.HasValue)
        {
            if (_currentProjectMonthlyCost < 0.01m)
                return Color.Dark;
            if (_currentProjectMonthlyCost >= _projectBudget)
                return Color.Error;
            if (_currentProjectMonthlyCost >= 0.75m * _projectBudget)
                return Color.Warning;
        }
        return Color.Default;
    }

    private string GetToolTipText()
    {
        var projectName = $"{_project.ProjectName} ";
        if (_currentProjectMonthlyCost >= _projectBudget)
            return projectName +  Localizer["is over budget"];
        if (_currentProjectMonthlyCost >= 0.75m * _projectBudget)
            return projectName + Localizer["is nearing budget"];
        return projectName + Localizer["is under budget"];
    }

    private Color GetProtectionColor() => (_project?.Data_Sensitivity ?? "").ToUpper() switch
    {
        "CLASSIFIED" or
        "PROTECTED B" => Color.Secondary,
        "PROTECTED A" => Color.Error,
        _ => Color.Dark
    };

    private string GetProjectDataSensitivity()
    {
        return !string.IsNullOrWhiteSpace(_project?.Data_Sensitivity) ? _project.Data_Sensitivity : "Unclassified";
    }

    private void HandleToggleCosts(MouseEventArgs args)
    {
        _showCosts = !_showCosts;
    }
}