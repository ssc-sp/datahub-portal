@using Datahub.Core.Components.Skeleton

@inject IDbContextFactory<DatahubProjectDBContext> _dbFactoryProject
@inject UIControlsService _uiControlService;

<div class="project-info">
    @if (_loading)
    {
        <Skeleton Height="2.5rem" Width="150px"/>
        <Skeleton Height="5rem" Width="650px"/>
        <Skeleton Height="2rem" Width="900px"/>
        <Skeleton Height="2rem" Width="900px"/>
        <Skeleton Height="2rem" Width="300px"/>
    }
    else
    {
        <MudChip Color=@GetProtectionColor()>@Localizer[GetProjectDataSensitivity()]</MudChip>

        <MudStack Row="true" Spacing="3" Class="mt-2 mb-2">
            <MudIcon Class="align-self-center" Icon=@_projectIcon Size="Size.Large" />
            <MudText Class="align-self-center ml-2" Typo="Typo.h3">@_project.ProjectName</MudText>
        </MudStack>
        
        <DHMarkdown class="description" Content="@($"{_project.ProjectDescription}")"/>
    }
</div>

@code {

    [CascadingParameter(Name = "ProjectAcronym")]
    public string ProjectAcronym { get; set; }

    private Datahub_Project _project;
    private string _projectIcon => $"fas fa-{_project?.Project_Icon ?? Icon.DEFAULT_PROJECT_ICON}";

    private bool _loading = true;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        await using var projectContext = await _dbFactoryProject.CreateDbContextAsync();
        _project = await projectContext.Projects
            .SingleAsync(p => p.Project_Acronym_CD == ProjectAcronym);

        _loading = false;
    }

    private Color GetProtectionColor() => (_project?.Data_Sensitivity ?? "").ToUpper() switch
    {
        "CLASSIFIED" or
        "PROTECTED B" => Color.Secondary,
        "PROTECTED A" => Color.Error,
        _ => Color.Dark
    };

    private string GetProjectDataSensitivity()
    {
        return !string.IsNullOrWhiteSpace(_project?.Data_Sensitivity) ? _project.Data_Sensitivity : "Unclassified";
    }
}