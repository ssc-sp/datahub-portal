@inject NavigationManager _navigationManager
@inject DataRetrievalService _dataRetrievalService
@inject IUserInformationService _userInformationService
@inject IJSRuntime _jsRuntime
@inject AchievementService _achievementService
@inject ServiceAuthManager ServiceAuthManager
@inject IMetadataBrokerService MetadataBrokerService

@using Datahub.Core.Components.Common
@using Datahub.Metadata.Model;

<Toaster Toasts="_toasts" >
    
<div class="heading">
    <div class="breadcrumbs">
        <AeButton class="light" @onclick="@(async () => await SetCurrentFolder.InvokeAsync("/"))">@Localizer["root"]</AeButton>
        @foreach (var folder in CurrentFolder.Split("/").Where(s => !string.IsNullOrWhiteSpace(s)))
        {
            <i class="fas fa-chevron-right"></i>
            <AeButton class="light" @onclick="@(async () => await BreadcrumbClicked(folder))">@folder</AeButton>
        }
    </div>
    <div class="actions">
        <AeButton class="button-tool" onclick="document.querySelector('.file-list .dropzone-container input').click();" Disabled="IsActionDisabled(ButtonAction.Upload)">
            <i class="fas fa-upload"></i>@Localizer["Upload"]
        </AeButton>

        <AeButton class="button-tool" @onclick="HandleDownload" Disabled="IsActionDisabled(ButtonAction.Download)">
            <i class="fas fa-download"></i>
            @Localizer["Download"]
        </AeButton>
        
        <AeButton class="button-tool" @onclick="HandleAzSyncDown" Disabled="IsActionDisabled(ButtonAction.AzSync)">
            <i class="fas fa-cloud-download-alt"></i>
            @Localizer["Azure Copy"]
        </AeButton>

        <AeButton class="button-tool" @onclick="HandleRename" Disabled="IsActionDisabled(ButtonAction.Rename)">
            <i class="fas fa-edit"></i>
            @Localizer["Rename"]
        </AeButton>

        <span class="tool-divider"></span>

        <AeButton class="button-tool" @onclick="HandleShare" Disabled="!_isUnclassifiedSingleFile">
            <i class="fas fa-share-square"></i>
            @Localizer["Share"]
        </AeButton>

        <span class="tool-divider"></span>

        <AeButton class="button-tool" @onclick="HandleDelete" Disabled="IsActionDisabled(ButtonAction.Delete)">
            <i class="fas fa-trash-alt"></i>
            @Localizer["Delete"]
        </AeButton>

        <span class="tool-divider"></span>

        <AeButton class="button-tool" @onclick="HandleNewFolder">
            <i class="fas fa-folder-plus"></i>
            @Localizer["New Folder"]
        </AeButton>
    </div>
</div>
</Toaster>
@code {

    [CascadingParameter(Name = "ProjectAcronym")]
    public string ProjectAcronym { get; set; }

    [CascadingParameter(Name = "GraphUser")]
    public Microsoft.Graph.User GraphUser { get; set; }

    [CascadingParameter(Name = "Project")]
    public Datahub_Project Project { get; set; }

    [Parameter]
    public string CurrentFolder { get; set; }

    [Parameter]
    public HashSet<string> SelectedItems { get; set; }

    [Parameter]
    public List<string> Folders { get; set; }

    [Parameter]
    public List<FileMetaData> Files { get; set; }

    [Parameter]
    public EventCallback<string> SetCurrentFolder { get; set; }

    [Parameter]
    public EventCallback<string> OnFileDelete { get; set; }

    [Parameter]
    public EventCallback<string> OnFileDownload { get; set; }

    [Parameter]
    public EventCallback<string> OnFileRename { get; set; }

    [Parameter]
    public EventCallback<string> OnNewFolder { get; set; }

    [Parameter]
    public Guid MetadataSignature { get; set; } = Guid.NewGuid();

    private IJSObjectReference _module;

    private List<FileMetaData> _selectedFiles;
    private bool _ownsSelectedFiles;
    private bool _isUnclassifiedSingleFile;
    private bool _isElectron = true;

    private bool _isDatahubAdmin;
    private bool _isProjectMember;

    private List<Toast> _toasts = new();
    private DotNetObjectReference<Heading> _dotNetHelper;

    protected override async Task OnInitializedAsync()
    {
        // is datahub admin
        var authUser = await _userInformationService.GetAuthenticatedUser();
        _isDatahubAdmin = authUser.IsInRole(RoleConstants.DATAHUB_ROLE_ADMIN) && !ServiceAuthManager.GetViewingAsGuest(GraphUser.Id);

        // is project admin
        var adminProjectRoles = ServiceAuthManager.GetAdminProjectRoles(GraphUser.Id);
        _isProjectMember = (adminProjectRoles.Count > 0) && (await IsCurrentUserMemberOfProject());
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);

        if (firstRender)
        {
            _module = await _jsRuntime.InvokeAsync<IJSObjectReference>("import",
                "./Pages/Project/FileExplorer/Heading.razor.js");
            _dotNetHelper = DotNetObjectReference.Create(this);
        }
    }

    protected override async void OnParametersSet()
    {
        _selectedFiles = Files?
            .Where(f => SelectedItems.Contains(f.name))
            .ToList();

        // TODO: This is a hack until SSC properly sets the owner of a file
        if (Environment.GetEnvironmentVariable("HostingProfile") == "ssc")
        {
            _ownsSelectedFiles = _selectedFiles != null;
        }
        else
        {
            _ownsSelectedFiles = _selectedFiles?
                .TrueForAll(file => file?.ownedby?.Equals(GraphUser.Id, StringComparison.InvariantCulture) ?? false)
                .Equals(true) ?? false;

            if (_ownsSelectedFiles && _selectedFiles.Count == 1)
            {
                var fileClassification = await MetadataBrokerService.GetObjectClassification(_selectedFiles[0].id);
                _isUnclassifiedSingleFile = (fileClassification ?? ClassificationType.Unclassified) == ClassificationType.Unclassified;
            }
            else
            {
                _isUnclassifiedSingleFile = false;
            }
            await InvokeAsync(StateHasChanged);
        }
    }
    
    [JSInvokable]
    public async Task AzCopyProgress(string jobStatus, string percentComplete)
    {
        var toast = new Toast();

        if (_toasts.Any())
        {
            toast = _toasts.First();
        }
        else  
        {
            // sanity check in case IPC message gets delayed or
            // comes out of order and it's already been removed
            if (jobStatus != JobStatusComplete && percentComplete != "100")
            {
                _toasts.Add(toast);
            }
        }
        
        toast.Title = "Azure Copy";
        toast.Subtitle = jobStatus;
        toast.Progress = float.Parse(percentComplete);
        
        StateHasChanged();
        
        if(jobStatus == JobStatusComplete && percentComplete == "100")
        {
            _toasts.Remove(toast);
            await Task.Delay(500);
            StateHasChanged();
        }
    }

    private async Task<bool> IsCurrentUserMemberOfProject()
    {
        if (GraphUser is null || Project is null)
            return false;

        var userIds = Project.Users.Select(u => u.User_ID?.ToLowerInvariant()).ToList();
        var userId = (GraphUser.Id ?? "").ToLowerInvariant();
        if (userIds.Contains(userId))
            return true;

        return await ServiceAuthManager.IsProjectAdmin(userId, ProjectAcronym);
    }
    
    private const string JobStatusComplete = "Completed";
}