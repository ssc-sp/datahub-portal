@inject NavigationManager _navigationManager
@inject IJSRuntime _jsRuntime

<div class="heading">
    <div class="breadcrumbs">
        <AeButton class="light" @onclick="@(async () => await SetCurrentFolder.InvokeAsync("/"))">@Localizer["root"]</AeButton>
        @foreach (var folder in CurrentFolder.Split("/").Where(s => !string.IsNullOrWhiteSpace(s)))
        {
            <i class="fas fa-chevron-right"></i>
            <AeButton class="light" @onclick="@(async () => await BreadcrumbClicked(folder))">@folder</AeButton>
        }
    </div>
    <div class="actions">
        <AeButton class="button-tool" onclick="document.querySelector('.file-list .dropzone-container input').click();">
            <i class="fas fa-upload"></i>
            @Localizer["Upload"]
        </AeButton>

        <AeButton class="button-tool" @onclick="HandleDownload" Disabled="IsActionDisabled(ButtonAction.Download)">
            <i class="fas fa-download"></i>
            @Localizer["Download"]
        </AeButton>

        <AeButton class="button-tool" @onclick="HandleRename" Disabled="IsActionDisabled(ButtonAction.Rename)">
            <i class="fas fa-edit"></i>
            @Localizer["Rename"]
        </AeButton>

        <span class="tool-divider"></span>

        <AeButton class="button-tool" @onclick="HandleShare" Disabled="IsActionDisabled(ButtonAction.Share)">
            <i class="fas fa-share-square"></i>
            @Localizer["Share"]
        </AeButton>

        <span class="tool-divider"></span>

        <AeButton class="button-tool" @onclick="HandleDelete" Disabled="IsActionDisabled(ButtonAction.Delete)">
            <i class="fas fa-trash-alt"></i>
            @Localizer["Delete"]
        </AeButton>

        <span class="tool-divider"></span>

        <AeButton class="button-tool" @onclick="HandleNewFolder">
            <i class="fas fa-folder-plus"></i>
            @Localizer["New Folder"]
        </AeButton>
    </div>
</div>

@code {

    [CascadingParameter(Name = "ProjectAcronym")]
    public string ProjectAcronym { get; set; }

    [CascadingParameter(Name = "GraphUser")]
    public Microsoft.Graph.User GraphUser { get; set; }

    [Parameter]
    public string CurrentFolder { get; set; }

    [Parameter]
    public HashSet<string> SelectedItems { get; set; }

    [Parameter]
    public List<string> Folders { get; set; }

    [Parameter]
    public List<FileMetaData> Files { get; set; }

    [Parameter]
    public EventCallback<string> SetCurrentFolder { get; set; }

    [Parameter]
    public EventCallback<string> OnFileDelete { get; set; }
    
    [Parameter]
    public EventCallback<string> OnFileDownload { get; set; }

    [Parameter]
    public EventCallback<string> OnFileRename { get; set; }

    [Parameter]
    public EventCallback<string> OnNewFolder { get; set; }

    private IJSObjectReference _module;

    private List<FileMetaData> _selectedFiles;
    private bool _ownsSelectedFiles;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);

        if (firstRender)
        {
            _module = await _jsRuntime.InvokeAsync<IJSObjectReference>("import",
                "./Pages/Project/FileExplorer/Heading.razor.js");
        }
    }

    protected override void OnParametersSet()
    {
        _selectedFiles = Files?
            .Where(f => SelectedItems.Contains(f.name))
            .ToList();

    // TODO: This is a hack until SSC properly sets the owner of a file
        if (Environment.GetEnvironmentVariable("HostingProfile") == "ssc")
        {
            _ownsSelectedFiles = _selectedFiles != null;
        }
        else
        {
            _ownsSelectedFiles = _selectedFiles?
                .TrueForAll(file => file?.ownedby?.Equals(GraphUser.Id, StringComparison.InvariantCulture) ?? false)
                .Equals(true) ?? false;
        }
    }

}