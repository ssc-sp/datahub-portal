@inject IUserInformationService _userInformationService
@inject IDbContextFactory<DatahubProjectDBContext> _dbFactoryProject


<div class="file-explorer-layout">
    <div class="heading">
        <AeTypography Variant="h1">@Localizer["Storage Explorer"]</AeTypography>
        <div class="breadcrumbs">
            <AeButton class="light">az-storage-123</AeButton>
            <i class="fas fa-chevron-right"></i>
            <AeButton class="light">az-storage-123</AeButton>
            <i class="fas fa-chevron-right"></i>
            <AeButton class="light">az-storage-123</AeButton>
        </div>
    </div>

    <div class="file-list">
        <div class="file-list-header">
            <AeTypography>Name</AeTypography>
            <AeTypography>Size</AeTypography>
            <AeTypography>LastModified</AeTypography>
            <i class="fas fa-sort-alpha-down"></i>
        </div>
        @for (var i = 0; i < 2; i++)
        {
            <FileItem Name="next folder/" Modified="DateTime.Now" >
                <Icon>
                    <i class="fas fa-folder"></i>
                </Icon>
            </FileItem>
        }
        @for (var i = 0; i < 15; i++)
        {
            <FileItem Name="my-file.py" Modified="DateTime.Now" Size="15 bytes" />
        }
    </div>

    <div class="item-details">
        <div class="details-title">
            <i class="fas fa-folder"></i>
            <AeTypography Variant="h2">first run</AeTypography>
        </div>
    </div>
</div>


@code {

    [CascadingParameter(Name = "ProjectAcronym")]
    public string ProjectAcronym { get; set; }

    private Microsoft.Graph.User _user;
    private string _userId;


    private bool _loading = true;
    


    protected override async Task OnInitializedAsync()
    {
        await using var projectContext = await _dbFactoryProject.CreateDbContextAsync();

        _userId = await _userInformationService.GetUserIdString();
        _user = await _userInformationService.GetUserAsync();

        _loading = false;
    }
    
    

}