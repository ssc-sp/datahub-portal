@using Datahub.Core.Components.FileUpload

@inject IUserInformationService _userInformationService
@inject IDbContextFactory<DatahubProjectDBContext> _dbFactoryProject
@inject DataRetrievalService _dataRetrievalService
@inject MyDataService _apiService


<div class="file-explorer-layout">
    <CascadingValue Value="_user" Name="GraphUser">
        <Heading
            SetCurrentFolder="SetCurrentFolder"
            OnFileDelete="HandleFileDelete"
            OnNewFolder="HandleNewFolder"
            CurrentFolder="@_currentFolder"
            SelectedItem="@_selectedItem"
            Files="@_files"
            Folders="@_folders"
            />
    </CascadingValue>

    <div class="file-list">
        <div class="file-list-header">
            <AeTypography>@Localizer["Name"]</AeTypography>
            <AeTypography>@Localizer["Size"]</AeTypography>
            <AeTypography>@Localizer["Last Modified"]</AeTypography>
            <i class="fas fa-sort-alpha-down"></i>
        </div>

        @if (_loading)
        {
            <LoadingFileList/>
        }
        else
        {
            <UploadSnackbar UploadingFiles="_uploadingFiles">
                <DropZone OnFilesDrop="UploadFiles">
                    @foreach (var folderName in _folders)
                    {
                        <FileItem
                            Name="@GetFileName(folderName)"
                            Highlighted="_selectedItem == folderName"
                            Folder
                            @onclick="() => _selectedItem = folderName"
                            @ondblclick="async () => await SetCurrentFolder(folderName)">
                            <Icon>
                                <i class="fas fa-folder"></i>
                            </Icon>
                        </FileItem>
                    }
                    @foreach (var file in _files)
                    {
                        <FileItem
                            Name="@GetFileName(file.name)"
                            Modified="@file.Modified"
                            Size="@file.filesize"
                            @onclick="() => _selectedItem = file.name"
                            Highlighted="_selectedItem == file.name">
                            <Icon>
                                <i class="@DatahubTools.GetFileTypeIcon(file.fileformat)"></i>
                            </Icon>
                        </FileItem>
                    }
                </DropZone>
            </UploadSnackbar>
        }
    </div>
    <div class="item-details">
        <div class="details-sticky">
            <div class="details-container">
                @if (_loading || _folders.Contains(_selectedItem) || _currentFolder == _selectedItem)
                {
                    <StorageProperties DisplayName="@GetFileName(_selectedItem)"/>
                }
                else
                {
                    var file = _files.FirstOrDefault(f => f.name.Equals(_selectedItem, StringComparison.OrdinalIgnoreCase));
                    <FileProperties File=@file Readonly="!OwnsFile(file)"/>
                }
            </div>
        </div>
    </div>

</div>

@code {

    [CascadingParameter(Name = "ProjectAcronym")]
    public string ProjectAcronym { get; set; }

    private Microsoft.Graph.User _user;
    private string _userId;


    private bool _loading = true;
    private List<FileMetaData> _uploadingFiles;
    private string _continuationToken;

    private readonly string _root = "/";
    private string _currentFolder = "/";
    private string _selectedItem = "/";

    private List<string> _folders = new();
    private List<FileMetaData> _files = new();

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        await using var projectContext = await _dbFactoryProject.CreateDbContextAsync();

        _userId = await _userInformationService.GetUserIdString();
        _user = await _userInformationService.GetUserAsync();

        _uploadingFiles = new List<FileMetaData>();

        await FetchStorageBlobsPageAsync();
    }

    private async Task FetchStorageBlobsPageAsync()
    {
        _loading = true;
        StateHasChanged();
        
        var (folders, files, continuationToken) = 
            await _dataRetrievalService.GetStorageBlobPagesAsync(ProjectAcronym, DataRetrievalService.DEFAULT_CONTAINER_NAME, _user, _currentFolder, _continuationToken);

        _continuationToken = continuationToken;
        _files = files;
        _folders = folders;

        _loading = false;
        StateHasChanged();
    }


    private string GetDirectoryName(string path)
    {
        if (string.IsNullOrWhiteSpace(path) || !path.Contains("/"))
            return string.Empty;

        var lastIndex = path.TrimEnd('/').LastIndexOf("/", StringComparison.Ordinal);
        return lastIndex == -1 ? "/" : path[..lastIndex] + "/";
    }

    private string GetFileName(string path)
    {
        if (string.IsNullOrWhiteSpace(path))
            return string.Empty;

        var lastIndex = path.TrimEnd('/').LastIndexOf("/", StringComparison.Ordinal);
        return lastIndex == -1 ? path : path[(lastIndex + 1)..];
    }

    private async Task SetCurrentFolder(string folderName)
    {
        _currentFolder = folderName;
        _selectedItem = folderName;
        await FetchStorageBlobsPageAsync();
    }

    private async Task HandleFileDelete(string filename)
    {
        _files.RemoveAll(f => f.name.Equals(filename, StringComparison.OrdinalIgnoreCase));
        await SetCurrentFolder(_currentFolder);
    }

    private void HandleNewFolder(string newFolderName)
    {
        if (_folders.Contains(newFolderName))
            return;

        newFolderName = newFolderName
            .Replace("/", "")
            .Trim();

        _folders.Add($"{_currentFolder}{newFolderName}/");
    }

    private async Task UploadFiles(InputFileChangeEventArgs e)
    {
        foreach (var browserFile in e.GetMultipleFiles())
        {
            await UploadFile(browserFile);
        }
    }

    private async Task UploadFile(IBrowserFile browserFile)
    {
        if (browserFile == null)
            return;

        var fileMetadata = new FileMetaData
        {
            folderpath = _currentFolder,
            filename = (_currentFolder + browserFile.Name).TrimStart('/'),
            filesize = browserFile.Size.ToString(),
            uploadStatus = FileUploadStatus.SelectedToUpload,
            BrowserFile = browserFile
        };

        await _apiService.PopulateOtherMetadata(fileMetadata);
        _uploadingFiles.Add(fileMetadata);

        _ = InvokeAsync(async () =>
        {
            await _apiService.UploadGen2File(fileMetadata, ProjectAcronym.ToLower(), (uploadedBytes) =>
            {
                fileMetadata.uploadedBytes = uploadedBytes;
                StateHasChanged();
            });

            _uploadingFiles.Remove(fileMetadata);
            _files.RemoveAll(f => f.name == fileMetadata.name);
            _files.Add(fileMetadata);

            StateHasChanged();
        });

        StateHasChanged();
    }

    private bool OwnsFile(FileMetaData file) => (file?.ownedby ?? "").Equals(_userId, StringComparison.InvariantCulture);
}