@inject IJSRuntime _jsRuntime
@inject DataRetrievalService _dataRetrievalService


<AeButton class="sas-token-button dark" @onclick="HandleSasButtonClick">
    @if (string.IsNullOrWhiteSpace(_sasToken))
    {
        <span>@Localizer["Generate SAS Token"]</span>
    }
    else if (_showingCopiedForSasButton)
    {
        <span>@Localizer["Copied!"]</span>
    }
    else
    {
        <span>@Localizer["Copy SAS Token"]</span>
    }
</AeButton>

@code {
    
    [CascadingParameter(Name = "ProjectAcronym")]
    public string ProjectAcronym { get; set; }
    
    private bool _showingCopiedForSasButton;
    private string _sasToken;
    private IJSObjectReference _module;
    private List<(string, string)> _substitutions;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);

        _module = await _jsRuntime.InvokeAsync<IJSObjectReference>("import",
            "./Pages/Project/FileExplorer/FileExplorerPage.razor.js");
    }

    private async Task HandleSasButtonClick()
    {
        if (string.IsNullOrWhiteSpace(_sasToken))
        {
            var uri = await _dataRetrievalService.GenerateSasToken(DataRetrievalService.DEFAULT_CONTAINER_NAME, ProjectAcronym, 14);
            _sasToken = uri.ToString();
            _substitutions = new List<(string, string)> {("<sas_uri>",_sasToken)};
        }
        else
        {
            _showingCopiedForSasButton = true;
            await _module.InvokeVoidAsync("copyTextToClipboard", _sasToken);
            StateHasChanged();

            await Task.Delay(1000);
            _showingCopiedForSasButton = false;
            StateHasChanged();
        }
    }

}