@inject IDbContextFactory<DatahubProjectDBContext> _dbFactoryProject
@inject DataRetrievalService _dataRetrievalService
@inject IJSRuntime _jsRuntime

@page "/projects/{ProjectAcronymParam}/filelist"

<DHPageTitle PageTitleKey="@_projectName"/>

<CascadingValue Value="@ProjectAcronymParam" Name="ProjectAcronym">
    <CascadingValue Value="@HandleSasButtonClick">
        <div class="file-explorer-layout-wrapper">
            <TabControl TabIndex="@_tabIndex" OnChangeTab="@OnChangeTab">
                @foreach (var (control, content) in GetTabs())
                {
                    <TabPage>
                        <Control>
                            <AeTypography>@control</AeTypography>
                        </Control>
                        <ChildContent>
                            @content
                        </ChildContent>
                    </TabPage>
                }
            </TabControl>
            <AeButton class="sas-token-button dark" @onclick="HandleSasButtonClick">
                @if (string.IsNullOrWhiteSpace(_sasToken))
                {
                    <span>@Localizer["Generate SAS Token"]</span>
                }
                else if(_showingCopiedForSasButton)
                {
                    <span>@Localizer["Copied!"]</span>
                }
                else
                {
                    <span>@Localizer["Copy SAS Token"]</span>
                }
            </AeButton>
        </div>
    </CascadingValue>
</CascadingValue>

@code {

    [Parameter]
    public string ProjectAcronymParam { get; set; }

    private int _tabIndex;
    private string _projectName;


    private string _sasToken;
    private List<(string, string)> _substitutions;

    private IJSObjectReference _module;
    private bool _showingCopiedForSasButton;


    protected override async Task OnInitializedAsync()
    {
        await using var projectContext = await _dbFactoryProject.CreateDbContextAsync();

        _projectName = await projectContext.Projects
            .Where(p => p.Project_Acronym_CD == ProjectAcronymParam)
            .Select(p => p.ProjectName)
            .FirstOrDefaultAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        
        _module = await _jsRuntime.InvokeAsync<IJSObjectReference>("import",
            "./Pages/Project/FileExplorer/FileExplorerPage.razor.js");
    }

    private void OnChangeTab(int tabIndex)
    {
        _tabIndex = tabIndex;
    }

    private List<(string, RenderFragment)> GetTabs()
    {
        var result = new List<(string, RenderFragment)>
        {
            (Localizer["File Explorer"], @<FileExplorer/>),
            (Localizer["Az Copy"], @<Resources PageName="Use-AzCopy-to-Interact-with-Azure-Storage-Account" Substitutions="_substitutions"/>),
            (Localizer["Databricks Access"], @<Resources PageName="Access-your-storage-account-in-Databricks" Substitutions="_substitutions"/>),
            (Localizer["Azure Storage"], @<Resources PageName="Datahub-AzureStorage"/>),
        };

        return result;
    }

    private async Task HandleSasButtonClick()
    {
        if (string.IsNullOrWhiteSpace(_sasToken))
        {
            var uri = await _dataRetrievalService.GenerateSasToken(DataRetrievalService.DEFAULT_CONTAINER_NAME, ProjectAcronymParam, 14);
            _sasToken = uri.ToString();
            _substitutions = new List<(string, string)> {("<sas_uri>",_sasToken)};
        }
        else
        {
            _showingCopiedForSasButton = true;
            await _module.InvokeVoidAsync("copyTextToClipboard", _sasToken);
            StateHasChanged();

            await Task.Delay(1000);
            _showingCopiedForSasButton = false;
            StateHasChanged();
        }
    }

}