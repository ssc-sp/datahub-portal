@inject IDbContextFactory<DatahubProjectDBContext> _dbFactoryProject
@inject DataRetrievalService _dataRetrievalService
@inject IJSRuntime _jsRuntime

@page "/projects/{ProjectAcronymParam}/filelist"
@using Datahub.Core.Components.PageBanner

<DHPageTitle PageTitleKey="@_projectName"/>

<PageAlert Title="How to use Project Storage tabs" Key="@PageAlert.Storage">
    <AeTypography Variant="h4">Storage Explorer</AeTypography>
    <AeTypography>The current tab shows the Storage Explorer that enables you to browse the project files. You can interact with the web interface and drag and drop files to upload, download, or delete them as needed.</AeTypography>
    <br/>
    <AeTypography style="font-style: italic">Note: the web interface is not recommended for any files larger than a gigabyte, as this can be dependent on your network connection.</AeTypography>

    <AeTypography Variant="h4">AzCopy</AeTypography>
    <AeTypography>AzCopy is the recommended approach for managing large data files inside the Project Storage. Click on "AzCopy" tab below for more details.</AeTypography>

    <AeTypography Variant="h4">Databricks Access</AeTypography>
    <AeTypography>Azure Databricks is an analytics platform that allows you and your colleagues to access and act on the same set of data analytics. Use Azure Databricks to prepare, explore, and analyze your data as well as build AI models.</AeTypography>
</PageAlert>

<CascadingValue Value="@ProjectAcronymParam" Name="ProjectAcronym">
    <CascadingValue Value="@HandleSasButtonClick">
        <div class="file-explorer-layout-wrapper">
            <TabControl TabIndex="@_tabIndex" OnChangeTab="@OnChangeTab">
                @foreach (var (control, content) in GetTabs())
                {
                    <TabPage>
                        <Control>
                            <AeTypography>@control</AeTypography>
                        </Control>
                        <ChildContent>
                            @content
                        </ChildContent>
                    </TabPage>
                }
            </TabControl>
            <AeButton class="sas-token-button dark" @onclick="HandleSasButtonClick">
                @if (string.IsNullOrWhiteSpace(_sasToken))
                {
                    <span>Generate SAS Token</span>
                }
                else if (_showingCopiedForSasButton)
                {
                    <span>Copied!</span>
                }
                else
                {
                    <span>Copy SAS Token</span>
                }
            </AeButton>
        </div>
    </CascadingValue>
</CascadingValue>

@code {

    [Parameter]
    public string ProjectAcronymParam { get; set; }

    private int _tabIndex;
    private string _projectName;


    private string _sasToken;
    private List<(string, string)> _substitutions;

    private IJSObjectReference _module;
    private bool _showingCopiedForSasButton;


    protected override async Task OnInitializedAsync()
    {
        await using var projectContext = await _dbFactoryProject.CreateDbContextAsync();

        _projectName = await projectContext.Projects
            .Where(p => p.Project_Acronym_CD == ProjectAcronymParam)
            .Select(p => p.ProjectName)
            .FirstOrDefaultAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);

        _module = await _jsRuntime.InvokeAsync<IJSObjectReference>("import",
            "./Pages/Project/FileExplorer/FileExplorerPage.razor.js");
    }

    private void OnChangeTab(int tabIndex)
    {
        _tabIndex = tabIndex;
    }

    private List<(string, RenderFragment)> GetTabs()
    {
        var result = new List<(string, RenderFragment)>
        {
            (Localizer["Storage Explorer"], @<FileExplorer/>),
            (Localizer["AzCopy"], @<Resources PageName="Use-AzCopy-to-Interact-with-Azure-Storage-Account" Substitutions="_substitutions"/>),
            (Localizer["Databricks Access"], @<Resources PageName="Access-your-storage-account-in-Databricks" Substitutions="_substitutions"/>),
        };

        return result;
    }

    private async Task HandleSasButtonClick()
    {
        if (string.IsNullOrWhiteSpace(_sasToken))
        {
            var uri = await _dataRetrievalService.GenerateSasToken(DataRetrievalService.DEFAULT_CONTAINER_NAME, ProjectAcronymParam, 14);
            _sasToken = uri.ToString();
            _substitutions = new List<(string, string)> {("<sas_uri>",_sasToken)};
        }
        else
        {
            _showingCopiedForSasButton = true;
            await _module.InvokeVoidAsync("copyTextToClipboard", _sasToken);
            StateHasChanged();

            await Task.Delay(1000);
            _showingCopiedForSasButton = false;
            StateHasChanged();
        }
    }

}