@page "/powerbi/{projectAcronym}"
@inject IPowerBiDataService PowerBiDataService

<div style="padding-left: 2rem;padding-right: 2rem">

    <AeCard>
        <ChildContent>
            <AeTypography Variant="h1">@Localizer[$"Power BI Reports for"] @projectAcronym</AeTypography>
            <AeTypography Variant="p">This page displays a list of Power BI reports that have been created for this initiative. 
                The names of the reports are set in Power BI and are displayed as is (without any translating). The table will show either French
                or English reports, depending on which ones have been created. The 'External Access' column allows users to request the creation of
                external reports that can be be shared with non-nrcan users. 
            </AeTypography>
            <AeTypography Variant="p">
                The sandbox workspaces are hidden by default and can be toggled using the option at the bottom of the page
            </AeTypography>
        </ChildContent>
    </AeCard>
    <AeCard>
                
        <ChildContent>
            @if (_isLoading)
            {
                <Spinner />
            }
            else if (_powerBiReports.Count < 1)
            {
                <AeTypography Variant="p">@Localizer["No_Reports_Available"]</AeTypography>
            }
            else
            {
                <AePaginatedTable
                    Accessors=@accessors
                    Renderers=@renderers
                    Dataset=@_powerBiReports
                    Headers=@(LocalizeHeaders(headers))
                    @ref=@_reportTable
                    Page=@_currentPage
                    PageSize="20"
                    @key=@_powerBiReports/>
                        
                <AePagination Pageable=@_reportTable OnPageClick=@OnPageClick> 
                    <LeftIcon><i class='fad fa-chevron-double-left'></i></LeftIcon> 
                    <RightIcon><i class='fad fa-chevron-double-right'></i></RightIcon>
                </AePagination>
            }
        </ChildContent>
        <Footer>
            <label>
                <input type="checkbox" checked=@IncludeSandbox @oninput=@IncludeSandboxChanged />
                @Localizer["Include_Sandbox_Workspaces"]
            </label>
        </Footer>
    </AeCard>        
    
</div>


@code {

    [Parameter]
    public string projectAcronym { get; set; }

    private List<PowerBi_Report> _powerBiReports = new();
    private int _currentPage = 0;
    private IPageableComponent _reportTable;


    private bool IncludeSandbox { get; set; } = false;

    private bool _isLoading = false;

    private void OnPageClick(int pageIndex)
    {
        _currentPage = pageIndex;
    }

    private List<string> headers;


    private List<string> LocalizeHeaders(List<string> input) => input.Select(s => Localizer[s].ToString()).ToList();

    protected override async Task OnInitializedAsync()
    {
        renderers = new()
        {
            null,
            ReportLinkFragment,
            ReportLinkFragment,
            ExternalReport
        };

        headers = new()
            {
                Localizer["Power BI Workspace"],
                Localizer["English_Power_BI_Report"],
                Localizer["French_Power_BI_Report"],
                Localizer["External_Access"]
            };

        if (projectAcronym != null)
        {
            await LoadReports();
        }
    }

    private async Task IncludeSandboxChanged(ChangeEventArgs e)
    {
        var value = e.Value as bool?;
        if (value.HasValue)
        {
            IncludeSandbox = value.Value;
            await LoadReports();
        }
    }

    private async Task LoadReports()
    {
        _isLoading = true;
        StateHasChanged();
        _powerBiReports = await PowerBiDataService.GetReportsForProjectWithExternalReportInfo(projectAcronym, IncludeSandbox);



        _isLoading = false;
        StateHasChanged();
    }

    protected override void OnAfterRender(bool firstRender)
    {
        // You must re-render after the components are initialized in order for the
        // component reference to not be null
        if (firstRender)
        {
            StateHasChanged();
        }
    }

    private List<Func<PowerBi_Report, string>> accessors = new()
        {
            r => r.Workspace?.Workspace_Name ?? string.Empty,
            r => r.Report_Name,
            r => r.Report_Name,
            null
        };

    private List<Func<PowerBi_Report, RenderFragment>> renderers = new();


    public async void RefreshTable()
    {
        _powerBiReports = await PowerBiDataService.GetReportsForProjectWithExternalReportInfo(projectAcronym, IncludeSandbox);
        StateHasChanged();
    }

    private RenderFragment ExternalReport(PowerBi_Report r) =>
    @<AeTypography>
        <ExternalReportRequest PowerBi_Report=@(r) RefreshTable=RefreshTable/>        
    </AeTypography>;

    private RenderFragment WorkspaceLinkFragment(PowerBi_Report r) =>
    @<AeTypography>
        <DHLink 
                LinkType=@DatahubLinkType.PowerBIWorkspace 
                PBIWorkspaceId=@(r.Workspace_Id.ToString())>
            @r.Workspace.Workspace_Name
        </DHLink>
    </AeTypography>
    ;

    private RenderFragment ReportLinkFragment(PowerBi_Report r) =>
    @<AeTypography>
        <DHLink 
                LinkType=@DatahubLinkType.PowerBI
                DataProject=@(r.Workspace.Project?.Project_Acronym_CD) 
                PBIWorkspaceId=@(r.Workspace_Id.ToString())
                PBIReportId=@(r.Report_ID.ToString())
                Name=@(r.Report_Name)>
            @r.Report_Name
        </DHLink>
    </AeTypography>
    ;

}
