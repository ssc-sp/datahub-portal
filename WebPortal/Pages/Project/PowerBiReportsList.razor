@page "/powerbi/{projectAcronym}"
@inject IPowerBiDataService PowerBiDataService

<div style="padding-left: 2rem;padding-right: 2rem">

    <AeTypography Variant="h1">@Localizer["Power BI Reports"]</AeTypography>

    <AeCard>
                
        <ChildContent>
            @if (false)
            {
                <Spinner />
            }
            else
            {
                <AePaginatedTable
                    Accessors=@accessors
                    Renderers=@renderers
                    Dataset=@_powerBiReports
                    Headers=@(LocalizeHeaders(headers))
                    @ref=@_reportTable
                    Page=@_currentPage
                    PageSize="20" />
                        
                <AePagination Pageable=@_reportTable OnPageClick=@OnPageClick> 
                    <LeftIcon><i class='fad fa-chevron-double-left'></i></LeftIcon> 
                    <RightIcon><i class='fad fa-chevron-double-right'></i></RightIcon>
                </AePagination>
            }
        </ChildContent>
                
    </AeCard>        
    
</div>


@code {

    [Parameter]
    public string projectAcronym { get; set; }

    private List<PowerBi_Report> _powerBiReports = new();
    private int _currentPage = 0;
    private IPageableComponent _reportTable;

    private bool _isLoading = false;

    private void OnPageClick(int pageIndex)
    {
        _currentPage = pageIndex;
    }

    private List<string> headers = new List<string>
    {
        "Report Name", "Workspace", "Report"
    };

    private List<string> LocalizeHeaders(List<string> input) => input.Select(s => Localizer[s].ToString()).ToList();

    protected override async Task OnInitializedAsync()
    {
        renderers = new()
        {
            null,
            WorkspaceLinkFragment,
            ReportLinkFragment
        };

        if (projectAcronym != null)
        {
            await LoadReports();
        }
    }

    private async Task LoadReports()
    {
        _isLoading = true;
        StateHasChanged();
        _powerBiReports = await PowerBiDataService.GetReportsForProject(projectAcronym);
        _isLoading = false;
        StateHasChanged();
    }

    protected override void OnAfterRender(bool firstRender)
    {
        // You must re-render after the components are initialized in order for the
        // component reference to not be null
        if (firstRender)
        {
            StateHasChanged();
        }
    }

    private List<Func<PowerBi_Report, string>> accessors = new()
        {
            r => r.Report_Name,
            r => r.Workspace?.Workspace_Name ?? string.Empty,
            r => r.Report_Name
        };

    private List<Func<PowerBi_Report, RenderFragment>> renderers = new();

    private RenderFragment WorkspaceLinkFragment(PowerBi_Report r) =>
    @<AeTypography>
        <DHLink 
                LinkType=@DatahubLinkType.PowerBIWorkspace 
                PBIWorkspaceId=@(r.Workspace_Id.ToString())>
            @r.Workspace.Workspace_Name
        </DHLink>
    </AeTypography>
    ;

    private RenderFragment ReportLinkFragment(PowerBi_Report r) =>
    @<AeTypography>
        <DHLink 
                LinkType=@DatahubLinkType.PowerBI
                DataProject=@(r.Workspace.Project?.Project_Acronym_CD) 
                PBIWorkspaceId=@(r.Workspace_Id.ToString())
                PBIReportId=@(r.Report_ID.ToString())
                Name=@(r.Report_Name)>
            @r.Report_Name
        </DHLink>
    </AeTypography>
    ;

}
