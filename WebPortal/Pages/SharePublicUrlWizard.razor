@page "/share/public/{FileId}"
@inject NavigationManager NavManager
@inject IPublicDataFileService PublicFileService

<h1>@Localizer["PUBLIC-URL-WIZARD.Page_Title"]</h1>

<AeFlex>
    <ChildContent>
        <AeCard style="margin-left: 2rem; width: 48%">
            <ChildContent>
                <AeTypography Variant="h2">@Localizer["PUBLIC-URL-WIZARD.Metadata"]</AeTypography>
                <ObjectMetadataEditor ObjectId=@FileId @ref=@_metadataEditor ></ObjectMetadataEditor>
                <AeFlex>
                    <AeButton OnClickEvent=@SaveMetadata Disabled=@savingData >@Localizer["PUBLIC-URL-WIZARD.Save_button"]</AeButton>
                    <div>
                        @if(savingData)
                        {
                            <Spinner Small=@true/>
                        }
                    </div>
                </AeFlex>
                <div>&nbsp;</div>
            </ChildContent>
        </AeCard>

        <div id="stepsDiv">
            <AeSteps T=@PublicUrlSharingStatus 
                CurrentStepState=@GetState 
                StepItems=@steps 
                StepTitle=@StepTitle 
                StepMessage=@StepMessage 
                PassedIcon=@checkIcon ></AeSteps>
            
            @if(ShowSubmitApproval)
            {
                <AeCard>
                    <AeTypography Variant="h3">@Localizer["PUBLIC-URL-WIZARD.SubmitForApproval"]</AeTypography>
                    <AeFlex>
                        <AeButton OnClickEvent=@SubmitForApproval Disabled=@savingData>@Localizer["BUTTONS.Submit"]</AeButton>
                        @if(savingData)
                        {
                            <Spinner Small=@true/>
                        }                
                    </AeFlex>
                    <div>&nbsp;</div>
                </AeCard>
            }

            @if(ShowSkipMetadata)
            {
                <AeCard>
                    <AeTypography Variant="h3">@Localizer["PUBLIC-URL-WIZARD.AcceptMetadata"]</AeTypography>
                    <AeButton OnClickEvent=@AcceptMetadata Disabled=@savingData>@Localizer["PUBLIC-URL-WIZARD.Continue_button"]</AeButton>
                    <div>&nbsp;</div>
                </AeCard>
            }
            
            @if(ShowPublicationDate)
            {
                <AeCard>
                    <AeTypography Variant="h3">@Localizer["PUBLIC-URL-WIZARD.PublicationDate"]</AeTypography>
                    <p>@PublicationDateStr</p>
                </AeCard>
            }

            @if(ShowPublicUrl)
            {
                <AeCard>
                    <AeTypography Variant="h3">@Localizer["PUBLIC-URL-WIZARD.PublicUrl"]</AeTypography>
                    <p><a href=@PublicUrl target="_blank">@PublicUrl</a></p>
                </AeCard>
            }
        </div>
    </ChildContent>
</AeFlex>

<div>&nbsp;</div>



@code {

    [Parameter]
    public string FileId { get; set; }

    private Guid fileIdGuid;

    private ObjectMetadataEditor _metadataEditor;

    private RenderFragment checkIcon = @<i class="fa fa-check"></i>;

    private List<PublicUrlSharingStatus> steps = Enum.GetValues<PublicUrlSharingStatus>().ToList();
    private PublicUrlSharingStatus currentStep = PublicUrlSharingStatus.EnterMetadata;

    private Dictionary<PublicUrlSharingStatus, (string, string)?> _stepInfo = new Dictionary<PublicUrlSharingStatus, (string, string)?>();
    private Dictionary<PublicUrlSharingStatus, AeSteps<PublicUrlSharingStatus>.StepState> _stepStates = new Dictionary<PublicUrlSharingStatus, AeSteps<PublicUrlSharingStatus>.StepState>()
        {
            { PublicUrlSharingStatus.EnterMetadata, AeSteps<PublicUrlSharingStatus>.StepState.Queued },
            { PublicUrlSharingStatus.RequestApproval, AeSteps<PublicUrlSharingStatus>.StepState.Queued },
            { PublicUrlSharingStatus.PendingApproval, AeSteps<PublicUrlSharingStatus>.StepState.Queued },
            { PublicUrlSharingStatus.PendingPublication, AeSteps<PublicUrlSharingStatus>.StepState.Queued },
            { PublicUrlSharingStatus.AccessPublicUrl, AeSteps<PublicUrlSharingStatus>.StepState.Queued }
        };

    private string StepTitle(PublicUrlSharingStatus i) => _stepInfo.GetValueOrDefault(i)?.Item1;
    private string StepMessage(PublicUrlSharingStatus i) => _stepInfo.GetValueOrDefault(i)?.Item2;
    private AeSteps<PublicUrlSharingStatus>.StepState GetState(PublicUrlSharingStatus i) => _stepStates[i];

    private bool savingData = false;

    private bool ShowSubmitApproval => currentStep == PublicUrlSharingStatus.RequestApproval;
    private bool ShowPublicationDate => currentStep == PublicUrlSharingStatus.PendingPublication && !string.IsNullOrEmpty(PublicationDateStr);
    private bool ShowPublicUrl => currentStep == PublicUrlSharingStatus.AccessPublicUrl;
    private bool ShowSkipMetadata => currentStep == PublicUrlSharingStatus.EnterMetadata;
    private string PublicationDateStr = string.Empty;

    //TODO add domain
    private string PublicUrl => $"/Public/DownloadFile/{FileId}";


    private async Task SaveMetadata()
    {
        savingData = true;

        var t = _metadataEditor.SaveChanges();

        var uri = NavManager.Uri;
        if (uri.IndexOf('#') >= 0)
        {
            uri = uri.Substring(0, uri.IndexOf('#'));
        }
        
        await t; 
        savingData = false;
        NavManager.NavigateTo($"{uri}#stepsDiv");
        UpdateCurrentStatus(PublicUrlSharingStatus.RequestApproval);
    }

    private async Task AcceptMetadata()
    {
        UpdateCurrentStatus(PublicUrlSharingStatus.RequestApproval);
    }

    private async Task SubmitForApproval()
    {
        savingData = true;
        
        var t = PublicFileService.SubmitPublicUrlShareForApproval(fileIdGuid);

        await t;
        UpdateCurrentStatus(PublicUrlSharingStatus.PendingApproval);

        savingData = false;
    }

    private void UpdateCurrentStatus(PublicUrlSharingStatus step, bool passed = false)
    {
        currentStep = step;
        _stepStates[step] = passed? AeSteps<PublicUrlSharingStatus>.StepState.Passed : AeSteps<PublicUrlSharingStatus>.StepState.Running;

        foreach (var stepv in Enum.GetValues<PublicUrlSharingStatus>())
        {
            if (stepv < step)
            {
                _stepStates[stepv] = AeSteps<PublicUrlSharingStatus>.StepState.Passed;
            }
            else if (stepv > step)
            {
                _stepStates[stepv] = AeSteps<PublicUrlSharingStatus>.StepState.Queued;
            }
        }
    }

    protected override async Task OnInitializedAsync()
    {
        
        if (!Guid.TryParse(FileId, out fileIdGuid))
        {
            NavManager.NavigateTo("/");
        }

        var loadTask = PublicFileService.LoadPublicUrlSharedFileInfo(fileIdGuid);

        _stepInfo = new();
        foreach(var step in steps)
        {
            var stepName = step.ToString();
            var prefix = SharedDataFile.PUBLIC_URL_SHARING_STATUS_LOCALIZATION_PREFIX;
            var keys = ($"{prefix}.{stepName}.Title", $"{prefix}.{stepName}.Description");
            _stepInfo.Add(step, (Localizer[keys.Item1], Localizer[keys.Item2]));
        }

        var sharedFileInfo = await loadTask;

        PublicationDateStr = sharedFileInfo.PublicationDate_DT?.ToShortDateString();
        var status = sharedFileInfo.GetPublicUrlSharingStatus();
        UpdateCurrentStatus(status, status == PublicUrlSharingStatus.AccessPublicUrl);
    }


}
