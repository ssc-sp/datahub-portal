@page "/share/opendata/{FileId}"
@inject CustomNavigation NavManager
@inject IPublicDataFileService PublicFileService
@inject IDbContextFactory<DatahubProjectDBContext> dbContextFactory
@inject IMSGraphService GraphService
@inject UIControlsService UI
@inject IUserInformationService UserInformationService
@inject IMetadataBrokerService MetadataBrokerService
@inject IOpenDataService OpenDataService
@inject IJSRuntime jsRuntime

<AeTypography style="margin-left: 2rem;" Variant="h2">@Localizer["OPENDATA-WIZARD.Page_Title"]</AeTypography>

<AeFlex>
    <AeFlex Vertical style="margin-left: 2rem; width: 50%;">

        <AeCard>
            <AeTypography Variant="h3">@GetStepTitle(OpenDataSharingStatus.EnterMetadata)</AeTypography>

            @if (!string.IsNullOrEmpty(_requestFilename))
            {
                <AeTypography Variant="p">@Localizer["Filename"]: @_requestFilename</AeTypography>
            }

            @if (ShowMetadataEditor && _isOwnRequest)
            {
                <ObjectMetadataEditor @ref=@_metadataEditor 
                                      ObjectId=@FileId 
                                      SaveButtonLabel=@Localizer["OPENDATA-WIZARD.Save_button"] 
                                      OnSave=@HandleSaveMetadata />
            }
            else if (_isOwnRequest)
            {
                <AeButton OnClickEvent=@ManuallyShowMetadataEditor Disabled=@_savingData>
                    @Localizer["OPENDATA-WIZARD.Edit_button"]
                </AeButton>
            }
            else 
            {
                @if (_requestingUser != null) 
                {
                    <AeTypography Variant="p">@Localizer["Requesting User"]: @_requestingUser.DisplayName</AeTypography>
                }
            }
        </AeCard>

        @if (ShowApprovalCards)
        {
            @if (ShowApprovalForm)
            {
                <AeCard>
                    <AeTypography Variant="h3">@GetStepTitle(OpenDataSharingStatus.OpenGovApprovalForm)</AeTypography>
                    <Datahub.Portal.Pages.Forms.ShareWorkflow.ApprovalForm 
                        ApprovalFormId=@_approvalFormId 
                        OnSubmitForm=@UpdateApprovalFormId 
                        DatasetTitle=@_datasetTitle
                        User=@_requestingUser/>
                    <div>&nbsp;</div>
                </AeCard>
            }
            else if (ApprovalFormSubmitted)
            {
                <AeCard>
                    <AeTypography Variant="h3">@GetStepTitle(OpenDataSharingStatus.OpenGovApprovalForm)</AeTypography>
                    <AeFlex Vertical="true" style="margin: 1rem 1rem 1rem 0rem;">
                        <AeTypography Variant="p">@Localizer["OPENDATA-WIZARD.Approval_Filled_out_1"]</AeTypography>
                        <AeTypography Variant="p">@Localizer["OPENDATA-WIZARD.Approval_Filled_out_2"]</AeTypography> 
                        <AeTypography Variant="p">@Localizer["OPENDATA-WIZARD.Approval_Filled_out_3"]</AeTypography>
                    </AeFlex>
                    <AeFlex>
                        <AeButton OnClickEvent=@GenerateApprovalDocument>@Localizer["OPENDATA-WIZARD.GenerateDOCX_button"]</AeButton>
                        <div>&nbsp;</div>
                        <AeButton OnClickEvent=@ManuallyShowApprovalForm>@Localizer["OPENDATA-WIZARD.AmendApprovalForm_button"]</AeButton>
                    </AeFlex>
                </AeCard>

                @if (ShowSignedPdfPanel)
                {
                    <AeCard>
                        <AeTypography Variant="h3">@GetStepTitle(OpenDataSharingStatus.SubmitSignedPDF)</AeTypography>
                        <AeFlex Vertical="true" style="margin: 1rem 1rem 1rem 0rem;">
                            <AeTypography>@Localizer["OPENDATA-WIZARD.EnterGcDocsUrl"]:</AeTypography>
                            <input @bind=@_signedApprovalFormUrl class="ae input" style="width: 100%" @bind:event="oninput"/>
                        </AeFlex>
                        <AeFlex>
                            <AeButton OnClickEvent=@UploadSignedPDF Disabled=@UploadSignedPDFDisabled()>@Localizer["BUTTONS.Submit"]</AeButton>
                            <div>
                                @if (_savingData)
                                {
                                    <Spinner Small=@true/>
                                }
                            </div>
                        </AeFlex>
                    </AeCard>
                }
            }
        }

        @if (ShowUploadCard)
        {
            <AeCard>
                <ChildContent>
                    <AeTypography Variant="h3">@GetStepTitle(OpenDataSharingStatus.PendingUpload)</AeTypography>

                    @if (!OpenDataFileUploading)
                    {
                        <AeFlex Vertical="true">
                            <AeTypography Variant="div">
                                <p>@(new MarkupString(Localizer["OPENDATA-WIZARD.Publish_As_URL_Desc1"]))</p>
                                <p>@(new MarkupString(Localizer["OPENDATA-WIZARD.Publish_As_URL_Desc2"]))</p>
                            </AeTypography>

                            <div>
                                <AeButton OnClickEvent=@PublishAsUrl Disabled=@_savingData>@Localizer["OPENDATA-WIZARD.Publish_As_URL"]</AeButton>
                            </div>
                            @if (!string.IsNullOrEmpty(_urlPublishError))
                            {
                                <AeTypography Variant="p" style="font-size: 0.8em">
                                    @Localizer["OPENDATA-WIZARD.Upload_Last_Error"] @_urlPublishError
                                </AeTypography>
                            }
                        </AeFlex>

                        <div>&nbsp;</div>
                        <div><b>@Localizer["Or"]</b></div>

                        <AeFlex Vertical="true">
                            <AeTypography Variant="p">@(new MarkupString(Localizer["OPENDATA-WIZARD.Upload_And_Publish_Desc"]))</AeTypography>
                            <div>
                                <AeButton OnClickEvent=@UploadAndPublish Disabled=@_savingData>@Localizer["OPENDATA-WIZARD.Upload_And_Publish"]</AeButton>
                            </div>
                            @if (_uploadStatus == OpenDataUploadStatus.Failed)
                            {
                                <AeTypography Variant="p" style="font-size: 0.8em">
                                    @Localizer["OPENDATA-WIZARD.Upload_Last_Error"] @_uploadFileErrorMessage
                                </AeTypography>
                            }
                        </AeFlex>
                    }
                    else
                    {
                        <AeTypography Variant="p">@Localizer["OPENDATA-WIZARD.Uploading_file_in_progress"]</AeTypography>
                    }

                    <div>
                        @if (_savingData)
                        {
                            <Spinner Small=@true/>
                        }
                    </div>
                </ChildContent>
            </AeCard>
        }

        @if (ShowPublicationDatePanel)
        {
            <AeCard>
                <AeTypography Variant="h3">@Localizer["OPENDATA-WIZARD.PublicationDate"]</AeTypography>
                <p>@_publicationDateText</p>
            </AeCard>
        }

        @if (ShowCancelPanel)
        {
            <AeCard style="margin-top: 1rem;">
                <Typography Variant="h3">@Localizer["OPENDATA-WIZARD.CancelSharing"]</Typography>
                <p>@Localizer["OPENDATA-WIZARD.CancelSharingDescription"]</p>
                <AeButton OnClickEvent=@ShowCancelRequestDialog>@Localizer["BUTTONS.Cancel"]</AeButton>
            </AeCard>
        }

        <div>&nbsp;</div>

        <div>
            <DHLink DataProject=@_projectCode>@Localizer[$"{LOCALIZATION_PREFIX}.ReturnToProject"]</DHLink>
        </div>

    </AeFlex>

    <div id="stepsDiv" style="width: 50%;">
        <AeSteps T=@OpenDataSharingStatus
            CurrentStepState=@GetState
            StepItems=@_steps
            StepTitle=@StepTitle
            StepMessage=@StepMessage
            PassedIcon=@_checkIcon
            />

    @if (ShowPublicUrl)
    {
        var publicUrl = GetOpenDataFileUrl();
        <AeCard>
            <AeTypography Variant="h3">@Localizer["OPENDATA-WIZARD.PublicUrl"]</AeTypography>
            <p><a href=@publicUrl target="_blank">@publicUrl</a></p>
        </AeCard>
    }

    </div>

</AeFlex>

<div>&nbsp;</div>

@code {
    private static readonly string LOCALIZATION_PREFIX = "OPENDATA-WIZARD";

    [Parameter]
    public string FileId { get; set; }

    private Guid _fileIdGuid;

    private ObjectMetadataEditor _metadataEditor;

    private bool _savingData = false;

    private List<OpenDataSharingStatus> _steps = Enum.GetValues<OpenDataSharingStatus>().ToList();
    private OpenDataSharingStatus _currentStep = OpenDataSharingStatus.EnterMetadata;
    private RenderFragment _checkIcon = @<i class="fa fa-check"></i>;

    private Dictionary<OpenDataSharingStatus, (string, string)?> _stepInfo = new();
    private Dictionary<OpenDataSharingStatus, AeSteps<OpenDataSharingStatus>.StepState> _stepStates = new();

    private string StepTitle(OpenDataSharingStatus i) => _stepInfo.GetValueOrDefault(i)?.Item1;
    private string StepMessage(OpenDataSharingStatus i) => _stepInfo.GetValueOrDefault(i)?.Item2;
    private AeSteps<OpenDataSharingStatus>.StepState GetState(OpenDataSharingStatus i) => _stepStates[i];

    private bool ShowMetadataEditor => _currentStep == OpenDataSharingStatus.EnterMetadata || _editSavedMetadata;
    private bool ShowSkipMetadata => _currentStep == OpenDataSharingStatus.EnterMetadata;
    private bool ShowApprovalCards => _isOwnRequest && _currentStep < OpenDataSharingStatus.PendingApproval && !_editSavedMetadata; 
    private bool ShowApprovalForm => _currentStep == OpenDataSharingStatus.OpenGovApprovalForm || _editSubmittedApproval;
    private bool ApprovalFormSubmitted => _stepStates[OpenDataSharingStatus.OpenGovApprovalForm] == AeSteps<OpenDataSharingStatus>.StepState.Passed;
    private bool ShowSignedPdfPanel => _currentStep == OpenDataSharingStatus.SubmitSignedPDF;
    private bool ShowPublicationDatePanel => _currentStep == OpenDataSharingStatus.PendingPublication;
    private bool ShowPublicUrl => _currentStep == OpenDataSharingStatus.AccessOpenData;
    private bool ShowCancelPanel => _currentStep <= OpenDataSharingStatus.PendingApproval  && _isOwnRequest && !_editSavedMetadata;
    private bool ShowUploadCard => _currentStep == OpenDataSharingStatus.PendingUpload && _isOwnRequest && !_editSavedMetadata;
    
    private string GenerateApprovalDocumentUrl => $"/api/OpenDataApproval?id={_approvalFormId}";

    private bool _isOwnRequest = false;

    private bool _editSavedMetadata = false;
    private bool _editSubmittedApproval = false;

    private string _publicationDateText = string.Empty;
    private string _urlPublishError;

    private long _sharedDataFileId;
    private OpenDataUploadStatus _uploadStatus = OpenDataUploadStatus.NotStarted;
    private string _uploadFileErrorMessage;

    private int _approvalFormId = 0;

    private string _signedApprovalFormUrl;

    private GraphUser _requestingUser;
    private string _requestFilename;
    private string _projectCode;

    private string _datasetTitle;

    private string GetOpenDataFileUrl()
    {
        var language = Thread.CurrentThread.CurrentCulture.Name.ToLower().Contains("fr") ? "fr" : "en";
        var subdomain = OpenDataService.IsStaging() ? "registry-staging" : "registry";
        return $"https://{subdomain}.open.canada.ca/{language}/dataset/{FileId}";
    }

    private void UpdateCurrentStatus(OpenDataSharingStatus step, bool passed = false)
    {
        _editSavedMetadata = false;
        _editSubmittedApproval = false;

        _currentStep = step;
        _stepStates[step] = passed? AeSteps<OpenDataSharingStatus>.StepState.Passed : AeSteps<OpenDataSharingStatus>.StepState.Running;

        foreach (var stepv in Enum.GetValues<OpenDataSharingStatus>())
        {
            if (stepv < step)
            {
                _stepStates[stepv] = AeSteps<OpenDataSharingStatus>.StepState.Passed;
            }
            else if (stepv > step)
            {
                _stepStates[stepv] = AeSteps<OpenDataSharingStatus>.StepState.Queued;
            }
        }
    }

    private void ManuallyShowMetadataEditor()
    {
        _editSavedMetadata = true;
    }

    private void ManuallyShowApprovalForm()
    {
        _editSubmittedApproval = true;
    }

    private async void GenerateApprovalDocument()
    {
        try
        {
            await jsRuntime.InvokeAsync<object>("open", GenerateApprovalDocumentUrl, "_blank");
        }
        catch (Exception)
        {
        }
    }

    private async Task UpdateApprovalFormId(int id)
    {
        _savingData = true;
        try
        {
            _approvalFormId = id;
            await PublicFileService.UpdateOpenDataApprovalFormId(_fileIdGuid, id);        
        }
        finally
        {
            _savingData = false;
        }
        if (_currentStep == OpenDataSharingStatus.OpenGovApprovalForm)
        {
            UpdateCurrentStatus(OpenDataSharingStatus.SubmitSignedPDF);
        }
        else
        {
            _editSubmittedApproval = false;
        }
    }

    private async Task UploadSignedPDF()
    {
        if (IsPDFUrlValid())
        {
            _savingData = true;

            await PublicFileService.UpdateOpenDataSignedApprovalFormUrl(_fileIdGuid, _signedApprovalFormUrl);
            await PublicFileService.NotifySignedPDFUploaded();

            _savingData = false;
            UpdateCurrentStatus(OpenDataSharingStatus.PendingApproval);   
        }
    }

    private async Task PublishAsUrl()
    {
        _savingData = true;
        try
        {
            _urlPublishError = string.Empty;

            var fieldValues = await MetadataBrokerService.GetObjectMetadataValues(FileId);

            // get the file url
            var url = PublicFileService.GetPublicSharedFileUrl(FileId);

            // publish to open data
            var result = await OpenDataService.PublishFileAsUrl(fieldValues, url);

            if (result.Succeeded)
            {
                var updatedFile = await PublicFileService.UpdateOpenDataPublication(_fileIdGuid, true);
                UpdateShareFileStatus(updatedFile);
                await InvokeAsync(StateHasChanged);
            }
            else
            {
                _urlPublishError = result.ErrorMessage;
            }
        }
        finally
        {
            _savingData = false;
        }
    }

    private async Task UploadAndPublish()
    {
        try
        {
            _savingData = true;

            var fieldValues = await MetadataBrokerService.GetObjectMetadataValues(FileId);
            var fileUri = await  PublicFileService.DownloadPublicUrlSharedFile(_fileIdGuid);

            _ = OpenDataService.PublishFile(fieldValues, _sharedDataFileId, FileId, _requestFilename, fileUri.ToString());

            _uploadStatus = OpenDataUploadStatus.UploadingFile;
            StartOpenDataUploadTimer();

            await InvokeAsync(StateHasChanged);
        }
        finally
        {
            _savingData = false;
        }
    }

    private bool OpenDataFileUploading => _uploadStatus == OpenDataUploadStatus.UploadingFile;

    private System.Timers.Timer _openDataUploadTimer;

    private void StartOpenDataUploadTimer()
    {
        if (_openDataUploadTimer is null)
        {
            _openDataUploadTimer = new(5000);
            _openDataUploadTimer.Elapsed += CheckOpenDataUploadStatus;
        }
        _openDataUploadTimer.Enabled = true;
    }

    private async void CheckOpenDataUploadStatus(object source, System.Timers.ElapsedEventArgs e)
    {
        using (var ctx = dbContextFactory.CreateDbContext())
        {
            var mustRefresh = false;
            var sharedFile = ctx.OpenDataSharedFiles.FirstOrDefault(e => e.SharedDataFile_ID == _sharedDataFileId);

            if (sharedFile.UploadStatus_CD != _uploadStatus)
            {
                _uploadStatus = sharedFile.UploadStatus_CD;
                _uploadFileErrorMessage = sharedFile.UploadError_TXT;
                mustRefresh = true;
            }

            if (_uploadStatus == OpenDataUploadStatus.UploadCompleted)
            {
                _openDataUploadTimer.Enabled = false;
                UpdateShareFileStatus(sharedFile);
                mustRefresh = true;
            }        

            if (mustRefresh)
            {
                await InvokeAsync(StateHasChanged);    
            }
        }
    }

    private async Task HandleSaveMetadata()
    {
        _datasetTitle = _metadataEditor.GetTitle();

        await PublicFileService.MarkMetadataComplete(_fileIdGuid);

        var uri = GetBaseUrl(NavManager.Uri);
        await NavManager.NavigateTo($"{uri}#stepsDiv", true);

        if (_currentStep == OpenDataSharingStatus.EnterMetadata)
        {
            UpdateCurrentStatus(OpenDataSharingStatus.OpenGovApprovalForm);
        }
        else
        {
            _editSavedMetadata = false;
        }
    }

    static string GetBaseUrl(string url)
    {
        var hashIndex = url.IndexOf('#');
        return hashIndex > 0 ? url.Substring(0, hashIndex) : url;
    }

    private async Task AcceptMetadata()
    {
        await PublicFileService.MarkMetadataComplete(_fileIdGuid);
        UpdateCurrentStatus(OpenDataSharingStatus.OpenGovApprovalForm);
    }

    private async Task ShowCancelRequestDialog()
    {
        var promptText = new List<string>() { Localizer["OPENDATA-WIZARD.CancelSharingPrompt"] };
        RenderFragment cancelDialog = 
            @<UserChoiceModal HeaderText=@Localizer["OPENDATA-WIZARD.CancelSharing"]
                              ChoiceTextList=@promptText
                              OnDecision="HandleCancel"
                              ConfirmText=@Localizer["COMMON.Yes"]
                              CancelText=@Localizer["COMMON.No"]/>
    ;
        await UI.ToggleModal(cancelDialog);
    }

    private async void HandleCancel(bool isCancelled)
    {
        if (isCancelled)
        {
            _savingData = true;
            await PublicFileService.CancelPublicDataShare(_fileIdGuid);
            _savingData = false;
            await NavManager.NavigateTo("/", true);
        }
        await UI.ToggleModal();
    }

    protected override async Task OnInitializedAsync()
    {
        if (Guid.TryParse(FileId, out _fileIdGuid))
        {
            var loadTask = PublicFileService.LoadOpenDataSharedFileInfo(_fileIdGuid);
            var currentUserTask = UserInformationService.GetUserAsync();

            _stepInfo = _steps.ToDictionary(s => s, s => GetStepPair(s));
            _stepStates = _steps.ToDictionary(s => s, s => AeSteps<OpenDataSharingStatus>.StepState.Queued);

            var sharedFileInfo = await loadTask;
            if (sharedFileInfo is null)
            {
                await NavManager.NavigateTo("/", true);
                return;
            }

            _sharedDataFileId = sharedFileInfo.SharedDataFile_ID;
            _uploadStatus = sharedFileInfo.UploadStatus_CD;
            _uploadFileErrorMessage = sharedFileInfo.UploadError_TXT;

            _approvalFormId = sharedFileInfo.ApprovalForm_ID ?? 0;
            _signedApprovalFormUrl = sharedFileInfo.SignedApprovalForm_URL;
            _requestFilename = sharedFileInfo.Filename_TXT;
            _publicationDateText = sharedFileInfo.PublicationDate_DT?.ToShortDateString();

            _requestingUser = await GraphService.GetUserAsync(sharedFileInfo.RequestingUser_ID, CancellationToken.None);
            var currentUser = await currentUserTask;
            _isOwnRequest = currentUser.Id == _requestingUser.Id;
            _projectCode = sharedFileInfo.ProjectCode_CD;

            UpdateShareFileStatus(sharedFileInfo);
        }
        else
        {
            await NavManager.NavigateTo("/", true);
        }
    }

    private (string, string)? GetStepPair(OpenDataSharingStatus status)
    {
        var prefix = SharedDataFile.OPEN_DATA_SHARING_STATUS_LOCALIZATION_PREFIX;
        var title = $"{prefix}.{status}.Title";
        var desc = $"{prefix}.{status}.Description";
        return (Localizer[title], Localizer[desc]);
    }

    private string GetStepTitle(OpenDataSharingStatus status) => GetStepPair(status).Value.Item1;

    private void UpdateShareFileStatus(OpenDataSharedFile file)
    {
        var status = file.GetOpenDataSharingStatus();
        UpdateCurrentStatus(status, status == OpenDataSharingStatus.AccessOpenData);
        UpdateOpenDataUploadStatus(status);
    }

    private void UpdateOpenDataUploadStatus(OpenDataSharingStatus status)
    {
        if (status == OpenDataSharingStatus.PendingUpload && _uploadStatus == OpenDataUploadStatus.UploadingFile)
        {
            StartOpenDataUploadTimer();
        }
    }

    const string GcDocURLBase = "https://gcdocs.gc.ca/nrcan-rncan/llisapi.dll/link/";

    private bool IsPDFUrlValid()
    {
        return (_signedApprovalFormUrl ?? string.Empty).StartsWith(GcDocURLBase, StringComparison.InvariantCultureIgnoreCase);
    }

    private bool UploadSignedPDFDisabled() => _savingData || !IsPDFUrlValid();
}
