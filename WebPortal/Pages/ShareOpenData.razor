@page "/share/opendata/{FileId}"
@using Datahub.CKAN.Service
@using Datahub.Metadata.DTO;
@using System.Net.Http.Headers
@inject NavigationManager NavManager
@inject IPublicDataFileService PublicFileService
@inject IDbContextFactory<DatahubProjectDBContext> dbContextFactory
@inject IMSGraphService GraphService
@inject UIControlsService UI
@inject IUserInformationService UserInformationService
@inject IMetadataBrokerService MetadataBrokerService
@inject IOpenDataService OpenDataService
@inject IJSRuntime jsRuntime

<AeTypography style="margin-left: 2rem;" Variant="h1">@Localizer["OPENDATA-WIZARD.Page_Title"]</AeTypography>

<AeFlex>
    <AeFlex Vertical style="margin-left: 2rem; width: 50%;">

        <AeCard>
            <AeTypography Variant="h3">@Localizer["OPENDATA-WIZARD.Metadata"]</AeTypography>

            @if (!string.IsNullOrEmpty(requestFilename))
            {
                <AeTypography Variant="p">@Localizer["Filename"]: @requestFilename</AeTypography>
            }

            @if (ShowMetadataEditor && IsOwnRequest)
            {
                <ObjectMetadataEditor ObjectId=@FileId @ref=@_metadataEditor OnFieldChanged="OnMetadataFieldChanged" />
                <AeFlex>
                    <AeButton OnClickEvent=@SaveMetadata Disabled=@SaveMetadataDisabled()>
                        @Localizer["OPENDATA-WIZARD.Save_button"]
                    </AeButton>
                    <div>
                        @if (savingData)
                        {
                            <Spinner Small=@true/>
                        }
                    </div>
                </AeFlex>
            }
            else if (IsOwnRequest)
            {
                <AeButton OnClickEvent=@ManuallyShowMetadataEditor Disabled=@savingData>
                    @Localizer["OPENDATA-WIZARD.Edit_button"]
                </AeButton>
            }
            else 
            {
                @if (RequestingUser != null) {
                    <AeTypography Variant="p">@Localizer["Requesting User"]: @RequestingUser.DisplayName</AeTypography>
                }
            }
        </AeCard>

        @if (ShowApprovalCards)
        {
            @if (ShowApprovalForm)
            {
                <AeCard>

                <Datahub.Portal.Pages.Forms.ShareWorkflow.ApprovalForm 
                    ApprovalFormId=@approvalFormId 
                    OnSubmitForm=@UpdateApprovalFormId 
                    DatasetTitle=@_datasetTitle
                    User=@RequestingUser/>

                    <div>&nbsp;</div>
                </AeCard>
            }
            else if (ApprovalFormSubmitted)
            {
                <AeCard>
                    <AeTypography Variant="h3">@Localizer["OPENDATA-WIZARD.Approval_Form"]</AeTypography>
                    <AeTypography Variant="p">@Localizer["OPENDATA-WIZARD.Approval_filled_out"]</AeTypography>
                    <AeFlex>
                        <AeButton OnClickEvent=@GenerateApprovalPDF>@Localizer["OPENDATA-WIZARD.GeneratePDF_button"]</AeButton>
                        <div>&nbsp;</div>
                        <AeButton OnClickEvent=@ManuallyShowApprovalForm>@Localizer["OPENDATA-WIZARD.AmendApprovalForm_button"]</AeButton>
                    </AeFlex>
                </AeCard>

                @if (ShowSignedPdfPanel)
                {
                    <AeCard>
                        <AeTypography Variant="h3">@Localizer["OPENDATA-WIZARD.SubmitSignedPdf"]</AeTypography>
                        <AeFlex Vertical="true" style="margin: 1rem 1rem 1rem 0rem;">
                            <AeTypography>@Localizer["OPENDATA-WIZARD.EnterGcDocsUrl"]:</AeTypography>
                            <input @bind-value=@signedApprovalFormUrl class="ae input" style="width: 100%" />
                        </AeFlex>
                        <AeFlex>
                            <AeButton OnClickEvent=@UploadSignedPDF Disabled=@savingData >@Localizer["BUTTONS.Submit"]</AeButton>
                            <div>
                                @if (savingData)
                                {
                                    <Spinner Small=@true/>
                                }
                            </div>
                        </AeFlex>
                    </AeCard>
                }
            }
        }

        @if (ShowUploadCard)
        {
            <AeCard>
                <ChildContent>
                    <AeTypography Variant="h3">@Localizer["OPENDATA-WIZARD.Publish_File"]</AeTypography>

                    @if (!OpenDataFileUploading)
                    {
                        <AeFlex Vertical="true">
                            <AeTypography Variant="p">@Localizer["OPENDATA-WIZARD.Publish_As_URL_Desc"]</AeTypography>
                            <div>
                                <AeButton OnClickEvent=@PublishAsUrl Disabled=@savingData>@Localizer["OPENDATA-WIZARD.Publish_As_URL"]</AeButton>
                            </div>
                        </AeFlex>

                        <AeFlex Vertical="true">
                            <AeTypography Variant="p">@Localizer["OPENDATA-WIZARD.Upload_And_Publish_Desc"]</AeTypography>
                            <div>
                                <AeButton OnClickEvent=@UploadAndPublish Disabled=@savingData>@Localizer["OPENDATA-WIZARD.Upload_And_Publish"]</AeButton>
                            </div>
                            @if (uploadStatus == OpenDataUploadStatus.Failed)
                            {
                                <AeTypography Variant="p" style="font-size: 0.8em">
                                    @Localizer["OPENDATA-WIZARD.Upload_Last_Error"] @uploadFileErrorMessage
                                </AeTypography>
                            }
                        </AeFlex>
                    }
                    else
                    {
                        <AeTypography Variant="p">@Localizer["OPENDATA-WIZARD.Uploading_file_in_progress"]</AeTypography>
                    }

                    <div>
                        @if (savingData)
                        {
                            <Spinner Small=@true/>
                        }
                    </div>
                </ChildContent>
            </AeCard>
        }

        @if (ShowPublicationDatePanel)
        {
            <AeCard>
                <AeTypography Variant="h3">@Localizer["OPENDATA-WIZARD.PublicationDate"]</AeTypography>
                <p>@PublicationDateStr</p>
            </AeCard>
        }

    </AeFlex>

    <div id="stepsDiv" style="width: 50%;">
        <AeSteps T=@OpenDataSharingStatus
            CurrentStepState=@GetState
            StepItems=@steps
            StepTitle=@StepTitle
            StepMessage=@StepMessage
            PassedIcon=@checkIcon
            />

    @if (ShowPublicUrl)
    {
        var publicUrl = GetOpenDataFileUrl();
        <AeCard>
            <AeTypography Variant="h3">@Localizer["OPENDATA-WIZARD.PublicUrl"]</AeTypography>
            <p><a href=@publicUrl target="_blank">@publicUrl</a></p>
        </AeCard>
    }

    @if (ShowCancelPanel && IsOwnRequest)
    {
        <AeCard>
            <Typography Variant="h3">@Localizer["OPENDATA-WIZARD.CancelSharing"]</Typography>
            <p>@Localizer["OPENDATA-WIZARD.CancelSharingDescription"]</p>
            <AeButton OnClickEvent=@ShowCancelRequestDialog>@Localizer["BUTTONS.Cancel"]</AeButton>
        </AeCard>
    }

    </div>

</AeFlex>

<div>&nbsp;</div>

@code {

    [Parameter]
    public string FileId { get; set; }

    private Guid fileIdGuid;

    private ObjectMetadataEditor _metadataEditor;

    private ElementReference _metadataEditor2;

    private bool savingData = false;

    private List<OpenDataSharingStatus> steps = Enum.GetValues<OpenDataSharingStatus>().ToList();
    private OpenDataSharingStatus currentStep = OpenDataSharingStatus.EnterMetadata;
    private RenderFragment checkIcon = @<i class="fa fa-check"></i>
    ;

    private Dictionary<OpenDataSharingStatus, (string, string)?> _stepInfo = new Dictionary<OpenDataSharingStatus, (string, string)?>();
    private Dictionary<OpenDataSharingStatus, AeSteps<OpenDataSharingStatus>.StepState> _stepStates = new Dictionary<OpenDataSharingStatus, AeSteps<OpenDataSharingStatus>.StepState>()
    {
        { OpenDataSharingStatus.EnterMetadata, AeSteps<OpenDataSharingStatus>.StepState.Queued },
        { OpenDataSharingStatus.OpenGovApprovalForm, AeSteps<OpenDataSharingStatus>.StepState.Queued },
        { OpenDataSharingStatus.SubmitSignedPDF, AeSteps<OpenDataSharingStatus>.StepState.Queued },
        { OpenDataSharingStatus.PendingApproval, AeSteps<OpenDataSharingStatus>.StepState.Queued },
        { OpenDataSharingStatus.PendingPublication, AeSteps<OpenDataSharingStatus>.StepState.Queued },
        { OpenDataSharingStatus.PendingUpload, AeSteps<OpenDataSharingStatus>.StepState.Queued },
        { OpenDataSharingStatus.AccessOpenData, AeSteps<OpenDataSharingStatus>.StepState.Queued }            
    };

    private string StepTitle(OpenDataSharingStatus i) => _stepInfo.GetValueOrDefault(i)?.Item1;
    private string StepMessage(OpenDataSharingStatus i) => _stepInfo.GetValueOrDefault(i)?.Item2;
    private AeSteps<OpenDataSharingStatus>.StepState GetState(OpenDataSharingStatus i) => _stepStates[i];

    private bool ShowMetadataEditor => currentStep == OpenDataSharingStatus.EnterMetadata || editSavedMetadata;
    private bool ShowSkipMetadata => currentStep == OpenDataSharingStatus.EnterMetadata;
    private bool ShowApprovalCards => IsOwnRequest && currentStep < OpenDataSharingStatus.PendingApproval; 
    private bool ShowApprovalForm => currentStep == OpenDataSharingStatus.OpenGovApprovalForm || editSubmittedApproval;
    private bool ApprovalFormSubmitted => _stepStates[OpenDataSharingStatus.OpenGovApprovalForm] == AeSteps<OpenDataSharingStatus>.StepState.Passed;
    private bool ShowSignedPdfPanel => currentStep == OpenDataSharingStatus.SubmitSignedPDF;
    private bool ShowPublicationDatePanel => currentStep == OpenDataSharingStatus.PendingPublication;
    private bool ShowPublicUrl => currentStep == OpenDataSharingStatus.AccessOpenData;
    private bool ShowCancelPanel => currentStep <= OpenDataSharingStatus.PendingUpload;
    private bool ShowUploadCard => currentStep == OpenDataSharingStatus.PendingUpload && IsOwnRequest;

    private bool IsOwnRequest = false;

    private bool editSavedMetadata = false;
    private bool editSubmittedApproval = false;

    private string PublicationDateStr = string.Empty;
    private long sharedDataFileId;
    private OpenDataUploadStatus uploadStatus = OpenDataUploadStatus.NotStarted;
    private string uploadFileErrorMessage;
    private int approvalFormId = 0;
    private string GenerateApprovalFormPdfUrl => PublicFileService.GetOpenDataApprovalFormPdfUrl(approvalFormId);
    private string signedApprovalFormUrl;

    private GraphUser RequestingUser;
    private string requestFilename;

    private string _datasetTitle;

    private string GetOpenDataFileUrl()
    {
        var language = Thread.CurrentThread.CurrentCulture.Name.ToLower().Contains("fr") ? "fr" : "en";
        var subdomain = OpenDataService.IsStaging() ? "registry-staging" : "registry";
        return $"https://{subdomain}.open.canada.ca/{language}/dataset/{FileId}";
    }

    private void UpdateCurrentStatus(OpenDataSharingStatus step, bool passed = false)
    {
        editSavedMetadata = false;
        editSubmittedApproval = false;

        currentStep = step;
        _stepStates[step] = passed? AeSteps<OpenDataSharingStatus>.StepState.Passed : AeSteps<OpenDataSharingStatus>.StepState.Running;

        foreach (var stepv in Enum.GetValues<OpenDataSharingStatus>())
        {
            if (stepv < step)
            {
                _stepStates[stepv] = AeSteps<OpenDataSharingStatus>.StepState.Passed;
            }
            else if (stepv > step)
            {
                _stepStates[stepv] = AeSteps<OpenDataSharingStatus>.StepState.Queued;
            }
        }
    }

    private void ManuallyShowMetadataEditor()
    {
        editSavedMetadata = true;
    }

    private void ManuallyShowApprovalForm()
    {
        editSubmittedApproval = true;
    }

    private async void GenerateApprovalPDF()
    {
        try
        {
            await jsRuntime.InvokeAsync<object>("open", GenerateApprovalFormPdfUrl, "_blank");
        }
        catch (Exception)
        {
        }
    }

    private async Task UpdateApprovalFormId(int id)
    {
        savingData = true;
        approvalFormId = id;
        await PublicFileService.UpdateOpenDataApprovalFormId(fileIdGuid, id);
        savingData = false;
        if (currentStep == OpenDataSharingStatus.OpenGovApprovalForm)
        {
            UpdateCurrentStatus(OpenDataSharingStatus.SubmitSignedPDF);
        }
        else
        {
            editSubmittedApproval = false;
        }
    }

    private async Task UploadSignedPDF()
    {
        if (!string.IsNullOrEmpty(signedApprovalFormUrl))
        {
            savingData = true;

            await PublicFileService.UpdateOpenDataSignedApprovalFormUrl(fileIdGuid, signedApprovalFormUrl);
            await PublicFileService.NotifySignedPDFUploaded();

            savingData = false;
            UpdateCurrentStatus(OpenDataSharingStatus.PendingApproval);   
        }
    }

    private async Task PublishAsUrl()
    {
        savingData = true;
        try
        {
            var fileId = fileIdGuid.ToString();
            var fieldValues = await MetadataBrokerService.GetObjectMetadataValues(fileId);

            // get the file url
            var url = PublicFileService.GetPublicSharedFileUrl(fileId);

            // publish to open data
            var result = await OpenDataService.PublishFileAsUrl(fieldValues, url);

            if (result.Succeeded)
            {
                var updatedFile = await PublicFileService.UpdateOpenDataPublication(fileIdGuid, true);
                UpdateShareFileStatus(updatedFile);
                await InvokeAsync(StateHasChanged);
            }
            else
            {
                // todo: toast error!
            }
        }
        finally
        {
            savingData = false;
        }
    }

    private async Task UploadAndPublish()
    {
        try
        {
            savingData = true;

            var fileId = fileIdGuid.ToString();
            var fieldValues = await MetadataBrokerService.GetObjectMetadataValues(fileId);
            var fileUri = await  PublicFileService.DownloadPublicUrlSharedFile(fileIdGuid);

            _ = OpenDataService.PublishFile(fieldValues, sharedDataFileId, fileId, requestFilename, fileUri.ToString());

            uploadStatus = OpenDataUploadStatus.UploadingFile;
            StartOpenDataUploadTimer();

            await InvokeAsync(StateHasChanged);
        }
        finally
        {
            savingData = false;
        }
    }

    private bool OpenDataFileUploading => uploadStatus == OpenDataUploadStatus.UploadingFile;

    private System.Timers.Timer _openDataUploadTimer;

    private void StartOpenDataUploadTimer()
    {
        if (_openDataUploadTimer is null)
        {
            _openDataUploadTimer = new(5000);
            _openDataUploadTimer.Elapsed += CheckOpenDataUploadStatus;
        }
        _openDataUploadTimer.Enabled = true;
    }

    private async void CheckOpenDataUploadStatus(object source, System.Timers.ElapsedEventArgs e)
    {
        using (var ctx = dbContextFactory.CreateDbContext())
        {
            var mustRefresh = false;
            var sharedFile = ctx.OpenDataSharedFiles.FirstOrDefault(e => e.SharedDataFile_ID == sharedDataFileId);

            if (sharedFile.UploadStatus_CD != uploadStatus)
            {
                uploadStatus = sharedFile.UploadStatus_CD;
                uploadFileErrorMessage = sharedFile.UploadError_TXT;
                mustRefresh = true;
            }

            if (uploadStatus == OpenDataUploadStatus.UploadCompleted)
            {
                _openDataUploadTimer.Enabled = false;
                UpdateShareFileStatus(sharedFile);
                mustRefresh = true;
            }        

            if (mustRefresh)
            {
                await InvokeAsync(StateHasChanged);    
            }
        }
    }

    private async Task SaveMetadata()
    {
        savingData = true;
        try
        {
            _datasetTitle = _metadataEditor.GetTitle();
            await _metadataEditor.SaveChanges();
            await PublicFileService.MarkMetadataComplete(fileIdGuid);
        }
        finally
        {
            savingData = false;
        }

        var uri = GetBaseUrl(NavManager.Uri);
        NavManager.NavigateTo($"{uri}#stepsDiv");

        if (currentStep == OpenDataSharingStatus.EnterMetadata)
        {
            UpdateCurrentStatus(OpenDataSharingStatus.OpenGovApprovalForm);
        }
        else
        {
            editSavedMetadata = false;
        }
    }

    static string GetBaseUrl(string url)
    {
        var hashIndex = url.IndexOf('#');
        return hashIndex > 0 ? url.Substring(0, hashIndex) : url;
    }

    private async Task AcceptMetadata()
    {
        await PublicFileService.MarkMetadataComplete(fileIdGuid);
        UpdateCurrentStatus(OpenDataSharingStatus.OpenGovApprovalForm);
    }

    private async Task ShowCancelRequestDialog()
    {
        var promptText = new List<string>() { Localizer["OPENDATA-WIZARD.CancelSharingPrompt"] };
        RenderFragment cancelDialog = 
            @<UserChoiceModal HeaderText=@Localizer["OPENDATA-WIZARD.CancelSharing"]
                              ChoiceTextList=@promptText
                              OnDecision="HandleCancel"
                              ConfirmText=@Localizer["COMMON.Yes"]
                              CancelText=@Localizer["COMMON.No"]/>
    ;
        await UI.ToggleModal(cancelDialog);
    }

    private async void HandleCancel(bool isCancelled)
    {
        if (isCancelled)
        {
            savingData = true;
            await PublicFileService.CancelPublicDataShare(fileIdGuid);
            savingData = false;
            NavManager.NavigateTo("/");
        }
        await UI.ToggleModal();
    }

    protected override async Task OnInitializedAsync()
    {
        if (!Guid.TryParse(FileId, out fileIdGuid))
        {
            NavManager.NavigateTo("/");
        }

        var loadTask = PublicFileService.LoadOpenDataSharedFileInfo(fileIdGuid);
        var currentUserTask = UserInformationService.GetUserAsync();

        _stepInfo = new();
        foreach(var step in steps)
        {
            var stepName = step.ToString();
            var prefix = SharedDataFile.OPEN_DATA_SHARING_STATUS_LOCALIZATION_PREFIX;
            var keys = ($"{prefix}.{stepName}.Title", $"{prefix}.{stepName}.Description");
            _stepInfo.Add(step, (Localizer[keys.Item1], Localizer[keys.Item2]));
        }

        var sharedFileInfo = await loadTask;

        sharedDataFileId = sharedFileInfo.SharedDataFile_ID;
        uploadStatus = sharedFileInfo.UploadStatus_CD;
        uploadFileErrorMessage = sharedFileInfo.UploadError_TXT;

        approvalFormId = sharedFileInfo.ApprovalForm_ID ?? 0;
        signedApprovalFormUrl = sharedFileInfo.SignedApprovalForm_URL;
        requestFilename = sharedFileInfo.Filename_TXT;
        PublicationDateStr = sharedFileInfo.PublicationDate_DT?.ToShortDateString();

        RequestingUser = GraphService.GetUser(sharedFileInfo.RequestingUser_ID);
        var currentUser = await currentUserTask;
        IsOwnRequest = currentUser.Id == RequestingUser.Id;

        UpdateShareFileStatus(sharedFileInfo);
    }

    private void UpdateShareFileStatus(OpenDataSharedFile file)
    {
        var status = file.GetOpenDataSharingStatus();
        UpdateCurrentStatus(status, status == OpenDataSharingStatus.AccessOpenData);
        UpdateOpenDataUploadStatus(status);
    }

    private void UpdateOpenDataUploadStatus(OpenDataSharingStatus status)
    {
        if (status == OpenDataSharingStatus.PendingUpload && uploadStatus == OpenDataUploadStatus.UploadingFile)
        {
            StartOpenDataUploadTimer();
        }
    }

    private void OnMetadataFieldChanged() => StateHasChanged();

    private bool SaveMetadataDisabled() => savingData || _metadataEditor?.IsRequiredMetadataValid == false;
}
