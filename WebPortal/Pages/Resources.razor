@using Microsoft.EntityFrameworkCore.Query
@using Microsoft.EntityFrameworkCore;
@using Microsoft.Extensions.Logging
@using Datahub.Portal.Data;
@using System.Web
@using System.IO
@using System.Reflection
@using System.Net

@inject NavigationManager _navigationManager
@inject IJSRuntime _jsInterop
@inject ILogger<Resources> _logger

@page "/resources/"
@page "/resources/{PageName}"

<AeCard>
    <ChildContent>
        <DHMarkdown Content="@_markdownContent"
                    LinkRewriter="@RewriteLink"/>
    </ChildContent>
</AeCard>

@code {

    [Parameter]
    public string PageName { get; set; }

    [Parameter]
    public List<(string,string)> Substitutions { get; set; }

        private const string DefaultPage = "Home";
    private string _markdownContent = string.Empty;
    private string _baseUrl = "/resources";

    private string RewriteLink(string link)
    {
        if (link.StartsWith("http"))
            return link;
        return _baseUrl + "/" + HttpUtility.UrlEncode(link);
    }

    protected override async Task OnParametersSetAsync()
    {
        _markdownContent = await LoadPage(PageName ?? DefaultPage, Substitutions) ?? Localizer["Invalid link"];
    }

    private static string _wikiUrl = "https://raw.githubusercontent.com/wiki/NRCan/datahub-portal/";

    private async Task<string> LoadPage(string name, List<(string,string)> substitutions = null)
    {
        if (name.StartsWith("/")) name = name.Substring(1);
        var fullUrl = $"{_wikiUrl}{name}.md";
        using var client = new HttpClient();
        try
        {
            var content = await client.GetStringAsync(fullUrl);
            if (substitutions == null)
                return content;
            return substitutions
                .Aggregate(content, (current, s) => current.Replace(s.Item1, s.Item2));
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, $"Cannot load page url", fullUrl);
            return null;
        }
    }

}