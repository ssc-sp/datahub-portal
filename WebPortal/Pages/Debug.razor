@using System.Security.Claims;
@inject IUserInformationService UserInformationService
@inject IDataCreatorService DataCreatorService
@inject UIControlsService UI
@inject NavigationManager NavigationManager
@inject IPortalVersionService VersionService

@page "/debug"

@if (!isLoaded)
{
    <Spinner />
}
else
{
    <AeTypography Variant="h1">Debug</AeTypography>
    <AeTypography Variant="h2">User Information</AeTypography>
    <div>User ID: @userId</div>
    <div>Object ID: @oid</div>
    <div>User Name: @userName</div>
    <AeTypography Variant="h2">List of roles</AeTypography>
    @foreach (var role in roles)
    {
        <div>Role: @role.Value</div>
    }   

    <AeTypography Variant="h2">Portal Version</AeTypography>
    <div>Release: @VersionService.ReleaseVersion</div>
    <div>Tag: <a href=@VersionService.ReleaseUrl target="_git">@VersionService.ReleaseTag</a></div>
    <div>Commit: <a href=@VersionService.CommitUrl target="_git">@VersionService.CommitSha</a></div>
}

@code
{
    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }

    public bool isLoaded { get; set; }

    private string userId;
    private string oid;
    private string userName;

    private string BuildUrl => $"https://github.com/NRCan/datahub-portal/releases/tag/{VersionService.ReleaseTag}";
    private string CommitUrl => $"https://github.com/NRCan/datahub-portal/commit/{VersionService.CommitSha}";

    private List<Claim> roles;

    protected override async Task OnInitializedAsync()
    {
        var user = (await authenticationStateTask).User;
        userName = user.Identity.Name;
        userId = user.Claims.FirstOrDefault(c => c.Type == "uid")?.Value;
        oid = await UserInformationService.GetUserIdString();
        var userIdentity = (ClaimsIdentity)user.Identity;
        var claims = userIdentity.Claims;
        var roleClaimType = userIdentity.RoleClaimType;
        roles = claims.Where(c => c.Type == roleClaimType).ToList();
        isLoaded = true;
    }
}