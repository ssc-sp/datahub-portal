@page "/metadatab"

@using NRCan.Datahub.Metadata.Model
@using NRCan.Datahub.Metadata.DTO

<div style="margin: 2rem">
    <AeCard>
        <Header>
            <h2>Metadata</h2>
        </Header>
        <ChildContent>
            <AeFlex>
                <div style="width: 200px; flex-grow: 0.5">
                    <MetadataEditor Preview="false"
                                    Definitions="@_definitions"
                                    FieldValues="@_fieldValues"
                                    RequiredFields="@_requiredFields"
                                    OnFieldChanged="FieldChanged" />

                </div>

                <div style="width: 200px; flex-grow: 0.5">
                    @if (_preview)
                    {
                        <MetadataEditor Preview="_preview"
                                        Definitions="@_definitions"
                                        FieldValues="@_fieldValues"
                                        OnFieldChanged="FieldChanged" />
                    }

                </div>
            </AeFlex>
        </ChildContent>
        <Footer>
            @if (!_saved)
            {
                <AeButton @onclick="SaveChanges" style="margin: 5px;">Save</AeButton>
            }
            <AeButton @onclick="TogglePreview" style="margin: 5px;">Toggle Preview</AeButton>
        </Footer>
    </AeCard>
</div>

@code {

    [Inject]
    public IMetadataBrokerService MetadataBrokerService { get; set; }

    private FieldDefinitions _definitions { get; set; }

    private FieldValueContainer _fieldValues { get; set; }

    /// <summary>
    /// Object ID to edit or add metadata
    /// </summary>
    [Parameter]
    public string ObjectId { get; set; } = "7aa33e32-44a1-4ca4-b76c-ccb98c7b8e0b";

    private bool _preview = false;
    private bool _saved = false;

    private HashSet<string> _requiredFields = new HashSet<string>(new string[] { "owner_org", "keywords_en", "keywords_fr" });

    protected override async Task OnInitializedAsync()
    {
        var context = await MetadataBrokerService.GetMetadataContext(ObjectId);
        _definitions = context.FieldDefinitions;
        _fieldValues = context.FieldValues;
    }

    private void FieldChanged(ObjectFieldValue field)
    {
        _saved = false;
        StateHasChanged();
    }

    private void TogglePreview()
    {
        _preview = !_preview;
    }

    private async void SaveChanges()
    {
        await MetadataBrokerService.SaveMetadata(ObjectId, _definitions.MetadataVersion, _fieldValues);
        _saved = true;
        StateHasChanged();
    }
}
