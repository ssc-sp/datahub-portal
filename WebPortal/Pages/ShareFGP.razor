@page "/share/geodata/{ObjectId}"
@inject CustomNavigation NavManager
@inject IDbContextFactory<DatahubProjectDBContext> dbContextFactory
@inject IMSGraphService GraphService

<AeTypography style="margin-left: 2rem;" Variant="h2">@Localizer["FGP-WIZARD.Page_Title"]</AeTypography>

<AeFlex>
    <AeFlex Vertical style="margin-left: 2rem; width: 50%;">

        @if (_currentStatus == GeoObjectShareStatus.FillApprovalForm)
        {
            // ...
        }

        <AeButton OnClickEvent="HandleNext" >
            Next
        </AeButton>
    </AeFlex>

    <div>
        <AeSteps T=@GeoObjectShareStatus
            CurrentStepState=@GetState
            StepItems=@_steps
            StepTitle=@StepTitle
            StepMessage=@StepMessage
            PassedIcon=@CheckIcon
        />
    </div>
</AeFlex>

@code {

    [Parameter]
    public string ObjectId { get; set; }

    private List<GeoObjectShareStatus> _steps = Enum.GetValues<GeoObjectShareStatus>().ToList();
    private GeoObjectShareStatus _currentStatus = GeoObjectShareStatus.FillApprovalForm;
    private int _approvalFormId;
    private GraphUser _requestingUser;

    protected override async Task OnInitializedAsync()
    {
        if (!IsValidObjectId(ObjectId))
            await NavManager.NavigateTo($"/", true);

        // read shared record
        using var ctx = dbContextFactory.CreateDbContext();

        var sharedObject = await ctx.GeoObjectShares.FirstOrDefaultAsync(e => e.GeoObjectShare_ID == ObjectId);
        if (sharedObject is null)
            await NavManager.NavigateTo($"/", true);

        _requestingUser = await GraphService.GetUserAsync(sharedObject.Email_Contact_TXT, CancellationToken.None);
        _currentStatus = sharedObject.ShareStatus;
        _approvalFormId = sharedObject.ApprovalForm_ID;
    }

    private AeSteps<GeoObjectShareStatus>.StepState GetState(GeoObjectShareStatus step)
    {
        if (step < _currentStatus) 
            return AeSteps<GeoObjectShareStatus>.StepState.Passed;

        if (step == _currentStatus) 
            return AeSteps<GeoObjectShareStatus>.StepState.Running;

        return AeSteps<GeoObjectShareStatus>.StepState.Queued;
    }

    const string PREFIX = "SHARING-STATUS.FGP";

    private string StepTitle(GeoObjectShareStatus status) => Localizer[$"{PREFIX}.{status}.Title"];

    private string StepMessage(GeoObjectShareStatus status) => Localizer[$"{PREFIX}.{status}.Description"];

    private RenderFragment CheckIcon => 
    @<i class="fa fa-check"></i>;

    private void HandleNext()
    {
        _currentStatus++;
        StateHasChanged();
    }

    static bool IsValidObjectId(string id) => Guid.TryParse(id, out Guid ignore);
}
