@using Microsoft.EntityFrameworkCore.Query
@using Microsoft.EntityFrameworkCore;
@inject IStringLocalizer<DataLabels> DataLocalizer
@inject NavigationManager NavigationManager
@inject IJSRuntime JsInterop
@implements IDisposable
@inject IDbContextFactory<DatahubProjectDBContext> DbFactory
@page "/projects"


<div style="padding: 2rem;padding-right: 2rem">

    <AeFlex Vertical>
        <h1>@Localizer["Featured Projects"]</h1>
    </AeFlex>    
<div class="ae flex wrap">
@foreach (var p in _featured)
{
    <AeCard style="width: 450px;margin-bottom:16px" class="small">
        <Header>
            <AeFlex>
            <div style="font-size: 1.5rem;padding-right: 0.5em;">
                <i class="@($"fad fa-{p.Project_Icon}")" />
            </div>
            <AeFlex>
            <AeFlex Vertical>
            <DHLink DataProject="@p.Project_Acronym_CD">@p.ProjectName</DHLink>
            <AeTypography Variant="h4" style="margin-block-start: 0;">@Localizer[@p.Sector_Name]</AeTypography>
            </AeFlex>
            </AeFlex>
            </AeFlex>
        </Header>
        <ChildContent>
            
            <AeMarkdown Content="@($"{p.ProjectDescription}")"></AeMarkdown>
        </ChildContent>
    </AeCard>
}

</div>
    <AeFlex Vertical>
        <h1>@Localizer["All Projects"]</h1>
    </AeFlex> 
<AeCard>
    <ChildContent>
<div class="ae table-container">

        <AePaginatedTable Accessors="accessorFunctions"     
        Renderers="renderFunctions"
        T="Datahub_Project"
        Dataset="_projects"
        Headers="headers"
        class="custom light"
        style="Width:100%"
        GridTemplateColumns="0.5fr 0.5fr 2fr 3fr"    
        Page="@_lastClicked"
        PageSize="4"
        @ref=_myTable
        />

        <AePagination 
            Pageable="@_myTable" 
            OnPageClick="OnPageClick"> 
            <LeftIcon><i class='fad fa-chevron-double-left'></i></LeftIcon> 
            <RightIcon><i class='fad fa-chevron-double-right'></i></RightIcon>
            </AePagination>
</div>
</ChildContent>
</AeCard>


</div>

@code {

    private List<Func<Datahub_Project, string>> accessorFunctions;
    private List<Func<Datahub_Project, RenderFragment>> renderFunctions;    

    private IPageableComponent _myTable;

    private List<Datahub_Project> _projects;
    private List<Datahub_Project> _featured;
    private DatahubProjectDBContext Context;

    private int _lastClicked = 0;


    private void OnPageClick(int pageIndex)
    {
        _lastClicked = pageIndex;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
            StateHasChanged();
    }

    protected override async Task OnInitializedAsync()
    {
        Context = DbFactory.CreateDbContext();
        _projects = Context.Projects.Where(p => 
            (p.Project_Status_Desc == Datahub_Project.ONGOING || p.Is_Featured) &&
            !p.Is_Private && !string.IsNullOrWhiteSpace(p.Project_Acronym_CD) 
            && !string.IsNullOrWhiteSpace(p.Project_Name)).Include(p => p.Users).ToList();
        _featured = _projects.Where(p => p.Is_Featured).ToList();
        await FillAccessorFunctions();
        
        renderFunctions = new List<Func<Datahub_Project, RenderFragment>>() {            
            Datahub_Project => 
                @<AeFlex class="table-icon"><i class="@($"fad fa-{Datahub_Project.Project_Icon}")"></i></AeFlex>,
            Datahub_Project => @<AeFlex style="padding-top: 1rem"><AeTypography>@Localizer[@Datahub_Project?.Sector_Name]</AeTypography></AeFlex>,
            Datahub_Project => @<AeFlex style="padding-top: 1rem"><AeTypography><DHLink DataProject="@Datahub_Project?.Project_Acronym_CD">@Datahub_Project?.ProjectName</DHLink></AeTypography></AeFlex>,
            Datahub_Project => @<AeMarkdown Content="@($"{Datahub_Project.ProjectDescription}")"></AeMarkdown> ,
        };
        
        
        
        //await FillRenderFunctions();
    }

    private List<string> headers = new List<string>();


    public async Task FillAccessorFunctions()
    {
        accessorFunctions = new List<Func<Datahub_Project, string>>() {
            Datahub_Project => { return Datahub_Project?.Project_Icon; },
            Datahub_Project => { return Datahub_Project?.Sector_Name; },
            Datahub_Project => { return Datahub_Project?.ProjectName; },
            Datahub_Project => { return Datahub_Project?.ProjectDescription; },
        };
    }
    
     public void Dispose() 
    { 
        Context.Dispose();         
    }
}