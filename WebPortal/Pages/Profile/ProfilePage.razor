@page "/profile"

@inject IUserInformationService _userInformationService
@inject IConfiguration _configuration
@inject IDbContextFactory<DatahubProjectDBContext> _dbContextFactory
@inject AchievementService _achievementsService


@using Microsoft.Graph
@using MudBlazor.Utilities
@using Datahub.Portal.Pages.Profile.Sections
@using Datahub.Achievements

@if (_user is null)
{
    <Skeleton/>
    return;
}

<MudContainer Class="mt-16 px-8" MaxWidth="MaxWidth.Large">
    <MudGrid Justify="Justify.Center">
        <MudItem xs="12" Style="@_imageStyle" Class="rounded-lg mud-elevation-4"/>
        <MudItem xs="10" Class="">
            <ProfileTitle User="@_user" />
        </MudItem>
        <MudItem xs="8">
            <ProfileAchievements User="@_user" />
        </MudItem>
        <MudItem xs="8">
            <ProfileProjects Projects="@_projects"/>
        </MudItem>
        <MudItem xs="8">
            <MudStack>
                @foreach (var prop in _user.GetType().GetProperties())
                {
                        <MudText>@prop.Name: @prop.GetValue(_user)</MudText>
                }
            </MudStack>
        </MudItem>
    </MudGrid>
</MudContainer>

@code {

    [CascadingParameter]
    public DatahubUserTelemetry DatahubUserTelemetry { get; set; }
    
    private User _user;
    private List<Datahub_Project> _projects = new();

    private string _imageStyle;

    protected override void OnInitialized()
    {
        base.OnInitialized();

        var x = Icons.Filled.Celebration;

        _imageStyle = new StyleBuilder()
            .AddStyle("background", string.Join("linear-gradient(180deg, rgba(0, 0, 0, 0) 0%, black 100%)",
                $"url('{GetBackground()}') no-repeat center center fixed"))
            .AddStyle("background-size", "cover")
            .AddStyle("height", "250px")
            .AddStyle("width", "100%")
            .Build();
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        _user = await _userInformationService.GetUserAsync();

        await using var dbContext = await _dbContextFactory.CreateDbContextAsync();
        _projects = await dbContext.Project_Users
            .Where(u => u.User_ID == _user.Id)
            .Select(u => u.Project)
            .ToListAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        
        if (firstRender)
        {
            DatahubUserTelemetry.VisitProfile = true;
            await _achievementsService.RunRulesEngine(DatahubUserTelemetry);
            StateHasChanged();
        }
    }

    private string GetBackground()
    {
    //earth-background.jpg
    //LandingBgFolder
        var folder = _configuration["LandingBgFolder"] ?? "nrcan";
        var imgCount = (_configuration.GetSection("LandingBgImgCount").Get<int?>() ?? 12) - 1;
        var randomId = (int)Math.Round(new Random().NextDouble() * imgCount);
        return $"/img/{folder}/landing{randomId:00}.jpg";
    }

}