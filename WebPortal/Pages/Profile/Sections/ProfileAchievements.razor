@using Datahub.Achievements.Models
@using MudBlazor.Utilities
@inject AchievementService _achievementService;

<MudStack Class="my-4">
    <MudStack Row AlignItems="AlignItems.Baseline">
        <MudText Typo="Typo.h5">@Localizer["Achievements"]</MudText>
    </MudStack>
    <MudStack>
        @if (_achievements != null)
        {
            @foreach (var userAchievement in _achievements
                .OrderByDescending(a => a.Earned)
                .ThenBy(a => a.Achievement?.Code))
            {
                <MudPaper Style="@(userAchievement.Earned ? _achievementEarnedStyle : _achievementNotEarnedStyle)" Class="py-4 px-6" Elevation="0">
                    <MudStack Row Justify="Justify.SpaceBetween" >
                        <MudStack Row Spacing="6" AlignItems="AlignItems.Center">
                            <MudIcon Size="Size.Large" Color="@(userAchievement.Earned ? Color.Tertiary : Color.Default)" Icon="@userAchievement!.Achievement!.Icon"/>
                            <MudStack>
                                <MudText Typo="Typo.h6">@userAchievement.Achievement?.Name</MudText>
                                <MudText Typo="Typo.body2">@userAchievement.Achievement?.Description</MudText>
                            </MudStack>
                        </MudStack>
                        <MudText Typo="Typo.caption">@Localizer[(userAchievement.Earned ? "Earned on" : "Not Earned")] @userAchievement!.Date?.ToString("dd-MMM-yyyy")</MudText>
                    </MudStack>
                </MudPaper>
            }
        }
    </MudStack>
</MudStack>

@code {

    [Parameter]
    public Microsoft.Graph.User User { get; set; }

    private IEnumerable<UserAchievement> _achievements;
    private string _achievementEarnedStyle;
    private string _achievementNotEarnedStyle;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);

        if (firstRender)
        {
            _achievements = await _achievementService.GetUserAchievements();
            StateHasChanged();
        }
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();
        _achievementEarnedStyle = new StyleBuilder()
            .Build();

        _achievementNotEarnedStyle = new StyleBuilder()
            .AddStyle("opacity", "0.3")
            .Build();
    }

}