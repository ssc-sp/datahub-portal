@inject ILogger<ProjectAccessRequestTable> _logger
@inject IDbContextFactory<DatahubProjectDBContext> _dbFactory
@inject RegistrationService _registrationService

<AeCard style="min-width: 1200px;">
    <Header>
        <AeTypography Variant="h2">@Localizer["Registration Requests"]</AeTypography>
    </Header>
    <ChildContent>
        <div class="graph-test-container">
            <AeButton @onclick="@HandleGraphTestClick">
                @if (_graphTestRunning)
                {
                    <i style="animation: spin-animation .5s infinite; margin-right: 1rem;" class="fas fa-spinner-third"></i>
                }
                else
                {
                    <i style="margin-right: 1rem;" class="fas fa-function"></i>
                }
                @Localizer["Test Graph Function"]
            </AeButton>
            <AeTypography>@Localizer[_graphStatusMessage]</AeTypography>
        </div>
        @if (_registrationRequests != null)
        {
            <AePaginatedTable
                Headers="@LocalizeHeaders(_headers)"
                Accessors="@_accessorFunctions"
                Dataset="@_registrationRequests"
                Renderers="@_renderFunctions"
                @ref="@_tableRef"
                GridTemplateColumns="1fr 1fr 1fr 150px 150px 200px"
                Page="@_currentPage"
                PageSize="@PageSize"/>

            <AePagination Pageable="@_tableRef" OnPageClick="PaginationClicked">
                <LeftIcon>
                    <i class='fad fa-chevron-double-left'></i>
                </LeftIcon>
                <RightIcon>
                    <i class='fad fa-chevron-double-right'></i>
                </RightIcon>
            </AePagination>
        }
        else
        {
            <div>@Localizer["Loading data..."]</div>
        }
    </ChildContent>
</AeCard>

@code {

    [CascadingParameter(Name = "UserId")]
    public string UserId { get; set; }

    [Parameter]
    public int PageSize { get; set; } = 10;

    private List<Datahub_Registration_Request> _registrationRequests;
    

    private List<Func<Datahub_Registration_Request, string>> _accessorFunctions = new()
    {
        r => r.Email,
        r => r.ProjectName,
        r => r.DepartmentName,
        r => r.ProjectAcronym,
        r => r.UpdatedAt?.ToShortDateString() ?? r.CreatedAt?.ToShortDateString(),
        r => r.Status,
    };

    private List<Func<Datahub_Registration_Request, RenderFragment>> _renderFunctions;


    private List<string> _headers = new()
    {
        "Email", "Project Name", "Department Name", "Project Acronym", "Modified", "Actions"
    };

    private IPageableComponent _tableRef;
    private int _currentPage = 0;

    private List<string> LocalizeHeaders(List<string> input) => input
        .Select(s => Localizer[s].ToString())
        .ToList();

    private void PaginationClicked(int pageIndex) => _currentPage = pageIndex;

    private string _graphStatusMessage = "";
    private bool _graphTestRunning = false;


    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        await using var context = await _dbFactory.CreateDbContextAsync();

        _registrationRequests = await context.Registration_Requests
            .ToListAsync();

        _renderFunctions = new List<Func<Datahub_Registration_Request, RenderFragment>>
        {
            r => @<AeTypography>@r.Email</AeTypography>,
            r => @<AeTypography>@r.ProjectName</AeTypography>,
            r => @<AeTypography>@r.DepartmentName</AeTypography>,
            r => @<AeTypography>@r.ProjectAcronym</AeTypography>,
            r => @<AeTypography>@(r.UpdatedAt?.ToShortDateString() ?? r.CreatedAt?.ToShortDateString())</AeTypography>,
            datahubRegistrationRequest => @<RegistrationActions OnRequestUpdated="HandleRequestUpdate" RegistrationRequest="@datahubRegistrationRequest"/>
        };
    }

    private async Task HandleRequestUpdate(Datahub_Registration_Request request)
    {
        await using var context = await _dbFactory.CreateDbContextAsync();

        context.Entry(request).State = EntityState.Modified;
        request.UpdatedAt = DateTime.Now;
        request.UpdatedBy = UserId;

        await context.SaveChangesAsync();
    }

    private async Task HandleGraphTestClick()
    {
        _graphTestRunning = true;
        StateHasChanged();
        
        _graphStatusMessage = await _registrationService.SendUserInvite("test@email.com", true);
        _graphTestRunning = false;
    }



}