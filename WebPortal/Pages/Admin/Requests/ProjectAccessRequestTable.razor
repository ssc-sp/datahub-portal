@using Microsoft.Extensions.Logging

@inject IDbContextFactory<DatahubProjectDBContext> _dbFactory
@inject IEmailNotificationService _emailService
@inject ServiceAuthManager _serviceAuthManager
@inject ILogger<ProjectAccessRequestTable> _logger

<AeCard>
    <Header>
        <AeTypography Variant="h2">@Localizer["Project User Requests"]</AeTypography>
    </Header>
    <ChildContent>
        @if (Error != null)
        {
            <div>@Error</div>
        }
        @if (_userProjectAuthorization != null)
        {
            <AeFlex Vertical>
                <AePaginatedTable
                    Accessors=@_projectRequestAccessorFunctions
                    Dataset=@_userProjectAuthorization
                    @ref=@_projectAccessTable
                    Page=@_currentPage
                    PageSize=@PageSize
                    Renderers=@_projectReqRenderFunctions
                    Headers=@LocalizeHeaders(_projectRequestHeaders)/>

                @if (_projectAccessTable != null)
                {
                    <AePagination Pageable=@_projectAccessTable OnPageClick=@PaginationClicked>
                        <LeftIcon>
                            <i class='fad fa-chevron-double-left'></i>
                        </LeftIcon>
                        <RightIcon>
                            <i class='fad fa-chevron-double-right'></i>
                        </RightIcon>
                    </AePagination>
                }
            </AeFlex>
        }
        else
        {
            <div>@Localizer["Loading data..."]</div>
        }
    </ChildContent>
</AeCard>

@code {

    [CascadingParameter(Name = "UserId")]
    public string UserId { get; set; }

    [CascadingParameter(Name = "CurrentUserEmail")]
    public string CurrentUserEmail { get; set; }

    [CascadingParameter(Name = "IsDatahubAdmin")]
    public bool IsDatahubAdmin { get; set; }

    [Parameter]
    public int PageSize { get; set; } = 10;

    private string Error { get; set; }

    private List<Datahub_Project_User_Request> _userProjectAuthorization;

    private List<Func<Datahub_Project_User_Request, string>> _projectRequestAccessorFunctions = new()
    {
        p => p.Project.Project_Name,
        p => p.User_ID ?? "N/A",
        p => p.Requested_DT.ToShortDateString(),
        _ => ".."
    };

    private List<Func<Datahub_Project_User_Request, RenderFragment>> _projectReqRenderFunctions;

    private List<string> _projectRequestHeaders = new()
    {
        "Project", "User", "Date", "Actions"
    };

    private List<string> LocalizeHeaders(List<string> input) => input.Select(s => Localizer[s].ToString()).ToList();

    private void PaginationClicked(int pageIndex)
    {
        _currentPage = pageIndex;
    }

    private IPageableComponent _projectAccessTable;
    private int _currentPage = 0;


    private async Task AuthorizeProjectUser(Datahub_Project_User_Request req)
    {
        await using var projectContext = await _dbFactory.CreateDbContextAsync();

        var approvedDate = DateTime.Now;

        var projectUserRequest = await projectContext.Project_Users_Requests
            .Include(r => r.Project)
            .FirstAsync(r => r.ProjectUserRequest_ID == req.ProjectUserRequest_ID);

        projectUserRequest.ApprovedUser = UserId;
        projectUserRequest.Approved_DT = approvedDate;
        var projectUser = new Datahub_Project_User
        {
            User_ID = projectUserRequest.User_ID,
            Project = projectUserRequest.Project,
            ApprovedUser = UserId,
            Approved_DT = approvedDate,
            IsAdmin = false,
            IsDataApprover = false,
            User_Name = CurrentUserEmail.ToLower()
        };
        projectContext.Project_Users.Add(projectUser);

        await projectContext.SaveChangesAsync();

        var serviceName = projectUserRequest.Project.ProjectName;
        try
        {
            await _emailService.SendServiceAccessGrantedNotification(serviceName, projectUserRequest.Project.ProjectInfo, projectUserRequest.User_ID);
        }
        catch (Exception ex)
        {
            Error = "Cannot send email message";
            _logger.LogError(ex, "Cannot send email message");
        }
        _serviceAuthManager.InvalidateAuthCache();
        await RefreshData();
    }

    private async Task DeleteAccessRequest(Datahub_Project_User_Request req)
    {
        await using var projectContext = await _dbFactory.CreateDbContextAsync();

        var projectUserRequest = await projectContext.Project_Users_Requests
            .FirstAsync(r => r.ProjectUserRequest_ID == req.ProjectUserRequest_ID);

        projectContext.Project_Users_Requests.Remove(projectUserRequest);
        await projectContext.SaveChangesAsync();

        await RefreshData();
    }

    private async Task RefreshData()
    {
        using var ctx = await _dbFactory.CreateDbContextAsync();

        var validProjects = (IsDatahubAdmin ?
            ctx.Projects.Select(p => p.Project_ID) :
            ctx.Project_Users.Where(u => u.IsAdmin && u.User_ID == UserId).Select(p => p.Project.Project_ID))
            .ToHashSet();

        var allProjectAuthorization = await ctx.Project_Users_Requests
            .Include(a => a.Project)
            .OrderByDescending(a => a.Requested_DT)
            .ToListAsync();

        _userProjectAuthorization = allProjectAuthorization
            .Where(a => validProjects.Contains(a.Project.Project_ID))
            .ToList();

        StateHasChanged();
    }

    protected override async Task OnInitializedAsync()
    {
        _projectReqRenderFunctions = new List<Func<Datahub_Project_User_Request, RenderFragment>>
        {
            null,
            user =>
                @<div class="help icon-container">
                    <GraphUserInformation UserId="@user.User_ID" IsUserNameRequested="true"></GraphUserInformation>
                </div>,
            null,
            a =>
            {
                if (a.Approved_DT != null)
                {
                    return @<div>@Localizer["Authorized"]</div>;
                }
                return @<div>
                           <AeButton @onclick="async () => await AuthorizeProjectUser(a)">@Localizer["Authorize User"]</AeButton>
                           <AeButton @onclick="async () => await DeleteAccessRequest(a)">@Localizer["Delete Request"]</AeButton>
                       </div>
                    ;
            }
        };

        await RefreshData();
    }

}