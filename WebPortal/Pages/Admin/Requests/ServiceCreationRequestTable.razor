@inject IDbContextFactory<DatahubProjectDBContext> _dbFactory
@inject IEmailNotificationService _emailService
@inject ISystemNotificationService _systemNotificationService

<AeCard>
    <Header>
        <AeTypography Variant="h2">@Localizer["Service Requests"]</AeTypography>
    </Header>
    <ChildContent>
        @if (_serviceCreationRequests != null)
        {
            <AeFlex Vertical>
                <AePaginatedTable 
                    Accessors=@_serviceRequestAccessors
                    Dataset=@_serviceCreationRequests
                    Renderers=@_serviceRenderers
                    Headers=@LocalizeHeaders(_serviceReqHeaders)
                    PageSize=@PageSize
                    Page=@_currentPage
                    @ref=@_serviceRequestTable
                />

                <AePagination Pageable=@_serviceRequestTable OnPageClick=@PaginationClicked >
                    <LeftIcon><i class='fad fa-chevron-double-left'></i></LeftIcon> 
                    <RightIcon><i class='fad fa-chevron-double-right'></i></RightIcon>
                </AePagination>
                
            </AeFlex>
        }
        else
        {
            <div>@Localizer["Loading data..."]</div>
        }
    </ChildContent>
</AeCard>

@code {
    [CascadingParameter(Name="UserId")]
    public string UserId { get; set; }

    [CascadingParameter(Name="IsDatahubAdmin")]
    public bool IsDatahubAdmin { get; set; }

    [Parameter]
    public int PageSize { get; set; } = 10;

    private IPageableComponent _serviceRequestTable;
    private int _currentPage = 0;
    private List<Datahub_ProjectServiceRequests> _serviceCreationRequests;
    private List<Func<Datahub_ProjectServiceRequests, string>> _serviceRequestAccessors = new()
    {
        p => p.Project.Project_Name,
        p => p.User_Name ?? "N/A",
        p => p.ServiceType ?? string.Empty,
        p => p.Is_Completed?.ToShortDateString() ?? "N/A",
        _ => ".."
    };

    private List<Func<Datahub_ProjectServiceRequests, RenderFragment>> _serviceRenderers;

    private List<string> _serviceReqHeaders = new()
    {
        "Project", "Requesting User", "Service", "Created", "Notified"
    };

    private List<string> LocalizeHeaders(List<string> input) => input.Select(s => Localizer[s].ToString()).ToList();
    
    private void PaginationClicked(int pageIndex)
    {
        _currentPage = pageIndex;
    }

    private async Task NotifyServiceCreation(Datahub_ProjectServiceRequests req)
    {
        await using var projectContext = await _dbFactory.CreateDbContextAsync();

        var projectRequests = await projectContext.Project_Requests
            .Include(a => a.Project)
            .Include(a => a.Project.Users)
            .FirstAsync(a => a.ServiceRequests_ID == req.ServiceRequests_ID);

        var requestingUserId = projectRequests.User_ID;
        var project = projectRequests.Project;
        var projectInfo = project.ProjectInfo;
        var projectUserIds = project.Users
            .Select(u => u.User_ID)
            .ToHashSet();

        var notificationTasks = new List<Task>();

        if (!string.IsNullOrEmpty(requestingUserId))
        {
            projectUserIds.Remove(requestingUserId);
            notificationTasks.Add(_emailService.SendServiceCreationRequestApprovedIndividual(projectRequests.ServiceType, projectInfo, requestingUserId));
            notificationTasks.Add(_systemNotificationService.CreateSystemNotificationWithLink(requestingUserId, 
                $"/{UrlPathSegment.PROJECTS}/{project.Project_Acronym_CD}", "SYSTEM-NOTIFICATION.GoToProject",
                "SYSTEM-NOTIFICATION.NOTIFICATION-TEXT.ServiceCreatedIndividual",
                projectRequests.ServiceType, new BilingualStringArgument(projectInfo.ProjectNameEn, projectInfo.ProjectNameFr)));
        }

        notificationTasks.Add(_emailService.SendServiceCreationGroupNotification(projectRequests.ServiceType, projectInfo, projectUserIds.ToList()));
        notificationTasks.Add(_systemNotificationService.CreateSystemNotificationsWithLink(projectUserIds.ToList(), 
            $"/{UrlPathSegment.PROJECTS}/{project.Project_Acronym_CD}", "SYSTEM-NOTIFICATION.GoToProject",
            "SYSTEM-NOTIFICATION.NOTIFICATION-TEXT.ServiceCreatedGroup",
            projectRequests.ServiceType, new BilingualStringArgument(projectInfo.ProjectNameEn, projectInfo.ProjectNameFr)));

        await Task.WhenAll(notificationTasks);

        projectRequests!.Notification_Sent = DateTime.UtcNow;
        await projectContext.SaveChangesAsync();

        await RefreshData();
    }

    private async Task RefreshData()
    {
        using var ctx = await _dbFactory.CreateDbContextAsync();

        var validProjects = (IsDatahubAdmin ? ctx.Project_Users : ctx.Project_Users.Where(u => u.IsAdmin && u.User_ID == UserId))
            .Select(p => p.Project.Project_ID)
            .ToHashSet();

        var allServiceCreationRequests = await ctx.Project_Requests
            .Include(a => a.Project)
            .OrderBy(a => a.Is_Completed)
            .ThenByDescending(a => a.ServiceRequests_Date_DT)
            .ToListAsync();

        _serviceCreationRequests = allServiceCreationRequests
            .Where(a => validProjects.Contains(a.Project.Project_ID))
            .ToList();

        StateHasChanged();
    }

    protected override async Task OnInitializedAsync()
    {
        _serviceRenderers = new List<Func<Datahub_ProjectServiceRequests, RenderFragment>>()
        {
            null,
            p => @<div>@(p.User_Name ?? @Localizer["N/A"])</div>,
            null,
            p => @<div>@(p.Is_Completed?.ToShortDateString() ?? @Localizer["N/A"])</div>,
            p => 
            {
                if (!p.Is_Completed.HasValue)
                {
                    return @<div>@Localizer["N/A"]</div>;
                }
                else if (!p.Notification_Sent.HasValue)
                {
                    return @<AeButton @onclick="async () => await NotifyServiceCreation(p)">@Localizer["Send Notification"]</AeButton>;
                }
                else
                {
                    return @<div>@p.Notification_Sent.Value.ToShortDateString()</div>;
                }
            }
        };

        await RefreshData();
    }

}
