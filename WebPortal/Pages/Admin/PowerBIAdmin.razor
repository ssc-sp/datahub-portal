@page "/admin/powerbi"
@page "/admin/powerbi/{ProjectAcronym}"

@using global::Datahub.Core.Components
@using global::Datahub.Core.EFCore
@using global::Datahub.Core.Services
@using global::Datahub.Portal.Data
@using global::Datahub.Portal.Services

@inject IPowerBiDataService _powerBiDataService
@inject PowerBiServiceApi _powerBiServiceApi
@inject Microsoft.Identity.Web.MicrosoftIdentityConsentAndConditionalAccessHandler _consentHandler
@inject IDbContextFactory<DatahubProjectDBContext> _contextFactory

<style>
    .ae.card {
        margin-bottom: 1rem;
    }
</style>

<div style="padding-left: 2rem;padding-right: 2rem">

    <AeTypography Variant="h1">PowerBI Administration</AeTypography>

    
    <AeFlex >
        <AeFlex Vertical>
            <AeCard class="facard1 doublewide">
                <Header>
                    <AeTypography Variant="h3">Management</AeTypography>
                </Header>
                <ChildContent>
                    @if (IsLoadingWorkspaceTreeItems)
                    {
                    <Spinner />
                    }
                    else
                    {
                    <PowerBiManagementTree DataProjects=@AvailableProjects Workspaces=@ManagedWorkspaces OnItemClicked=@OpenItemEditor />
                    }
                </ChildContent>
            </AeCard>

            @if (WorkspaceBeingEdited != null)
            {
                <AeCard class="facard1 doublewide">
                    <Header>
                        <AeTypography Variant="h3">@Localizer["Workspace"]: @WorkspaceBeingEdited.DbWorkspaceName</AeTypography>
                    </Header>
                    <ChildContent>
                        <div>
                            <label>
                                <span>Project: </span>
                                <select @bind=@WorkspaceBeingEdited.ProjectId>
                                    <option value="-1">(unassigned)</option>
                                    @foreach (var project in AvailableProjects)
                                    {
                                        <option value=@project.Project_ID>@project.ProjectName</option>
                                    }
                                </select>
                            </label>
                            <label>
                                <input type="checkbox" @bind=@WorkspaceBeingEdited.SandboxFlag />
                                <span>Sandbox</span>
                            </label>
                        </div>
                        <div>
                            <AeButton OnClickEvent=@SaveWorkspace Disabled=@IsSavingWorkspace>Save</AeButton>
                            <AeButton OnClickEvent=@CloseItemBeingEdited>Cancel</AeButton>
                            <SuccessIndicator @bind-IsLoading=@IsSavingWorkspace @ref=@_saveWorkspaceInd />
                        </div>
                        <AeTypography Variant="h4">@Localizer["Metadata"]</AeTypography>
                        <ObjectMetadataEditor 
                            ObjectId=@WorkspaceBeingEdited.WorkspaceId.ToString()
                            Location="PowerBI"
                            ProfileName="catalog"
                            ObjectType=@Metadata.Model.MetadataObjectType.PowerBI
                            UpdateCatalog=@true
                            ValidateRequired=@false
                            Name=@WorkspaceBeingEdited.DbWorkspaceName
                        />
                    </ChildContent>
                </AeCard>
            }

            @if (DatasetBeingEdited != null)
            {
                <AeCard class="facard1 doublewide">
                    <Header>
                        <AeTypography Variant="h3">@Localizer["Dataset"]: @DatasetBeingEdited.DbDatasetName</AeTypography>
                    </Header>
                    <ChildContent>
                        <AeTypography Variant="h4">@Localizer["Metadata"]</AeTypography>
                        <ObjectMetadataEditor 
                            ObjectId=@DatasetBeingEdited.DatasetId.ToString()
                            Location="PowerBI"
                            ProfileName="catalog"
                            ObjectType=@Metadata.Model.MetadataObjectType.PowerBI
                            UpdateCatalog=@true
                            ValidateRequired=@false
                            Name=@DatasetBeingEdited.DbDatasetName
                        />
                    </ChildContent>
                </AeCard>
            }

            @if (ReportBeingEdited != null)
            {
                <AeCard class="facard1 doublewide">
                    <Header>
                        <AeTypography Variant="h3">@Localizer["Report"]: @ReportBeingEdited.DbReportName</AeTypography>
                    </Header>
                    <ChildContent>
                        <AeTypography Variant="h4">@Localizer["Metadata"]</AeTypography>
                        <ObjectMetadataEditor 
                            ObjectId=@ReportBeingEdited.ReportId.ToString()
                            Location="PowerBI"
                            ProfileName="catalog"
                            ObjectType=@Metadata.Model.MetadataObjectType.PowerBI
                            UpdateCatalog=@true
                            ValidateRequired=@false
                            Name=@ReportBeingEdited.DbReportName
                        />
                    </ChildContent>
                </AeCard>
            }

        </AeFlex>

            <AeCard class="facard1">
                <Header>
                    <AeTypography Variant="h3">Import/Update</AeTypography>
                </Header>
                <ChildContent>
                    @if (UnmanagedWorkspaces != null && UnmanagedWorkspaces.Count > 0)
                    {
                        <AeTypography Variant="p">There are workspaces, reports and/or datasets available in PowerBI which are out of sync with the DataHub databse. Expand the section below for more details.</AeTypography>
                        <AeCollapse>
                            <AeCollapseSection>
                                <Header>
                                    <AeTypography Variant="h4">Details</AeTypography>
                                </Header>
                                <ChildContent>
                                    <ul>
                                        @foreach(var w in WorkspacesToBeUpdated)
                                        {
                                            <li>
                                                <span>@w.PbiWorkspaceName</span>
                                                @if (w.Datasets.Count > 0 || w.Reports.Count > 0)
                                                {
                                                    @if (w.Datasets.Count <= 0)
                                                    {
                                                        <span> (Reports: @w.Reports.Count)</span>
                                                    }
                                                    else if (w.Reports.Count <= 0)
                                                    {
                                                        <span> (Datasets: @w.Datasets.Count)</span>
                                                    }
                                                    else
                                                    {
                                                        <span> (Datasets: @w.Datasets.Count, Reports: @w.Reports.Count)</span>
                                                    }
                                                }
                                            </li>
                                        }
                                    </ul>
                                </ChildContent>
                            </AeCollapseSection>
                        </AeCollapse>
                        <div>
                            <AeButton OnClickEvent=@ImportPowerBiItems Disabled=@ImportDisabled>Synchronize</AeButton>
                            <SuccessIndicator @bind-IsLoading=@IsImportingPowerBiItems @ref=@_bulkImportInd />
                        </div>
                    }
                    else
                    {
                        <AeTypography Variant="p">Nothing to import</AeTypography>
                    }
                </ChildContent>
            </AeCard>
        
        @*<AeCard>
            @if (IsLoadingWorkspaceTreeItems)
            {
                <div>
                    <Spinner />
                </div>
            }
            else
            {
                <div>
                    <p>Managed:</p>
                    <ul>
                        @foreach(var w in ManagedWorkspaces)
                        {
                            <li>@w.DbWorkspaceName - @(w.SandboxFlag? "sandbox":"not sandbox")</li>
                        }
                    </ul>
                </div>
                <div>
                    <p>Unmanaged:</p>
                    <ul>
                        @foreach(var w in UnmanagedWorkspaces)
                        {
                            <li>@w.PbiWorkspaceName</li>
                        }
                    </ul>
                    <p>add em asap</p>
                </div>
                <div>
                    <p>Removed:</p>
                    <ul>
                        @foreach(var w in RemovedWorkspaces)
                        {
                            <li>@w.DbWorkspaceName</li>
                        }
                    </ul>
                </div>
            }
        </AeCard>*@
    </AeFlex>
    

</div>

@code {
    [Parameter]
    public string ProjectAcronym { get; set; }

    private List<PowerBiAdminWorkspaceTreeItem> AllWorkspaceTreeItems { get; set; } = new();
    private List<PowerBiAdminWorkspaceTreeItem> UnmanagedWorkspaces => AllWorkspaceTreeItems.Where(w => !w.IsInDb).ToList();
    private List<PowerBiAdminWorkspaceTreeItem> WorkspacesToBeUpdated => AllWorkspaceTreeItems.Where(w => w.NeedsUpdate).ToList();
    private List<PowerBiAdminWorkspaceTreeItem> RemovedWorkspaces => AllWorkspaceTreeItems.Where(w => !w.IsInPowerBi).ToList();
    private List<PowerBiAdminWorkspaceTreeItem> ManagedWorkspaces => AllWorkspaceTreeItems.Where(w => w.IsInDb && w.IsInPowerBi).ToList();

    private bool IsLoadingWorkspaceTreeItems { get; set; } = false;
    private bool IsImportingPowerBiItems { get; set; } = false;

    private bool ImportDisabled => IsImportingPowerBiItems || IsLoadingWorkspaceTreeItems;

    private SuccessIndicator _bulkImportInd;

    private List<Datahub_Project> AvailableProjects { get; set; } = new();

    private string _tempLastClickedItem { get; set; }
    private string _tempLastClickedType { get; set; }

    private PowerBiAdminWorkspaceTreeItem WorkspaceBeingEdited { get; set; }
    private PowerBiAdminDatasetTreeItem DatasetBeingEdited { get; set; }
    private PowerBiAdminReportTreeItem ReportBeingEdited { get; set; }

    private bool IsSavingWorkspace { get; set; } = false;
    private SuccessIndicator _saveWorkspaceInd;


    private async Task LoadWorkspaceTreeItems()
    {
        await CloseItemBeingEdited();
        IsLoadingWorkspaceTreeItems = true;
        StateHasChanged();

        var pbiWorkspaces = await _powerBiServiceApi.GetWorkspaces();
        var dbWorkspacesList = await _powerBiDataService.GetAllWorkspaces();

        var pbiWorkspaceDict = pbiWorkspaces.ToDictionary(w => w.Id);
        var dbWorkspaceDict = dbWorkspacesList.ToDictionary(w => w.Workspace_ID);

        var allWorkspaceIds = pbiWorkspaces.Select(w => w.Id)
            .Concat(dbWorkspacesList.Select(w => w.Workspace_ID))
            .Distinct();

        var treeItems = allWorkspaceIds.Select(id =>
        {
            var dbWorkspace = dbWorkspaceDict.GetValueOrDefault(id);
            var pbiWorkspace = pbiWorkspaceDict.GetValueOrDefault(id);
            return new PowerBiAdminWorkspaceTreeItem(pbiWorkspace, dbWorkspace);
        });

        var workspaceTreeItemsDict = treeItems.ToDictionary(i => i.WorkspaceId);

        var datasetItems = await LoadDatasetTreeItems();
        var reportItems = await LoadReportTreeItems();

        AllWorkspaceTreeItems = treeItems.ToList();
        foreach (var t in AllWorkspaceTreeItems)
        {
            var wId = t.WorkspaceId;
            t.Datasets.AddRange(datasetItems.Where(d => d.AnyWorkspaceId == wId));
            t.Reports.AddRange(reportItems.Where(r => r.AnyWorkspaceId == wId));
        }

        IsLoadingWorkspaceTreeItems = false;
        StateHasChanged();
    }

    private async Task<List<PowerBiAdminDatasetTreeItem>> LoadDatasetTreeItems()
    {
        var pbiDatasets = await _powerBiServiceApi.GetWorkspaceDatasetsAsync();
        var pbiDatasetIds = pbiDatasets.Select(d => Guid.Parse(d.Dataset.Id)).ToHashSet();
        var dbDatasets = await _powerBiDataService.GetAllDatasets();
        var dbDatasetDict = dbDatasets.ToDictionary(d => d.DataSet_ID);

        var results = pbiDatasets.Select(d =>
        {
            var datasetGuid = Guid.Parse(d.Dataset.Id);
            var dbDataset = dbDatasetDict.GetValueOrDefault(datasetGuid);
            return new PowerBiAdminDatasetTreeItem(d.Dataset, dbDataset, d.WorkspaceId);
        })
        .Concat(dbDatasets
            .Where(d => !pbiDatasetIds.Contains(d.DataSet_ID))
            .Select(d => new PowerBiAdminDatasetTreeItem(null, d, null)))
        .ToList();

        return results;
    }

    private async Task<List<PowerBiAdminReportTreeItem>> LoadReportTreeItems()
    {
        var pbiReports = await _powerBiServiceApi.GetWorkspaceReportsAsync();
        var pbiReportIds = pbiReports.Select(r => r.Report.Id).ToHashSet();
        var dbReports = await _powerBiDataService.GetAllReports();
        var dbReportDict = dbReports.ToDictionary(d => d.Report_ID);

        var results = pbiReports.Select(d =>
        {
            var reportGuid = d.Report.Id;
            var dbReport = dbReportDict.GetValueOrDefault(reportGuid);
            return new PowerBiAdminReportTreeItem(d.Report, dbReport, d.WorkspaceId);
        })
        .Concat(dbReports
            .Where(r => !pbiReportIds.Contains(r.Report_ID))
            .Select(r => new PowerBiAdminReportTreeItem(null, r, null)))
        .ToList();

        return results;
    }

    private async Task CloseItemBeingEdited()
    {
        //TODO check for changes, popup dialog
        WorkspaceBeingEdited = null;
        DatasetBeingEdited = null;
        ReportBeingEdited = null;

        await Task.CompletedTask;
    }

    private async Task OpenItemEditor(PowerBiAdminTreeItem item)
    {
        await CloseItemBeingEdited();

        if (item.ItemType == PowerBiAdminTreeItemType.Workspace)
        {
            var workspace = await _powerBiDataService.GetWorkspaceById(item.Id);
            WorkspaceBeingEdited = new(null, workspace);
        }
        else if (item.ItemType == PowerBiAdminTreeItemType.Dataset)
        {
            var dataset = await _powerBiDataService.GetDatasetById(item.Id);
            DatasetBeingEdited = new(null, dataset, null);
        }
        else if (item.ItemType == PowerBiAdminTreeItemType.Report)
        {
            var report = await _powerBiDataService.GetReportById(item.Id);
            ReportBeingEdited = new(null, report, null);
        }

        _tempLastClickedItem = item.Label;
        _tempLastClickedType = item.ItemType.ToString();
        await Task.CompletedTask;
    }

    private async Task SaveWorkspace()
    {
        if (WorkspaceBeingEdited == null)
        {
            await Task.CompletedTask;
            return;
        }

        IsSavingWorkspace = true;
        StateHasChanged();

        var wsDef = WorkspaceBeingEdited.Definition;
        var success = await _powerBiDataService.AddOrUpdateCataloguedWorkspace(wsDef);

        if (success)
        {
            await _saveWorkspaceInd.SignalSuccess();
            await LoadWorkspaceTreeItems();
        }
        else
        {
            await _saveWorkspaceInd.SignalFailure();
        }
    }



    private async Task ImportPowerBiItems()
    {
        IsImportingPowerBiItems = true;
        StateHasChanged();

        // each workspace item
        // get the def if needs update
        // get reportdefs if they need update
        // get dataset defs if they need update

        var workspacesToAdd = new List<PowerBi_WorkspaceDefinition>();
        var datasetsToAdd = new List<PowerBi_DataSetDefinition>();
        var reportsToAdd = new List<PowerBi_ReportDefinition>();

        foreach (var w in WorkspacesToBeUpdated)
        {
            if (w.NeedsUpdate)
            {
                workspacesToAdd.Add(w.Definition);
            }

            reportsToAdd.AddRange(w.Reports.Where(r => r.NeedsUpdate).Select(r => r.Definition));
            datasetsToAdd.AddRange(w.Datasets.Where(d => d.NeedsUpdate).Select(d => d.Definition));
        }

        var success = await _powerBiDataService.BulkAddOrUpdatePowerBiItems(workspacesToAdd, datasetsToAdd, reportsToAdd);

        if (success)
        {
            await _bulkImportInd.SignalSuccess();
            await LoadWorkspaceTreeItems();
        }
        else
        {
            await _bulkImportInd.SignalFailure();
        }
    }

    private async Task LoadProjects()
    {
        using var ctx = await _contextFactory.CreateDbContextAsync();

        // TODO restrict based on user's access?

        if (!string.IsNullOrEmpty(ProjectAcronym))
        {
            AvailableProjects = await ctx.Projects.Where(p => p.Project_Acronym_CD.ToLower() == ProjectAcronym.ToLower()).ToListAsync();
        }
        else
        {
            AvailableProjects = await ctx.Projects.ToListAsync();
        }

        AvailableProjects = AvailableProjects.OrderBy(p => p.ProjectName).ToList();
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            await LoadWorkspaceTreeItems();
            await LoadProjects();
        }
        catch (Exception ex)
        {
            _consentHandler.HandleException(ex);
        }
    }
}
