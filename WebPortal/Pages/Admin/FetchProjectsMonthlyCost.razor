@using Datahub.Core.Services.AzureCosting
@using Microsoft.Azure.Services.AppAuthentication
@using Microsoft.Identity.Web
@using Microsoft.Rest
@inject AzureCostManagementService AzureCostManagementService
@inject ITokenAcquisition tokenAcquisition
@inject IConfiguration configuration
@inject Microsoft.Identity.Web.MicrosoftIdentityConsentAndConditionalAccessHandler ConsentHandler
@inject ILogger<FetchProjectsMonthlyCost> logger

<MudPaper Class="pa-6">
	<MudText Typo="Typo.h4" Class="my-4">@Localizer["Fetch Project Monthly Cost"]</MudText>
	@if (_numberOfProjectsUpdated < 0)
	{
		<MudAlert Severity="Severity.Error" ShowCloseIcon="true" Style="width: fit-content"
			  CloseIconClicked="(() => _numberOfProjectsUpdated = null)" Class="my-4">
			<MudText Typo="Typo.body1">@Localizer[UNABLE_TO_UPDATE_COSTS]</MudText>
		</MudAlert>
	}
	else if (_numberOfProjectsUpdated > 0)
	{
		<MudAlert Severity="Severity.Success" ShowCloseIcon="true" Style="width: fit-content"
			  CloseIconClicked="(() => _numberOfProjectsUpdated = null)" Class="my-4">
			<MudText Typo="Typo.body1">@Localizer["Updated"] @(_numberOfProjectsUpdated) @Localizer["projects"]</MudText>
		</MudAlert>
	}
	@if (error != null)
	{
		<MudAlert Severity="Severity.Error" ShowCloseIcon="true" Style="width: fit-content"
			  CloseIconClicked="(() => _numberOfProjectsUpdated = null)" Class="my-4">
			<MudText Typo="Typo.body1">@error</MudText>
		</MudAlert>
	}
	<MudButton Disabled="@_processing" OnClick="FetchCosts" Variant="Variant.Filled" Color="Color.Primary">
		@if (_processing)
		{
			<MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
			<MudText Class="ms-2">@Localizer["Processing"]</MudText>
		}
		else
		{
			<MudText>@Localizer["Update Costs"]</MudText>
		}
	</MudButton>
</MudPaper>

@code {
	private bool _processing = false;
#nullable enable
	private int? _numberOfProjectsUpdated;
#nullable disable
	private const string UNABLE_TO_UPDATE_COSTS = "Unable to update projects. Check to make sure UpdateProjectMonthlyCost function is running";

	public static readonly string[] RequiredScopes = new string[] {
	    //"https://management.azure.com/.default"
				"https://management.azure.com/user_impersonation"
	};

	//public static readonly string[] RequiredScopes = new string[]
	//{
	//	"https://management.azure.com/Microsoft.Consumption",//*/read
	//	//"https://management.azure.com/Microsoft.CostManagement/*/read",
	//	//"https://management.azure.com/Microsoft.Billing/billingPeriods/read",
	//	//"https://management.azure.com/Microsoft.Resources/subscriptions/read",
	//	//"https://management.azure.com/Microsoft.Resources/subscriptions/resourceGroups/read",
	//	//"https://management.azure.com/Microsoft.Support/*",
	//	//"Microsoft.Advisor/configurations/read",
	//	//"Microsoft.Advisor/recommendations/read",
	//	//"https://management.azure.com/Microsoft.Management/managementGroups/read",
	//	//"https://management.azure.com/Microsoft.Billing/billingProperty/read"
	//};

	private string token;
	private string error = null;

	protected override async Task OnInitializedAsync()
	{
		//var accessToken = Request.Headers[HeaderNames.Authorization];
		try
		{
			token = await this.tokenAcquisition.GetAccessTokenForUserAsync(RequiredScopes);
		}
		catch (MicrosoftIdentityWebChallengeUserException e)
		{
			// user isn't logged into Power BI -> redirect to Microsoft
			ConsentHandler.HandleException(e);
		}
		catch (HttpOperationException)
		{
			// couldn't load the report - missing or unauthorized
		}
		catch (Exception)
		{
			// some other exception, crash and log like normal
			throw;
		}

	}



	async Task FetchCosts()
	{
		try
		{
			_processing = true;
			_numberOfProjectsUpdated = null;
			await Task.Delay(1);

			var subscriptionId = configuration.GetSection("Billing").GetValue<string>("AzureSubscription");
			var resourceGroup = configuration.GetSection("Billing").GetValue<string>("ResourceGroup");
			if (string.IsNullOrWhiteSpace(resourceGroup))
			{
				error = "Subscription is not configured";
			}
			else
			{
				if (string.IsNullOrWhiteSpace(resourceGroup)) resourceGroup = null;
				//Get current month cost for each resource
				var currentMonthlyCosts = (await AzureCostManagementService.GetCurrentMonthlyCostAsync(subscriptionId, token, resourceGroup)).ToList();

				//group monthly cost by project and update the database
				await AzureCostManagementService.UpdateProjectMonthlyCostToDateAsync(currentMonthlyCosts);
				var numberOfProjectsUpdated = currentMonthlyCosts.Count;
			}
			_processing = false;
		}
		catch (Exception ex)
		{
			logger.LogCritical(ex, $"Cannot retrieve Azure Costs");
			error = ex.Message;
			_processing = false;
		}
	}
}