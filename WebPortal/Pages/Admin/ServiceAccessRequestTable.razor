@inject IDbContextFactory<DatahubProjectDBContext> dbFactory
@inject IEmailNotificationService EmailService
@inject ISystemNotificationService SystemNotificationService

<AeCard>
    <Header>
        <AeTypography Variant="h1">@Localizer["Authorize Users"]</AeTypography>
    </Header>
    <ChildContent>
        @if (_usersAuthorization != null)
        {
            <AePaginatedTable
                Accessors=@accessorFunctions
                Dataset=@_usersAuthorization
                Renderers=@renderFunctions
                @ref=@ServiceAccessTable                    
                GridTemplateColumns="2fr 3fr 2fr 3fr 2fr" 
                Page=@CurrentPage
                Headers=@LocalizeHeaders(headers)
                PageSize=@PageSize
            />

            @if (ServiceAccessTable != null)
            {            
                <AePagination Pageable=@ServiceAccessTable OnPageClick=@PaginationClicked> 
                    <LeftIcon><i class='fad fa-chevron-double-left'></i></LeftIcon> 
                    <RightIcon><i class='fad fa-chevron-double-right'></i></RightIcon>
                </AePagination>
            }
        }
        else
        {
            <div>@Localizer["Loading data..."]</div>
        }
    </ChildContent>
</AeCard>

@code {
    [Parameter]
    public string UserId { get; set; }

    [Parameter]
    public bool IsDatahubAdmin { get; set; }

    [Parameter]
    public int PageSize { get; set; } = 10;


    private List<Datahub_Project_Access_Request> _usersAuthorization;

    private List<Func<Datahub_Project_Access_Request, string>> accessorFunctions = new()
    {
        p => p.Project.Project_Name,
        p => p.User_Name ?? "N/A",
        p => p.RequestServiceType,
        p => p.Request_DT.ToShortDateString(),
        p => ".."
    };

    private List<Func<Datahub_Project_Access_Request, RenderFragment>> renderFunctions;

    private List<string> headers = new()
    {
        "Project", "User", "Service", "Date","Actions"
    };

    private List<string> LocalizeHeaders(List<string> input) => input.Select(s => Localizer[s].ToString()).ToList();

    private void PaginationClicked(int pageIndex)
    {
        CurrentPage = pageIndex;
    }

    private IPageableComponent ServiceAccessTable;
    private int CurrentPage = 0;

    private async Task AuthorizeUser(Datahub_Project_Access_Request req)
    {
        var projectContext = await dbFactory.CreateDbContextAsync();

        var r = await projectContext.Access_Requests
            .Include(r => r.Project)
            .FirstOrDefaultAsync(r => r.Request_ID == req.Request_ID);

        r.Completion_DT = DateTime.UtcNow;
        await projectContext.SaveChangesAsync();

        var serviceName = r.RequestServiceType;

        await EmailService.SendServiceAccessGrantedNotification(serviceName, r.Project.ProjectInfo, r.User_ID);
        await SystemNotificationService.CreateSystemNotificationWithLink(r.User_ID, $"/project/{r.Project.Project_Acronym_CD}", "SYSTEM-NOTIFICATION.GoToProject",
            "SYSTEM-NOTIFICATION.NOTIFICATION-TEXT.ServiceAccessRequestApproved", serviceName,
            new BilingualStringArgument(r.Project.ProjectInfo.ProjectNameEn, r.Project.ProjectInfo.ProjectNameFr));

        await RefreshData();
    }

    private async Task RevokeAccess(Datahub_Project_Access_Request req)
    {
        var projectContext = await dbFactory.CreateDbContextAsync();

        var r = await projectContext.Access_Requests
            .Include(r => r.Project)
            .FirstOrDefaultAsync(r => r.Request_ID == req.Request_ID);

        r.Completion_DT = null;
        await projectContext.SaveChangesAsync();

        var serviceName = r.RequestServiceType;

        await EmailService.SendAccessRevokedNotification(serviceName, r.Project.ProjectInfo, r.User_ID);
        await SystemNotificationService.CreateSystemNotification(r.User_ID, "SYSTEM-NOTIFICATION.NOTIFICATION-TEXT.ServiceAccessRevoked",
            serviceName, new BilingualStringArgument(r.Project.ProjectInfo.ProjectNameEn, r.Project.ProjectInfo.ProjectNameFr));

        await RefreshData();
    }

    private async Task RefreshData()
    { 
        using var ctx = await dbFactory.CreateDbContextAsync();

        var validProjects = (IsDatahubAdmin ? ctx.Project_Users : ctx.Project_Users.Where(u => u.IsAdmin && u.User_ID == UserId))
            .Select(p => p.Project.Project_ID)
            .ToHashSet();

        var allAuths = await ctx.Access_Requests
            .Include(a => a.Project)
            .OrderByDescending(a => a.Request_DT)
            .ToListAsync();

        _usersAuthorization = allAuths
            .Where(a => validProjects.Contains(a.Project.Project_ID))
            .ToList();

        StateHasChanged();
    }

    protected override async Task OnInitializedAsync()
    {
        renderFunctions = new()
        {
            null,
            p => @<div>@(p.User_Name ?? Localizer["N/A"])</div>,
            null,
            null,
            a => 
            {
                if (a.Completion_DT != null)
                {
                    return @<div>
                        <span>@Localizer["Authorized"]</span>
                        <AeButton @onclick="async () => await RevokeAccess(a)">@Localizer["Revoke"]</AeButton>
                    </div>;
                }
                else
                {
                    return @<AeButton @onclick="async () => await AuthorizeUser(a)">@Localizer["Authorize user"]</AeButton>;
                }
            }
        };

        await RefreshData();
    }

}
