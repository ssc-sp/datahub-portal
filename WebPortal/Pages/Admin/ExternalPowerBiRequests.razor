@inject IEmailNotificationService EmailService
@inject IDbContextFactory<DatahubProjectDBContext> dbFactory
@inject ISystemNotificationService SystemNotificationService
@inject IPowerBiDataService PowerBiDataService
@inject PowerBiServiceApi PowerBiServiceApi
@inject NavigationManager NavigationManager
@using Microsoft.Identity.Web
@using Datahub.Core.EFCore
@inject MicrosoftIdentityConsentAndConditionalAccessHandler ConsentHandler

<AeCard>
    <Header>
        <AeTypography Variant="h2">@Localizer["Create Requests"]</AeTypography>
    </Header>
    <ChildContent>
        
            <AePaginatedTable
                Accessors=@accessorFunctions
                Dataset=@_externalReports
                Renderers=@renderFunctions
                @ref=@_externalRequests                    
                GridTemplateColumns="2fr 3fr 2fr" 
                Page=@_currentPage
                Headers=@LocalizeHeaders(headers)
                PageSize=@_pageSize
                @key=@_externalReports
            />

            @if (_externalRequests != null)
            {            
                <AePagination Pageable=@_externalRequests OnPageClick=@PaginationClicked> 
                    <LeftIcon><i class='fad fa-chevron-double-left'></i></LeftIcon> 
                    <RightIcon><i class='fad fa-chevron-double-right'></i></RightIcon>
                </AePagination>
            }
               
           
    </ChildContent>
</AeCard>

@code {

    [Parameter]
    [SupplyParameterFromQuery]
    public bool ReadOnly { get; set; }

    private IPageableComponent _externalRequests;
    private int _currentPage = 0;
    private int _pageSize = 10;

    private List<ExternalPowerBiReport> _externalReports;

    private List<Func<ExternalPowerBiReport, string>> accessorFunctions = new()
    {
        p => p.RequestingUser,
        p => p.Report_ID.ToString(),
        null
    };

    private List<Func<ExternalPowerBiReport, RenderFragment>> renderFunctions;

    private List<string> headers = new()
    {
        "Requesting User", "Report Id", "Create"
    };

    private List<string> LocalizeHeaders(List<string> input) => input.Select(s => Localizer[s].ToString()).ToList();

    private void PaginationClicked(int pageIndex)
    {
        _currentPage = pageIndex;
    }

    protected override async Task OnInitializedAsync()
    {
        _externalReports = new();
        _externalReports = await PowerBiDataService.GetRequestedExternalReports();

        renderFunctions = new()
        {
            null,
            null,
            GetReportFragment 
        };

    }

    private RenderFragment GetReportFragment(ExternalPowerBiReport result) => 
        @<div @onclick="() => OnCreateUrl(result)" style="cursor:pointer;">
                <i class="far fa-plus-square"></i>
                <a>Create External Report</a>
    </div>
    ;


    private void OnCreateUrl(ExternalPowerBiReport report)
    {
        NavigationManager.NavigateTo($"/powerbi-consent/{report.Report_ID.ToString()}/{report.ExternalPowerBiReport_ID}");
    }

    private const string AuthorityFormat = "https://login.microsoftonline.com/{0}/v2.0";
    private const string MSGraphScope = "https://analysis.windows.net/powerbi/api/.default";
 
}