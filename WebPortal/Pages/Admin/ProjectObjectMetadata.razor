@*ProjectObjectMetadata.razor*@

@using Datahub.Metadata.DTO
@using Datahub.Metadata.Model
@inject NavigationManager NavigationManager
@inject IDbContextFactory<DatahubProjectDBContext> ContextFactory
@inject IOrganizationLevelsService OrganizationLevelsService

@if (_project is not null)
{
    <MudCard>
        <MudCardContent>
            <MudItem Class="pa-2">
                <ObjectMetadataEditor @ref="_editor"
                                      @key=@ObjectId
                                      ObjectId=@ObjectId
                                      DefaultMetadataId=@DefaultMetadaId
                                      ProfileName=@ProfileName
                                      Location=@Location
                                      ProjectId=@_project.Project_ID
                                      ObjectType=@ObjectType
                                      SecurityClass=@GetProjectSensitivity()
                                      SaveButtonLabel=@GetSaveButtonLabel()
                                      OnSave=@HandleSave
                                      OnDiscard=@(AllowDiscard ? HandleNavigateToProject : null)
                                      OnNewMetadataCreated=@OnMetadataCreated
                                      OnExistingMetadataLoaded=@OnMetadataCreated
                                      HideTranslationNote
                                      UpdateCatalog=@UpdateCatalog
                                      ValidateRequired />
            </MudItem>
        </MudCardContent>
    </MudCard>
}

@code {

    [Parameter]
    public string ProjectAcronym { get; set; }

    [Parameter]
    public string ProfileName { get; set; }

    [Parameter]
    public string ObjectId { get; set; }

    [Parameter]
    public MetadataObjectType ObjectType { get; set; }

    [Parameter]
    public string Location { get; set; }

    [Parameter]
    public bool UpdateCatalog { get; set; } = true;

    [Parameter]
    public string SaveButtonLabel { get; set; }

    [Parameter]
    public bool HideTranslationNote { get; set; }

    [Parameter]
    public bool NavigateToProject { get; set; } = true;

    [Parameter]
    public EventCallback<Datahub_Project> OnProjectLoaded { get; set; }

    [Parameter]
    public EventCallback<Datahub_Project> OnMetadataSaved { get; set; }

    [Parameter]
    public bool AllowDiscard { get; set; } = true;

    private string DefaultMetadaId => ObjectId != ProjectAcronym ? ProjectAcronym : null;

    private Datahub_Project _project;
    private int? _sector;
    private int? _branch;
    private ObjectMetadataEditor _editor;

    protected override async Task OnInitializedAsync()
    {
        var ctx = await ContextFactory.CreateDbContextAsync();
        _project = await ctx.Projects.Include(p => p.Resources)
                                     .AsSingleQuery()
                                     .FirstOrDefaultAsync(p => p.Project_Acronym_CD == ProjectAcronym);
        if (_project is not null)
        {
            await TryReadProjectSectorAndBranch();
            await OnProjectLoaded.InvokeAsync(_project);
        }        
    }

    private async Task TryReadProjectSectorAndBranch()
    {
        var sectors = await OrganizationLevelsService.GetSectors();
        _sector = FindOrganizationLevelId(sectors, _project.Sector_Name);
        var branches = await OrganizationLevelsService.GetBranches();
        _branch = FindOrganizationLevelId(branches, _project.Branch_Name);
    }

    private int? FindOrganizationLevelId(List<OrganizationLevel> levels, string value) 
    {
        if (!string.IsNullOrEmpty(value))
            return levels.FirstOrDefault(l => MatchesLevelWithName(l, value))?.Id;
        return default;
    }

    private bool MatchesLevelWithName(OrganizationLevel level, string value)
    {
        var mode = StringComparison.OrdinalIgnoreCase;
        return value.Equals(level.EnglishLabel, mode) || 
               value.Equals(level.FrenchLabel, mode) ||
               value.Equals(level.EnglishAcronym, mode) ||
               value.Equals(level.FrenchAcronym, mode);
    }

    private void OnMetadataCreated()
    {
        if (string.IsNullOrEmpty(_editor.GetValue("title_translated_en")))
            _editor.SetValue("title_translated_en", _project.Project_Name);

        if (string.IsNullOrEmpty(_editor.GetValue("title_translated_fr")))
            _editor.SetValue("title_translated_fr", _project.Project_Name_Fr);

        if (string.IsNullOrEmpty(_editor.GetValue("notes_translated_en")))
            _editor.SetValue("notes_translated_en", _project.Project_Name);

        if (string.IsNullOrEmpty(_editor.GetValue("notes_translated_fr")))
            _editor.SetValue("notes_translated_fr", _project.Project_Name_Fr);

        if (string.IsNullOrEmpty(_editor.GetValue("contact_information")))
            _editor.SetValue("contact_information", _project.Project_Admin);

        if (string.IsNullOrEmpty(_editor.GetValue("sector")) && _sector.HasValue)
            _editor.SetValue("sector", _sector.ToString());

        if (string.IsNullOrEmpty(_editor.GetValue("branch")) && _branch.HasValue)
            _editor.SetValue("branch", _branch.ToString());

        if (string.IsNullOrEmpty(_editor.GetValue("initiative_goal")))
            _editor.SetValue("initiative_goal", _project.Project_Goal);
    }

    private async Task HandleSave()
    {
        await OnMetadataSaved.InvokeAsync(_project);

        _project.Sector_Name = _editor.GetSelectedChoices("sector").FirstOrDefault()?.Label ?? "";
        _project.Branch_Name = _editor.GetSelectedChoices("branch").FirstOrDefault()?.Label ?? "";

        var ctx = await ContextFactory.CreateDbContextAsync();
        ctx.Attach(_project);
        ctx.Projects.Update(_project);
        await ctx.SaveChangesAsync();

        HandleNavigateToProject();
    }

    private void HandleNavigateToProject()
    {
        if (NavigateToProject)
            NavigationManager.NavigateTo($"/projects/{ProjectAcronym}");
    }

    private string GetProjectSensitivity()
    {
        var sensitivity = (_project?.Data_Sensitivity ?? "").ToUpper();
        return sensitivity switch
        {
            "CLASSIFIED" or
            "PROTECTED B" => SecurityClassification.ProtectedB,
            "PROTECTED A" => SecurityClassification.ProtectedA,
            _ => SecurityClassification.Unclassified
        };
    }

    private string GetSaveButtonLabel() => SaveButtonLabel ?? Localizer["OPENDATA-WIZARD.Save_button"];
}
