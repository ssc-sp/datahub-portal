@using Microsoft.EntityFrameworkCore.Query
@using Microsoft.EntityFrameworkCore;
@inject IStringLocalizer<DataLabels> DataLocalizer
@inject NavigationManager NavigationManager
@inject IJSRuntime JsInterop
@inject IDbContextFactory<DatahubProjectDBContext> dbFactory
@inject IEmailNotificationService EmailService
@inject IMSGraphService MSGraphService
@inject IUserInformationService UserInformationService
@inject ServiceAuthManager ServiceAuthManager
@inject ISystemNotificationService SystemNotificationService
@page "/admin"

<div style="padding-left: 2rem;padding-right: 2rem">

    <AeTypography Variant="h1">@Localizer["DataHub Administration"]</AeTypography>

<AuthorizeView Roles="@string.Join(',', _authorizedRoles)">
    <Authorized>

        <ProjectAccessRequestTable 
            UserId=@CurrentUserId
            IsDatahubAdmin=@IsDataHubAdmin()
        />

        <div>&nbsp;</div>
        <AeCard>
            <Header>        <AeTypography Variant="h1">@Localizer["Authorize Users"]</AeTypography> </Header>
        <ChildContent>

        @if (_usersAuthorization != null)
        {
            <AePaginatedTable Accessors="accessorFunctions"
            T="Datahub_Project_Access_Request"
                     Dataset="_usersAuthorization"
                     Renderers="renderFunctions"
                     @ref="@_table2"                     
                     GridTemplateColumns="2fr 3fr 2fr 3fr 2fr" 
                     Page="@_lastClicked2"
                     Headers="LocalizeHeaders(headers)"
                     PageSize="10"/>

                @if (_table2 != null)
                            {            
            <AePagination Pageable="@_table2" OnPageClick="OnTableClick2"> 
            <LeftIcon><i class='fad fa-chevron-double-left'></i></LeftIcon> 
            <RightIcon><i class='fad fa-chevron-double-right'></i></RightIcon>
            </AePagination>
                            }
        }
        else
        {
            <div>@Localizer["Loading data..."]</div>
        }
        </ChildContent>
        </AeCard>
        <div>&nbsp;</div>

        <ServiceCreationRequestTable 
            UserId=@CurrentUserId
            IsDatahubAdmin=@IsDataHubAdmin()
        />
        
        <div>&nbsp;</div>
        @if (EmailService.IsDevTestMode())
        {
            <div style="width:600px">
                <AeCard>
                    <AeTypography Variant="h1">@Localizer["Test Email Notification"]</AeTypography>
                    
                    <label>
                        <input @bind=@EmailSelf type="checkbox"/>
                        @Localizer["Send to self"]
                    </label>
                    
                    <input @bind=@TestRecipientName type="text" disabled=@EmailSelf style="width:100%"/>
                
                    <input @bind=@TestRecipientEmail type="text" disabled=@EmailSelf style="width:100%" />
                    
                    <AeButton class="blue" @onclick="async () => await SendNamedTestEmail()" Disabled=@IsSendingTestEmail >
                        @if (IsSendingTestEmail) {
                            <Datahub.Core.Components.Spinner Small="true" />
                        }
                        else
                        {
                            @Localizer["Send test email"]
                        }
                    </AeButton>
                </AeCard>
        <div>&nbsp;</div>

            </div>
        }

        <div>
            <AeCard>
                <AeTypography Variant="h1">@Localizer["Test System Notification"]</AeTypography>

                
                <AeTypography Variant="h5">@Localizer["Recipients"]</AeTypography>
                <ul>
                    @foreach (var recipient in TestNotificationRecipients)
                    {
                        <li><span @onclick="() => RemoveTestNotificationRecipient(recipient)">@recipient.Name</span></li>
                    }
                    <li>
                        <input type="text" id="inputSearch" class="selectedText" 
                            @onclick="() => SearchTestNotificationUsers()" @onkeyup="() => SearchTestNotificationUsers()" 
                            @bind-value=@TestNotificationUserSearchFilter @bind-value:event="oninput" 
                            />
                        <div class="nrcan-typography dropdown-content ddsearch" id="usermenu">
                            @foreach (var item in TestNotificationSearchResults.Take(10))
                            {
                                <span>* <a @onclick="() => AddTestNotificationRecipient(item.Value)">@item.Value.DisplayName</a> &nbsp;</span>
                            }
                        </div>

                    </li>
                </ul>
                    
                <AeButton class="blue" @onclick="async () => await SendTestSystemNotification()" @Disabled=@IsSendingSystemNotification>
                    @if(IsSendingSystemNotification)
                    {
                        <Datahub.Core.Components.Spinner Small="true" />
                    }
                    else
                    {
                        @Localizer["Send"]
                    }
                </AeButton>
                
            </AeCard>
            <div>&nbsp;</div>
        </div>
    </Authorized>
    <NotAuthorized>
        <AeTypography Variant="h1">@Localizer["This page is limited for DataHub administrators"]</AeTypography>
    </NotAuthorized>
</AuthorizeView>

<AuthorizeView Roles="@RoleConstants.DATAHUB_ROLE_ADMIN">
    <Authorized>

        <AeCard>
            <Header>
        <AeTypography Variant="h1">@Localizer["Datahub Tools"]</AeTypography>
        </Header>
        <ChildContent>
            <p>
            <NavLink href="/admin/powerbi">@Localizer["Power BI Admin Page"]</NavLink>
            </p>
            <p>
            <NavLink href="/datahub/projects">@Localizer["DataHub Project Tracker"]</NavLink>
            </p>
        </ChildContent>
        </AeCard>
    </Authorized>
</AuthorizeView>

</div>
@code {

    private int _lastClicked2 = 0;

    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }

    private string CurrentUserId { get; set; }

    private List<string> _authorizedRoles;

    private IPageableComponent _table2;

    private List<Datahub_Project_Access_Request> _usersAuthorization;


    private DatahubProjectDBContext projectContext;

    private List<string> headers = new List<string>
{
        "Project", "User", "Service", "Date","Actions"
    };


    private void OnTableClick2(int pageIndex)
    {
        _lastClicked2 = pageIndex;
    }

    private string TestNotificationUserSearchFilter { get; set; } = string.Empty;
    private bool IsSendingSystemNotification { get; set; } = false;
    private Dictionary<string, Datahub.Core.Data.GraphUser> TestNotificationSearchResults { get; set; } = new();

    private HashSet<(string UserId, string Name)> TestNotificationRecipients = new();

    private async Task SendTestSystemNotification()
    {
        IsSendingSystemNotification = true;
        var recipients = TestNotificationRecipients.Select(r => r.UserId).ToList();
        await SystemNotificationService.CreateSystemNotifications(recipients, "SYSTEM-NOTIFICATION.TestNotification");
        IsSendingSystemNotification = false;
    }

    private void AddTestNotificationRecipient(Datahub.Core.Data.GraphUser chosenUser)
    {
        TestNotificationRecipients.Add((chosenUser.Id, chosenUser.DisplayName));
        TestNotificationUserSearchFilter = string.Empty;
        TestNotificationSearchResults.Clear();
    }

    private void RemoveTestNotificationRecipient((string UserId, string Name) chosenUser)
    {
        TestNotificationRecipients.Remove(chosenUser);
    }

    private async Task SearchTestNotificationUsers()
    {
        var toggleMenu = "false";

        if (TestNotificationUserSearchFilter.Length > 3)
        {
            TestNotificationSearchResults = await MSGraphService.GetUsersListAsync(TestNotificationUserSearchFilter, CancellationToken.None);            
            toggleMenu = "true";
        }

        await JsInterop.InvokeAsync<object>("toggleMenuWithBool", "usermenu", toggleMenu);
    }


    private bool _emailSelf = true;
    private bool EmailSelf
    {
        get => _emailSelf;
        set 
        {
            if (value)
            {
                ResetTestRecipient();
            }
            _emailSelf = value;
        }
    }

    private List<string> LocalizeHeaders(List<string> input)
    {
        return input.Select(s => Localizer[s].ToString()).ToList();
    }
    private string TestRecipientName { get; set; }
    private string TestRecipientEmail { get; set; }
    private bool IsSendingTestEmail { get; set; }

    private async Task ResetTestRecipient()
    {
        var email = _user.Identity.Name;
        var name = _user.Claims.Where(c => c.Type == "name").FirstOrDefault()?.Value;

        TestRecipientName = name;
        TestRecipientEmail = email;
        StateHasChanged();
    }

    private async Task SendNamedTestEmail()
    {
        IsSendingTestEmail = true;
        StateHasChanged();

        var html = await EmailService
            .RenderTemplate<Datahub.Core.Templates.TestEmailTemplate>(new Dictionary<string, object>(){{ "Name", TestRecipientName }});
        await EmailService.SendEmailMessage("Test", html, TestRecipientEmail, TestRecipientName);

        IsSendingTestEmail = false;
        StateHasChanged();
    }

    // Accessor functions to retrieve cell value
    private List<Func<Datahub_Project_Access_Request, string>> accessorFunctions = new List<Func<Datahub_Project_Access_Request, string>>
{
        p => { return p.Project.Project_Name; },
        p => { return p.User_Name; },
        p => { return p.RequestServiceType; },
        p => { return p.Request_DT.ToShortDateString(); },
        p => { return ".."; },
    };


    // [Optional] Can define custom rendering for columns, order matters
    private List<Func<Datahub_Project_Access_Request, RenderFragment>> renderFunctions;
    private void GetServiceType(Datahub_Project_Access_Request request)
    { 

    }
    private async Task AuthorizeUser(Datahub_Project_Access_Request r)
    {
        r.Completion_DT = DateTime.UtcNow;
        await projectContext.SaveChangesAsync();

        var serviceName = r.RequestServiceType;

        await EmailService.SendServiceAccessGrantedNotification(serviceName, r.Project.ProjectInfo, r.User_ID);
        await SystemNotificationService.CreateSystemNotificationWithLink(r.User_ID, $"/project/{r.Project.Project_Acronym_CD}", "SYSTEM-NOTIFICATION.GoToProject",
            "SYSTEM-NOTIFICATION.NOTIFICATION-TEXT.ServiceAccessRequestApproved", serviceName,
            new BilingualStringArgument(r.Project.ProjectInfo.ProjectNameEn, r.Project.ProjectInfo.ProjectNameFr));

        await RefreshData();
    }

    protected override void OnAfterRender(bool firstRender)
    {
        // You must re-render after the components are initialized in order for the 
        // component reference to not be null
        if (firstRender) {
            StateHasChanged();
        }
    }



    private async Task RevokeAccess(Datahub_Project_Access_Request r)
    {
        r.Completion_DT = null;
        await projectContext.SaveChangesAsync();

        var serviceName = r.RequestServiceType;

        await EmailService.SendAccessRevokedNotification(serviceName, r.Project.ProjectInfo, r.User_ID);
        await SystemNotificationService.CreateSystemNotification(r.User_ID, "SYSTEM-NOTIFICATION.NOTIFICATION-TEXT.ServiceAccessRevoked",
            serviceName, new BilingualStringArgument(r.Project.ProjectInfo.ProjectNameEn, r.Project.ProjectInfo.ProjectNameFr));

        await RefreshData();
    }

    private bool IsDataHubAdmin()
    {
        return _user.IsInRole(RoleConstants.DATAHUB_ROLE_ADMIN);
    }

    private async Task RefreshData()
    {

        var userId = await UserInformationService.GetUserIdString();        
        using var ctx = dbFactory.CreateDbContext();  

        var validProjects = (IsDataHubAdmin() ? ctx.Project_Users : ctx.Project_Users.Where(u => u.IsAdmin && u.User_ID == userId)).Select(p => p.Project.Project_ID).ToHashSet();

        var allAuths = await projectContext.Access_Requests.Include(a => a.Project).OrderByDescending(a => a.Request_DT).ToListAsync();
        _usersAuthorization = allAuths.Where(a => validProjects.Contains(a.Project.Project_ID)).ToList();

    }

    private async Task ValidateRequests()
    {
        using var ctx = dbFactory.CreateDbContext();
        var projectsWithDataBricks = await ctx.Projects.Where(t => !string.IsNullOrEmpty(t.Databricks_URL)).ToListAsync();
        var databricksRequests = ctx.Project_Requests.Where(r => r.ServiceType == RequestManagementService.DATABRICKS).ToList();
    }


    private System.Security.Claims.ClaimsPrincipal _user;

    protected override async Task OnInitializedAsync()
    {
        projectContext = dbFactory.CreateDbContext();
        _authorizedRoles = ServiceAuthManager.GetAdminProjectRoles();
        _user = (await authenticationStateTask).User;
        CurrentUserId = await UserInformationService.GetUserIdString();

        await ResetTestRecipient();

        await RefreshData();

        renderFunctions = new List<Func<Datahub_Project_Access_Request, RenderFragment>>
        {
                null,
                null,
                null,
                null,
                new Func<Datahub_Project_Access_Request, RenderFragment>(a => {
                    if (a.Completion_DT != null)
                    {
                        return @<div>@Localizer["Authorized"] <AeButton @onclick="async () => await RevokeAccess(a)">@Localizer["Revoke"]</AeButton> </div>;
                    }
                   else
      
                 {
                       return @<AeButton @onclick="async () => await AuthorizeUser(a)">Authorize user</AeButton>;
                   }
                })

        };

    }

}
