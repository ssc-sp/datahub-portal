@using global::Datahub.Core.EFCore
@using global::Datahub.Core.Services
@using global::Datahub.Portal.Data
@using global::Datahub.Portal.Services

@inject IPowerBiDataService _powerBiDataService
@inject PowerBiServiceApi _powerBiServiceApi
@inject Microsoft.Identity.Web.MicrosoftIdentityConsentAndConditionalAccessHandler _consentHandler

@inject IDbContextFactory<DatahubProjectDBContext> _contextFactory;

@if (Workspaces != null && Workspaces.Count > 0)
{
    <AeFlex Vertical> 
        <AePaginatedTable 
            Accessors=@WorkspaceTableAccessors
            Dataset=@Workspaces
            @ref=@WorkspaceTablePageable
            Page=@WorkspaceTableCurrentPage
            Renderers=@WorkspaceTableRenderers
            Headers=@LocalizeHeaders(WorkspaceTableHeaderKeys)
            PageSize=@PageSize
            GridTemplateColumns="3fr 5fr 1fr 1fr"
        />

        <AePagination Pageable=@WorkspaceTablePageable OnPageClick=@WorkspaceTablePaginationClicked>
            <LeftIcon><i class='fad fa-chevron-double-left'></i></LeftIcon> 
            <RightIcon><i class='fad fa-chevron-double-right'></i></RightIcon>
        </AePagination>
    </AeFlex>
}

@code {
    [Parameter]
    public string ProjectAcronym { get; set; } = string.Empty;

    [Parameter]
    public int PageSize { get; set; } = 10;

    [Parameter]
    public List<PowerBiAdminWorkspaceItem> Workspaces { get; set; }

    [Parameter]
    public EventCallback OnUpdated { get; set; }

    private Timer _updateTimer;

    private List<Datahub_Project> AllProjects { get; set; }

    private IPageableComponent WorkspaceTablePageable { get; set; }
    private int WorkspaceTableCurrentPage = 0;

    private List<Func<PowerBiAdminWorkspaceItem, string>> WorkspaceTableAccessors = new()
    {
        w => w.WorkspaceName,
        w => w.ProjectName ?? string.Empty,
        w => w.SandboxFlag.ToString(),
        w => w.IsChanged.ToString()
    };

    private List<Func<PowerBiAdminWorkspaceItem, RenderFragment>> WorkspaceTableRenderers;

    private List<string> WorkspaceTableHeaderKeys = new()
    {
        "Workspace", "Project", "Sandbox", "Add/Update"
    };

    private List<string> LocalizeHeaders(List<string> input) => input.Select(s => Localizer[s].ToString()).ToList();

    private void WorkspaceTablePaginationClicked(int pageIndex)
    {
        WorkspaceTableCurrentPage = pageIndex;
    }

    private RenderFragment ProjectDropdownRenderFragment(PowerBiAdminWorkspaceItem w) => 
    @<select @bind=@w.ProjectId>
        <option value=-1>--</option>
        @foreach (var p in AllProjects)
        {
            <option value=@p.Project_ID>@p.ProjectName</option>
        }
    </select>;
    

    private RenderFragment SandboxFlagRenderFragment(PowerBiAdminWorkspaceItem w) =>  @<input type="checkbox" @bind=@w.SandboxFlag />;

    private RenderFragment CatalogueIndicatorRenderFragment(PowerBiAdminWorkspaceItem w) => @<input type="checkbox" @bind=@w.IsChanged />;

    private async Task SetupRenderers()
    {
        using var ctx = await _contextFactory.CreateDbContextAsync();

        AllProjects = (await ctx.Projects.ToListAsync())
            .Where(p => !string.IsNullOrWhiteSpace(p.ProjectName))
            .OrderBy(p => p.ProjectName)
            .ToList();

        WorkspaceTableRenderers = new()
        {
            null,
            ProjectDropdownRenderFragment,
            SandboxFlagRenderFragment,
            CatalogueIndicatorRenderFragment
        };
    }

    //protected override async Task OnAfterRenderAsync(bool firstRender)
    //{
    //    if (OnUpdated.HasDelegate) { await OnUpdated.InvokeAsync(); }
    //    await base.OnAfterRenderAsync(firstRender);
    //}

    protected override async Task OnInitializedAsync()
    {
        await SetupRenderers();
    }

}
