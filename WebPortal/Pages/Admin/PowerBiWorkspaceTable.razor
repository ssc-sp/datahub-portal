@using global::Datahub.Core.EFCore
@using global::Datahub.Core.Services
@using global::Datahub.Portal.Data
@using global::Datahub.Portal.Services

@inject IPowerBiDataService _powerBiDataService
@inject PowerBiServiceApi _powerBiServiceApi
@inject Microsoft.Identity.Web.MicrosoftIdentityConsentAndConditionalAccessHandler _consentHandler

@inject IDbContextFactory<DatahubProjectDBContext> _contextFactory;

@if (Workspaces != null)
{
    <AeFlex Vertical> 
        <AePaginatedTable 
            Accessors=@WorkspaceTableAccessors
            Dataset=@Workspaces
            @ref=@WorkspaceTablePageable
            Page=@WorkspaceTableCurrentPage
            Renderers=@WorkspaceTableRenderers
            Headers=@LocalizeHeaders(WorkspaceTableHeaderKeys)
            PageSize=@PageSize
            GridTemplateColumns="3fr 5fr 1fr 1fr"
        />

        <AePagination Pageable=@WorkspaceTablePageable OnPageClick=@WorkspaceTablePaginationClicked>
            <LeftIcon><i class='fad fa-chevron-double-left'></i></LeftIcon> 
            <RightIcon><i class='fad fa-chevron-double-right'></i></RightIcon>
        </AePagination>
    </AeFlex>
}

@code {
    [Parameter]
    public string ProjectAcronym { get; set; } = string.Empty;

    [Parameter]
    public int PageSize { get; set; } = 10;

    private List<Datahub_Project> AllProjects { get; set; }

    private List<PowerBiAdminWorkspaceItem> Workspaces { get; set; }

    private IPageableComponent WorkspaceTablePageable { get; set; }
    private int WorkspaceTableCurrentPage = 0;

    private List<Func<PowerBiAdminWorkspaceItem, string>> WorkspaceTableAccessors = new()
    {
        w => w.WorkspaceName,
        w => w.ProjectName ?? string.Empty,
        w => w.SandboxFlag.ToString(),
        w => w.IsCatalogued.ToString()
    };

    private List<Func<PowerBiAdminWorkspaceItem, RenderFragment>> WorkspaceTableRenderers;

    private List<string> WorkspaceTableHeaderKeys = new()
    {
        "Workspace", "Project", "Sandbox", "Catalogued"
    };

    private List<string> LocalizeHeaders(List<string> input) => input.Select(s => Localizer[s].ToString()).ToList();

    private void WorkspaceTablePaginationClicked(int pageIndex)
    {
        WorkspaceTableCurrentPage = pageIndex;
    }

    private async Task<List<PowerBiAdminWorkspaceItem>> LoadWorkspaces()
    {
        var pbiWorkspaces = await _powerBiServiceApi.GetWorkspaces();
        var dbWorkspacesList = await _powerBiDataService.GetAllWorkspaces();
        var dbWorkspacesDict = dbWorkspacesList.ToDictionary(w => w.Workspace_ID);

        var results = pbiWorkspaces
            .Select(w =>
            {
                var dbWorkspace = dbWorkspacesDict.GetValueOrDefault(w.Id);
                return new PowerBiAdminWorkspaceItem()
                    {
                        WorkspaceId = w.Id,
                        WorkspaceName = w.Name,
                        WorkspaceFromDb = dbWorkspace,
                        SandboxFlag = dbWorkspace?.Sandbox_Flag ?? false,
                        ProjectId = dbWorkspace?.Project?.Project_ID
                    };
            })
            .ToList();

        return results;
    }

    private async Task ReloadWorkspaces()
    {
        Workspaces = await LoadWorkspaces();
        StateHasChanged();
    }

    private RenderFragment ProjectDropdownRenderFragment(PowerBiAdminWorkspaceItem w) => @<select @bind=@w.ProjectIdDropdown>
        <option value=-1>@Localizer["(none)"]</option>
        @foreach (var p in AllProjects)
            {
                <option value=@p.Project_ID>@p.ProjectName</option>
            }
        </select>;
    

    private RenderFragment SandboxFlagRenderFragment(PowerBiAdminWorkspaceItem w) =>  @<input type="checkbox" @bind=@w.SandboxFlag />;

    private RenderFragment CatalogueIndicatorRenderFragment(PowerBiAdminWorkspaceItem w)
    {
        RenderFragment yesFragment = @<div>@Localizer["Yes"] <AeButton OnClickEvent=@(() => UpdateCataloguedWorkspace(w))>@Localizer["Update"]</AeButton></div>;
        RenderFragment noFragment = @<div>@Localizer["No"] <AeButton OnClickEvent=@(() => AddCataloguedWorkspace(w))>@Localizer["Add"]</AeButton></div>;

        return w.IsCatalogued ? yesFragment : noFragment;
    }

    private async Task SetupRenderers()
    {
        using var ctx = await _contextFactory.CreateDbContextAsync();

        AllProjects = await ctx.Projects.ToListAsync();

        WorkspaceTableRenderers = new()
            {
                null,
                ProjectDropdownRenderFragment,
                SandboxFlagRenderFragment,
                CatalogueIndicatorRenderFragment
            };
    }

    private async Task AddCataloguedWorkspace(PowerBiAdminWorkspaceItem workspace)
    {
        await _powerBiDataService.AddCataloguedWorkspace(workspace.WorkspaceId, workspace.WorkspaceName, workspace.SandboxFlag, workspace.ProjectId);
        await ReloadWorkspaces();
    }

    private async Task UpdateCataloguedWorkspace(PowerBiAdminWorkspaceItem workspace)
    {
        await _powerBiDataService.UpdateCataloguedWorkspace(workspace.WorkspaceId, workspace.WorkspaceName, workspace.SandboxFlag, workspace.ProjectId);
        await ReloadWorkspaces();
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            await ReloadWorkspaces();
            await SetupRenderers();
        }
        catch (Exception ex)
        {
            _consentHandler.HandleException(ex);
        }
    }

}
