@using Microsoft.EntityFrameworkCore.Query
@using Microsoft.EntityFrameworkCore;
@using Datahub.Portal.Data
@using Datahub.Core.Data

@implements IDisposable

@inject IStringLocalizer<ProjectEdit> DataLocalizer
@inject NavigationManager NavigationManager
@inject IUserInformationService UserInformationService
@inject IDbContextFactory<DatahubProjectDBContext> DbFactoryProject
@inject IDbContextFactory<DatahubETLStatusContext> DbFactoryEtl
@inject IPublicDataFileService PublicDataFileService
@inject TranslationService TranslationService

@page "/edit-project/{projectAcronym}"
<AuthorizeView Roles="@RoleConstants.DATAHUB_ROLE_ADMIN">
    <Authorized>
<div style="padding-left: 2rem;padding-right: 2rem">
    <AeFlex Vertical>
        <h2>Edit Data Project</h2>
    </AeFlex>
    <AeCard CardPosition="AeCard.CardStyle.Horizontal">
        <Header>
            <div style="width:180px;">
                <i class="@($"fad fa-{_project.Project_Icon}")" />
            </div>
        </Header>
        <ChildContent>
            <AeTypography Variant="h1">@_project.ProjectName</AeTypography>
            <AeMarkdown Content="@($"{_project.ProjectDescription}")"></AeMarkdown>
            <AeTypography>@DataLocalizer["Data Sensitivity"]</AeTypography>
            <AeTypography Variant="h2">@DataLocalizer[_project.Data_Sensitivity]</AeTypography>
        </ChildContent>
    </AeCard>

    <AeCard>
        <AeButton @onclick="SuggestTranslation">@DataLocalizer["Suggest French Translation"]</AeButton>
        <AeModelForm Model="_project"
            T="Datahub_Project"
            OnValidSubmit="HandleValidSubmit"
            LabelForPropertyFunc="Localize"
            CancelLabel="Cancel"
            SubmitLabel="Save Changes"  
            LocalizerFunction="Localize"
            OnConfigure="OnConfigure"/>
    </AeCard>

</div>

    </Authorized>
</AuthorizeView>

@code {
    //Service Types - 1 = DataBricks, 2 = PowerBi
    //Service Status - 0 = pending creation, 1 = created

    private DatahubProjectDBContext projectContext;
    
    private bool _isProjectUserPendingApproval;

    private bool _isDataApprover;
    private int _sharingRequestCount;
    private bool _showSharingRequestCard => _isDataApprover && _sharingRequestCount > 0;

    // Define the headers at the top of the table
    private List<string> pipelineHeaders = new List<string>
    {
    "Data Factory Pipeline", "Last Update", "Result", "Data Quality & Integrity Checks"
    };

    // Accessor functions to retrieve cell value
    private List<Func<ETL_CONTROL_TBL, string>> accessorFunctions = new List<Func<ETL_CONTROL_TBL, string>>
    {
    new Func<ETL_CONTROL_TBL, string>(etl => etl.PROCESS_NM),
    new Func<ETL_CONTROL_TBL, string>(etl => etl.END_TS?.ToString("g")),
    new Func<ETL_CONTROL_TBL, string>(etl => etl.STATUS_FLAG),
    new Func<ETL_CONTROL_TBL, string>(etl => "S")
    };

    private List<Func<ETL_CONTROL_TBL, RenderFragment>> renderFunctions = new List<Func<ETL_CONTROL_TBL, RenderFragment>>
    {
    null,
    null,
    new Func<ETL_CONTROL_TBL, RenderFragment>(etl =>  { if (etl.STATUS_FLAG == "S")
                                                        return 
    @<div><i class="fad fa-check"></i> OK</div>
    ;
                                                    else
                                                        return 
    @<div><i class="fad fa-exclamation-triangle"></i> Error</div>
    ;}),
    new Func<ETL_CONTROL_TBL, RenderFragment>(etl => { return 
    @<div><i class="fad fa-check"></i> OK</div>
    ; })
    };

    [Parameter]
    public string projectAcronym { get; set; }

    public async Task SuggestTranslation()
    {
        _project.Project_Name_Fr = await TranslationService.GetFrenchTranslation(_project.Project_Name);
        _project.Project_Summary_Desc_Fr = await TranslationService.GetFrenchTranslation(_project.Project_Summary_Desc);
        //TranslationService
    }

    public string Localize(string propName)
    {
        return propName is null?null:DataLocalizer[propName];
    }

    private Datahub_Project _project;

    private async Task UpdateFeatured(bool changed)
    {
        _project.Is_Featured = changed;
        await projectContext.SaveChangesAsync();
        StateHasChanged();

    }

    private async Task HandleValidSubmit()
    {
        _project.Last_Updated_DT = DateTime.Now;
        //update admins here
        await projectContext.SaveChangesAsync();

    }

    protected override async Task OnInitializedAsync()
    {
        projectContext = DbFactoryProject.CreateDbContext();   
        _project = projectContext.Projects.Include(p => p.Requests).Include(p => p.Pipelines).Single(p => p.Project_Acronym_CD == projectAcronym);        
    }

    private async Task OnConfigure(IModelFormContext context)
    {
        context.RegisterOptionValueProperty<Datahub_Project>(s => s.Project_Category, () => new[] { "Guidance & Recommendations",
                                                                "Presentations",
                                                                "Data Sci. & Machine Learn.",
                                                                "Data Pipelines",
                                                                "Full Stack",
                                                                "Storage",
                                                                "Dashboards",
                                                                "Web Forms"
                                                                 });
        context.RegisterOptionValueProperty<Datahub_Project>(s => s.Project_Phase, () => new[] {"Initiation",
                                                                "Requirements",
                                                                "Development/Design",
                                                                "Implementation",
                                                                "Testing",
                                                                "Deployment",
                                                                "Ongoing Maintenance and Support"
                                                                 });
    }


    public void Dispose()
    {
        projectContext.Dispose();
    }
}
