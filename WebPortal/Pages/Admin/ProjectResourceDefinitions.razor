@page "/admin/resourcedefinition"
@using Datahub.Core.Services.Projects;

@inject IRequestManagementService _requestService;

<AeTypography Variant="h1">@Localizer["Resources"]</AeTypography>

<AeCard>
    <AeFlex Vertical>
        <select value=@_currentResourceType @onchange=@OnResourceChanged disabled=@_isEditing>
            @foreach(var resourceType in _resourceTypes)
            {
                <option value=@resourceType>@Localizer[$"RESOURCE-TYPE.{resourceType}"]</option>
            }
        </select>

        @if (_isEditing)
        {
            <textarea @bind=@_currentJson style="min-height: 400px;" />
            <div>
                <AeButton OnClickEvent=@SaveChanges Disabled=@_isSaving>@Localizer["BUTTONS.Save"]</AeButton>
                <AeButton OnClickEvent=@CancelChanges Disabled=@_isSaving class="light">@Localizer["BUTTONS.Cancel"]</AeButton>
            </div>
        }
        else
        {
            <code><pre>@_currentJson</pre></code>
            <div>
                <AeButton OnClickEvent=@(() => _isEditing = true)>@Localizer["BUTTONS.Edit"]</AeButton>
            </div>
        }
    </AeFlex>

</AeCard>

@code {


    private IEnumerable<string> _resourceTypes { get; set; } = ProjectResourceConstants.ALL_RESOURCE_TYPES;
    private string _currentResourceType;

    private bool _isEditing = false;
    private bool _isSaving = false;

    private string _currentJson { get; set; }

    private string LocalizedResource(string r) => Localizer[$"RESOURCE-TYPE.{r}"];

    private async Task OnResourceChanged(ChangeEventArgs e)
    {
        _currentResourceType = e.Value as string;
        await LoadResourceDefinition();
    }

    private async Task SaveChanges()
    {
        _isSaving = true;
        StateHasChanged();
        
        await _requestService.SaveResourceInputDefinitionJson(_currentResourceType, _currentJson);

        _isSaving = false;
        _isEditing = false;
        StateHasChanged();
    }

    private async Task CancelChanges()
    {
        _isSaving = true;
        StateHasChanged();
        await LoadResourceDefinition();
        _isSaving = false;
        _isEditing = false;
        StateHasChanged();
    }

    private async Task LoadResourceDefinition()
    {
        _currentJson = await _requestService.GetResourceInputDefinitionJson(_currentResourceType);
    }

    protected override async Task OnInitializedAsync()
    {
        _resourceTypes = _resourceTypes.OrderBy(r => LocalizedResource(r));
        await Task.CompletedTask;
    }

}
