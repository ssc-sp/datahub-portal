@using global::Datahub.Core.EFCore
@using global::Datahub.Core.Services
@using global::Datahub.Portal.Data
@using global::Datahub.Portal.Services

@inject IPowerBiDataService _powerBiDataService
@inject PowerBiServiceApi _powerBiServiceApi
@inject Microsoft.Identity.Web.MicrosoftIdentityConsentAndConditionalAccessHandler _consentHandler

@inject IDbContextFactory<DatahubProjectDBContext> _contextFactory;

@if (Reports != null && Reports.Count > 0)
{
    <AeFlex Vertical> 
        <AePaginatedTable 
            Accessors=@ReportTableAccessors
            Dataset=@Reports
            @ref=@ReportTablePageable
            Page=@ReportTableCurrentPage
            Renderers=@ReportTableRenderers
            Headers=@LocalizeHeaders(ReportTableHeaderKeys)
            PageSize=@PageSize
            GridTemplateColumns="3fr 3fr 5fr 1fr"
        />

        <AePagination Pageable=@ReportTablePageable OnPageClick=@ReportTablePaginationClicked>
            <LeftIcon><i class='fad fa-chevron-double-left'></i></LeftIcon> 
            <RightIcon><i class='fad fa-chevron-double-right'></i></RightIcon>
        </AePagination>
    </AeFlex>
}

@code {

    [Parameter]
    public int PageSize { get; set; } = 10;

    [Parameter]
    public List<PowerBiAdminReportItem> Reports { get; set; }

    [Parameter]
    public List<PowerBiAdminWorkspaceItem> Workspaces { get; set; }

    [Parameter]
    public EventCallback OnUpdated { get; set; }

    public Dictionary<Guid, PowerBiAdminWorkspaceItem> WorkspacesDict => Workspaces.ToDictionary(w => w.WorkspaceId);

    private Timer _updateTimer;

    private IPageableComponent ReportTablePageable { get; set; }
    private int ReportTableCurrentPage = 0;

    private List<Func<PowerBiAdminReportItem, string>> ReportTableAccessors = new()
    {
        w => w.ReportName,
        w => w.WorkspaceId.ToString(),
        w => w.WorkspaceId.ToString(),
        w => w.IsChanged.ToString()
    };

    private List<Func<PowerBiAdminReportItem, RenderFragment>> ReportTableRenderers;

    private List<string> ReportTableHeaderKeys = new()
    {
        "Report", "Workspace", "Project", "Add/Update"
    };

    private List<string> LocalizeHeaders(List<string> input) => input.Select(s => Localizer[s].ToString()).ToList();

    private void ReportTablePaginationClicked(int pageIndex)
    {
        ReportTableCurrentPage = pageIndex;
    }

    private RenderFragment CatalogueIndicatorRenderFragment(PowerBiAdminReportItem w) => @<input type="checkbox" @bind=@w.IsChanged />;

    private async Task SetupRenderers()
    {
        ReportTableAccessors = new()
        {
            w => w.ReportName,
            w => WorkspacesDict.GetValueOrDefault(w.WorkspaceId)?.WorkspaceName ?? string.Empty,
            w => WorkspacesDict.GetValueOrDefault(w.WorkspaceId)?.ProjectName ?? string.Empty,
            w => w.IsChanged.ToString()
        };

        ReportTableRenderers = new()
        {
            null,
            null,
            null,
            CatalogueIndicatorRenderFragment
        };

        await Task.CompletedTask;
    }

    protected override async Task OnInitializedAsync()
    {
        await SetupRenderers();
    }

}
