@page "/discovery"
@using Datahub.Metadata.DTO
@using Datahub.Core.Utils
@using Datahub.Metadata.Model

@* TODO: transfer these rules to scss, apply it to metadata keywords *@
<style>
    div.with-bottom-margin {
        margin-bottom: 0.5rem;
    }
</style>

<div style="margin: 2rem">
    <DHPageTitle PageTitleKey=@Localizer["Search catalog"] />
    <AeCard>
        <ChildContent>
            <AeFlex Vertical>
                <AeTypography Variant="h2">@Localizer["Search catalog"]</AeTypography>

                <AeSearchInput 
                    id="search" 
                    Placeholder=@Localizer.GetString("Enter keywords..") 
                    OnInputChangeWithLastKey=@HandleSearch 
                    ClearIconFAClass="null" 
                />

                <AeCollapse OnSectionToggled=@OnFilterToggled>
                    <AeCollapseSection DefaultOpen=@_filterSectionOpen>
                        <Header>
                            <AeTypography Variant="h3">
                                <span title=@_filterSectionOpenTitle>
                                    <AeIcon class=@_filterSectionOpenIconClass />
                                </span>
                                <span>@Localizer["Filter"]</span>
                                <AeIcon class=@_filterActiveIconClass />
                            </AeTypography>
                        </Header>
                        <ChildContent>
                            <AeFlex Vertical>
                                <div class="with-bottom-margin">
                                    <MultiCheckboxSelect 
                                        T=MetadataObjectType
                                        Options=@(Enum.GetValues<MetadataObjectType>())
                                        OptionLabelFunction=@(t => GetLocalizedDataType(t))
                                        OptionSortFunction=@(t => GetLocalizedDataType(t))
                                        OnSelectionChanged=@UpdateDataTypeFilter
                                        @ref=@_objectTypeFilter
                                    />
                                </div>
                                <div class="with-bottom-margin">
                                    <label>
                                        <span>@Localizer["Security"]: </span>
                                        <select @bind=@SecurityFilter title=@Localizer["Security"]>
                                            <option value=@string.Empty>@Localizer["(any)"]</option>
                                            @foreach(var sc in SecurityClassification.SECURITY_CLASSES)
                                            {
                                                <option value=@sc>@Localizer[sc]</option>
                                            }
                                        </select>
                                    </label>
                                    <label>
                                        <span>@Localizer["Sector"]: </span>
                                        <select @bind=@SectorFilter title=@Localizer["Sector"]>
                                            <option value=@NO_FILTER_SELECTED>@Localizer["(any)"]</option>
                                            @foreach(var sector in _sectors.Values.OrderBy(s => GetLabel(s)))
                                            {
                                                <option value=@sector.Id>@GetLabel(sector)</option>
                                            }
                                        </select>
                                    </label>
                                    <label>
                                        @if (_filteredBranches.Count > 0)
                                        {
                                            <span>@Localizer["Branch"]: </span>
                                            <select @bind=@BranchFilter title=@Localizer["Branch"]>
                                                <option value=@NO_FILTER_SELECTED>@Localizer["(any)"]</option>
                                                @foreach(var branch in _filteredBranches)
                                                {
                                                    <option value=@branch.Id>@GetLabel(branch)</option>
                                                }
                                            </select>
                                        }
                                    </label>
                                </div>
                                <div>
                                    <AeButton OnClickEvent=@ClearFilters Disabled=@_clearFilterDisabled>@Localizer["BUTTONS.Clear"]</AeButton>
                                </div>
                            </AeFlex>
                        </ChildContent>
                    </AeCollapseSection>
                </AeCollapse>

                <div>
                    <AeTypography Variant="h3">@Localizer["Results"]</AeTypography>

                    <AePaginatedTable 
                        @ref=@_resultTable
                        Accessors=@_accessorFunctions 
                        T=@CatalogObjectResult
                        Dataset=@_filteredSearchResults
                        Headers=@_headers
                        Renderers=@_renderFunctions
                        Page="@_lastClicked"
                        PageSize=@_pageSize
                        GridTemplateColumns="4fr 3fr 3fr 2fr 2fr 2fr 1fr"
                        OnRowClick=@ShowDetails
                    />
                    @if (_resultTable != null)
                    {
                        <AePagination 
                            Pageable=@_resultTable
                            OnPageClick="OnPageClick"> 
                            <LeftIcon><i class='fad fa-chevron-double-left'></i></LeftIcon> 
                            <RightIcon><i class='fad fa-chevron-double-right'></i></RightIcon>
                        </AePagination>                 
                    }
                </div>

                @if (_searching)
                {
                    <Spinner Small=true />
                }
            </AeFlex>

            <div>&nbsp;</div>

        </ChildContent>
    </AeCard>

@if (_selectedResult is not null)
{
    <div>&nbsp;</div>

    <AeCard>
        <ChildContent>
            <h2>@_selectedResult.Name</h2>

            <ObjectMetadataEditor 
                @key=@_selectedResult
                ObjectId=@_selectedResult.ObjectMetadataId.ToString()
                Name=@_selectedResult.Name
                ValidateRequired=false
                ProfileName="catalog"
                Preview=true 
            />
        </ChildContent>
    </AeCard>
}
</div>

@code {

    [Inject]
    public IMetadataBrokerService MetadataBrokerService { get; set; }

    [Inject]
    public IOrganizationLevelsService OrganizationLevelsService { get; set; }

    [Inject]
    public MyDataService ApiService { get; set; }

    [Inject]
    public DataRetrievalService DataRetrievalService { get; set; }

    [Inject]
    public IJSRuntime JSRuntime { get; set; }

    [Inject]
    public IPowerBiDataService PowerBiDataService { get; set; }

    [Inject]
    public NavigationManager NavigationManager { get; set; }

    private const int NO_FILTER_SELECTED = -1;

    private bool _searching;
    private QueryThrottler<string> _searchThrottler;
    private List<CatalogObjectResult> _searchResults = new();
    private List<CatalogObjectResult> _filteredSearchResults = new();
    private bool _isFrench;
    private CatalogObjectResult _selectedResult;

    private HashSet<MetadataObjectType> _filteredDataTypes = new();
    private MultiCheckboxSelect<MetadataObjectType> _objectTypeFilter;
    private int _filterSector = NO_FILTER_SELECTED;
    private int _filterBranch = NO_FILTER_SELECTED;
    private string _securityFilter = string.Empty;
    private List<OrganizationLevel> _filteredBranches => _branches.Values.Where(b => b.ParentId == _filterSector).OrderBy(b => GetLabel(b)).ToList();

    private bool _filterSectionOpen = true;
    private string _filterSectionOpenIconClass => $"fad fa-caret-circle-{(_filterSectionOpen ? "down" : "right")}";
    private string _filterSectionOpenTitle => _filterSectionOpen ? Localizer["Collapse"] : Localizer["Expand"];
    private string _filterActiveIconClass => $"{(_filtersActive ? "fas" : "fad")} fa-filter";

    private Dictionary<int, OrganizationLevel> _sectors = new();
    private Dictionary<int, OrganizationLevel> _branches = new();
    private IPageableComponent _resultTable;
    private List<string> _headers = new();
    private List<Func<CatalogObjectResult, RenderFragment>> _renderFunctions = new();
    private List<Func<CatalogObjectResult, string>> _accessorFunctions = new();
    private bool _filtersActive = false;
    private bool _clearFilterDisabled => !_filtersActive;

    protected override async Task OnInitializedAsync()
    {
        _isFrench = CultureInfo.CurrentCulture.Name.StartsWith("fr", StringComparison.InvariantCulture);
        _accessorFunctions = new() { GetName, GetSector, GetBranch, GetContact, GetDataType, GetSecurityClass, null };
        _headers = new() { Localizer["Name"], Localizer["Sector"], Localizer["Branch"], Localizer["Contact"], Localizer["Data Type"], Localizer["Security"], string.Empty };
        _renderFunctions = new() { null, null, null, null, null, null, GetDownLoadFragment };
        _sectors = (await OrganizationLevelsService.GetSectors()).ToDictionary(s => s.Id);
        _branches = (await OrganizationLevelsService.GetBranches()).ToDictionary(b => b.Id);
        _searchThrottler = new(TimeSpan.FromSeconds(0.5), ThrottleSearch);
        await _searchThrottler.SetQuery(string.Empty);
    }

    protected override void OnAfterRender(bool firstRender)
    {
        // You must re-render after the components are initialized in order for the 
        // component reference to not be null
        if (firstRender) 
        {
            StateHasChanged();
        }
    }

    private string GetLocalizedDataType(MetadataObjectType dataType) => Localizer[$"DISCOVERY-DATA-TYPES.{dataType}"];

    private async Task UpdateDataTypeFilter(IEnumerable<MetadataObjectType> filteredTypes)
    {
        _filteredDataTypes = filteredTypes.ToHashSet();
        UpdateFilter();
        await Task.CompletedTask;
    }

    private string SectorFilter
    {
        get => _filterSector.ToString();
        set
        {
            if (int.TryParse(value, out var intval))
            {
                _filterSector = intval;
                _filterBranch = NO_FILTER_SELECTED;
            }
            else
            {
                _filterSector = NO_FILTER_SELECTED;
                _filterBranch = NO_FILTER_SELECTED;
            }
            UpdateFilter();
        }
    }

    private string BranchFilter
    {
        get => _filterBranch.ToString();
        set
        {
            if (int.TryParse(value, out var intval))
            {
                _filterBranch = intval;
            }
            else
            {
                _filterBranch = NO_FILTER_SELECTED;
            }
            UpdateFilter();
        }
    }

    private string SecurityFilter
    {
        get => _securityFilter;
        set
        {
            _securityFilter = value;
            UpdateFilter();
        }
    }

    private void UpdateFilter()
    {
        var noDataTypesSelected = _filteredDataTypes.Count < 1;

        _filteredSearchResults = _searchResults
            .Where(r => (noDataTypesSelected || _filteredDataTypes.Contains(r.DataType)) &&
                (_filterSector == NO_FILTER_SELECTED || r.Sector == _filterSector) &&
                (_filterBranch == NO_FILTER_SELECTED || r.Branch == _filterBranch) &&
                (string.IsNullOrEmpty(_securityFilter) || r.SecurityClass == _securityFilter))
            .ToList();

        _lastClicked = 0;

        _filtersActive = _filteredDataTypes.Count > 0 || _filterSector != NO_FILTER_SELECTED || _filterBranch != NO_FILTER_SELECTED || !string.IsNullOrEmpty(_securityFilter);

        StateHasChanged();
    }

    private void ClearFilters()
    {
        if (_objectTypeFilter != null)
        {
            _objectTypeFilter.Clear();
        }

        _filterSector = NO_FILTER_SELECTED;
        _filterBranch = NO_FILTER_SELECTED;
        _securityFilter = string.Empty;

        UpdateFilter();
    }

    private void OnFilterToggled((AeCollapseSection Section, bool Open) e)
    {
        _filterSectionOpen = e.Open;
    }

    // accessor functions
    private string GetName(CatalogObjectResult result) => result.Name;
    private string GetSector(CatalogObjectResult result) => GetLabel(_sectors.GetValueOrDefault(result.Sector));
    private string GetBranch(CatalogObjectResult result) => GetLabel(_branches.GetValueOrDefault(result.Branch));
    private string GetContact(CatalogObjectResult result) => result.Contact;
    private string GetDataType(CatalogObjectResult result) => GetLocalizedDataType(result.DataType);
    private string GetSecurityClass(CatalogObjectResult result) => Localizer[result.SecurityClass];
    private string GetLabel(OrganizationLevel orgLevel) => (_isFrench ? orgLevel?.FrenchLabel : orgLevel?.EnglishLabel) ?? "-";

    // renderer functions
    private RenderFragment GetDownLoadFragment(CatalogObjectResult result) =>
        SecurityClassification.Unclassified.Equals(result.SecurityClass) 
            ? GetAuthorizedDownload(result) 
            : GetUnauthorizedDownload(result);

    private RenderFragment GetAuthorizedDownload(CatalogObjectResult result) =>
        @<div style="cursor: pointer;" onclick=@(() => HandleDownload(result)) ><i class="far fa-cloud-download sm-icon"></i></div>;

    private RenderFragment GetUnauthorizedDownload(CatalogObjectResult result) => 
        @<span>&nbsp;</span>
    ;

    private async Task HandleDownload(CatalogObjectResult result)
    {
        if (result.DataType == MetadataObjectType.File)
        {
            await DownloadFile(result);
        }
        else if (result.DataType == MetadataObjectType.FileUrl)
        {
            await DownloadFileUrl(result);
        }
        else if (result.DataType == MetadataObjectType.PowerBIReport)
        {
            await ViewPowerBIReport(result);
        }
    }

    private async Task ViewPowerBIReport(CatalogObjectResult result)
    {
        var metadata = await MetadataBrokerService.GetMetadata(result.ObjectMetadataId);
        if (Guid.TryParse(metadata.ObjectId_TXT, out var guid))
        {
            var report = await PowerBiDataService.GetReportById(guid);
            // TODO this url template is also used in DHLink; should only be in raw form in one place
            NavigationManager.NavigateTo($"/powerbi-report/{report.Workspace_Id}/{report.Report_ID}");
        }
    }

    private async Task DownloadFile(CatalogObjectResult result)
    {
        var uri = await DataRetrievalService.GetDownloadAccessToSasBlob(DataRetrievalService.DEFAULT_CONTAINER_NAME, fileName: result.Name, projectUploadCode: result.Location);
        await Task.Run(() => RedirectAndDownload(uri.ToString()));
    }

    private async Task DownloadFileUrl(CatalogObjectResult result)
    {
        await Task.Run(() => RedirectAndDownload(result.Location));
    }

    private async void HandleSearch(string newValue, KeyboardEventArgs ev)
    {
        await _searchThrottler.SetQuery(newValue);
    }

    private async Task ThrottleSearch(string searchText)
    {
        _searchResults.Clear();
        _selectedResult = null;
        _searching = true;
        await InvokeAsync(StateHasChanged);
        try
        {
            _searchResults = await SearchCatalog(searchText);
            UpdateFilter();
        }
        finally
        {
            _searching = false;
            await InvokeAsync(StateHasChanged);
        }
    }

    private Task<List<CatalogObjectResult>> SearchCatalog(string searchText)
    {
        return _isFrench ? MetadataBrokerService.SearchCatalogFrench(searchText) : MetadataBrokerService.SearchCatalogEnglish(searchText);
    }

    private int _pageSize = 5;
    private int _lastClicked = 0;

    private void OnPageClick(int pageIndex)
    {
        _lastClicked = pageIndex;
        _selectedResult = null;
    }

    private void ShowDetails(CatalogObjectResult result)
    {
        _selectedResult = result;
    }

    private async Task RedirectAndDownload(string url)
    {
        await JSRuntime.InvokeAsync<object>("open", url, "_blank");
    }
}
