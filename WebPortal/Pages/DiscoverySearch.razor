@page "/discovery"
@using Datahub.Metadata.DTO
@using Datahub.Core.Utils
@using Datahub.Metadata.Model
@using Datahub.Portal.Pages.Project.DataProject.ProjectTools

@* TODO: transfer these rules to scss, apply it to metadata keywords *@
<style>
    div.with-bottom-margin {
        margin-bottom: 0.5rem;
    }
</style>

<div style="margin: 2rem">
    <DHPageTitle PageTitleKey=@Localizer["DISCOVERY-FILTERS.Search Catalog"] />
    <AeCard>
        <ChildContent>
            <div class="catalog-page">
                <div class="filter">
                    <AeFlex Vertical>
                        <AeTypography Variant="h2">@Localizer["DISCOVERY-FILTERS.Filters"]</AeTypography>
                        
                        <label>
                            <input type="checkbox" checked=@_excludeIncompleteCatalogs @onchange=@(e => ChangeIncompleteCatalogFilter(e)) />
                            <span>@Localizer["DISCOVERY-FILTERS.HideIncomplete"]</span>
                        </label>

                        <AeCollapse OnSectionToggled=@OnSearchFilterToggled>
                            <AeCollapseSection DefaultOpen=@_searchFilterSectionOpen>
                                <Header>
                                    <AeTypography Variant="h3">
                                        <span title=@_filterSectionOpenTitle>
                                            <AeIcon class=@_filterSectionOpenIconClass />
                                        </span>
                                        <span>@Localizer["DISCOVERY-FILTERS.Keyword Search"]</span>
                                        <AeIcon class=@_filterActiveIconClass />
                                    </AeTypography>
                                </Header>
                                <ChildContent>
                                    <AeSearchInput 
                                        id="search" 
                                        Placeholder=@Localizer["DISCOVERY-FILTERS.Enter Keywords"] 
                                        OnInputChangeWithLastKey=@HandleSearch 
                                        ClearIconFAClass="null" 
                                    />
                                </ChildContent>
                            </AeCollapseSection>
                        </AeCollapse>

                        <AeCollapse OnSectionToggled=@OnSecurityFilterToggled>
                            <AeCollapseSection DefaultOpen=@_securityFilterSectionOpen>
                                <Header>
                                    <AeTypography Variant="h3">
                                        <span title=@_filterSectionOpenTitle>
                                            <AeIcon class=@_filterSectionOpenIconClass />
                                        </span>
                                        <span>@Localizer["DISCOVERY-FILTERS.Security Classification"]</span>
                                        <AeIcon class=@_filterActiveIconClass />
                                    </AeTypography>
                                </Header>
                                
                                <ChildContent>
                                    <AeFlex Vertical>
                                        <div class="with-bottom-margin">
                                            <MultiCheckboxSelect 
                                                T=MetadataClassificationType
                                                Options=@(Enum.GetValues<MetadataClassificationType>())
                                                OptionLabelFunction=@(t => GetLocalizedClassificationType(t))
                                                OptionSortFunction=@(t => GetLocalizedClassificationType(t))
                                                OnSelectionChanged=@UpdateClassificationTypeFilter
                                                @ref=@_classificationTypeFilter
                                            />
                                        </div>
                                    </AeFlex>
                                </ChildContent>
                            </AeCollapseSection>
                        </AeCollapse>
                        
                       


                        <AeCollapse OnSectionToggled=@OnFilterToggled>
                            <AeCollapseSection DefaultOpen=@_filterSectionOpen>
                                <Header>
                                    <AeTypography Variant="h3">
                                        <span title=@_filterSectionOpenTitle>
                                            <AeIcon class=@_filterSectionOpenIconClass />
                                        </span>
                                        <span>@Localizer["DISCOVERY-FILTERS.Data Type"]</span>
                                        <AeIcon class=@_filterActiveIconClass />
                                    </AeTypography>
                                </Header>
                                <ChildContent>
                                    <AeFlex Vertical>
                                        <div class="with-bottom-margin">
                                            <MultiCheckboxSelect 
                                                T=MetadataObjectType
                                                Options=@(Enum.GetValues<MetadataObjectType>())
                                                OptionLabelFunction=@(t => GetLocalizedDataType(t))
                                                OptionSortFunction=@(t => GetLocalizedDataType(t))
                                                OnSelectionChanged=@UpdateDataTypeFilter
                                                @ref=@_objectTypeFilter
                                            />
                                        </div>
                                        
                                       
                                    </AeFlex>
                                </ChildContent>
                            </AeCollapseSection>
                        </AeCollapse>


                        <AeCollapse OnSectionToggled=@OnSectorFilterToggled>
                            <AeCollapseSection DefaultOpen=@_sectorFilterSectionOpen>
                                <Header>
                                    <AeTypography Variant="h3">
                                        <span title=@_filterSectionOpenTitle>
                                            <AeIcon class=@_filterSectionOpenIconClass />
                                        </span>
                                        <span>@Localizer["Sectors"]</span>
                                        <AeIcon class=@_filterActiveIconClass />
                                    </AeTypography>
                                </Header>
                                
                                <ChildContent>
                                    <AeFlex Vertical>
                                        <div class="with-bottom-margin">
                                            <MultiCheckboxSelect 
                                                T=OrganizationLevel
                                                Options=@(_allSectors)
                                                OptionLabelFunction=@(t => _isFrench ? t.FrenchLabel : t.EnglishLabel)
                                                OptionSortFunction=@(t => _isFrench ? t.FrenchLabel : t.EnglishLabel)
                                                OnSelectionChanged=@UpdateSectorFilter
                                                @ref=@_sectorFilter
                                            />
                                        </div>
                                        <div class="dropdowns">                                                                                        
                                            <label>
                                                @if (_filteredBranches.Count > 0)
                                                {
                                                    <select class="ae input" @bind=@BranchFilter title=@Localizer["Branch"]>
                                                        <option value=@NO_FILTER_SELECTED>@Localizer["DISCOVERY-FILTERS.(All Branches)"]</option>
                                                        @foreach(var branch in _filteredBranches)
                                                        {
                                                            <option value=@branch.Id>@GetLabel(branch)</option>
                                                        }
                                                    </select>
                                                }
                                            </label>
                                        </div>
                                    </AeFlex>
                                </ChildContent>
                            </AeCollapseSection>
                        </AeCollapse>

                        <div>
                            <AeButton OnClickEvent=@ClearFilters Disabled=@_clearFilterDisabled>@Localizer["BUTTONS.Clear"]</AeButton>
                        </div>
                        @if (_searching)
                        {
                            <Spinner Small=true />
                        }
                    </AeFlex>
                </div>
                <div class="cards">
                    <div class="catalog-cards">
                        @foreach(var result in _filteredSearchResults)
                        {
                            <CatalogCards 
                                @key=@result
                                CatalogResult="@result" 
                                AccessorFunctions="@_accessorFunctions" 
                                RenderFunctions="@_renderFunctions"/>
                        }
                    </div>
                </div>
            </div>
            
        </ChildContent>
    </AeCard>

</div>

@code {

    [Inject]
    public IMetadataBrokerService MetadataBrokerService { get; set; }

    [Inject]
    public IOrganizationLevelsService OrganizationLevelsService { get; set; }

    [Inject]
    public IDataRetrievalService RetrievalService { get; set; }

    [Inject]
    public IJSRuntime JSRuntime { get; set; }

    [Inject]
    public IPowerBiDataService PowerBiDataService { get; set; }

    [Inject]
    public NavigationManager NavigationManager { get; set; }

    private const int NO_FILTER_SELECTED = -1;

    private bool _searching;
    private QueryThrottler<string> _searchThrottler;
    private List<CatalogObjectResult> _searchResults = new();
    private List<CatalogObjectResult> _filteredSearchResults = new();
    private List<CatalogObjectResult> _incompleteCatalogObjects = new();
    private bool _isFrench;
    private CatalogObjectResult _selectedResult;

    private HashSet<OrganizationLevel> _filteredSectors = new();
    private HashSet<MetadataObjectType> _filteredDataTypes = new();
    private HashSet<MetadataClassificationType> _filteredClassificationTypes = new();

    private MultiCheckboxSelect<OrganizationLevel> _sectorFilter;
    private MultiCheckboxSelect<MetadataObjectType> _objectTypeFilter;
    private MultiCheckboxSelect<MetadataClassificationType> _classificationTypeFilter;
    private int _filterSector = NO_FILTER_SELECTED;
    private int _filterBranch = NO_FILTER_SELECTED;
    private string _securityFilter = string.Empty;
    private List<OrganizationLevel> _filteredBranches => _branches.Values.Where(b => b.ParentId == _filterSector).OrderBy(b => GetLabel(b)).ToList();

    private bool _searchFilterSectionOpen = true;
    private bool _securityFilterSectionOpen = true;
    private bool _sectorFilterSectionOpen = true;
    private bool _filterSectionOpen = true;
    private bool _excludeIncompleteCatalogs = true;
    private string _filterSectionOpenIconClass => $"fad fa-caret-circle-{(_filterSectionOpen ? "down" : "right")}";
    private string _filterSectionOpenTitle => _filterSectionOpen ? Localizer["Collapse"] : Localizer["Expand"];
    private string _filterActiveIconClass => $"{(_filtersActive ? "fas" : "fad")} fa-filter";

    private List<OrganizationLevel> _allSectors = new();
    private Dictionary<int, OrganizationLevel> _sectors = new();
    private Dictionary<int, OrganizationLevel> _branches = new();    
    private IPageableComponent _resultTable;
    private List<string> _headers = new();
    private List<Func<CatalogObjectResult, RenderFragment>> _renderFunctions = new();
    private List<Func<CatalogObjectResult, string>> _accessorFunctions = new();
    private bool _filtersActive = false;
    private bool _clearFilterDisabled => !_filtersActive;

    protected override async Task OnInitializedAsync()
    {
        _isFrench = CultureInfo.CurrentCulture.Name.StartsWith("fr", StringComparison.InvariantCulture);
        _accessorFunctions = new() { GetName, GetSector, GetBranch, GetContact, GetDataType, GetSecurityClass, null };
        _headers = new() { Localizer["Name"], Localizer["Sector"], Localizer["Branch"], Localizer["Contact"], Localizer["Data Type"], Localizer["Security"], string.Empty };
        _renderFunctions = new() { null, null, null, null, null, null, GetDownLoadFragment };
        _sectors = (await OrganizationLevelsService.GetSectors()).ToDictionary(s => s.Id);
        _allSectors = await OrganizationLevelsService.GetSectors();
        _branches = (await OrganizationLevelsService.GetBranches()).ToDictionary(b => b.Id);
        _searchThrottler = new(TimeSpan.FromSeconds(0.5), ThrottleSearch);
        await _searchThrottler.SetQuery(string.Empty);
    }
    
    private async Task ChangeIncompleteCatalogFilter(ChangeEventArgs e)
    {
        if (e.Value is bool)
        {
            _excludeIncompleteCatalogs = (bool)e.Value;
        }
    }
    
    protected override void OnAfterRender(bool firstRender)
    {
        // You must re-render after the components are initialized in order for the 
        // component reference to not be null
        if (firstRender) 
        {
            StateHasChanged();
        }
    }

    private string GetLocalizedDataType(MetadataObjectType dataType) => Localizer[$"DISCOVERY-DATA-TYPES.{dataType}"];

    private string GetLocalizedClassificationType(MetadataClassificationType dataType) => Localizer[$"DISCOVERY-DATA-TYPES.{dataType}"];

    private async Task UpdateSectorFilter(IEnumerable<OrganizationLevel> filteredTypes)
    {
        _filteredSectors = filteredTypes.ToHashSet();
        _filterSector = _filteredSectors.Count == 1 ? filteredTypes.ToList()[0].Id : NO_FILTER_SELECTED;
        _filterBranch = _filteredSectors.Count != 1 ? NO_FILTER_SELECTED : _filterBranch;
        UpdateFilter();
        await Task.CompletedTask;
    }

    private async Task UpdateDataTypeFilter(IEnumerable<MetadataObjectType> filteredTypes)
    {
        _filteredDataTypes = filteredTypes.ToHashSet();
        UpdateFilter();
        await Task.CompletedTask;
    }

    private async Task UpdateClassificationTypeFilter(IEnumerable<MetadataClassificationType> filteredTypes)
    {
        _filteredClassificationTypes = filteredTypes.ToHashSet();
        UpdateFilter();
        await Task.CompletedTask;
    }


    private string SectorFilter
    {
        get => _filterSector.ToString();
        set
        {
            if (int.TryParse(value, out var intval))
            {
                _filterSector = intval;
                _filterBranch = NO_FILTER_SELECTED;
            }
            else
            {
                _filterSector = NO_FILTER_SELECTED;
                _filterBranch = NO_FILTER_SELECTED;
            }
            UpdateFilter();
        }
    }

    private string BranchFilter
    {
        get => _filterBranch.ToString();
        set
        {
            if (int.TryParse(value, out var intval))
            {
                _filterBranch = intval;
            }
            else
            {
                _filterBranch = NO_FILTER_SELECTED;
            }
            UpdateFilter();
        }
    }

    private string SecurityFilter
    {
        get => _securityFilter;
        set
        {
            _securityFilter = value;
            UpdateFilter();
        }
    }

    private void GetMetadataClassificationType(string securityClass)
    {
        var enumType = Enum.Parse(typeof(MetadataClassificationType), securityClass);
    }

    private void UpdateFilter()
    {
        var noDataTypesSelected = _filteredDataTypes.Count < 1;
        var noClassificationTypesSelected = _filteredClassificationTypes.Count < 1;
        var noSectorsSelected = _filteredSectors.Count < 1;




        _filteredSearchResults = _searchResults
            .Where(r => (noDataTypesSelected || _filteredDataTypes.Contains(r.DataType)) &&
                (noSectorsSelected || (r.Sector != 0 && _filteredSectors.Contains(_sectors[r.Sector]))) &&
                (noClassificationTypesSelected || _filteredClassificationTypes.Contains((MetadataClassificationType) Enum.Parse(typeof(MetadataClassificationType), r.SecurityClass.Replace(" ", "")))) &&
                (_filterBranch == NO_FILTER_SELECTED || r.Branch == _filterBranch) &&
                (string.IsNullOrEmpty(_securityFilter) || r.SecurityClass == _securityFilter))
            .ToList();

        if (_excludeIncompleteCatalogs)
            RemoveIncompleteCatalogsFromSearchResults(); 

        _lastClicked = 0;

        _filtersActive = _filteredSectors.Count > 0 || _filteredDataTypes.Count > 0 || _filteredClassificationTypes.Count > 0 || _filterBranch != NO_FILTER_SELECTED || !string.IsNullOrEmpty(_securityFilter);

        StateHasChanged();
    }

    private void RemoveIncompleteCatalogsFromSearchResults()
    {
        foreach (var result in _filteredSearchResults)
        {
            var strings = new List<string> { GetName(result), GetSector(result), GetContact(result), GetSecurityClass(result)};
            if (strings.Any(s => string.IsNullOrWhiteSpace(s)))
            {
                _filteredSearchResults.Remove(result);    
            }
        }
        
    }

    private void ClearFilters()
    {

        if (_objectTypeFilter != null)
        {
            _objectTypeFilter.Clear();
        }

        if (_sectorFilter != null)
        {
            _sectorFilter.Clear();
        }

        if (_classificationTypeFilter != null)
        {
            _classificationTypeFilter.Clear();
        }

        _filterSector = NO_FILTER_SELECTED;
        _filterBranch = NO_FILTER_SELECTED;
        _securityFilter = string.Empty;

        UpdateFilter();
    }

    private void OnFilterToggled((AeCollapseSection Section, bool Open) e)
    {
        _filterSectionOpen = e.Open;
    }

    private void OnSearchFilterToggled((AeCollapseSection Section, bool Open) e)
    {
        _searchFilterSectionOpen = e.Open;
    }
    private void OnSecurityFilterToggled((AeCollapseSection Section, bool Open) e)
    {
        _securityFilterSectionOpen = e.Open;
    }

    private void OnSectorFilterToggled((AeCollapseSection Section, bool Open) e)
    {
        _sectorFilterSectionOpen = e.Open;
    }


    // accessor functions
    private string GetName(CatalogObjectResult result) => result.Name;
    private string GetSector(CatalogObjectResult result) => GetLabel(_sectors.GetValueOrDefault(result.Sector));
    private string GetBranch(CatalogObjectResult result) => GetLabel(_branches.GetValueOrDefault(result.Branch));
    private string GetContact(CatalogObjectResult result) => result.Contact;
    private string GetDataType(CatalogObjectResult result) => GetLocalizedDataType(result.DataType);
    private string GetSecurityClass(CatalogObjectResult result) => Localizer[result.SecurityClass];
    private string GetLabel(OrganizationLevel orgLevel) => (_isFrench ? orgLevel?.FrenchLabel : orgLevel?.EnglishLabel) ?? "-";
    

    // renderer functions
    private RenderFragment GetDownLoadFragment(CatalogObjectResult result) =>
        SecurityClassification.Unclassified.Equals(result.SecurityClass) 
            ? GetAuthorizedDownload(result) 
            : GetUnauthorizedDownload(result);

    private RenderFragment GetAuthorizedDownload(CatalogObjectResult result) =>
        @<AeButton class="blue" onclick=@(() => HandleDownload(result))>@Localizer[GetButtonText(result)]</AeButton>;

    private RenderFragment GetUnauthorizedDownload(CatalogObjectResult result) => 
    @<AeButton class="red" onclick=@(() => HandleDownload(result))>@(SecurityClassification.ProtectedA.Equals(result.SecurityClass) ? Localizer["Protected A - Request Access"] : Localizer["Protected B - Request Access"])</AeButton>
    ;    

    private async Task HandleDownload(CatalogObjectResult result)
    {
        if (result.DataType == MetadataObjectType.File)
        {
            await DownloadFile(result);
        }
        else if (result.DataType == MetadataObjectType.FileUrl)
        {
            await DownloadFileUrl(result);
        }
        else if (result.DataType == MetadataObjectType.PowerBIReport)
        {
            await ViewPowerBIReport(result);
        }
    }

    private string GetButtonText(CatalogObjectResult result)
    {
        if (result.DataType == MetadataObjectType.File || result.DataType == MetadataObjectType.FileUrl)
        {
            return Localizer["Download File"];
        }
        else if (result.DataType == MetadataObjectType.PowerBIReport)
        {
            return Localizer["Open Report"];
        }
        else if (result.DataType == MetadataObjectType.PowerBIWorkspace)
        {
            return Localizer["Open Workspace"];
        }
        else if (result.DataType == MetadataObjectType.PowerBIDataset)
        {
            return Localizer["Open Dataset"];
        }
        else if (result.DataType == MetadataObjectType.Database)
        {
            return Localizer["Open Database"];
        }
        else if (result.DataType == MetadataObjectType.GeoObject)
        {
            return Localizer["Open Geo Object"];
        }
        return Localizer["Download File"];
    }

    private async Task ViewPowerBIReport(CatalogObjectResult result)
    {
        var metadata = await MetadataBrokerService.GetMetadata(result.ObjectMetadataId);
        if (Guid.TryParse(metadata.ObjectId_TXT, out var guid))
        {
            var report = await PowerBiDataService.GetReportById(guid);
            // TODO this url template is also used in DHLink; should only be in raw form in one place
            NavigationManager.NavigateTo($"/powerbi-report/{report.Workspace_Id}/{report.Report_ID}");
        }
    }

    private async Task DownloadFile(CatalogObjectResult result)
    {
        var uri = await RetrievalService.GetDownloadAccessToSasBlob(DataRetrievalService.DEFAULT_CONTAINER_NAME, fileName: result.Name, projectUploadCode: result.Location);
        await Task.Run(() => RedirectAndDownload(uri.ToString()));
    }

    private async Task DownloadFileUrl(CatalogObjectResult result)
    {
        await Task.Run(() => RedirectAndDownload(result.Location));
    }

    private async void HandleSearch(string newValue, KeyboardEventArgs ev)
    {
        await _searchThrottler.SetQuery(newValue);
    }

    private async Task ThrottleSearch(string searchText)
    {
        _searchResults.Clear();
        _selectedResult = null;
        _searching = true;
        await InvokeAsync(StateHasChanged);
        try
        {
            _searchResults = await SearchCatalog(searchText);
            UpdateFilter();
        }
        finally
        {
            _searching = false;
            await InvokeAsync(StateHasChanged);
        }
    }

    private Task<List<CatalogObjectResult>> SearchCatalog(string searchText)
    {
        return _isFrench ? MetadataBrokerService.SearchCatalogFrench(searchText) : MetadataBrokerService.SearchCatalogEnglish(searchText);
    }

    private int _pageSize = 5;
    private int _lastClicked = 0;

    private void OnPageClick(int pageIndex)
    {
        _lastClicked = pageIndex;
        _selectedResult = null;
    }

    private void ShowDetails(CatalogObjectResult result)
    {
        _selectedResult = result;
    }

    private async Task RedirectAndDownload(string url)
    {
        await JSRuntime.InvokeAsync<object>("open", url, "_blank");
    }
}
