@using StackExchange.Profiling

<style>
    .mud-table-cell-custom-group {
        font-weight: 500;
    }

    .mud-table-cell-custom-group-footer {
        padding-bottom: 50px;
        text-align: right;
    }
</style>
@foreach (var keyValue in MiniProfiler.Current.Root.CustomTimings)
{
    <MudTable Items="@keyValue.Value" Dense Filter="new Func<CustomTiming,bool>(FilterFunctionPassed)" 
              GroupBy="@_groupDefinition" FixedHeader>   
        <ToolBarContent>
            <MudStack>
                <MudText Typo="Typo.h6">@Localizer["Custom Event"]: @keyValue.Key</MudText>
                <MudText Typo="Typo.caption">@Localizer["Number of Events"]: @keyValue.Value.Count</MudText>
            </MudStack>
            <MudSpacer/>
            <MudTextField @bind-Value="_searchString" Placeholder="@Localizer["Search"]" Adornment="Adornment.Start"
                          AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"/>
        </ToolBarContent>
        <ColGroup>
            <col style="width: 60px;" />
            <col />
            <col />
            <col />
            <col />
            <col />
            <col />
        </ColGroup>
        <HeaderContent>
            <MudTh><MudTableSortLabel SortBy="new Func<CustomTiming, object>(x => x.Id)">
                @Localizer["ID"]
            </MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<CustomTiming, object>(x => x.CommandString)">
                @Localizer["Command"]
            </MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<CustomTiming, object>(x => x.StackTraceSnippet)">
                @Localizer["StackTrace Snippet"]
            </MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel InitialDirection="SortDirection.Ascending" 
                                      SortBy="new Func<CustomTiming, object>(x => x.StartMilliseconds)">
                @Localizer["Start (ms)"]
            </MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<CustomTiming, object>(x => x.DurationMilliseconds)">
                @Localizer["Duration (ms)"]
            </MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<CustomTiming, object>(x => x.Errored)">
                @Localizer["Produced an Error?"]
            </MudTableSortLabel></MudTh>
        </HeaderContent>
        <GroupHeaderTemplate>
            <MudTh Class="mud-table-cell-custom-group" colspan="6">
                @($"{context.GroupName}: {context.Key}")
            </MudTh>
        </GroupHeaderTemplate>
        <RowTemplate>
            <MudTd>@context.Id</MudTd>
            <MudTd>@context.CommandString</MudTd>
            <MudTd>@context.StackTraceSnippet</MudTd>
             <MudTd>@context.StartMilliseconds</MudTd>
             <MudTd>@context.DurationMilliseconds</MudTd>
             <MudTd>@(context.Errored ? Localizer["Yes"] : Localizer["No"])</MudTd>
        </RowTemplate>
        <GroupFooterTemplate>
            <MudTh Class="mud-table-cell-custom-group mud-table-cell-custom-group-footer" colspan="5">
                @Localizer["Number of Events"]: @context.Items.Count()
            </MudTh>
        </GroupFooterTemplate>
    </MudTable>

}
@code {
    
    private TableGroupDefinition<CustomTiming> _groupDefinition = new()
    {
        Indentation = false,
        Expandable = true,
        IsInitiallyExpanded = false,
        Selector = (e) => e.ExecuteType
    };
    private string _searchString;

    protected override void OnInitialized()
    {
        _groupDefinition.GroupName = Localizer["Execute Type"];
    }

    private bool FilterFunctionPassed(CustomTiming timing) => FilterFunction(timing, _searchString);
    
    private bool FilterFunction(CustomTiming timing, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (timing.Id.ToString().Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (timing.CommandString.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (timing.ExecuteType.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (timing.StackTraceSnippet.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        switch (timing.Errored)
        {
            case true when searchString.Equals(@Localizer["yes"], StringComparison.OrdinalIgnoreCase):
            case false when searchString.Equals(@Localizer["no"], StringComparison.OrdinalIgnoreCase):
                return true;
        }
        return $"{timing.StartMilliseconds} {timing.DurationMilliseconds}".Contains(searchString);
    }
}