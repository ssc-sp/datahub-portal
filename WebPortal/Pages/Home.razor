@using Datahub.Core.Components.PageBanner

@inject IUserInformationService _userInformationService
@inject MyDataService _myDataService
@inject IDataCreatorService _dataCreatorService
@inject UIControlsService _uiControlsService
@inject NavigationManager _navigationManager

@page "/home/{TabIndex?}"

@if (_showWelcome)
{
    <PageAlert OnClose="@HandleWelcomeClose" />
}

<WelcomeBanner />

@if (!_isLoaded)
{
    <Spinner />
}
else
{
    <LandingContent TabIndex=@TabIndexParsed />
}

@code
{
    [Parameter]
    public string TabIndex { get; set; }

    private int TabIndexParsed => int.TryParse(TabIndex, out var tabIndex) ? tabIndex : 0;

    private async Task InvalidUser()
    {
        _uiControlsService.AllowEscape = false;

        // Check if the user has a language set?
        var language = await _userInformationService.GetUserLanguage();
        if (string.IsNullOrWhiteSpace(language))
        {
            await _uiControlsService.ToggleModal(@<UserSelectModal HideCancel="true" ConfirmLabel="BUTTONS.ConfirmBilingual" HeaderText="@Localizer["LanguagePreferencePrompt"]" Values="_languages" OnDecision="SaveLanguage" />);
        } 
        else
        {            
            await _uiControlsService.ToggleModal(@<UserTermsAndConditionsModal OnDecision="HandleAlertDecision" Language="@language" />);
        }
    }

    private bool _isUserValid = true;
    private bool _isLoaded;

    private readonly List<string> _languages = new() { "English", "Français" };

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _isUserValid = await _userInformationService.HasUserAcceptedTAC();
            if (_isUserValid)
            {
                await SetupRootFolder();
                await AdjustLanguage();
            }
            else
            {
                await InvalidUser();
            }
            StateHasChanged();
        }
    }

    protected async Task SetupRootFolder()
    {
        _isLoaded = false;

        // We need to load user and check they have root folder
        var rootFolder = await _userInformationService.GetUserRootFolder();
        var currentUser = await _userInformationService.GetUserAsync();
        await _dataCreatorService.CreateRootFolderIfNotExist(currentUser.Id, rootFolder);

        // Set the user folder ID!
        _myDataService.MyDataFolder.id = rootFolder;
        _myDataService.SharedDataFolder.id = rootFolder;
        _myDataService.SearchDataFolder.id = rootFolder;

        _isLoaded = true;
    }

    private async void HandleAlertDecision(bool isContinue)
    {
        if (isContinue)
        {
            // User has agreed to TAC, update in DB
            if (await _userInformationService.RegisterUserTAC())
            {
                // ONLY valid if saved in DB
                _isUserValid = true;
                await _uiControlsService.ToggleModal();
                await SetupRootFolder();
                await AdjustLanguage();
            }

            StateHasChanged();
            return;
        }

        _navigationManager.NavigateTo(_myDataService.LogoutURL, forceLoad: true);
    }

    private async Task AdjustLanguage()
    {
        var language = await _userInformationService.GetUserLanguage();
        _userInformationService.SetLanguage(language);
    }

    private async void SaveLanguage((bool, string) saveTuple)
    {
        _uiControlsService.AllowEscape = true;
        var (isContinue, newLanguage) = saveTuple;
        if (isContinue)
        {
            var language = newLanguage.Equals("english", StringComparison.OrdinalIgnoreCase) ? "en-CA" : "fr-CA";
            var isLangSaved = await _userInformationService.RegisterUserLanguage(language);
            
            await _uiControlsService.ToggleModal();
            await _uiControlsService.ToggleModal(@<UserTermsAndConditionsModal OnDecision="HandleAlertDecision" Language="@language" />);
        }
        else
        {
            _navigationManager.NavigateTo(_myDataService.LogoutURL, forceLoad: true);
        }
    }

    private bool _showWelcome = true;
    private async Task HandleWelcomeClose()
    {
        _showWelcome = false;
    }
}