@using Datahub.Core.Components.PageBanner
@using Datahub.Portal.Pages.Landing
@using Microsoft.Graph

@inject IUserInformationService _userInformationService
@inject MyDataService _myDataService
@inject IDataCreatorService _dataCreatorService
@inject UIControlsService _uiControlsService
@inject NavigationManager _navigationManager
@inject ILocalStorageService _localStorage

@page "/home/{TabIndex?}"

<DHPageAlert Title="Welcome To DataHub" Key="@PageAlert.Home" WikiLinkEN="Onboarding---Landing" WikiLinkFR="Onboarding---Landing"/>

<WelcomeBanner/>
<CascadingValue Name="GraphUser" Value="_user">
    <RecentLinks/>
    <LandingContent TabIndex="TabIndexParsed"/>
</CascadingValue>

@code
{
    [Parameter]
    public string TabIndex { get; set; }

    private int TabIndexParsed => int.TryParse(TabIndex, out var tabIndex) ? tabIndex : 0;
    private bool _isUserValid = true;

    private readonly List<string> _languages = new() {"English", "Français"};
    private User _user;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        _user = await _userInformationService.GetUserAsync();

        _isUserValid = await _userInformationService.HasUserAcceptedTAC();
        if (_isUserValid)
        {
            await SetupRootFolder();
            await AdjustLanguage();
        }
        else
        {
            await InvalidUser();
        }
    }

    private async Task InvalidUser()
    {
        _uiControlsService.AllowEscape = false;

    // Check if the user has a language set?
        var language = await _userInformationService.GetUserLanguage();
        if (string.IsNullOrWhiteSpace(language))
        {
            await _uiControlsService.ToggleModal(@<UserSelectModal HideCancel="true" ConfirmLabel="BUTTONS.ConfirmBilingual" HeaderText="@Localizer["LanguagePreferencePrompt"]" Values="_languages" OnDecision="SaveLanguage"/>);
        }
        else
        {
            await _uiControlsService.ToggleModal(@<UserTermsAndConditionsModal OnDecision="HandleAlertDecision" Language="@language"/>);
        }
    }

    private async Task SetupRootFolder()
    {
    // We need to load user and check they have root folder
        var rootFolder = await _userInformationService.GetUserRootFolder();

        await _dataCreatorService.CreateRootFolderIfNotExist(_user.Id, rootFolder);

    // Set the user folder ID!
        _myDataService.MyDataFolder.id = rootFolder;
        _myDataService.SharedDataFolder.id = rootFolder;
        _myDataService.SearchDataFolder.id = rootFolder;
    }

    private async void HandleAlertDecision(bool isContinue)
    {
        if (isContinue)
        {
    // User has agreed to TAC, update in DB
            if (await _userInformationService.RegisterUserTAC())
            {
    // ONLY valid if saved in DB
                _isUserValid = true;
                await _uiControlsService.ToggleModal();
                await SetupRootFolder();
                await AdjustLanguage();
            }

            StateHasChanged();
            return;
        }

        _navigationManager.NavigateTo(_myDataService.LogoutURL, forceLoad: true);
    }

    private async Task AdjustLanguage()
    {
        var language = await _localStorage.GetItemAsStringAsync("language");
        if (string.IsNullOrWhiteSpace(language))
        {
            language = await _userInformationService.GetUserLanguage();
            await _localStorage.SetItemAsStringAsync("language", language);
            _userInformationService.SetLanguage(language);
        }
    }

    private async void SaveLanguage((bool, string) saveTuple)
    {
        _uiControlsService.AllowEscape = true;
        var (isContinue, newLanguage) = saveTuple;
        if (isContinue)
        {
            var language = newLanguage.Equals("english", StringComparison.OrdinalIgnoreCase) ? "en-CA" : "fr-CA";
            await _userInformationService.RegisterUserLanguage(language);

            await _uiControlsService.ToggleModal();
            await _uiControlsService.ToggleModal(@<UserTermsAndConditionsModal OnDecision="HandleAlertDecision" Language="@language"/>);
        }
        else
        {
            _navigationManager.NavigateTo(_myDataService.LogoutURL, forceLoad: true);
        }
    }

}