@page "/project/{ProjectAcronym}/forms/{FormId}"
@using System.Linq
@inject NavigationManager NavManager

@implements IDisposable
@inject IDbContextFactory<DatahubProjectDBContext> DbFactory

@if(_form != null)
{
    <div style="margin: 2rem">
        <AeCard>
            <ChildContent>
                <div style="margin: 1rem">
                    <h2>@_form.Title_DESC</h2>

                    <p>@_form.Description_DESC</p>

                    <h3>Form Fields</h3>

                    @if (HasFields)
                    {
                        <AeTable 
                            Accessors="accessorFunctions"
                            Renderers="renderFunctions"
                            Dataset="@_formFields"
                            Headers="@headers"
                        />
                    }
                
                    @if (_formId.HasValue)
                    {
                        <div style="margin-top: 8px;">
                            <AeButton To=@($"/project/{ProjectAcronym}/forms/{_formId.Value}/edit") class="blue float-right">
                                <AeIcon Icon="add-circle" IconStyle="Elemental.Code.RXIcon.RXStyle.Fill" />
                                Edit Form
                            </AeButton>

                            <AeButton To=@($"/project/{ProjectAcronym}/forms/{_formId.Value}/newfield") class="blue float-right">
                                <AeIcon Icon="add-circle" IconStyle="Elemental.Code.RXIcon.RXStyle.Fill" />
                                Create New Form Field
                            </AeButton>
                        </div>
                    }

                    @if (HasFields)
                    {
                        <div>
                            <h4>JSON</h4>
                            <pre>
                                <code>
                                    @foreach (var field in GetFieldsBySection())
                                    {
                                        @_fieldCodeGenerator.GenerateJSON(field)
                                        <br />
                                    }
                                </code>
                            </pre>

                            <h4>C#</h4>
                            <pre>
                                <code>
                                    @foreach (var field in GetFieldsBySection())
                                    {
                                        @_fieldCodeGenerator.GenerateCSharp(field)
                                        <br />
                                    }
                                </code>
                            </pre>
                        </div>
                    }

                    <AeButton To=@($"/project/{ProjectAcronym}/forms")>Back to Form List</AeButton>

                </div>
            </ChildContent>
        </AeCard>

    </div>
}

@code 
{
    private DatahubProjectDBContext projectContext;

    [Parameter]
    public string ProjectAcronym { get; set; }

    [Parameter]
    public string FormId 
    {
        get { return _formId?.ToString(); }
        set 
        {
            try
            {
                _formId = int.Parse(value);
            }
            catch (Exception ex) when (ex is ArgumentNullException || ex is FormatException || ex is OverflowException)
            {
                _formId = null;
            }
        }
    }

    private int? _formId { get; set;}

    private WebForm _form;

    private List<string> headers = new List<string>()
    {
        "Section", "Field", "Mandatory", "Field Type", "Extension"
    };

    private List<Func<WebForm_Field, string>> accessorFunctions = new List<Func<WebForm_Field, string>>()
    {
        (f => f.Section_DESC),
        (f => f.Field_DESC),
        (f => f.Mandatory_FLAG? "Yes": "No" ),
        (f => f.Type_CD),
        (f => f.ExtensionLabel)
    };

    private List<Func<WebForm_Field, RenderFragment>> renderFunctions = new List<Func<WebForm_Field, RenderFragment>>()
    {
        null,
        (f => @<a href=@($"/project/{f.WebForm.Project.Project_Acronym_CD}/forms/fields/{f.FieldID}")>@f.Field_DESC</a>),
        (f => f.Mandatory_FLAG? @<AeIcon class="fas fa-asterisk" /> : @<span></span>
    ),
        null,
        null
    };

    private List<WebForm_Field> _formFields = new List<WebForm_Field>();
    private FieldCodeGenerator _fieldCodeGenerator = new(s => 0);
    private List<string> _sections = new List<string>();

    protected override async Task OnInitializedAsync()
    {
        projectContext = DbFactory.CreateDbContext();
        if (_formId.HasValue)
        {
            _form = await projectContext.WebForms
                .Include(f => f.Fields)
                .Include(f => f.Project)
                .SingleOrDefaultAsync(f => f.WebForm_ID == _formId.Value);
            
            if (_form != null)
            {
                _formFields = _form.Fields;
                _sections = _formFields.Select(f => f.Section_DESC)
                                       .Where(s => !string.IsNullOrEmpty(s))
                                       .Distinct()
                                       .ToList();
            }
        }
        _fieldCodeGenerator = new FieldCodeGenerator(MapSection);
    }

    private int MapSection(string name)
    {
        return (1 + _sections.IndexOf(name)) * 10; // make it in ten increments
    }

    private bool HasFields => _formFields?.Count > 0;

    private IEnumerable<WebForm_Field> GetFieldsBySection() => _formFields.OrderBy(f => f.Section_DESC ?? "A");

    public void Dispose() { projectContext.Dispose(); }
}