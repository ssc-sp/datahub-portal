@page "/project/{ProjectAcronym}/forms/fields/{id}"
@inject NavigationManager NavManager

@implements IDisposable
@inject IDbContextFactory<DatahubProjectDBContext> DbFactory

@if(_formField == null)
{
    <h3>Please Wait</h3>
}
else 
{
    <h3>@_formField.Section_DESC - @_formField.Field_DESC</h3>

    @if (_mode == ViewMode.View)
    {

        <table>
            <thead>
                <tr>
                    <th>Property</th>
                    <th>Value</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td>Section</td>
                    <td>@_formField.Section_DESC</td>
                </tr>
                <tr>
                    <td>Field</td>
                    <td>@_formField.Field_DESC</td>
                </tr>
                <tr>
                    <td>Extension</td>
                    <td>@_formField.ExtensionLabel</td>
                </tr>
                <tr>
                    <td>Choices</td>
                    <td>@_formField.Choices_TXT</td>
                </tr>
                <tr>
                    <td>MaxLength</td>
                    <td>@_formField.Max_Length_NUM</td>
                </tr>
                <tr>
                    <td>Mandatory</td>
                    <td>@_formField.Mandatory_FLAG</td>
                </tr>
                <tr>
                    <td>Formatted</td>
                    <td>@_fieldCodeGenerator.GetFormattedFieldName(_formField)</td>
                </tr>
                <tr>
                    <td>Code</td>
                    <td>@_formField.Extension_CD</td>
                </tr>
                <tr>
                    <td>SQL Name</td>
                    <td>@_fieldCodeGenerator.GenerateSQLName(_formField)</td>
                </tr>
                <tr>
                    <td>JSON</td>
                    <td><pre><code>@_fieldCodeGenerator.GenerateJSON(_formField)</code></pre></td>
                </tr>
                <tr>
                    <td>C# Code</td>
                    <td>
                        <pre><code>@_fieldCodeGenerator.GenerateCSharp(_formField)</code></pre>
                    </td>
                </tr>
            </tbody>
        </table>

        <AeButton OnClickEvent="@GoToEditMode" class="blue">Edit</AeButton>
    }
    else if (_mode == ViewMode.Edit)
    {
        <AeModelForm
            Model="@_formField"
            SubmitLabel="Save Changes"
            OnValidSubmit="@HandleValidSubmit"
            CancelLabel="Cancel"
            OnCancel="@HandleCancel"
        />
    }
}

@if (_formField == null)
{
    <AeButton To=@($"/project/{ProjectAcronym}/forms")>Back</AeButton>
}
else
{
    <AeButton To=@($"/project/{ProjectAcronym}/forms/{_formField.WebForm_ID}")>Back</AeButton>
}



@code {

    private DatahubProjectDBContext projectContext;

    [Parameter]
    public string ProjectAcronym { get; set; }

    private enum ViewMode { View, Edit }
    private ViewMode _mode = ViewMode.View;

    [Parameter]
    public string Id { get; set; }

    private WebForm_Field _formField;
    private WebForm_Field _originalFormField;
    private FieldCodeGenerator _fieldCodeGenerator = new(s => 0);

    private void ChangeViewMode(ViewMode mode)
    {
        _mode = mode;
        InvokeAsync(() => StateHasChanged());
    }

    private async void GoToEditMode()
    {
        await Task.Run(() => ChangeViewMode(ViewMode.Edit));
    }

    private async void GoToViewMode()
    {
        await Task.Run(() => ChangeViewMode(ViewMode.View));
    }

    private async Task<WebForm_Field> LoadFormField()
    {
        var formField = await projectContext.Fields
            .SingleOrDefaultAsync(f => f.FieldID == int.Parse(Id));
        
        if (formField != null) 
        {
            _originalFormField = formField.Clone();
        }

        return formField;
    }

    private async Task<WebForm_Field> HandleCancel()
    {
        _formField.TakeValuesFrom(_originalFormField); //workaround to prevent cancelled changes from being saved
        GoToViewMode();
        return await LoadFormField();
    }

    protected override async Task OnInitializedAsync()
    {
        projectContext = DbFactory.CreateDbContext();
        _formField = await LoadFormField();
    }

    private async void HandleValidSubmit()
    {
        //TODO error checking, logging
        _formField.Date_Updated_DT = DateTime.UtcNow;
        var result = projectContext.Fields.Update(_formField);
        await projectContext.SaveChangesAsync();

        GoToViewMode();
    }

    public void Dispose() { projectContext.Dispose(); }
}
   