@using Datahub.Metadata.DTO
@using Datahub.Metadata.Model
@using Datahub.Core.Utils
@implements IDisposable

<div>
    @if (!Preview)
    {
        <div>
            <input class="ae input"
                   autocomplete="off"
                   @ref="_fieldValueInput"
                   style="width: 100%;" @bind="InputKeyword" @bind:event="oninput" placeholder=@Localizer["METADATA-PAGE.EnterKeyword-Placeholder"] />
        </div>
    }

    <AeFlex Vertical="true">
        <ul class="ae" style="margin: 0; padding: 0; list-style-type: none; list-style-image: none;">
            @foreach (var keyword in _keywordList)
            {
                <li style="float: left; margin: 5px 5px 0px 0px; padding: 4px 8px 4px 4px; border-width: 1px; border: 1px solid grey; border-radius: 5px; ">
                    @if (!Preview)
                    {
                        <a style="text-decoration: none; cursor: pointer;"
                           @onclick="() => DeleteKeyword(keyword, false)"
                           @onclick:preventDefault>&nbsp;x&nbsp;</a>
                    }
                    <span><b>@keyword</b></span>
                </li>
            }
        </ul>

        @if (!Preview)
        {
            <ul class="ae" style="margin: 0; padding: 0; list-style-type: none; list-style-image: none;">
                @foreach (var word in _suggestions)
                {
                    <li style="float: left; margin: 5px 5px 0px 0px; padding: 4px 8px 4px 4px; border-width: 1px; border: 1px dotted grey; border-radius: 5px; background-color: #f2f2f2;">
                        <a style="text-decoration: none; cursor: pointer;"
                           @onclick="() => PickKeyword(word, false)"
                           @onclick:preventDefault 
                           title=@GetKeywordHint(word)>&nbsp;<span>@word</span>&nbsp;</a>
                    </li>
                }
            </ul>
        }
    </AeFlex>

</div>

@code {

    [Inject]
    public IMetadataBrokerService MetadataBrokerService { get; set; }

    [Parameter]
    public ObjectFieldValue FieldValue { get; set; }

    [Parameter]
    public bool Preview { get; set; }

    [Parameter]
    public int SuggestionCount { get; set; } = 5;

    [Parameter]
    public bool English { get; set; } = true;

    [Parameter]
    public string Subject { get; set; }

    [Parameter]
    public TranslatedFieldPair FieldPair { get; set; }

    [Parameter]
    public EventCallback<ObjectFieldValue> OnFieldChanged { get; set; }

    private List<string> _keywordList { get; set; }
    private string _inputKeyword;
    private List<string> _suggestions { get; set; } = new List<string>();
    private List<SubjectKeyword> _subjectKeywords { get; set; } = new List<SubjectKeyword>();
    private string _lastSubject;
    private ElementReference _fieldValueInput;
    private QueryThrottler<string> _suggestionThrottler;

    public async Task FocusAsync()
    {
        if (!Preview)
            await _fieldValueInput.FocusAsync();
    }

    protected override async Task OnInitializedAsync()
    {
        _keywordList = new List<string>(ParseKeywords(FieldValue?.Value_TXT));
        _suggestionThrottler = new QueryThrottler<string>(TimeSpan.FromSeconds(0.5), TriggerAutoCompleteAsync);

        FieldPair.OnKeywordPicked += OnKeywordPicked;
        FieldPair.OnKeywordDeleted += OnKeywordDeleted;

        await UpdateSubjectKeywords();
    }

    void IDisposable.Dispose()
    {
        FieldPair.OnKeywordPicked -= OnKeywordPicked;
        FieldPair.OnKeywordDeleted -= OnKeywordDeleted;
    }

    protected override async Task OnParametersSetAsync()
    {
        if (_lastSubject != Subject)
        {
            await UpdateSubjectKeywords();
            _lastSubject = Subject;
        }
    }

    private IEnumerable<string> ParseKeywords(string keywords)
    {
        return (keywords ?? "").Split(',').Where(v => !string.IsNullOrWhiteSpace(v)).Select(k => k.Trim());
    }

    private string JoinKeywords(IEnumerable<string> keywords) => string.Join(", ", keywords);

    private async Task UpdateSubjectKeywords()
    {
        var subjectIds = (Subject ?? "").Split('|');
        _subjectKeywords = await MetadataBrokerService.GetSubjectKeywords(subjectIds);
        ApplySubjectSuggestions();
    }

    private string InputKeyword
    {
        get
        {
            return _inputKeyword;
        }
        set
        {
            if (value != _inputKeyword)
            {
                if (value != null && value.EndsWith(','))
                {
                    PickKeyword(_inputKeyword, false);
                }
                else
                {
                    _inputKeyword = value;
                    TriggerSuggestion(value);
                }
            }
        }
    }

    private void TriggerSuggestion(string text)
    {
        if (string.IsNullOrWhiteSpace(text))
        {
            ApplySubjectSuggestions();
        }
        else
        {
            _ = _suggestionThrottler.SetQuery(text);
        }
    }

    private void OnKeywordPicked(object sender, KeywordArgs args)
    {
        if (args.Source != FieldValue)
        {
            PickKeyword(args.Keyword, true);
        }
    }

    private void OnKeywordDeleted(object sender, KeywordArgs args)
    {
        if (args.Source != FieldValue)
        {
            DeleteKeyword(args.Keyword, true);
        }
    }

    private void PickKeyword(string keyword, bool isCallback)
    {
        if (NotAKeyword(keyword))
        {
            _keywordList.Add(keyword);
            UpdateField();
            ApplySubjectSuggestions();
        }
        if (!isCallback)
        {
            TriggerPairFieldEvent(keyword, FieldPair.OnKeywordPicked);
            _inputKeyword = string.Empty;
            _ = FocusAsync();
        }
    }

    private void DeleteKeyword(string keyword, bool isCallback)
    {
        _keywordList.Remove(keyword);
        UpdateField();
        ApplySubjectSuggestions();
        if (!isCallback)
        {
            TriggerPairFieldEvent(keyword, FieldPair.OnKeywordDeleted);
        }
    }

    private void TriggerPairFieldEvent(string keyword, EventHandler<KeywordArgs> handler)
    {
        var translKeyword = _subjectKeywords.FirstOrDefault(kw => keyword.Equals(SelectLanguageKeyword(kw)));
        if (translKeyword is not null)
        {
            handler.Invoke(this, new KeywordArgs(FieldValue, SelectAlternateKeyword(translKeyword)));    
        }
    }

    private async Task TriggerAutoCompleteAsync(string text)
    {
        if (string.IsNullOrWhiteSpace(_inputKeyword))
        {
            ApplySubjectSuggestions();
        }
        else
        {
            if (English)
            {
                ApplySuggestions(await MetadataBrokerService.GetSuggestedEnglishKeywords(text, SuggestionCount));
            }
            else
            {
                ApplySuggestions(await MetadataBrokerService.GetSuggestedFrenchKeywords(text, SuggestionCount));
            }
        }
        await InvokeAsync(StateHasChanged);
    }

    private void ApplySubjectSuggestions() => ApplySuggestions(_subjectKeywords.Select(SelectLanguageKeyword));

    private void ApplySuggestions(IEnumerable<string> suggestions)
    {
        _suggestions = suggestions.Where(s => NotAKeyword(s)).ToList();
    }

    private bool NotAKeyword(string text) => !_keywordList.Any(k => k.Equals(text, StringComparison.OrdinalIgnoreCase));

    private void UpdateField()
    {
        FieldValue.Value_TXT = JoinKeywords(_keywordList);
        OnFieldChanged.InvokeAsync(FieldValue);
    }

    private string SelectLanguageKeyword(SubjectKeyword kw) => English ? kw.English : kw.French;

    private string SelectAlternateKeyword(SubjectKeyword kw) => !English ? kw.English : kw.French;

    private string GetKeywordHint(string keyword) => $"{Localizer["METADATA-PAGE.KeywordHint"]} '{keyword}'";
}