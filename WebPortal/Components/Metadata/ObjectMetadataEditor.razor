@using Datahub.CKAN.Service
@using Datahub.Metadata.Model
@using Datahub.Metadata.DTO

@if (_fieldValues != null)
{
    <MetadataEditor Preview="_preview"
                    Definitions="@_definitions"
                    FieldValues="@_fieldValues"
                    OnFieldChanged="FieldChanged" />
}

@code {

    [Inject]
    public IMetadataBrokerService MetadataBrokerService { get; set; }

    /// <summary>
    /// Object ID to edit or add metadata
    /// </summary>
    [Parameter]
    public string ObjectId { get; set; }

    [Parameter]
    public EventCallback<ObjectFieldValue> OnFieldChanged { get; set; }

    private FieldDefinitions _definitions;
    private FieldValueContainer _fieldValues;
    private bool _preview = false;

    protected override async Task OnInitializedAsync()
    {
        _fieldValues = await MetadataBrokerService.GetMetadataContext(ObjectId);
        _definitions = _fieldValues.Definitions;
    }

    public void TogglePreview()
    {
        _preview = !_preview;
        StateHasChanged();
    }

    public bool IsRequiredMetadataValid => _fieldValues?.ValidateRequired() == true;

    public async Task SaveChanges()
    {
        await MetadataBrokerService.SaveMetadata(_fieldValues);
        StateHasChanged();
    }

    [Inject]
    public ICKANService CKANService { get; set; }

    public async Task SavePackage()
    {
        var result = await CKANService.CreatePackage(_fieldValues.GetReadonlyCopy(), "http://url_goes_here");
        if (!result.Succeeded)
        {
            // >>
        }
    }

    private async void FieldChanged(ObjectFieldValue field)
    {
        await OnFieldChanged.InvokeAsync();
    }
}
