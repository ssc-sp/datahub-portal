@using Datahub.CKAN.Service
@using Datahub.Metadata.Model
@using Datahub.Metadata.DTO

@if (_fieldValues != null)
{
    <MetadataEditor Preview=@_preview
                    Definitions=@_definitions
                    FieldValues=@_fieldValues
                    RequiredFields=@_requiredFields
                    HiddenFields=@_hiddenFields
                    OnFieldChanged=@FieldChanged />
}

@code {

    [Inject]
    public IMetadataBrokerService MetadataBrokerService { get; set; }

    /// <summary>
    /// Object ID to edit or add metadata
    /// </summary>
    [Parameter]
    public string ObjectId { get; set; }

    [Parameter]
    public EventCallback<ObjectFieldValue> OnFieldChanged { get; set; }

    private FieldDefinitions _definitions;
    private FieldValueContainer _fieldValues;
    private bool _preview = false;

    private HashSet<string> _requiredFields = new() 
    {
        "collection",
        "title_translated_en",
        "title_translated_fr",
        "owner_org",
        "notes_translated_en",
        "notes_translated_fr",
        "keywords_en",
        "keywords_fr",
        "subject",
        "frequency",
        "date_published",
        "jurisdiction",
        //"license_id",
        "restrictions"
    };

    private HashSet<string> _hiddenFields = new() 
    { 
        "imso_approval", 
        "ready_to_publish" 
    };

    protected override async Task OnInitializedAsync()
    {
        _fieldValues = await MetadataBrokerService.GetMetadataContext(ObjectId);
        _definitions = _fieldValues.Definitions;
    }

    public void TogglePreview()
    {
        _preview = !_preview;
        StateHasChanged();
    }

    public bool? IsRequiredMetadataValid => _fieldValues?.ValidateRequired(IsFieldRequired);

    private bool IsFieldRequired(FieldDefinition field) => _requiredFields.Contains(field.Field_Name_TXT);

    public async Task SaveChanges()
    {
        await MetadataBrokerService.SaveMetadata(_fieldValues);
        StateHasChanged();
    }

    // -- temp test area --
    [Inject]
    public ICKANService CKANService { get; set; }

    public async Task SavePackage()
    {
        var result = await CKANService.CreatePackage(_fieldValues.GetReadonlyCopy(), "http://url_goes_here");
        if (!result.Succeeded)
        {
            // >>
        }
    }
    // -- end temp area --

    private async void FieldChanged(ObjectFieldValue field)
    {
        await OnFieldChanged.InvokeAsync();
    }
}
