@*ObjectMetadataEditor.razor*@
@using Datahub.Metadata.Model
@using Datahub.Metadata.DTO

<div style="width: 100%">
@if (_fieldValues != null)
{
    <MetadataEditor Preview=@Preview
                    Definitions=@_definitions
                    FieldValues=@_fieldValues
                    RequiredFields=@_requiredFields
                    HiddenFields=@_hiddenFields
                    ShowAll=@_showAll
                    OnFieldChanged=@FieldChanged />

    @if (!Preview)
    {
        <div>
            <AeFlex Vertical="true">
                <div>
                    @if (!_showAll)
                    {
                        <AeButton class="light" @onclick=@ToggleShowAll>@Localizer["METADATA-PAGE.ShowMore"]</AeButton>
                    }
                    else
                    {
                        <AeButton class="light" @onclick=@ToggleShowAll>@Localizer["METADATA-PAGE.ShowLess"]</AeButton>
                    }
                </div>
                <div style="margin-top: 16px">
                    <AeButton OnClickEvent=@SaveChanges Disabled=@_disableSave>@SaveButtonLabel</AeButton>
                </div>
            </AeFlex>
            <div>
                @if (_savingData)
                {
                    <Spinner Small=@true/>
                }
            </div>
        </div>
    }
}
</div>

@code {

    [Inject]
    public IMetadataBrokerService MetadataBrokerService { get; set; }

    /// <summary>
    /// Object ID to edit or add metadata
    /// </summary>
    [Parameter]
    public string ObjectId { get; set; }

    [Parameter]
    public string SaveButtonLabel { get; set; } = "Save";

    [Parameter]
    public bool ValidateRequired { get; set; } = true;

    [Parameter]
    public bool Preview { get; set; }

    [Parameter]
    public EventCallback<FieldValueContainer> OnSave{ get; set; }

    private FieldDefinitions _definitions;
    private FieldValueContainer _fieldValues;
    private bool _showAll;
    private bool _savingData;
    private bool _disableSave = true;

    private HashSet<string> _requiredFields = new() 
    {
        "collection",
        "title_translated_en",
        "title_translated_fr",
        "owner_org",
        "notes_translated_en",
        "notes_translated_fr",
        "keywords_en",
        "keywords_fr",
        "subject",
        "frequency",
        "date_published",
        "jurisdiction",
        //"license_id",
        "restrictions"
    };

    private HashSet<string> _hiddenFields = new() 
    { 
        "imso_approval", 
        "ready_to_publish" 
    };

    protected override async Task OnInitializedAsync()
    {
        _fieldValues = await MetadataBrokerService.GetObjectMetadataValues(ObjectId);
        _definitions = _fieldValues.Definitions;
        _disableSave = !CheckRequiredFieldValues();
    }

    public string GetTitle()
    {
        return _fieldValues["title_translated_en"]?.Value_TXT ?? string.Empty;
    }

    public void TogglePreview()
    {
        Preview = !Preview;
    }

    private bool CheckRequiredFieldValues()
    {
        return !ValidateRequired || _fieldValues?.ValidateRequired(IsFieldRequired) == true;
    }

    private bool IsFieldRequired(FieldDefinition field)
    {
        return _requiredFields.Contains(field.Field_Name_TXT);
    }

    private async Task SaveChanges()
    {
        _savingData = true;
        try
        {
            await MetadataBrokerService.SaveMetadata(_fieldValues);
            await OnSave.InvokeAsync(_fieldValues);
        }
        finally
        {
            _savingData = false;
        }
        //await InvokeAsync(StateHasChanged);
    }

    private void FieldChanged()
    {
        _disableSave = !CheckRequiredFieldValues();
    }

    private void ToggleShowAll()
    {
        _showAll = !_showAll;
    }
}
