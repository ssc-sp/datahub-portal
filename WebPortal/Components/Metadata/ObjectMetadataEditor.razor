@*ObjectMetadataEditor.razor*@
@using Datahub.Metadata.Model
@using Datahub.Metadata.DTO
@using Datahub.Metadata.Utils;

<div style="width: 100%">
@if (_fieldValues != null)
{
    <MetadataEditor Preview=@Preview
                    Profile=@_profile
                    Definitions=@_definitions
                    FieldValues=@_fieldValues
                    ShowAll=@_showAll
                    OnFieldChanged=@FieldChanged />

    @if (!Preview)
    {
        <div>
            <AeFlex Vertical="true">
                <div>
                    <AeButton class="light" @onclick=@ToggleShowAll>
                        @(_showAll ? Localizer["METADATA-PAGE.ShowLess"] : Localizer["METADATA-PAGE.ShowMore"])
                    </AeButton>
                </div>
                <div style="margin-top: 16px">
                    <AeButton OnClickEvent=@SaveChanges Disabled=@_disableSave>@SaveButtonLabel</AeButton>
                </div>
            </AeFlex>
            <div>
                @if (_savingData)
                {
                    <Spinner Small=@true/>
                }
            </div>
        </div>
    }
}
</div>

@code {

    [Inject]
    public IMetadataBrokerService MetadataBrokerService { get; set; }

    [Inject]
    public IOrganizationLevelsService OrganizationLevelsService { get; set; }

    /// <summary>
    /// Object ID to edit or add metadata
    /// </summary>
    [Parameter]
    public string ObjectId { get; set; }

    [Parameter]
    public string ProfileName { get; set; } = "opendata";

    [Parameter]
    public string SaveButtonLabel { get; set; } = "Save";

    [Parameter]
    public bool ValidateRequired { get; set; } = true;

    [Parameter]
    public bool Preview { get; set; }

    [Parameter]
    public EventCallback<FieldValueContainer> OnSave{ get; set; }

    private FieldDefinitions _definitions;
    private MetadataProfile _profile;

    private FieldValueContainer _fieldValues;
    private bool _showAll;
    private bool _savingData;
    private bool _disableSave = true;

    private HashSet<int> _requiredFieldIds = new();

    protected override async Task OnInitializedAsync()
    {
        _fieldValues = await MetadataBrokerService.GetObjectMetadataValues(ObjectId);
        _profile = await MetadataBrokerService.GetProfile(ProfileName);

        _definitions = _fieldValues.Definitions;
        _disableSave = !CheckRequiredFieldValues();

        _requiredFieldIds = _profile.GetRequiredFieldSet();

        await UpdateExternalFieldChoices();
    }

    public string GetTitle()
    {
        return _fieldValues["title_translated_en"]?.Value_TXT ?? string.Empty;
    }

    public void TogglePreview()
    {
        Preview = !Preview;
    }

    private bool CheckRequiredFieldValues()
    {
        return !ValidateRequired || _fieldValues?.ValidateRequired(IsFieldRequired) == true;
    }

    private bool IsFieldRequired(FieldDefinition field)
    {
        return _requiredFieldIds.Contains(field.FieldDefinitionId);
    }

    private async Task SaveChanges()
    {
        _savingData = true;
        try
        {
            await MetadataBrokerService.SaveMetadata(_fieldValues);
            await OnSave.InvokeAsync(_fieldValues);
        }
        finally
        {
            _savingData = false;
        }
    }

    private void FieldChanged()
    {
        _disableSave = !CheckRequiredFieldValues();
    }

    private void ToggleShowAll()
    {
        _showAll = !_showAll;
    }

    private async Task UpdateExternalFieldChoices()
    {
        foreach (var definition in _definitions.Fields)
        {
            switch (definition.Field_Name_TXT)
            {
                case "sector":
                    definition.Choices = GetOrganizationChoices(await OrganizationLevelsService.GetSectors(), false);
                    break;
                case "branch":
                    definition.Choices = GetOrganizationChoices(await OrganizationLevelsService.GetBranches(), true);
                    break;
                case "division":
                    definition.Choices = GetOrganizationChoices(await OrganizationLevelsService.GetDivisions(), true);
                    break;
                case "section":
                    definition.Choices = GetOrganizationChoices(await OrganizationLevelsService.GetSections(), true);
                    break;
            }
        }
    }

    private List<FieldChoice> GetOrganizationChoices(List<OrganizationLevel> levels, bool cascades)
    {
        return levels.Select(l => new FieldChoice()
        {
            Value_TXT = $"{l.Id}",
            Cascading_Value_TXT = cascades ? $"{l.ParentId}" : null,
            Label_English_TXT = l.EnglishLabel,
            Label_French_TXT = l.FrenchLabel
        }).ToList();
    }
}
