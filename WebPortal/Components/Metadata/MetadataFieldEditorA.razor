@using NRCan.Datahub.Metadata

<AeFlex Vertical="false">
    <!-- key -->
    <div class="metadata-key" style="width: 200px; margin: 2px; flex-grow: 1;">
        @if (HeaderRole)
        {
            <strong>Field</strong>
        }
        else
        {
            <div class="customuserinput">
                <select class="metadata-key-dropdown"
                        @bind="FieldId"
                        style="width: 100%">

                    <option value=""></option>

                    @foreach (var definition in Definitions.Fields)
                    {
                        <option value="@definition.FieldDefinitionId">@definition.Name</option>
                    }

                </select>
            </div>
        }
    </div>

    <!-- value -->
    <div class="metadata-value" style="width: 300px; margin: 2px; flex-grow: 1;">
        @if (HeaderRole)
        {
            <strong>Value</strong>
        }
        else
        {
            <div class="customuserinput">
                <input type="text"
                       @bind="BoundValue"
                       @ref="FieldValueInput"
                       style="width: 100%" />
            </div>
        }
    </div>

    <!-- button -->
    <div class="metadata-button" style="width: 30px; margin: 2px; flex-grow: 0;">
        @if (HeaderRole || !FieldNameSelected())
        {
            // leave empty
        }
        else
        {
            <div class="roundbutton" @onclick="OnFieldDeleted">
                <i class="fal fa-trash-alt"></i>
            </div>
        }
    </div>
</AeFlex>

@code {

    [Parameter]
    public bool HeaderRole { get; set; }

    [Parameter]
    public FieldValue FieldValue { get; set; }

    [Parameter]
    public MetadataDefinition Definitions { get; set; }

    [Parameter]
    public EventCallback<FieldValue> OnDeleted { get; set; }

    [Parameter]
    public EventCallback<FieldValue> OnFieldChanged { get; set; }

    private ElementReference FieldValueInput;

    private string FieldId
    {
        get => FieldValue.DefinitionId;
        set
        {
            if (value != FieldValue.DefinitionId)
            {
                FieldValue.DefinitionId = value;
                OnFieldChanged.InvokeAsync(FieldValue);
                FieldValueInput.FocusAsync();
            }
        }
    }

    private string BoundValue
    {
        get => FieldValue.Value;
        set
        {
            if (value != FieldValue.Value)
            {
                FieldValue.Value = value;
                OnFieldChanged.InvokeAsync(FieldValue);
            }
        }
    }

    private async Task OnFieldDeleted()
    {
        await OnDeleted.InvokeAsync(FieldValue);
    }

    private bool FieldNameSelected() => !string.IsNullOrEmpty(FieldValue?.DefinitionId);
}
