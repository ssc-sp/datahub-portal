@using Datahub.Metadata.Model

<div style="margin-bottom: 16px;">

    <AeFlex Vertical="true">
    
        <!-- field name -->
        <div>
            <div>
                <AeTypography style="cursor: pointer;">
                    @if (!Preview && Required && FieldValueEmpty)
                    {
                        <strong style="color: red">*&nbsp;</strong>
                    }
                    <strong><span @onclick="SelectField" title=@FieldDefinition.Description>@FieldDefinition.Name</span></strong>

                    @if (CanAcceptTranslation())
                    {
                        <AeButton style="float: right" title=@GetTranslationHint() @onclick=@HandleTranslateField Disabled=@TranslatePairDisabled()>
                            <i class="fa fa-language" aria-hidden="true"></i>
                        </AeButton>
                    }
                </AeTypography>

                <AeTypography style="font-size: 0.8em;">
                    @FieldDefinition.Description
                </AeTypography>
            </div>
        </div>

        <!-- value -->
        <div>
            <div class="customuserinput">
                @if (Preview)
                {
                    _fieldType = FieldType.Preview;
                    <span style="font-weight: bold; font-size: 0.9em;">
                        @(!FieldDefinition.HasChoices ? BoundValue : ChoiceDisplay)
                    </span>
                }
                else
                {
                    var fieldChoices = GetChoices();
                    if (fieldChoices.Count == 0) //(!FieldDefinition.HasChoices)
                    {
                        if (IsKeywordField())
                        {
                            _fieldType = FieldType.Keyword;
                            <KeywordInput @ref="_keywordInputRef" 
                                          FieldValue="FieldValue" 
                                          English="@IsEnglishField()"
                                          Subject="@Subject"
                                          FieldPair=@FieldPair
                                          OnFieldChanged="OnFieldChanged" />
                        }
                        else
                        {
                            _fieldType = FieldType.Input;
                            <input class="ae input"
                                   type="@InputFieldType"
                                   @bind="BoundValue"
                                   @ref="_fieldValueInput"
                                   disabled="@Preview"
                                   style="@FieldStyle" />
                        }
                    }
                    else
                    {
                        if (!FieldDefinition.MultiSelect_FLAG)
                        {
                            _fieldType = FieldType.SingleChoice;

                            var oneChoice = FieldDefinition.Choices.Count == 1;
                            var allowEmptyOption = !oneChoice && string.IsNullOrEmpty(FieldDefinition.Default_Value_TXT);
                            
                            <select class="ae input"
                                    style="@FieldStyle"
                                    disabled=@oneChoice
                                    @bind="BoundValue"
                                    @ref="_fieldValueInput">

                                @if (allowEmptyOption)
                                {
                                    <option value=""></option>
                                }

                                @foreach (var choice in fieldChoices)
                                {
                                    <option value="@choice.Value_TXT">@choice.Label</option>
                                }
                            </select>
                        }
                        else
                        {
                            _fieldType = FieldType.MultipleChoice;
                            <MultiSelectList FieldDefinition="FieldDefinition" 
                                             FieldValue="FieldValue" 
                                             OnFieldChanged="OnFieldChanged" />
                        }
                    }
                }
            </div>
        </div>

    </AeFlex>

</div>

@code {

    [Inject]
    public TranslationService _translationService { get; set; }

    [Parameter]
    public bool Required { get; set; }

    [Parameter]
    public bool Preview { get; set; }

    [Parameter]
    public ObjectFieldValue FieldValue { get; set; }

    [Parameter]
    public FieldDefinition FieldDefinition { get; set; }

    [Parameter]
    public string FieldLabel { get; set; }

    [Parameter]
    public string Subject { get; set; }

    [Parameter]
    public TranslatedFieldPair FieldPair { get; set; }

    [Parameter]
    public EventCallback<ObjectFieldValue> OnFieldChanged { get; set; }

    [Parameter]
    public string CascadingValue { get; set; }

    private string BoundValue
    {
        get => FieldValue.Value_TXT;
        set
        {
            if (value != FieldValue.Value_TXT)
            {
                FieldValue.Value_TXT = value;
                OnFieldChanged.InvokeAsync(FieldValue);
            }
        }
    }

    private string ChoiceDisplay => !FieldDefinition.MultiSelect_FLAG ? GetChoiceLabel(FieldValue.Value_TXT) : GetMultiChoiceLabels(FieldValue.Value_TXT);

    private string FieldStyle => "width: 100%;";
    private string InputFieldType => FieldDefinition.IsDateField ? "date" : "text";

    private bool FieldValueEmpty => string.IsNullOrEmpty(BoundValue);

    enum FieldType
    {
        Preview,
        Input,
        Keyword,
        SingleChoice,
        MultipleChoice
    }

    private FieldType _fieldType;
    private KeywordInput _keywordInputRef;
    private ElementReference _fieldValueInput;

    private string _cascadingValue;

    protected override void OnInitialized()
    {
        base.OnInitialized();
        _cascadingValue = CascadingValue;
    }

    protected override async Task OnParametersSetAsync()
    {
        if (_cascadingValue != CascadingValue)
        {
            _cascadingValue = CascadingValue;
            if (!string.IsNullOrEmpty(FieldValue.Value_TXT))
            {
                FieldValue.Value_TXT = string.Empty;
                await OnFieldChanged.InvokeAsync(FieldValue);
            }
        }
    }

    private string GetChoiceLabel(string name)
    {
        return FieldDefinition.Choices.FirstOrDefault(c => c.Value_TXT == name)?.Label;
    }

    private string GetMultiChoiceLabels(string values)
    {
        var labels = (values ?? string.Empty).Split('|').Select(GetChoiceLabel);
        // it is better to display it separated by comas
        return string.Join(", ", labels); 
    }

    private void ClearField()
    {
        BoundValue = string.Empty;
        SelectField();
    }

    private async void SelectField()
    {
        if (_fieldType == FieldType.Input)
            await _fieldValueInput.FocusAsync();

        if (_fieldType == FieldType.Keyword)
            await _keywordInputRef.FocusAsync();
    }

    private bool IsKeywordField()
    {
        return FieldDefinition.Field_Name_TXT.StartsWith("keywords_");
    }

    private bool IsEnglishField()
    {
        return FieldDefinition.Field_Name_TXT.EndsWith("_en");
    }

    private bool CanAcceptTranslation()
    {
        if (Preview || IsKeywordField())
            return false;

        return FieldPair?.GetPaired(FieldValue) is not null;
    }

    private bool TranslatePairDisabled()
    {
        var otherField = FieldPair?.GetPaired(FieldValue);
        return string.IsNullOrEmpty(otherField?.Value_TXT);
    }

    private string GetTranslationHint()
    {
        var otherField = FieldPair?.GetPaired(FieldValue);
        var message = Localizer["Suggest translation for:"];
        return $"{message} \"{otherField?.Value_TXT}\"";
    }

    private async void HandleTranslateField()
    {
        try
        {
            var pairedText = FieldPair?.GetPaired(FieldValue)?.Value_TXT;
            if (!string.IsNullOrEmpty(pairedText))
            {
                var translation = IsEnglishField() 
                    ? await _translationService.GetEnglishTranslation(pairedText)
                    : await _translationService.GetFrenchTranslation(pairedText);

                FieldValue.Value_TXT = translation ?? FieldValue.Value_TXT;

                await OnFieldChanged.InvokeAsync(FieldValue);
                await InvokeAsync(SelectField);
            }
        }
        catch (Exception)
        {
        }
    }

    private List<FieldChoice> GetChoices()
    {
        return FieldDefinition.Choices.Where(c => c.Cascading_Value_TXT == CascadingValue).ToList();
    }
}