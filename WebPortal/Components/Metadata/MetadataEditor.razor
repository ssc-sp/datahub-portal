@*MetadataEditor.razor*@
@using Datahub.Metadata.Model
@using Datahub.Metadata.DTO

@if (Definitions != null && FieldValues != null)
{
    var translationNote = new MarkupString(Localizer["METADATA-PAGE.TranslationNote"]);
    
    var displayFields = Preview ? Definitions.Fields : EnumerateFields(!ShowAll);

    <div>
        @if (!Preview)
        {
            <div>
                <AeTypography Variant="p" style="color: #57C4EC;">
                    <i class="fa fa-language" aria-hidden="true"></i>&nbsp;@translationNote
                </AeTypography>               
            </div>
        }

        @foreach (var definition in displayFields)
        {
            // skip id & name fields (hidden fields)
            if (!IsValidDefinition(definition))
                continue;

            var fieldValue = GetFieldValue(definition, Preview);
            var fieldPair = _fieldPairs.BindField(definition.Field_Name_TXT, fieldValue);

            if (fieldValue != null)
            {
                <MetadataFieldEditor Preview=@Preview
                                     Required="IsFieldRequired(definition)"
                                     FieldValue=@fieldValue
                                     FieldDefinition=@definition
                                     FieldLabel=@definition.Name
                                     Subject=@_subject
                                     FieldPair=@fieldPair
                                     OnFieldChanged=@FieldChanged />
            }
        }

    </div>       
}

@code {

    [Parameter]
    public bool Preview { get; set; }

    [Parameter]
    public FieldDefinitions Definitions { get; set; }

    [Parameter]
    public HashSet<string> RequiredFields { get; set; }

    [Parameter]
    public HashSet<string> HiddenFields { get; set; }

    [Parameter]
    public FieldValueContainer FieldValues { get; set; }

    [Parameter]
    public bool ShowAll { get; set; }

    [Parameter]
    public EventCallback<ObjectFieldValue> OnFieldChanged { get; set; }

    private HashSet<int> _modifedFieldIds = new HashSet<int>();

    private int? _subjectFieldId;
    private string _subject { get; set; }

    private TranslatedFieldPairs _fieldPairs;

    protected override void OnInitialized()
    {
        _fieldPairs = new TranslatedFieldPairs();
    }

    protected override void OnParametersSet()
    {
        _subjectFieldId = Definitions?.Get("subject")?.FieldDefinitionId;
        _subject = FieldValues?.FirstOrDefault(f => f.FieldDefinitionId == _subjectFieldId)?.Value_TXT;
    }

    private async Task FieldChanged(ObjectFieldValue field)
    {
        _modifedFieldIds.Add(field.FieldDefinitionId);

        if (string.IsNullOrEmpty(field.Value_TXT))
        {
            FieldValues.Remove(field);
        }
        else if (!FieldValues.Contains(field))
        {
            FieldValues.Add(field);
        }

        UpdateIfSubject(field);

        await OnFieldChanged.InvokeAsync(field);
    }

    private void UpdateIfSubject(ObjectFieldValue value)
    {
        if (_subjectFieldId.HasValue && _subjectFieldId.Value == value.FieldDefinitionId)
        {
            _subject = value.Value_TXT;
            StateHasChanged();
        }
    }

    private ObjectFieldValue GetFieldValue(FieldDefinition definition, bool preview)
    {
        var field = FieldValues.FirstOrDefault(f => f.FieldDefinitionId == definition.FieldDefinitionId);
        if (!preview && field is null)
        {
            var value = !string.IsNullOrEmpty(definition.Default_Value_TXT) ? definition.Default_Value_TXT : GetSingleChoiceValue(definition);

            field = new ObjectFieldValue() 
            { 
                FieldDefinitionId = definition.FieldDefinitionId, 
                Value_TXT = value
            };

            if (!string.IsNullOrEmpty(value))
            {
                FieldValues.Add(field);
            }
        }
        return field;
    }

    private string GetSingleChoiceValue(FieldDefinition definition)
    {
        return definition.HasChoices && !definition.MultiSelect_FLAG && definition.Choices.Count == 1 
            ? definition.Choices.First().Value_TXT 
            : null;
    }

    private IEnumerable<FieldDefinition> EnumerateFields(bool required)
    {
        // filter the hidden fields
        var fields = Definitions.Fields.Where(IsNotHiddenField).ToList();
        var selected = new HashSet<FieldDefinition>();

        // required fields
        foreach (var field in fields.Where(IsFieldRequired))
        {
            selected.Add(field);
            yield return field;
        }

        // non-required but modifed fields
        if (!required)
        {
            foreach (var field in fields.Where(f => !selected.Contains(f)))
            {
                yield return field;
            }
        }
    }

    private bool IsNotHiddenField(FieldDefinition definition) => HiddenFields?.Contains(definition.Field_Name_TXT) != true; 

    private bool IsFieldRequired(FieldDefinition definition)
    {
        var required = RequiredFields?.Contains(definition.Field_Name_TXT);
        return required.HasValue ? required.Value : definition.Required_FLAG;
    }

    private bool IsFieldModified(FieldDefinition definition)
    {
        return _modifedFieldIds.Contains(definition.FieldDefinitionId) || FieldValues.Any(f => definition.FieldDefinitionId == f.FieldDefinitionId);
    }

    static bool IsValidDefinition(FieldDefinition field)
    {
        return !string.IsNullOrWhiteSpace(field.Field_Name_TXT) && !string.IsNullOrWhiteSpace(field.Name_English_TXT);
    }
}