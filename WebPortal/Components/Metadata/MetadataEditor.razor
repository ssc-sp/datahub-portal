@*MetadataEditor.razor*@
@using Datahub.Metadata.Model
@using Datahub.Metadata.DTO
@using Datahub.Metadata.Utils

@if (Definitions != null && FieldValues != null && Profile != null)
{
    var translationNote = new MarkupString(Localizer["METADATA-PAGE.TranslationNote"]);
    
    <div>
        @if (!Preview)
        {
            <div>
                <AeTypography Variant="p" style="color: #57C4EC;">
                    <i class="fa fa-language" aria-hidden="true"></i>&nbsp;@translationNote
                </AeTypography>               
            </div>
        }

        @foreach (var s in Profile.Sections)
        {
            if (Profile.Sections.Count > 1)
            {
                <div style="border-bottom: 1px solid #edf2f7; margin-bottom: 16px;">
                    <AeTypography Variant="h4">@s.Name</AeTypography>
                </div>
            }

            var sectionDefinitions = EnumerateFields(s, !ShowAll);
            @foreach (var definition in sectionDefinitions)
            {
                // skip id & name fields (hidden fields)
                if (!IsValidDefinition(definition))
                    continue;

                var fieldValue = GetFieldValue(definition, Preview);

                if (fieldValue != null)
                {
                    var fieldPair = _fieldPairs.BindField(definition.Field_Name_TXT, fieldValue);
                    <MetadataFieldEditor 
                        @key=@fieldValue
                        Preview=@Preview
                        Required="IsFieldRequired(definition)"
                        FieldValue=@fieldValue
                        FieldDefinition=@definition
                        FieldLabel=@definition.Name
                        Subject=@_subject
                        FieldPair=@fieldPair
                        CascadingValue=@GetCascadingValue(definition)
                        OnFieldChanged=@FieldChanged 
                    />
                }
            }
        }

    </div>       
}

@code {

    [Parameter]
    public bool Preview { get; set; }

    [Parameter]
    public FieldDefinitions Definitions { get; set; }

    [Parameter]
    public MetadataProfile Profile { get; set; }

    [Parameter]
    public FieldValueContainer FieldValues { get; set; }

    [Parameter]
    public bool ShowAll { get; set; }

    [Parameter]
    public EventCallback<ObjectFieldValue> OnFieldChanged { get; set; }

    private HashSet<int> _requiredFieldIds = new(); 

    private int? _subjectFieldId;
    private string _subject { get; set; }

    private TranslatedFieldPairs _fieldPairs;

    protected override void OnInitialized()
    {
        _fieldPairs = new TranslatedFieldPairs();
        _requiredFieldIds = Profile.GetRequiredFieldSet();
    }

    protected override void OnParametersSet()
    {
        _subjectFieldId = Definitions?.Get("subject")?.FieldDefinitionId;
        _subject = FieldValues?.FirstOrDefault(f => f.FieldDefinitionId == _subjectFieldId)?.Value_TXT;
    }

    private async Task FieldChanged(ObjectFieldValue field)
    {
        if (string.IsNullOrEmpty(field.Value_TXT))
        {
            FieldValues.Remove(field);
        }
        else if (!FieldValues.Contains(field))
        {
            FieldValues.Add(field);
        }

        UpdateIfSubject(field);

        await OnFieldChanged.InvokeAsync(field);
    }

    private void UpdateIfSubject(ObjectFieldValue value)
    {
        if (_subjectFieldId.HasValue && _subjectFieldId.Value == value.FieldDefinitionId)
        {
            _subject = value.Value_TXT;
            StateHasChanged();
        }
    }

    private ObjectFieldValue GetFieldValue(FieldDefinition definition, bool preview)
    {
        var field = FieldValues.FirstOrDefault(f => f.FieldDefinitionId == definition.FieldDefinitionId);
        if (!preview && field is null)
        {
            var value = !string.IsNullOrEmpty(definition.Default_Value_TXT) ? definition.Default_Value_TXT : GetSingleChoiceValue(definition);

            field = new ObjectFieldValue() 
            { 
                FieldDefinitionId = definition.FieldDefinitionId, 
                Value_TXT = value
            };

            if (!string.IsNullOrEmpty(value))
            {
                FieldValues.Add(field);
            }
        }
        return field;
    }

    private string GetCascadingValue(FieldDefinition definition)
    {
        return FieldValues.FirstOrDefault(f => f.FieldDefinitionId == definition.CascadeParentId)?.Value_TXT;
    }

    private string GetSingleChoiceValue(FieldDefinition definition)
    {
        return definition.HasChoices && !definition.MultiSelect_FLAG && definition.Choices.Count == 1 
            ? definition.Choices.First().Value_TXT 
            : null;
    }

    private IEnumerable<FieldDefinition> EnumerateFields(MetadataSection section, bool required)
    {
        HashSet<int> requiredSet = section.GetRequiredFieldSet();
        HashSet<int> optionalSet = section.GetNotRequiredFieldSet();

        var fields = Definitions.Fields.Where(f => requiredSet.Contains(f.FieldDefinitionId)).ToList();

        // required fields
        foreach (var field in fields)
        {
            yield return field;
        }

        // non-required but modifed fields
        if (!required)
        {
            foreach (var field in Definitions.Fields.Where(f => optionalSet.Contains(f.FieldDefinitionId)))
            {
                yield return field;
            }
        }
    }

    private bool IsFieldRequired(FieldDefinition definition) => _requiredFieldIds.Contains(definition.FieldDefinitionId);

    static bool IsValidDefinition(FieldDefinition field)
    {
        return !string.IsNullOrWhiteSpace(field.Field_Name_TXT) && !string.IsNullOrWhiteSpace(field.Name_English_TXT);
    }
}