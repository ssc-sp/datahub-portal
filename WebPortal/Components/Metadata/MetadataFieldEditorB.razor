@using NRCan.Datahub.Metadata
@using NRCan.Datahub.Metadata.Model

<AeFlex Vertical="false" style="margin-top: 10px;">
    <!-- key -->
    <div class="metadata-key" style="width: 200px; margin: 2px; flex-grow: 1;">
        @if (HeaderRole)
        {
            <AeTypography><strong>Field</strong></AeTypography>
        }
        else
        {
            <div class="_customuserinput" @onclick="SelectField">
                <AeTypography style="cursor: pointer;">
                    @if (!Preview && FieldDefinition.Required_FLAG && FieldValueEmpty)
                    {
                        <strong style="color: red">*&nbsp;</strong>
                    }
                    @FieldDefinition.Name
                </AeTypography>
            </div>
        }
    </div>

    <!-- value -->
    <div class="metadata-value" style="width: 300px; margin: 2px; flex-grow: 1;">
        @if (HeaderRole)
        {
            <AeTypography><strong>Value</strong></AeTypography>
        }
        else
        {
            <div class="customuserinput">
                @if (Preview)
                {
                    if (!FieldDefinition.HasChoices)
                    {
                        <span>@BoundValue</span>
                    }
                    {
                        <span>@ChoiceDisplay</span>
                    }
                }
                else
                {
                    if (!FieldDefinition.HasChoices)
                    {
                        <input class="ae input"
                               type="text"
                               @bind="BoundValue"
                               @ref="FieldValueInput"
                               disabled="@Preview"
                               style="@FieldStyle" />
                    }
                    else
                    {
                        if (!FieldDefinition.MultiSelect_FLAG)
                        {
                            <select class="ae input"
                                    style="@FieldStyle"
                                    @bind="BoundValue"
                                    @ref="FieldValueInput">

                                <option value=""></option>

                                @foreach (var choice in FieldDefinition.Choices)
                                {
                                    <option value="@choice.Value_TXT">@choice.Label</option>
                                }
                            </select>
                        }
                        else
                        {
                            <MultiSelectList FieldDefinition="FieldDefinition" FieldValue="FieldValue" OnFieldChanged="OnFieldChanged" />
                        }
                    }
                }
            </div>
        }
    </div>

    <!-- button -->
    @*<div class="metadata-button" style="width: 30px; margin: 2px; flex-grow: 0;">
            @if (HeaderRole || Preview)
            {
                // leave empty
            }
            else
            {
                <div class="roundbutton" @onclick="ClearField">
                    <i class="fal fa-trash-alt"></i>
                </div>
            }
        </div>*@

</AeFlex>

@code {

    [Parameter]
    public bool HeaderRole { get; set; }

    [Parameter]
    public bool Preview { get; set; }

    [Parameter]
    public FieldValue FieldValue { get; set; }

    [Parameter]
    public FieldDefinition FieldDefinition { get; set; }

    [Parameter]
    public string FieldLabel { get; set; }

    [Parameter]
    public bool Mandatory { get; set; }

    [Parameter]
    public EventCallback<FieldValue> OnFieldChanged { get; set; }

    private ElementReference FieldValueInput;

    private string BoundValue
    {
        get => FieldValue.Value;
        set
        {
            if (value != FieldValue.Value)
            {
                FieldValue.Value = value;
                OnFieldChanged.InvokeAsync(FieldValue);
            }
        }
    }

    private string ChoiceDisplay => !FieldDefinition.MultiSelect_FLAG ? GetChoiceLabel(FieldValue.Value) : GetMultiChoiceLabels(FieldValue.Value);

    const string MandatoryField = "border: 0; width: 100%; background-color: rgb(255, 235, 230);";
    const string OptionalField = "border: 0; width: 100%;";

    //private string FieldStyle => Mandatory && FieldValueEmpty ? MandatoryField : OptionalField;
    private string FieldStyle => "width: 100%;";

    private bool FieldValueEmpty => string.IsNullOrEmpty(BoundValue);

    private string GetChoiceLabel(string name)
    {
        return FieldDefinition.Choices.FirstOrDefault(c => c.Value_TXT == name)?.Label;
    }

    private string GetMultiChoiceLabels(string values)
    {
        var labels = (values ?? string.Empty).Split('|').Select(GetChoiceLabel);
        return string.Join("|", labels);
    }

    private void ClearField()
    {
        BoundValue = string.Empty;
        SelectField();
    }

    private async void SelectField()
    {
        if (!Preview && !FieldDefinition.HasChoices)
            await FieldValueInput.FocusAsync();
    }
}

