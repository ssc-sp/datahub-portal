@using NRCan.Datahub.Metadata

@if (Definitions != null && FieldValues != null)
{
    <AeTable T="RowData"
             RowHeight="40"
             Renderers="renderFunctions"
             Accessors="accessorFunctions"
             Dataset="GetRows()"
             Headers="Headers" />
}

@code {
    [Parameter]
    public bool Preview { get; set; }

    [Parameter]
    public MetadataDefinition Definitions { get; set; }

    [Parameter]
    public FieldValues FieldValues { get; set; }

    [Parameter]
    public EventCallback<FieldValue> OnFieldChanged { get; set; }

    protected override void OnInitialized()
    {
        base.OnInitialized();
    }

    private List<string> Headers => new List<string> { "Field", "Value" };

    private List<Func<RowData, string>> accessorFunctions = new List<Func<RowData, string>>
    {
        new Func<RowData, string>(r => { return r.Label; }),
        new Func<RowData, string>(r => { return r.FieldId; }),
    };

    private List<RowData> GetRows()
    {
        return Definitions.Fields.Select(f => new RowData()
        {
            Label = f.Name,
            FieldId = f.FieldName
        }).ToList();
    }

    private List<Func<RowData, RenderFragment>> renderFunctions = new List<Func<RowData, RenderFragment>>
    {
        null,
        new Func<RowData, RenderFragment>(dummyData =>
        {
            return @<input style="width: 100%" />; 
        })
    };

    class RowData
    {
        public string Label { get; set; }
        public string FieldId { get; set; }
    }


    private async Task FieldChanged(FieldValue field)
    {
        if (!FieldValues.Contains(field))
        {
            FieldValues.Add(field);
        }
        await OnFieldChanged.InvokeAsync(field);
    }

    private FieldValue GetFieldValue(string definitionId, bool preview)
    {
        var field = FieldValues.FirstOrDefault(f => f.DefinitionId == definitionId);
        if (!preview)
            return field ?? new FieldValue() { DefinitionId = definitionId };
        else
            return field;
    }
}
