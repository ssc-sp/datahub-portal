@inject UIControlsService UI

<FileGridMenuButton IconClass="far fa-trash-alt" Enabled="ItemOwned" OnClick="DeleteRow">
    @Localizer["Delete"]
</FileGridMenuButton>

<FileGridMenuButton IconClass="far fa-cloud-download" Enabled="IsFile" OnClick="DownloadFile">
    @Localizer["Download"]
</FileGridMenuButton>

@if (IsProject)
{
    <FileGridMenuButton IconClass="far fa-share-square" Enabled="IsFile" OnClick="Share">
        @Localizer["Share"]
    </FileGridMenuButton>
}

<FileGridMenuButton IconClass="far fa-info-circle" Enabled="IsFile" OnClick="OpenDetails">
    @Localizer["ViewDetails"]
</FileGridMenuButton>

@if (!IsProject)
{
    <FileGridMenuButton IconClass="fal fa-arrow-to-right" Enabled=@(ItemOwned && IsFile) OnClick="MoveTo">
        @Localizer["MoveTo"]
    </FileGridMenuButton>

    <FileGridMenuButton IconClass="fal fa-pencil" Enabled="ItemOwned" OnClick="Rename">
        @Localizer["Rename"]
    </FileGridMenuButton>

    <FileGridMenuButton IconClass="far fa-link" Enabled=@(ItemOwned && IsFile) OnClick="OpenManageAccess">
        @Localizer["ManageAccess"]
    </FileGridMenuButton>

    <FileGridMenuButton IconClass="far fa-folder-plus" Enabled=@(!IsSearchedData) OnClick="CreateFolder">
        @Localizer["CreateFolder"]
    </FileGridMenuButton>
}

<FileGridMenuButton IconClass="far fa-cloud-upload" Enabled="CanAddData" OnClick="ToggleAddData">
    <strong>@Localizer["FILE-GRID-PAGE.AddData"]</strong>
</FileGridMenuButton>

@if (IsProject)
{
    <FileGridMenuButton IconClass="far fa-info-circle" Enabled="true" OnClick="ToggleStorageDetails">
        @(ShowingStorage ? Localizer["HideStorageDetails"] : Localizer["ShowStorageDetails"])
    </FileGridMenuButton>
}

@code {

    [Parameter]
    public EventCallback<MenuActions> PerformMenuAction { get; set; }

    [Parameter]
    public BaseMetadata SelectedItem { get; set; } = null;

    [Parameter]
    public bool IsSearchedData { get; set; } = false;

    [Parameter]
    public string CurrentUser { get; set; }

    [Parameter]
    public string Project { get; set; }

    [Parameter]
    public bool CanAddData { get; set; }

    [Parameter]
    public bool ShowingStorage { get; set; } = true;

    private Task DeleteRow() => PerformMenuAction.InvokeAsync(MenuActions.DeleteRow);

    private Task DownloadFile() => PerformMenuAction.InvokeAsync(MenuActions.DownloadFile);

    private Task ToggleStorageDetails() => PerformMenuAction.InvokeAsync(MenuActions.ToggleStorageDetails);

    private Task OpenDetails() => PerformMenuAction.InvokeAsync(MenuActions.OpenDetails);
    
    private Task OpenVersions() => PerformMenuAction.InvokeAsync(MenuActions.OpenVersions);
    
    private Task OpenManageAccess() => PerformMenuAction.InvokeAsync(MenuActions.OpenManageAccess);
    
    private Task CreateFolder() => PerformMenuAction.InvokeAsync(MenuActions.CreateFolder);
    
    private Task MoveTo() => PerformMenuAction.InvokeAsync(MenuActions.MoveTo);
    
    private Task Rename() => PerformMenuAction.InvokeAsync(MenuActions.Rename);
    
    private Task Share() => PerformMenuAction.InvokeAsync(MenuActions.ShareFile);

    private void ToggleAddData() => UI.ToggleRightSidebar(@<AddDataBar Project="@Project"/>);

    private bool ItemOwned => SelectedItem != null && SelectedItem.ownedby == CurrentUser;

    private bool IsFile => SelectedItem?.dataType == MetadataType.File;

    private bool IsProject => !string.IsNullOrEmpty(Project);
}
