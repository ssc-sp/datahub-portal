@*FileGrid.razor*@
@using System.Linq
@using Datahub.Core.Data
@inject IApiService ApiService
@inject IDataRetrievalService DataRetrievalService
@inject IDataRemovalService DataRemovalService
@inject IDataCreatorService DataCreatorService
@inject IDataUpdatingService DataUpdatingService
@inject IJSRuntime JSRuntime
@inject IMSGraphService MSGraphService
@inject IUserInformationService UserInformationService
@inject UIControlsService UI
@inject NotifierService NotifierService
@inject NavigationManager NavigationManager
@inject ICognitiveSearchService CognitiveSearchService

@if (RequiresHeader)
{
    <div class="header-wrapper" @onclick="UnSelectFiles" @onclick:preventDefault="true" @oncontextmenu="UnSelectFiles" @oncontextmenu:preventDefault="true">
        <h3 class="nrcan-typography h3"><i class="fal fa-folder-open"></i>&nbsp;@GetCurrentFolderPath()</h3>
        @if (CurrentFolder?.parent != null)
        {
            <div class="roundbutton" style="margin-right: 1rem" @onclick="() => GetParentFolder()">
                <i class="fal fa-arrow-left"></i>
            </div>
        }
    </div>
}

@if (isLoading)
{
    <Spinner />
}
else if (EmptySearch)
{
    <div class="search-results">
        <p>@Localizer["No results found"]</p>
    </div>
}
else
{
    @if (!_showingDetails)
    {
        <div class="fileListContainer" @onfocusout="UnSelectFiles">
            @if (IsProjectStorage)
            {
                if (_showStorageDetails && _storageMetadata != null)
                {
                    <div style="margin-bottom: 10px">
                        <StorageMetadataViewer Metadata=@_storageMetadata />
                    </div>
                }
            }

            <div class="file-grid-menu">
                <FileGridMenu SelectedItem="selectedMetaData"
                      CanAddData=@CanAddData
                      PerformMenuAction="(MenuActions m) => PerformMenuAction(m, selectedMetaData)"
                      IsSearchedData="@IsSearchResults"
                      CurrentUser="@CurrentUserId"
                      ShowingStorage=@_showStorageDetails
                      Project="@Project" />

                <AeSearchInput 
                    id="search"
                    SearchIconFAClass="fas fa-filter"
                    OnInputChangeWithLastKey=@HandleSearch 
                    style="margin-right: auto;"
                />
            </div>

            <FileGridHeader IsSharedFiles=@CurrentFolder.isShared SortAscending=@CurrentFolder.sortAscending ToggleSort="ToggleSort" IsSearchedData="IsSearchResults" />
            <div class=@FileGridClass>
                @foreach (var child in GetCurrentFolderChildren())
                {
                    var isSelected = !string.IsNullOrEmpty(child.id) && child.id == selectedMetaData?.id;
                    if (child.dataType == MetadataType.Folder)
                    {
                        <FileGridFolder 
                            Folder=@(child as Folder)
                            IsSelected=@isSelected
                            OnEllipsisClick="(e) => OnEllipsisClick(child as Folder, e)"
                            SelectRow="() => SelectRow(child)"
                            RemoveFolderFromList="RemoveFolderFromList"
                            GetFilesForFolder="() => GetChildFolder(child as Folder)"
                            PerformMenuAction="(MenuActions m) => PerformMenuAction(m, child)"
                            CurrentUser="@CurrentUserId" 
                        />
                    }
                    else
                    {
                        <FileGridFiles 
                            File=@(child as FileMetaData)
                            IsSelected=@isSelected
                            OnEllipsisClick="(e) => OnEllipsisClick(child as FileMetaData, e)"
                            SelectRow="() => SelectRow(child)"
                            PerformMenuAction="(MenuActions m) => PerformMenuAction(m, child)"
                            IsSearchedData="IsSearchResults"
                            CurrentUser="@CurrentUserId"
                            Project="@Project" 
                        />
                    }
                }
            </div>
        </div>

    }
    else
    {
        @*showing details*@
        <div>
            <ItemDetails 
                SelectedFile=@_currentDetails 
                CurrentUser=@CurrentUserId 
                Project=@Project
                OnClose=HandleDetailsClose 
            />
        </div>
    }
}

@code
{
    [Parameter]
    public string SearchText { get; set; }

    [Parameter]
    public Folder CurrentFolder { get; set; }

    [Parameter]
    public bool CanAddData { get; set; } = false;

    [Parameter]
    public string Project { get; set; }

    [Parameter]
    public bool IsSearchResult { get; set; } = false;

    //user and file tracking
    public Microsoft.Graph.User CurrentUser { get; set; }

    private StorageMetadata _storageMetadata;
    private BaseMetadata selectedMetaData;
    private FileMetaData _currentDetails;

    private bool _showingDetails;
    private bool isLoading = false;

    private bool _showStorageDetails = false;

    private string _lastSearch;
    private QueryThrottler<string> _searchThrottler;
    private List<BaseMetadata> _searchResults = new();

    private List<string> allFolders = new List<string>();

    private string CurrentUserId => CurrentUser?.Id ?? string.Empty;
    private bool IsProjectStorage => !string.IsNullOrEmpty(Project);

    private string FileGridClass => _showStorageDetails ? "file-grid-scroll" : "file-grid-scroll-lg";

    public bool LowMemoryMode
    {
        get
        {
            return true;
        }
    }

    public bool IsSearchResults => !string.IsNullOrWhiteSpace(SearchText);

    protected override async Task OnInitializedAsync()
    {
        isLoading = true;
        CurrentUser = await UserInformationService.GetUserAsync();

        if (IsProjectStorage)
        {
            //ApiService.ProjectUploadCode = Project.ToLower();
            _storageMetadata = await DataRetrievalService.GetStorageMetadata(Project.ToLower());
        }

        // If we get displayed on return from file upload, don't refresh from datalake
        await LoadFileList();

        _searchThrottler = new(TimeSpan.FromSeconds(0.5), ThrottleSearch);

        StateHasChanged();
    }

    private void UpdateFolderFromDownloads()
    {
        // Any downloads???
        if (ApiService.UploadedFiles.Count() > 0)
        {
            foreach (var uploadedFile in ApiService.UploadedFiles)
            {
                // Is in the folder we are currently displaying?
                if (uploadedFile.Value.folderpath == CurrentFolder.fullPathFromRoot)
                {
                    // See if the filemetadata is in list (could be in filesystem, but not fully uploaded)
                    var file = CurrentFolder.AllFiles.FirstOrDefault(f => f.filename == uploadedFile.Value.filename);
                    if (file != null)
                    {
                        CurrentFolder.Remove(file);
                    }
                    CurrentFolder.Add(uploadedFile.Value);
                }
            }
            CurrentFolder.Sort();
        }

    }

    protected override void OnInitialized()
    {
        NotifierService.Notify += OnNotify;

        UI.OnRightSidebarChange += StateHasChanged;
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            selectedMetaData = null;
        }
    }

    public async void Refresh()
    {
        await LoadFileList();
        UnSelectFiles();
    }

    public async Task OnNotify(string key, bool reloadData)
    {
        if (key == "filegrid")
        {
            if (reloadData)
            {
                Refresh();
            }
            await InvokeAsync(() => { StateHasChanged(); });
        }
    }

    public void Dispose()
    {
        NotifierService.Notify -= OnNotify;
    }

    public void UnSelectFiles()
    {
        selectedMetaData = null;
        StateHasChanged();
    }

    public void RemoveFolderFromList(Folder folder)
    {
        CurrentFolder.Remove(folder);
        StateHasChanged();
    }

    public async void GetParentFolder()
    {
        if (CurrentFolder.parent != null)
        {
            CurrentFolder = CurrentFolder.parent;
            await LoadFileList();
        }
        UnSelectFiles();
    }

    public async void GetChildFolder(Folder folder = null)
    {
        if (folder != null)
        {
            // When going down a folder, clear the parent so it only has 'folder' selected
            if (LowMemoryMode)
            {
                CurrentFolder.Clear();
                CurrentFolder.Add(folder);
            }

            CurrentFolder = folder;
            await LoadFileList();
        }
        UnSelectFiles();
    }

    private void ToggleAddData()
    {
        RenderFragment fragment = @<AddDataBar Project="@Project" />;
        UI.ToggleRightSidebar(fragment);
    }

    public async void PerformMenuAction(MenuActions actionCode, dynamic item)
    {
        switch (actionCode)
        {
            case MenuActions.DeleteRow:
                var messages = new List<string>() { Localizer["FILE-GRID-PAGE.ConfirmDeletePrompt", item.name] };
                await UI.ToggleModal(@<UserChoiceModal HeaderText="Confirm Delete" ChoiceTextList=@messages OnDecision="(a) => OnConfirmDelete(a, item)" />);
                break;

            case MenuActions.DownloadFile:
                var uri = await DataRetrievalService.DownloadFile(item, Project);
                await Task.Run(() => RedirectAndDownload(uri));
                break;

            case MenuActions.ToggleStorageDetails:
                _showStorageDetails = !_showStorageDetails;
                break;

            case MenuActions.OpenDetails:
                _currentDetails = item as FileMetaData;
                _showingDetails = true;
                break;

            case MenuActions.OpenManageAccess:
                UI.ToggleRightSidebar(@<ManageAccess SelectedFile="item" />);
                break;

            case MenuActions.CreateFolder:
                await UI.ToggleModal(@<UserInputModal HeaderText="@Localizer["FILE - GRID - PAGE.CreateFolderPrompt"]" OnDecision="OnConfirmCreateFolder" />);
                break;

            case MenuActions.Rename:
                string headerTextRes = (selectedMetaData.dataType == MetadataType.File) ? "FILE-GRID-PAGE.RenameFilePrompt" : "FILE-GRID-PAGE.RenameFolderPrompt";
                await UI.ToggleModal(@<UserInputModal HeaderText="@Localizer[headerTextRes]" OnDecision="(a) => OnConfirmRename(a, item)" _inputValue="@item.name" />);
                break;

            case MenuActions.MoveTo:
                allFolders = await DataRetrievalService.GetAllFolders(CurrentFolder.rootFolderName, CurrentUser);
                await UI.ToggleModal(@<FolderViewModal OnDecision= "(a) => OnConfirmMoveFile(a, item)" />);
                break;

            case MenuActions.OpenVersions:
                RenderFragment frag = @<Versions File="selectedMetaData as FileMetaData"></Versions>;
                await UI.ToggleModal(@<RenderFragmentModal Fragment=frag />);
                break;

            case MenuActions.ShareFile:
                var fileMetadata = item as FileMetaData;
                if (fileMetadata is null)
                    return;

                var sb = new System.Text.StringBuilder();
                sb.Append("/sharingworkflow/");
                sb.Append(fileMetadata.fileid);
                sb.Append("?filename=");
                sb.Append(fileMetadata.filename);
                if (!string.IsNullOrWhiteSpace(Project))
                {
                    sb.Append("&project=");
                    sb.Append(Project);
                }
                else
                {
                    sb.Append("&folderpath=");
                    sb.Append(fileMetadata.folderpath);
                }

                NavigationManager.NavigateTo(sb.ToString());
                break;
        }
    }

    private async void OnConfirmCreateFolder((bool, string) isContinue)
    {
        if (isContinue.Item1)
        {
            var folderName = isContinue.Item2;
            if (!string.IsNullOrWhiteSpace(folderName))
            {
                var now = DateTime.Now.Date;
                var folder = new Folder()
                    {
                        id = folderName,
                        name = folderName,
                        createdby = CurrentUser.Id,
                        createdts = now,
                        lastmodifiedby = CurrentUser.Id,
                        lastmodifiedts = now
                    };

                if (await DataCreatorService.CreateFolder(folder, CurrentFolder, CurrentUser))
                {
                    // Will add and then sort!
                    CurrentFolder.Add(folder, true);
                    StateHasChanged();
                }
            }

        }
        await UI.ToggleModal();
    }

    private async void OnConfirmMoveFile((bool, Folder) isContinue, FileMetaData file)
    {
        if (isContinue.Item1)
        {
            var selectedFolder = isContinue.Item2;
            if (selectedFolder != null && !string.IsNullOrWhiteSpace(selectedFolder.name))
            {
                if (await DataUpdatingService.MoveFile(file, selectedFolder.fullPathFromRoot, CurrentUser))
                {
                    CurrentFolder.Remove(file);
                    UnSelectFiles();
                }
            }
        }
        await UI.ToggleModal();
    }

    private async Task OnEllipsisClick(FileMetaData file, MouseEventArgs args)
    {
        SelectRow(file);
        await JSRuntime.InvokeAsync<object>("toggleMenu", $"{file.id}Menu", "show", args.ClientX, args.ClientY);
    }

    private async Task OnEllipsisClick(Folder folder, MouseEventArgs args)
    {
        SelectRow(folder);
        await JSRuntime.InvokeAsync<object>("toggleMenu", $"{FileMetaDataExtensions.GetFolderIdForJS(folder.id)}Menu", "show", args.ClientX, args.ClientY);
    }

    private async Task RedirectAndDownload(Uri uri)
    {
        await JSRuntime.InvokeAsync<object>("open", uri.ToString(), "_blank");
    }

    private void SelectRow(BaseMetadata item)
    {
        if (selectedMetaData != item)
        {
            selectedMetaData = item;
        }
        else
        {
            selectedMetaData = null;
        }
        StateHasChanged();
    }

    private async Task ToggleMenu(BaseMetadata item)
    {
        selectedMetaData = item;
        await JSRuntime.InvokeAsync<object>("toggleMenu", $"{FileMetaDataExtensions.GetFolderIdForJS(item.id)}Div", "selected-item");
        StateHasChanged();
    }

    private async Task LoadFileList()
    {
        UnSelectFiles();
        isLoading = true;
        StateHasChanged();

        Project ??= string.Empty;

        // Get our list of files!
        CurrentFolder = await DataRetrievalService.GetFolderContents(CurrentFolder, SearchText, CurrentUser, Project.ToLower());

        ResetSearch();

        if (!string.IsNullOrEmpty(Project))
        {
            CurrentFolder.name = Project;
        }

        // Check for downloading files to update!
        UpdateFolderFromDownloads();

        isLoading = false;
        StateHasChanged();
    }

    private void ToggleSort()
    {
        CurrentFolder.sortAscending = !CurrentFolder.sortAscending;
        CurrentFolder.Sort();
        StateHasChanged();
    }

    private async void OnConfirmRename((bool, string) isContinue, BaseMetadata metadata)
    {
        if (isContinue.Item1)
        {
            if (await ConfirmRename((dynamic)metadata, isContinue.Item2))
            {
                CurrentFolder.Sort();
                StateHasChanged();
            }
        }
        await UI.ToggleModal();
    }

    private async Task<bool> ConfirmRename(FileMetaData file, string newFileName)
    {
        return (await DataUpdatingService.RenameFile(file, newFileName, CurrentUser));
    }

    private async Task<bool> ConfirmRename(Folder folder, string newFolderName)
    {
        return (await DataUpdatingService.RenameFolder(folder, newFolderName, CurrentUser));
    }

    private async Task Delete(FileMetaData file)
    {
        if (string.IsNullOrEmpty(Project))
        {
            if (await DataRemovalService.Delete(file, CurrentUser))
            {
                CurrentFolder.Remove(file);
                UnSelectFiles();
            }
        }
        else
        {
            if (await DataRemovalService.DeleteStorageBlob(file, Project.ToLower(), CurrentUser))
            {
                CurrentFolder.Remove(file);
                UnSelectFiles();
            }
        }

    }

    private async Task Delete(Folder folder)
    {
        if (await DataRemovalService.Delete(folder, CurrentUser))  //, "ownedroot");
        {
            CurrentFolder.Remove(folder);
            UnSelectFiles();
        }
    }

    private async void OnConfirmDelete(bool isConfirmed, dynamic item)
    {
        if (isConfirmed)
        {
            Delete(item);
            UnSelectFiles();
        }
        await UI.ToggleModal();
    }

    private string GetCurrentFolderPath() => string.Join(" > ", EnumeratePath().Reverse());

    private IEnumerable<string> EnumeratePath()
    {
        var folder = CurrentFolder;
        while (folder != null)
        {
            yield return folder.name;
            folder = folder.parent;
        }
    }

    private bool RequiresHeader => !IsProjectStorage && (!IsSearchResult || CanAddData);
    private bool EmptySearch => IsSearchResult && CurrentFolder.children.Count < 1;

    private void HandleDetailsClose()
    {
        _currentDetails = null;
        _showingDetails = false;
    }

    private IEnumerable<BaseMetadata> GetCurrentFolderChildren()
    {
        return _searchResults.Select(MakeCompareKey).OrderBy(c => c.Key).Select(c => c.Item);
    }

    private FolderItemCompareKey MakeCompareKey(BaseMetadata item)
    {
        var lowerName = (item.name ?? string.Empty).ToLower();
        return new FolderItemCompareKey(item is Folder ? $"___{lowerName}" : lowerName, item);
    }

    record FolderItemCompareKey(string Key, BaseMetadata Item);

    private async void HandleSearch(string newValue, KeyboardEventArgs ev)
    {
        await _searchThrottler.SetQuery(newValue);
    }

    private void ResetSearch()
    {
        _lastSearch = null;
        _searchResults = new(CurrentFolder.children);
    }

    private async Task ThrottleSearch(string searchText)
    {
        if (_lastSearch != searchText)
        {
            _searchResults.Clear();
            _lastSearch = searchText;
            try
            {
                var all = string.IsNullOrEmpty(searchText);
                _searchResults = new(CurrentFolder.children.Where(c => all || c.name.Contains(searchText, StringComparison.InvariantCultureIgnoreCase)));
                selectedMetaData = null; 
            }
            finally
            {
                await InvokeAsync(StateHasChanged);
            }
        }            
    }
}
