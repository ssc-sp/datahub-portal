@inject IUserInformationService UserInformationService
@inject UserLocationManagerService UserLocationManagerService 
@inject IDbContextFactory<DatahubProjectDBContext> DbFactoryProject
@inject IStringLocalizer<RecentTab> Localizer

<AeFlex class="recent-card-container">
    @if (recentLinks != null)
    {
        foreach (var item in recentLinks)
        {
            <AeFlex class="@($"recent-card {GetIcon(item.link).Color}")">
                <i class="@GetIcon(item.link).Name" />
                <AeFlex class="text">
                    <AeTypography class="title">@(item.project?.ProjectName ?? "-")</AeTypography>
                    <AeTypography class="subtitle">@GetDescription(item.link, item.project)</AeTypography>
                </AeFlex>
            </AeFlex>
        }
    }
</AeFlex>


@code {
    private List<(UserRecentLink link,Datahub_Project? project)> recentLinks;

    [Parameter]
    public List<UserRecentLink> RecentLinks { get; set; }

    protected override void OnInitialized()
    {
        using var ctx = DbFactoryProject.CreateDbContext();
        recentLinks = RecentLinks.Select(l => (l, project:GetProject(ctx,l))).Where(tp => tp.project != null).ToList();
    }

    private Datahub_Project? GetProject(DatahubProjectDBContext ctx, UserRecentLink link)
    {
        if (link.DataProject == null)
            return null;
        return ctx.Projects.FirstOrDefault(p => p.Project_Acronym_CD == link.DataProject);
    }

    private Icon GetIcon(UserRecentLink link)
    {
        switch (link.LinkType)
        {
            case DatahubLinkType.PowerBI:
                return Icon.POWERBI;
            case DatahubLinkType.Databricks:
                return Icon.DATASETS;
            case DatahubLinkType.WebForm:
                return Icon.DATAENTRY;
            case DatahubLinkType.DataProject:
                return Icon.PROJECT;
            case DatahubLinkType.Storage:
                return Icon.STORAGE;
            case DatahubLinkType.FormBuilder:
                return Icon.PROJECT;
            case DatahubLinkType.DataSharingDashboard:
                return Icon.PROJECT;
        }
        return Icon.HOME;
    }

    private string GetDescription(UserRecentLink link, Datahub_Project project)
    {
        var projectName = project?.ProjectName ?? "-";
        switch (link.LinkType)
        {
            case DatahubLinkType.PowerBI:
                return $"{project.ProjectName} >> {Localizer["PowerBI"]}";
            case DatahubLinkType.Databricks:
                return $"{project.ProjectName} >> {Localizer["Databricks"]}";
            case DatahubLinkType.WebForm:
                return $"{project.ProjectName} >> {Localizer["Data Entry"]}";
            case DatahubLinkType.DataProject:
                return $"{project.ProjectName} >> {Localizer["Home"]}";
            case DatahubLinkType.Storage:
                return $"{project.ProjectName} >> {Localizer["Storage"]}";
            case DatahubLinkType.FormBuilder:
                return $"{project.ProjectName} >> {Localizer["Form Builder"]}";
            case DatahubLinkType.DataSharingDashboard:
                return $"{project.ProjectName} >> Data Sharing Dashboard";
        }
        return "N/A";
    }
}
