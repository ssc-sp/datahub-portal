@inject IUserInformationService UserInformationService
@inject UserLocationManagerService UserLocationManagerService 
@inject IDbContextFactory<DatahubProjectDBContext> DbFactoryProject
@inject IStringLocalizer Localizer

@if ((recentLinks?.Count ?? 0) > 0)
{
    <AeFlex class="recent-card-container">
        @if (recentLinks != null)
        {
            foreach (var item in recentLinks)
            {
                <AeFlex class="@($"recent-card {GetIcon(item.link).Color}")">
                    <i class="@GetIcon(item.link).Name" />
                    <AeFlex class="text">
                        <DHLink UserRecentLink="@(item.link)"><AeTypography class="title">@GetLinkDescription(item.link,item.project)</AeTypography></DHLink>
                        <AeTypography class="subtitle">@GetDescription(item.link, item.project)</AeTypography>
                    </AeFlex>
                </AeFlex>
            }
        }
    </AeFlex>
}


@code {
    private List<(UserRecentLink link,Datahub_Project? project)> recentLinks;

    public string GetLinkDescription(UserRecentLink link, Datahub_Project project)
    {
        switch (link.LinkType)
        {
            case DatahubLinkType.DataProject:
                return project?.ProjectName ?? "-";
            case DatahubLinkType.Storage:
                return Localizer["Storage"];
            case DatahubLinkType.Databricks:
                return Localizer["Databricks"];
            case DatahubLinkType.DataSharingDashboard:
                return Localizer["Data Sharing"];
            case DatahubLinkType.ComputeCostEstimator:
                return Localizer["Compute Cost"];
            case DatahubLinkType.M365Form:
                return Localizer["Microsoft 365 Data Entry"];
            case DatahubLinkType.StorageCostEstimator:
                return Localizer["Storage Cost Estimator"];
            case DatahubLinkType.PowerBI:
                return Localizer["PowerBI"];
            case DatahubLinkType.PowerBIReport:
                return Localizer["PowerBI Report"];
            case DatahubLinkType.PowerBIWorkspace:
                return Localizer["PowerBI Workspace"];
            default:
                return string.IsNullOrWhiteSpace(link.Name)?"Power BI":Localizer[link.Name];
        }
    }

    [Parameter]
    public List<UserRecentLink> RecentLinks { get; set; }

    protected override void OnInitialized()
    {
        using var ctx = DbFactoryProject.CreateDbContext();
        var grouped = RecentLinks
                .Where(ul => ul.LinkType != DatahubLinkType.DataProject)
                .GroupBy(ul => (ul.LinkType, ul.DataProject?.Trim()))
                .Select(gp => gp.First())
                .ToList();
        recentLinks = grouped
        .Select(l => (l, project:GetProject(ctx,l)))
        .Where(gp => gp.project != null)
        .ToList();        
    }

    private Datahub_Project? GetProject(DatahubProjectDBContext ctx, UserRecentLink link)
    {
        if (link.DataProject == null)
            return null;
        return ctx.Projects.FirstOrDefault(p => p.Project_Acronym_CD == link.DataProject.Trim());
    }

    private Icon GetIcon(UserRecentLink link)
    {
        switch (link.LinkType)
        {
            case DatahubLinkType.PowerBI:
                return Icon.POWERBI;
            case DatahubLinkType.Databricks:
                return Icon.DATASETS;
            case DatahubLinkType.WebForm:
                return Icon.DATAENTRY;
            case DatahubLinkType.DataProject:
                return Icon.PROJECT;
            case DatahubLinkType.Storage:
                return Icon.STORAGE;
            case DatahubLinkType.FormBuilder:
                return Icon.PROJECT;
            case DatahubLinkType.DataSharingDashboard:
                return Icon.PROJECT;
        }
        return Icon.HOME;
    }

    private string GetDescription(UserRecentLink link, Datahub_Project project)
    {
        var projectName = project?.ProjectName ?? Localizer["Home"];
        switch (link.LinkType)
        {
            case DatahubLinkType.PowerBI:
                return $"{projectName} >> {Localizer["Power BI"]}";
            case DatahubLinkType.Databricks:
                return $"{projectName} >> {Localizer["Databricks"]}";
            case DatahubLinkType.WebForm:
                return $"{projectName} >> {Localizer["Data Entry"]}";
            case DatahubLinkType.DataProject:
                return $"{projectName} >> {Localizer["Home"]}";
            case DatahubLinkType.Storage:
                return $"{projectName} >> {Localizer["Storage"]}";
            case DatahubLinkType.FormBuilder:
                return $"{projectName} >> {Localizer["Form Builder"]}";
            case DatahubLinkType.DataSharingDashboard:
                return $"{projectName} >> Data Sharing Dashboard";
        }
        return "N/A";
    }
}
