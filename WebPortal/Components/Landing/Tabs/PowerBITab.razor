@using Microsoft.EntityFrameworkCore.Query
@using Microsoft.EntityFrameworkCore;
@inject IStringLocalizer<DataLabels> DataLocalizer
@inject NavigationManager NavigationManager
@inject IJSRuntime JsInterop
@implements IDisposable
@inject IDbContextFactory<DatahubProjectDBContext> DbFactory
@inject IUserInformationService UserInformationService

<div class="ae table-container">

    @if (_reports != null)
    {
        <AePaginatedTable Accessors="accessorFunctions"
            Renderers="renderFunctions"
            T="Project_PBI_Report"
            Dataset="_reports"
            Headers="headers"
            class="custom light"
            style="Width:100%"
            GridTemplateColumns="0.5fr 3fr 2fr"    
            Page="@_lastClicked"
            PageSize="4"
            @ref=_myTable
            />

        <AePagination 
            Pageable="@_myTable" 
            OnPageClick="OnPageClick"> 
            <LeftIcon><i class='fad fa-chevron-double-left'></i></LeftIcon> 
            <RightIcon><i class='fad fa-chevron-double-right'></i></RightIcon>
            </AePagination>   
         }
</div>



@code {

    private List<Func<Project_PBI_Report, string>> accessorFunctions;
    private List<Func<Project_PBI_Report, RenderFragment>> renderFunctions;    

    private IPageableComponent _myTable;

    DatahubProjectDBContext Context;

    private int _lastClicked = 0;


    private void OnPageClick(int pageIndex)
    {
        _lastClicked = pageIndex;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
            StateHasChanged();
    }

    private List<Project_PBI_Report> _reports;

    protected override async Task OnInitializedAsync()
    {
        var currentUserId = await UserInformationService.GetUserIdString();
        Context = DbFactory.CreateDbContext();
        _reports = Context.Project_Users.Include(u => u.Project)
            .ThenInclude(p => p.PBI_Reports).ThenInclude(p => p.Project)
            .Where(u => u.User_ID == currentUserId).SelectMany(u => u.Project.PBI_Reports).Distinct().ToList();

        accessorFunctions = new List<Func<Project_PBI_Report, string>>() {
            (report => { return report?.Id.ToString(); }),
            (report => { return report?.Id.ToString(); }),
            (report => { return report?.Id.ToString(); })
        };
        
        renderFunctions = new List<Func<Project_PBI_Report, RenderFragment>>() {            
            report => @<AeFlex class="table-icon"><i class="@($"fad fa-{report?.Project?.Project_Icon}")"></i></AeFlex>,
            report => @<AeFlex style="padding-top: 1rem"><AeTypography><DHLink DataProject="@(report.Project.Project_Acronym_CD)" PBIWorkspaceId=@(report.Workspace?.ToString()) PBIReportId=@(report.Id.ToString()) PowerBIURL="@(report.GetLink())" Name="@(report?.ReportName)">@report?.ReportName</DHLink></AeTypography></AeFlex>, 
            report => @<AeFlex style="padding-top: 1rem"><AeTypography><DHLink DataProject="@(report.Project.Project_Acronym_CD)">@report?.Project.ProjectName</DHLink></AeTypography></AeFlex>             
        };
        
        
        
        //await FillRenderFunctions();
    }

    private List<string> headers = new List<string>();


    
     public void Dispose() 
    { 
        Context.Dispose();         
    }
}