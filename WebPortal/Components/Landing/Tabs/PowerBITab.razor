@using Microsoft.EntityFrameworkCore.Query
@using Microsoft.EntityFrameworkCore;
@inject IStringLocalizer<DataLabels> DataLocalizer
@inject NavigationManager NavigationManager
@inject IJSRuntime JsInterop
@implements IDisposable
@inject IDbContextFactory<DatahubProjectDBContext> DbFactory
@inject IUserInformationService UserInformationService

<div class="ae table-container">

        <AePaginatedTable 
        Renderers="renderFunctions"
        T="Project_PBI_Report"
        Dataset="_projects"
        Headers="headers"
        class="custom light"
        style="Width:100%"
        GridTemplateColumns="0.5fr 3fr"    
        Page="@_lastClicked"
        PageSize="4"
        @ref=_myTable
        />

        <AePagination Pageable="@_myTable" OnPageClick="OnPageClick" />                 
</div>



@code {

    private List<Func<Project_PBI_Report, string>> accessorFunctions;
    private List<Func<Project_PBI_Report, RenderFragment>> renderFunctions;    

    private IPageableComponent _myTable;

    private List<Project_PBI_Report> _projects;
    DatahubProjectDBContext Context;

    private int _lastClicked = 0;


    private void OnPageClick(int pageIndex)
    {
    _lastClicked = pageIndex;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
            StateHasChanged();
    }

    private List<Project_PBI_Report> _reports;

    protected override async Task OnInitializedAsync()
    {
        var currentUserId = await UserInformationService.GetUserIdString();
        Context = DbFactory.CreateDbContext();
        _reports = Context.Project_Users.Include(u => u.Project)
            .ThenInclude(p => p.PBI_Reports)
            .Where(u => u.User_ID == currentUserId).SelectMany(u => u.Project.PBI_Reports).ToList();

        accessorFunctions = new List<Func<Project_PBI_Report, string>>() {
            (report => { return report?.Id.ToString(); }),
            (report => { return report?.Id.ToString(); })
        };
        
        renderFunctions = new List<Func<Project_PBI_Report, RenderFragment>>() {            
            new Func<Project_PBI_Report, RenderFragment>(report => 
                @<AeFlex class="table-icon"><i class="@($"fad fa-{report?.Project?.Project_Icon}")"></i></AeFlex>),
            new Func<Project_PBI_Report, RenderFragment>(report => @<AeFlex style="padding-top: 1rem"><AeTypography><DatahubLink>@report?.ReportName</DatahubLink></AeTypography></AeFlex> )            
        };
        
        
        
        //await FillRenderFunctions();
    }

    private List<string> headers = new List<string>();


    
     public void Dispose() 
    { 
        Context.Dispose();         
    }
}