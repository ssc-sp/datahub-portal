# ASP.NET Core (.NET Framework)
# Build and test ASP.NET Core projects targeting the full .NET Framework.
# Add steps that publish symbols, save build artifacts, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/dotnet-core

pool:
  vmImage: 'windows-latest'

variables:
  solution: '**/Datahub.Portal.sln'
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Release'

name: 2.0.$(date:yy)$(DayOfYear)$(rev:.r)

trigger:
  branches:
    include:
      - develop
  paths:
    exclude:
    - 'docs/**/*'

pr:
  - develop
  - feature/*

steps:
- task: UseDotNet@2
  displayName: 'Install .NET Core SDK'
  inputs:
    version: 6.0.x
    performMultiLevelLookup: true
    includePreviewVersions: true # Required for preview versions

- task: NodeTool@0
  displayName: 'install node'
  inputs:
    versionSpec: '15.11.0'

- task: DotNetCoreCLI@2
  displayName: dotnet restore
  inputs:
    command: restore
    projects: |
      Datahub.Portal.sln
    includeNuGetOrg: true

- task: DotNetCoreCLI@2
  displayName: dotnet restore function
  inputs:
    command: restore
    projects: 'Datahub.Graph.Functions/*.csproj'
    includeNuGetOrg: true

- task: DotNetCoreCLI@2
  displayName: 'Publish Azure function'
  inputs:
    command: publish
    publishWebProjects: false
    projects: 'Datahub.Graph.Functions/*.csproj'
    zipAfterPublish: true

- task: DotNetCoreCLI@2
  displayName: dotnet build
  inputs:
    command: build
    projects: |
      Datahub.Portal.sln
    
- task: PowerShell@2
  inputs:
    targetType: 'inline'
    script: |
      $files=Get-Childitem -Path WebPortal,DatahubIntakeForms,.vscode -Include  appsettings*json-tmpl,launch*json-tmpl -File -Recurse -ErrorAction SilentlyContinue  | Where {$_.FullName -notlike "*\Debug\*"}
      foreach ($file in $files){
        $fileRendered=$file.FullName.trim("-tmpl")
        Write-Host "Processing file: ${file} > $fileRendered"
        Copy-Item $file.FullName -Force -Destination $fileRendered
      }
      cd WebPortal; mv appsettings.Development.json appsettings.dev.json; Move-Item -Force appsettings.json-tmpl-spdatahub appsettings.json

- task: DotNetCoreCLI@2
  inputs:
    command: 'publish'
    projects: 'WebPortal/*.csproj'
    arguments: ' -r win-x64 --self-contained true '
    zipAfterPublish: true

- task: AzureRmWebAppDeployment@4
  condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))
  inputs:
    ConnectionType: 'AzureRM'
    azureSubscription: 'AZRM - DataSolutions'
    appType: 'webApp'
    WebAppName: 'spdatahub-portal-app-sand'
    DeployToSlotOrASEFlag: true
    SlotName: 'stage'
    ResourceGroupName: 'sp-datahub-sand-rg'
    package: '$(System.DefaultWorkingDirectory)/WebPortal/**/*.zip'
    enableCustomDeployment: true
    DeploymentType: 'webDeploy'

- task: AzureFunctionApp@1
  displayName: 'Azure Function App Deploy: spdatahub-portal-func-dotnet-sand'
  inputs:
    azureSubscription: 'AZRM - DataSolutions'
    appType: 'functionApp'
    appName: 'spdatahub-portal-func-dotnet-sand'
    package: '$(System.DefaultWorkingDirectory)/Datahub.Graph.Functions/**/*.zip'

- task: AzureAppServiceSettings@1
  displayName: Azure App Service Settings
  inputs:
    azureSubscription: 'AZRM - DataSolutions'
    appName: 'spdatahub-portal-app-sand'
    ResourceGroupName: 'sp-datahub-sand-rg'
    SlotName: 'stage'
    appSettings: |
      [
        {
          "name": "PortalVersion__Release",
          "value": "$(Build.BuildNumber)",
          "slotSetting": true
        },
        {
          "name": "PortalVersion__Commit",
          "value": "$(Build.SourceVersion)", 
          "slotSetting": true
        },
        {
          "name": "PortalVersion__BuildId",
          "value": "$(Build.BuildId)", 
          "slotSetting": true
        }
      ]

# Graph Function
- task: DotNetCoreCLI@2
  inputs:
    command: 'restore'
    projects: 'Datahub.Graph.Functions/*.csproj'
    feedsToUse: 'select'
- task: DotNetCoreCLI@2
  inputs:
    command: 'build'
    projects: 'Datahub.Graph.Functions/*.csproj'
    arguments: '--configuration Release'
- task: DotNetCoreCLI@2
  inputs:
    command: 'publish'
    projects: 'Datahub.Graph.Functions/*.csproj'
    arguments: '--configuration Release'
    publishWebProjects: false

- task: AzureFunctionApp@1
  condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))
  inputs:
    azureSubscription: 'AZRM - DataSolutions'
    appType: 'functionApp'
    appName: 'spdatahub-portal-func-dotnet-sand'
    package: '$(System.DefaultWorkingDirectory)/Datahub.Graph.Functions/**/*.zip'
    deploymentMethod: 'zipDeploy'