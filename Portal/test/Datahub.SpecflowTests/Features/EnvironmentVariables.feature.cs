// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by Reqnroll (https://www.reqnroll.net/).
//      Reqnroll Version:2.0.0.0
//      Reqnroll Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Datahub.SpecflowTests.Features
{
    using Reqnroll;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "2.0.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class EnvironmentVariablesTableFeature : object, Xunit.IClassFixture<EnvironmentVariablesTableFeature.FixtureData>, Xunit.IAsyncLifetime
    {
        
        private static global::Reqnroll.ITestRunner testRunner;
        
        private static string[] featureTags = new string[] {
                "ignore"};
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "EnvironmentVariables.feature"
#line hidden
        
        public EnvironmentVariablesTableFeature(EnvironmentVariablesTableFeature.FixtureData fixtureData, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
        }
        
        public static async System.Threading.Tasks.Task FeatureSetupAsync()
        {
            testRunner = global::Reqnroll.TestRunnerManager.GetTestRunnerForAssembly(null, global::Reqnroll.xUnit.ReqnrollPlugin.XUnitParallelWorkerTracker.Instance.GetWorkerId());
            global::Reqnroll.FeatureInfo featureInfo = new global::Reqnroll.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "EnvironmentVariablesTable", "As a user, I want to manage environment variables, so that I can configure my clo" +
                    "ud resources correctly", global::Reqnroll.ProgrammingLanguage.CSharp, featureTags);
            await testRunner.OnFeatureStartAsync(featureInfo);
        }
        
        public static async System.Threading.Tasks.Task FeatureTearDownAsync()
        {
            string testWorkerId = testRunner.TestWorkerId;
            await testRunner.OnFeatureEndAsync();
            testRunner = null;
            global::Reqnroll.xUnit.ReqnrollPlugin.XUnitParallelWorkerTracker.Instance.ReleaseWorker(testWorkerId);
        }
        
        public async System.Threading.Tasks.Task TestInitializeAsync()
        {
        }
        
        public async System.Threading.Tasks.Task TestTearDownAsync()
        {
            await testRunner.OnScenarioEndAsync();
        }
        
        public void ScenarioInitialize(global::Reqnroll.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public async System.Threading.Tasks.Task ScenarioStartAsync()
        {
            await testRunner.OnScenarioStartAsync();
        }
        
        public async System.Threading.Tasks.Task ScenarioCleanupAsync()
        {
            await testRunner.CollectScenarioErrorsAsync();
        }
        
        async System.Threading.Tasks.Task Xunit.IAsyncLifetime.InitializeAsync()
        {
            await this.TestInitializeAsync();
        }
        
        async System.Threading.Tasks.Task Xunit.IAsyncLifetime.DisposeAsync()
        {
            await this.TestTearDownAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Display environment variables", Skip="Ignored")]
        [Xunit.TraitAttribute("FeatureTitle", "EnvironmentVariablesTable")]
        [Xunit.TraitAttribute("Description", "Display environment variables")]
        public async System.Threading.Tasks.Task DisplayEnvironmentVariables()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Display environment variables", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 5
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 6
        await testRunner.GivenAsync("I am on the Environment Variables page", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 7
        await testRunner.WhenAsync("I look at the Environment Variables table", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 8
        await testRunner.ThenAsync("I should see all the environment variables", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Filter environment variables", Skip="Ignored")]
        [Xunit.TraitAttribute("FeatureTitle", "EnvironmentVariablesTable")]
        [Xunit.TraitAttribute("Description", "Filter environment variables")]
        public async System.Threading.Tasks.Task FilterEnvironmentVariables()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Filter environment variables", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 10
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 11
        await testRunner.GivenAsync("I am on the Environment Variables page", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 12
        await testRunner.WhenAsync("I enter a filter string", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 13
        await testRunner.ThenAsync("I should see only the environment variables that match the filter", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Add a new environment variable", Skip="Ignored")]
        [Xunit.TraitAttribute("FeatureTitle", "EnvironmentVariablesTable")]
        [Xunit.TraitAttribute("Description", "Add a new environment variable")]
        public async System.Threading.Tasks.Task AddANewEnvironmentVariable()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Add a new environment variable", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 15
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 16
        await testRunner.GivenAsync("I am on the Environment Variables page", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 17
        await testRunner.WhenAsync("I click on the Add button", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 18
        await testRunner.AndAsync("I enter a key and a value for the new environment variable", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 19
        await testRunner.ThenAsync("the new environment variable should be added to the table", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Edit an existing environment variable", Skip="Ignored")]
        [Xunit.TraitAttribute("FeatureTitle", "EnvironmentVariablesTable")]
        [Xunit.TraitAttribute("Description", "Edit an existing environment variable")]
        public async System.Threading.Tasks.Task EditAnExistingEnvironmentVariable()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Edit an existing environment variable", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 21
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 22
        await testRunner.GivenAsync("I am on the Environment Variables page", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 23
        await testRunner.AndAsync("an environment variable exists", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 24
        await testRunner.WhenAsync("I click on the Edit button for that environment variable", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 25
        await testRunner.AndAsync("I change the key and/or value of the environment variable", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 26
        await testRunner.AndAsync("I click on the Commit Edit button", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 27
        await testRunner.ThenAsync("the changes should be saved", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Delete an existing environment variable", Skip="Ignored")]
        [Xunit.TraitAttribute("FeatureTitle", "EnvironmentVariablesTable")]
        [Xunit.TraitAttribute("Description", "Delete an existing environment variable")]
        public async System.Threading.Tasks.Task DeleteAnExistingEnvironmentVariable()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Delete an existing environment variable", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 29
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 30
        await testRunner.GivenAsync("I am on the Environment Variables page", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 31
        await testRunner.AndAsync("an environment variable exists", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 32
        await testRunner.WhenAsync("I click on the Delete button for that environment variable", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 33
        await testRunner.ThenAsync("the environment variable should be removed from the table", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "2.0.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : object, Xunit.IAsyncLifetime
        {
            
            async System.Threading.Tasks.Task Xunit.IAsyncLifetime.InitializeAsync()
            {
            }
            
            async System.Threading.Tasks.Task Xunit.IAsyncLifetime.DisposeAsync()
            {
            }
        }
    }
}
#pragma warning restore
#endregion
