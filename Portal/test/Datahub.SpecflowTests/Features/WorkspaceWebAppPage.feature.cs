// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by Reqnroll (https://www.reqnroll.net/).
//      Reqnroll Version:1.0.0.0
//      Reqnroll Generator Version:1.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Datahub.SpecflowTests.Features
{
    using Reqnroll;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "1.0.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class WorkspaceWebAppPageFeature : object, Xunit.IClassFixture<WorkspaceWebAppPageFeature.FixtureData>, Xunit.IAsyncLifetime
    {
        
        private static Reqnroll.ITestRunner testRunner;
        
        private static string[] featureTags = new string[] {
                "ignore"};
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "WorkspaceWebAppPage.feature"
#line hidden
        
        public WorkspaceWebAppPageFeature(WorkspaceWebAppPageFeature.FixtureData fixtureData, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
        }
        
        public static async System.Threading.Tasks.Task FeatureSetupAsync()
        {
            testRunner = Reqnroll.TestRunnerManager.GetTestRunnerForAssembly(null, Reqnroll.xUnit.ReqnrollPlugin.XUnitParallelWorkerTracker.Instance.GetWorkerId());
            Reqnroll.FeatureInfo featureInfo = new Reqnroll.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "WorkspaceWebAppPage", "As a user I want to manage my web application so that I can configure it correctl" +
                    "y", ProgrammingLanguage.CSharp, featureTags);
            await testRunner.OnFeatureStartAsync(featureInfo);
        }
        
        public static async System.Threading.Tasks.Task FeatureTearDownAsync()
        {
            string testWorkerId = testRunner.TestWorkerId;
            await testRunner.OnFeatureEndAsync();
            testRunner = null;
            Reqnroll.xUnit.ReqnrollPlugin.XUnitParallelWorkerTracker.Instance.ReleaseWorker(testWorkerId);
        }
        
        public async System.Threading.Tasks.Task TestInitializeAsync()
        {
        }
        
        public async System.Threading.Tasks.Task TestTearDownAsync()
        {
            await testRunner.OnScenarioEndAsync();
        }
        
        public void ScenarioInitialize(Reqnroll.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public async System.Threading.Tasks.Task ScenarioStartAsync()
        {
            await testRunner.OnScenarioStartAsync();
        }
        
        public async System.Threading.Tasks.Task ScenarioCleanupAsync()
        {
            await testRunner.CollectScenarioErrorsAsync();
        }
        
        async System.Threading.Tasks.Task Xunit.IAsyncLifetime.InitializeAsync()
        {
            await this.TestInitializeAsync();
        }
        
        async System.Threading.Tasks.Task Xunit.IAsyncLifetime.DisposeAsync()
        {
            await this.TestTearDownAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Start the web application", Skip="Ignored")]
        [Xunit.TraitAttribute("FeatureTitle", "WorkspaceWebAppPage")]
        [Xunit.TraitAttribute("Description", "Start the web application")]
        public async System.Threading.Tasks.Task StartTheWebApplication()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            Reqnroll.ScenarioInfo scenarioInfo = new Reqnroll.ScenarioInfo("Start the web application", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 5
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 6
        await testRunner.GivenAsync("I am on the Web Application page", ((string)(null)), ((Reqnroll.Table)(null)), "Given ");
#line hidden
#line 7
        await testRunner.AndAsync("the web application is not running", ((string)(null)), ((Reqnroll.Table)(null)), "And ");
#line hidden
#line 8
        await testRunner.WhenAsync("I click on the Start button", ((string)(null)), ((Reqnroll.Table)(null)), "When ");
#line hidden
#line 9
        await testRunner.ThenAsync("the web application should start", ((string)(null)), ((Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Stop the web application", Skip="Ignored")]
        [Xunit.TraitAttribute("FeatureTitle", "WorkspaceWebAppPage")]
        [Xunit.TraitAttribute("Description", "Stop the web application")]
        public async System.Threading.Tasks.Task StopTheWebApplication()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            Reqnroll.ScenarioInfo scenarioInfo = new Reqnroll.ScenarioInfo("Stop the web application", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 11
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 12
        await testRunner.GivenAsync("I am on the Web Application page", ((string)(null)), ((Reqnroll.Table)(null)), "Given ");
#line hidden
#line 13
        await testRunner.AndAsync("the web application is running", ((string)(null)), ((Reqnroll.Table)(null)), "And ");
#line hidden
#line 14
        await testRunner.WhenAsync("I click on the Stop button", ((string)(null)), ((Reqnroll.Table)(null)), "When ");
#line hidden
#line 15
        await testRunner.ThenAsync("the web application should stop", ((string)(null)), ((Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Restart the web application", Skip="Ignored")]
        [Xunit.TraitAttribute("FeatureTitle", "WorkspaceWebAppPage")]
        [Xunit.TraitAttribute("Description", "Restart the web application")]
        public async System.Threading.Tasks.Task RestartTheWebApplication()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            Reqnroll.ScenarioInfo scenarioInfo = new Reqnroll.ScenarioInfo("Restart the web application", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 17
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 18
        await testRunner.GivenAsync("I am on the Web Application page", ((string)(null)), ((Reqnroll.Table)(null)), "Given ");
#line hidden
#line 19
        await testRunner.AndAsync("the web application is running", ((string)(null)), ((Reqnroll.Table)(null)), "And ");
#line hidden
#line 20
        await testRunner.WhenAsync("I click on the Restart button", ((string)(null)), ((Reqnroll.Table)(null)), "When ");
#line hidden
#line 21
        await testRunner.ThenAsync("the web application should restart", ((string)(null)), ((Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Configure the web application", Skip="Ignored")]
        [Xunit.TraitAttribute("FeatureTitle", "WorkspaceWebAppPage")]
        [Xunit.TraitAttribute("Description", "Configure the web application")]
        public async System.Threading.Tasks.Task ConfigureTheWebApplication()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            Reqnroll.ScenarioInfo scenarioInfo = new Reqnroll.ScenarioInfo("Configure the web application", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 23
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 24
        await testRunner.GivenAsync("I am on the Web Application page", ((string)(null)), ((Reqnroll.Table)(null)), "Given ");
#line hidden
#line 25
        await testRunner.WhenAsync("I click on the Configure button", ((string)(null)), ((Reqnroll.Table)(null)), "When ");
#line hidden
#line 26
        await testRunner.ThenAsync("the configuration dialog should be displayed", ((string)(null)), ((Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Display web application information", Skip="Ignored")]
        [Xunit.TraitAttribute("FeatureTitle", "WorkspaceWebAppPage")]
        [Xunit.TraitAttribute("Description", "Display web application information")]
        public async System.Threading.Tasks.Task DisplayWebApplicationInformation()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            Reqnroll.ScenarioInfo scenarioInfo = new Reqnroll.ScenarioInfo("Display web application information", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 28
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 29
        await testRunner.GivenAsync("I am on the Web Application page", ((string)(null)), ((Reqnroll.Table)(null)), "Given ");
#line hidden
#line 30
        await testRunner.WhenAsync("I look at the Web Application Info table", ((string)(null)), ((Reqnroll.Table)(null)), "When ");
#line hidden
#line 31
        await testRunner.ThenAsync("I should see all the information about the web application", ((string)(null)), ((Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "1.0.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : object, Xunit.IAsyncLifetime
        {
            
            async System.Threading.Tasks.Task Xunit.IAsyncLifetime.InitializeAsync()
            {
            }
            
            async System.Threading.Tasks.Task Xunit.IAsyncLifetime.DisposeAsync()
            {
            }
        }
    }
}
#pragma warning restore
#endregion
