// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by Reqnroll (https://www.reqnroll.net/).
//      Reqnroll Version:2.0.0.0
//      Reqnroll Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Datahub.SpecflowTests.Features
{
    using Reqnroll;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "2.0.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Xunit.TraitAttribute("Category", "terraform")]
    public partial class TerraformVariableExtractionFeature : object, Xunit.IClassFixture<TerraformVariableExtractionFeature.FixtureData>, Xunit.IAsyncLifetime
    {
        
        private static global::Reqnroll.ITestRunner testRunner;
        
        private static string[] featureTags = new string[] {
                "terraform"};
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "TerraformVariableExtraction.feature"
#line hidden
        
        public TerraformVariableExtractionFeature(TerraformVariableExtractionFeature.FixtureData fixtureData, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
        }
        
        public static async System.Threading.Tasks.Task FeatureSetupAsync()
        {
            testRunner = global::Reqnroll.TestRunnerManager.GetTestRunnerForAssembly(null, global::Reqnroll.xUnit.ReqnrollPlugin.XUnitParallelWorkerTracker.Instance.GetWorkerId());
            global::Reqnroll.FeatureInfo featureInfo = new global::Reqnroll.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "Terraform Variable Extraction", @"Static class to extract specific variables from the output json of a terraform resource. Simply pass in the project with its resources
and call the method to extract the variable you want. The method will return either a null or the value of the variable you want.", global::Reqnroll.ProgrammingLanguage.CSharp, featureTags);
            await testRunner.OnFeatureStartAsync(featureInfo);
        }
        
        public static async System.Threading.Tasks.Task FeatureTearDownAsync()
        {
            string testWorkerId = testRunner.TestWorkerId;
            await testRunner.OnFeatureEndAsync();
            testRunner = null;
            global::Reqnroll.xUnit.ReqnrollPlugin.XUnitParallelWorkerTracker.Instance.ReleaseWorker(testWorkerId);
        }
        
        public async System.Threading.Tasks.Task TestInitializeAsync()
        {
        }
        
        public async System.Threading.Tasks.Task TestTearDownAsync()
        {
            await testRunner.OnScenarioEndAsync();
        }
        
        public void ScenarioInitialize(global::Reqnroll.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public async System.Threading.Tasks.Task ScenarioStartAsync()
        {
            await testRunner.OnScenarioStartAsync();
        }
        
        public async System.Threading.Tasks.Task ScenarioCleanupAsync()
        {
            await testRunner.CollectScenarioErrorsAsync();
        }
        
        public virtual async System.Threading.Tasks.Task FeatureBackgroundAsync()
        {
#line 6
    #line hidden
            global::Reqnroll.Table table1 = new global::Reqnroll.Table(new string[] {
                        "Resource Type",
                        "Json Content"});
            table1.AddRow(new string[] {
                        "terraform:azure-databricks",
                        @"{ ""workspace_id"": ""/subscriptions/bc4bcb08-d617-49f4-b6af-69d6f10c240b/resourceGroups/fsdh_proj_die6_dev_rg/providers/Microsoft.Databricks/workspaces/fsdh-dbk-die6-dev"", ""workspace_url"": ""adb-4970741514517449.9.azuredatabricks.net"", ""workspace_name"": ""fsdh-dbk-die6-dev"" }"});
            table1.AddRow(new string[] {
                        "terraform:new-project-template",
                        "{  }"});
            table1.AddRow(new string[] {
                        "terraform:azure-storage-blob",
                        "{ \"storage_account\": \"fsdhprojyt31dev\", \"container\": \"datahub\", \"storage_type\": \"" +
                            "blob\", \"resource_group_name\": \"fsdh_proj_yt31_dev_rg\" }"});
            table1.AddRow(new string[] {
                        "terraform:azure-postgres",
                        @"{ ""postgres_id"": ""/subscriptions/bc4bcb08-d617-49f4-b6af-69d6f10c240b/resourceGroups/fsdh_proj_dr1_dev_rg/providers/Microsoft.DBforPostgreSQL/flexibleServers/fsdh-dr1-psql-dev"", ""postgres_dns"": ""fsdh-dr1-psql-dev.postgres.database.azure.com"", ""postgres_db_name"": ""fsdh"", ""postgres_secret_name_admin"": ""datahub-psql-admin"", ""postgres_secret_name_password"": ""datahub-psql-password"", ""postgres_server_name"": ""fsdh-dr1-psql-dev"" }"});
#line 7
        await testRunner.GivenAsync("a datahub project with the following resources", ((string)(null)), table1, "Given ");
#line hidden
        }
        
        async System.Threading.Tasks.Task Xunit.IAsyncLifetime.InitializeAsync()
        {
            await this.TestInitializeAsync();
        }
        
        async System.Threading.Tasks.Task Xunit.IAsyncLifetime.DisposeAsync()
        {
            await this.TestTearDownAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Extracting a Databricks Workspace Id")]
        [Xunit.TraitAttribute("FeatureTitle", "Terraform Variable Extraction")]
        [Xunit.TraitAttribute("Description", "Extracting a Databricks Workspace Id")]
        public async System.Threading.Tasks.Task ExtractingADatabricksWorkspaceId()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Extracting a Databricks Workspace Id", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 14
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 6
    await this.FeatureBackgroundAsync();
#line hidden
#line 15
        await testRunner.WhenAsync("I call the method to extract the databricks workspace id", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
                global::Reqnroll.Table table2 = new global::Reqnroll.Table(new string[] {
                            "Name",
                            "Value"});
                table2.AddRow(new string[] {
                            "databricksWorkspaceId",
                            "/subscriptions/bc4bcb08-d617-49f4-b6af-69d6f10c240b/resourceGroups/fsdh_proj_die6" +
                                "_dev_rg/providers/Microsoft.Databricks/workspaces/fsdh-dbk-die6-dev"});
#line 16
        await testRunner.ThenAsync("I should get the following value", ((string)(null)), table2, "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Extracting a Databricks Workspace Url")]
        [Xunit.TraitAttribute("FeatureTitle", "Terraform Variable Extraction")]
        [Xunit.TraitAttribute("Description", "Extracting a Databricks Workspace Url")]
        public async System.Threading.Tasks.Task ExtractingADatabricksWorkspaceUrl()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Extracting a Databricks Workspace Url", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 20
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 6
    await this.FeatureBackgroundAsync();
#line hidden
#line 21
        await testRunner.WhenAsync("I call the method to extract the databricks workspace url", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
                global::Reqnroll.Table table3 = new global::Reqnroll.Table(new string[] {
                            "Name",
                            "Value"});
                table3.AddRow(new string[] {
                            "databricksUrl",
                            "https://adb-4970741514517449.9.azuredatabricks.net"});
#line 22
        await testRunner.ThenAsync("I should get the following value", ((string)(null)), table3, "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Extracting a Postgres Host")]
        [Xunit.TraitAttribute("FeatureTitle", "Terraform Variable Extraction")]
        [Xunit.TraitAttribute("Description", "Extracting a Postgres Host")]
        public async System.Threading.Tasks.Task ExtractingAPostgresHost()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Extracting a Postgres Host", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 26
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 6
    await this.FeatureBackgroundAsync();
#line hidden
#line 27
        await testRunner.WhenAsync("I call the method to extract the postgres host", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
                global::Reqnroll.Table table4 = new global::Reqnroll.Table(new string[] {
                            "Name",
                            "Value"});
                table4.AddRow(new string[] {
                            "postgresHost",
                            "fsdh-dr1-psql-dev.postgres.database.azure.com"});
#line 28
        await testRunner.ThenAsync("I should get the following value", ((string)(null)), table4, "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Extracting a Postgres Database Name")]
        [Xunit.TraitAttribute("FeatureTitle", "Terraform Variable Extraction")]
        [Xunit.TraitAttribute("Description", "Extracting a Postgres Database Name")]
        public async System.Threading.Tasks.Task ExtractingAPostgresDatabaseName()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Extracting a Postgres Database Name", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 32
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 6
    await this.FeatureBackgroundAsync();
#line hidden
#line 33
        await testRunner.WhenAsync("I call the method to extract the postgres database name", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
                global::Reqnroll.Table table5 = new global::Reqnroll.Table(new string[] {
                            "Name",
                            "Value"});
                table5.AddRow(new string[] {
                            "postgresDatabaseName",
                            "fsdh"});
#line 34
        await testRunner.ThenAsync("I should get the following value", ((string)(null)), table5, "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Extracting a Postgres Admin Secret Name")]
        [Xunit.TraitAttribute("FeatureTitle", "Terraform Variable Extraction")]
        [Xunit.TraitAttribute("Description", "Extracting a Postgres Admin Secret Name")]
        public async System.Threading.Tasks.Task ExtractingAPostgresAdminSecretName()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Extracting a Postgres Admin Secret Name", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 38
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 6
    await this.FeatureBackgroundAsync();
#line hidden
#line 39
        await testRunner.WhenAsync("I call the method to extract the postgres username secret name", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
                global::Reqnroll.Table table6 = new global::Reqnroll.Table(new string[] {
                            "Name",
                            "Value"});
                table6.AddRow(new string[] {
                            "postgresUsernameSecretName",
                            "datahub-psql-admin"});
#line 40
        await testRunner.ThenAsync("I should get the following value", ((string)(null)), table6, "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Extracting a Postgres Password Secret Name")]
        [Xunit.TraitAttribute("FeatureTitle", "Terraform Variable Extraction")]
        [Xunit.TraitAttribute("Description", "Extracting a Postgres Password Secret Name")]
        public async System.Threading.Tasks.Task ExtractingAPostgresPasswordSecretName()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Extracting a Postgres Password Secret Name", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 44
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 6
    await this.FeatureBackgroundAsync();
#line hidden
#line 45
        await testRunner.WhenAsync("I call the method to extract the postgres password secret name", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
                global::Reqnroll.Table table7 = new global::Reqnroll.Table(new string[] {
                            "Name",
                            "Value"});
                table7.AddRow(new string[] {
                            "postgresPasswordSecretName",
                            "datahub-psql-password"});
#line 46
        await testRunner.ThenAsync("I should get the following value", ((string)(null)), table7, "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "2.0.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : object, Xunit.IAsyncLifetime
        {
            
            async System.Threading.Tasks.Task Xunit.IAsyncLifetime.InitializeAsync()
            {
                await TerraformVariableExtractionFeature.FeatureSetupAsync();
            }
            
            async System.Threading.Tasks.Task Xunit.IAsyncLifetime.DisposeAsync()
            {
                await TerraformVariableExtractionFeature.FeatureTearDownAsync();
            }
        }
    }
}
#pragma warning restore
#endregion
