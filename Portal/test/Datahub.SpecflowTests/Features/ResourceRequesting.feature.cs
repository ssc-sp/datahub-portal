// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by Reqnroll (https://www.reqnroll.net/).
//      Reqnroll Version:2.0.0.0
//      Reqnroll Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Datahub.SpecflowTests.Features
{
    using Reqnroll;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "2.0.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class ResourceRequestingFeature : object, Xunit.IClassFixture<ResourceRequestingFeature.FixtureData>, Xunit.IAsyncLifetime
    {
        
        private static global::Reqnroll.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "ResourceRequesting.feature"
#line hidden
        
        public ResourceRequestingFeature(ResourceRequestingFeature.FixtureData fixtureData, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
        }
        
        public static async System.Threading.Tasks.Task FeatureSetupAsync()
        {
            testRunner = global::Reqnroll.TestRunnerManager.GetTestRunnerForAssembly(null, global::Reqnroll.xUnit.ReqnrollPlugin.XUnitParallelWorkerTracker.Instance.GetWorkerId());
            global::Reqnroll.FeatureInfo featureInfo = new global::Reqnroll.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "Resource Requesting", "Tests around the workspace resource requesting and its functionality for the user" +
                    "", global::Reqnroll.ProgrammingLanguage.CSharp, featureTags);
            await testRunner.OnFeatureStartAsync(featureInfo);
        }
        
        public static async System.Threading.Tasks.Task FeatureTearDownAsync()
        {
            string testWorkerId = testRunner.TestWorkerId;
            await testRunner.OnFeatureEndAsync();
            testRunner = null;
            global::Reqnroll.xUnit.ReqnrollPlugin.XUnitParallelWorkerTracker.Instance.ReleaseWorker(testWorkerId);
        }
        
        public async System.Threading.Tasks.Task TestInitializeAsync()
        {
        }
        
        public async System.Threading.Tasks.Task TestTearDownAsync()
        {
            await testRunner.OnScenarioEndAsync();
        }
        
        public void ScenarioInitialize(global::Reqnroll.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public async System.Threading.Tasks.Task ScenarioStartAsync()
        {
            await testRunner.OnScenarioStartAsync();
        }
        
        public async System.Threading.Tasks.Task ScenarioCleanupAsync()
        {
            await testRunner.CollectScenarioErrorsAsync();
        }
        
        async System.Threading.Tasks.Task Xunit.IAsyncLifetime.InitializeAsync()
        {
            await this.TestInitializeAsync();
        }
        
        async System.Threading.Tasks.Task Xunit.IAsyncLifetime.DisposeAsync()
        {
            await this.TestTearDownAsync();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Request a resource to be provisioned for a workspace")]
        [Xunit.TraitAttribute("FeatureTitle", "Resource Requesting")]
        [Xunit.TraitAttribute("Description", "Request a resource to be provisioned for a workspace")]
        [Xunit.TraitAttribute("Category", "queue")]
        [Xunit.InlineDataAttribute("Default", "1", new string[0])]
        [Xunit.InlineDataAttribute("NewProjectTemplate", "1", new string[0])]
        [Xunit.InlineDataAttribute("AzureAppService", "1", new string[0])]
        [Xunit.InlineDataAttribute("AzureDatabricks", "1", new string[0])]
        [Xunit.InlineDataAttribute("AzureStorageBlob", "1", new string[0])]
        [Xunit.InlineDataAttribute("AzurePostgres", "1", new string[0])]
        public async System.Threading.Tasks.Task RequestAResourceToBeProvisionedForAWorkspace(string resource_Name, string number_Of_Messages, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "queue"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("resource_name", resource_Name);
            argumentsOfScenario.Add("number_of_messages", number_Of_Messages);
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Request a resource to be provisioned for a workspace", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 5
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 6
        await testRunner.GivenAsync(string.Format("a workspace without a {0} resource", resource_Name), ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 7
        await testRunner.AndAsync("a current user", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 8
        await testRunner.WhenAsync(string.Format("a current user requests to run a {0} for a workspace", resource_Name), ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 9
        await testRunner.ThenAsync(string.Format("there should be a workspace {0} resource created", resource_Name), ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 10
        await testRunner.AndAsync(string.Format("there should be {0} messages in resource messaging queue", number_Of_Messages), ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Request a resource to be deleted from a workspace")]
        [Xunit.TraitAttribute("FeatureTitle", "Resource Requesting")]
        [Xunit.TraitAttribute("Description", "Request a resource to be deleted from a workspace")]
        [Xunit.TraitAttribute("Category", "queue")]
        [Xunit.InlineDataAttribute("AzureStorageBlob", "1", new string[0])]
        public async System.Threading.Tasks.Task RequestAResourceToBeDeletedFromAWorkspace(string resource_Name, string number_Of_Messages, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "queue"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("resource_name", resource_Name);
            argumentsOfScenario.Add("number_of_messages", number_Of_Messages);
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Request a resource to be deleted from a workspace", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 22
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 23
        await testRunner.GivenAsync(string.Format("a workspace without a {0} resource", resource_Name), ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 24
        await testRunner.AndAsync("a current user", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 25
        await testRunner.WhenAsync(string.Format("a current user requests to delete a {0} resource in a workspace", resource_Name), ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 26
        await testRunner.ThenAsync(string.Format("there should be a workspace {0} resource created", resource_Name), ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 27
        await testRunner.AndAsync(string.Format("there should be {0} delete messages in resource messaging queue", number_Of_Messages), ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Request to run an update resource for a workspace")]
        [Xunit.TraitAttribute("FeatureTitle", "Resource Requesting")]
        [Xunit.TraitAttribute("Description", "Request to run an update resource for a workspace")]
        [Xunit.TraitAttribute("Category", "queue")]
        [Xunit.InlineDataAttribute("VariableUpdate", "1", new string[0])]
        public async System.Threading.Tasks.Task RequestToRunAnUpdateResourceForAWorkspace(string resource_Name, string number_Of_Messages, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "queue"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("resource_name", resource_Name);
            argumentsOfScenario.Add("number_of_messages", number_Of_Messages);
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Request to run an update resource for a workspace", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 34
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 35
        await testRunner.GivenAsync(string.Format("a workspace without a {0} resource", resource_Name), ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 36
        await testRunner.AndAsync("a current user", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 37
        await testRunner.WhenAsync(string.Format("a current user requests to run a {0} for a workspace", resource_Name), ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 38
        await testRunner.ThenAsync(string.Format("there should not be a workspace {0} resource created", resource_Name), ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 39
        await testRunner.AndAsync(string.Format("there should be {0} messages in resource messaging queue", number_Of_Messages), ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Request to run an unreleased workspace resource")]
        [Xunit.TraitAttribute("FeatureTitle", "Resource Requesting")]
        [Xunit.TraitAttribute("Description", "Request to run an unreleased workspace resource")]
        [Xunit.TraitAttribute("Category", "queue")]
        [Xunit.InlineDataAttribute("AzureArcGis", new string[0])]
        [Xunit.InlineDataAttribute("AzureVirtualMachine", new string[0])]
        [Xunit.InlineDataAttribute("ContactUs", new string[0])]
        public async System.Threading.Tasks.Task RequestToRunAnUnreleasedWorkspaceResource(string resource_Name, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "queue"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("resource_name", resource_Name);
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Request to run an unreleased workspace resource", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 46
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 47
        await testRunner.GivenAsync(string.Format("a workspace without a {0} resource", resource_Name), ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 48
        await testRunner.AndAsync("a current user", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 49
        await testRunner.WhenAsync(string.Format("a current user requests to run a {0} for a workspace", resource_Name), ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 50
        await testRunner.ThenAsync(string.Format("there should not be a workspace {0} resource created", resource_Name), ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 51
        await testRunner.AndAsync("there should be 0 messages in resource messaging queue", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "2.0.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : object, Xunit.IAsyncLifetime
        {
            
            async System.Threading.Tasks.Task Xunit.IAsyncLifetime.InitializeAsync()
            {
                await ResourceRequestingFeature.FeatureSetupAsync();
            }
            
            async System.Threading.Tasks.Task Xunit.IAsyncLifetime.DisposeAsync()
            {
                await ResourceRequestingFeature.FeatureTearDownAsync();
            }
        }
    }
}
#pragma warning restore
#endregion
