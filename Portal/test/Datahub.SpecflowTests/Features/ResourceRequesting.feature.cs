// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Datahub.SpecflowTests.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class ResourceRequestingFeature : object, Xunit.IClassFixture<ResourceRequestingFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "ResourceRequesting.feature"
#line hidden
        
        public ResourceRequestingFeature(ResourceRequestingFeature.FixtureData fixtureData, Datahub_SpecflowTests_XUnitAssemblyFixture assemblyFixture, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "Resource Requesting", "Tests around the workspace resource requesting and its functionality for the user" +
                    "", ProgrammingLanguage.CSharp, featureTags);
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public void TestInitialize()
        {
        }
        
        public void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        void System.IDisposable.Dispose()
        {
            this.TestTearDown();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Request a resource to be provisioned for a workspace")]
        [Xunit.TraitAttribute("FeatureTitle", "Resource Requesting")]
        [Xunit.TraitAttribute("Description", "Request a resource to be provisioned for a workspace")]
        [Xunit.TraitAttribute("Category", "queue")]
        [Xunit.InlineDataAttribute("Default", "1", new string[0])]
        [Xunit.InlineDataAttribute("NewProjectTemplate", "1", new string[0])]
        [Xunit.InlineDataAttribute("AzureAppService", "1", new string[0])]
        [Xunit.InlineDataAttribute("AzureDatabricks", "1", new string[0])]
        [Xunit.InlineDataAttribute("AzureStorageBlob", "1", new string[0])]
        [Xunit.InlineDataAttribute("AzurePostgres", "1", new string[0])]
        public void RequestAResourceToBeProvisionedForAWorkspace(string resource_Name, string number_Of_Messages, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "queue"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("resource_name", resource_Name);
            argumentsOfScenario.Add("number_of_messages", number_Of_Messages);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Request a resource to be provisioned for a workspace", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 5
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
        testRunner.Given(string.Format("a workspace without a {0} resource", resource_Name), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 7
        testRunner.And("a current user", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 8
        testRunner.When(string.Format("a current user requests to run a {0} for a workspace", resource_Name), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 9
        testRunner.Then(string.Format("there should be a workspace {0} resource created", resource_Name), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 10
        testRunner.And(string.Format("there should be {0} messages in resource messaging queue", number_Of_Messages), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Request to run an update resource for a workspace")]
        [Xunit.TraitAttribute("FeatureTitle", "Resource Requesting")]
        [Xunit.TraitAttribute("Description", "Request to run an update resource for a workspace")]
        [Xunit.TraitAttribute("Category", "queue")]
        [Xunit.InlineDataAttribute("VariableUpdate", "1", new string[0])]
        public void RequestToRunAnUpdateResourceForAWorkspace(string resource_Name, string number_Of_Messages, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "queue"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("resource_name", resource_Name);
            argumentsOfScenario.Add("number_of_messages", number_Of_Messages);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Request to run an update resource for a workspace", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 22
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 23
        testRunner.Given(string.Format("a workspace without a {0} resource", resource_Name), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 24
        testRunner.And("a current user", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 25
        testRunner.When(string.Format("a current user requests to run a {0} for a workspace", resource_Name), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 26
        testRunner.Then(string.Format("there should not be a workspace {0} resource created", resource_Name), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 27
        testRunner.And(string.Format("there should be {0} messages in resource messaging queue", number_Of_Messages), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Request to run an unreleased workspace resource")]
        [Xunit.TraitAttribute("FeatureTitle", "Resource Requesting")]
        [Xunit.TraitAttribute("Description", "Request to run an unreleased workspace resource")]
        [Xunit.TraitAttribute("Category", "queue")]
        [Xunit.InlineDataAttribute("AzureArcGis", new string[0])]
        [Xunit.InlineDataAttribute("AzureVirtualMachine", new string[0])]
        [Xunit.InlineDataAttribute("ContactUs", new string[0])]
        public void RequestToRunAnUnreleasedWorkspaceResource(string resource_Name, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "queue"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("resource_name", resource_Name);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Request to run an unreleased workspace resource", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 34
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 35
        testRunner.Given(string.Format("a workspace without a {0} resource", resource_Name), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 36
        testRunner.And("a current user", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 37
        testRunner.When(string.Format("a current user requests to run a {0} for a workspace", resource_Name), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 38
        testRunner.Then(string.Format("there should not be a workspace {0} resource created", resource_Name), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 39
        testRunner.And("there should be 0 messages in resource messaging queue", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                ResourceRequestingFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                ResourceRequestingFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
