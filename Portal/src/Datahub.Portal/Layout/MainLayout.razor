@inherits LayoutComponentBase

@using Microsoft.Identity.Web
@using Datahub.Portal.Views.Dialogs

@inject NavigationManager _navigationManager
@inject IDatahubAuditingService _auditingService
@inject IUserCircuitCounterService _userCircuitCounterService
@inject MicrosoftIdentityConsentAndConditionalAccessHandler _consentHandler
@inject DatahubPortalConfiguration _portalConfiguration
@inject IUserInformationService _userInformationService
@inject IUserSettingsService _userSettingsService
@inject IDialogService _dialogService



<PageTitle>@Localizer[_portalConfiguration.Title]</PageTitle>

@if (_isLoaded)
{
    <CascadingValue Value="@DatahubTheme.DefaultTheme">
        <AuthorizeView>
            <Authorized>
                @if (_isSessionEnabled == true)
                {
                    @Body
                }
                @if (_isSessionEnabled == false)
                {
                    <TooManyTabs/>
                }
            </Authorized>
            <NotAuthorized>
                <div>@Localizer["ERROR-PAGE.ConnectionLost-Label"]</div>
            </NotAuthorized>
        </AuthorizeView>
    </CascadingValue>
}
else
{
    <MudContainer MaxWidth="MaxWidth.Small" Class="mt-16">
        <i class="fa-solid fa-house" style="opacity:0; position: absolute; top: 0; left: 0;"></i>
        <i class="fa-duotone fa-house" style="opacity:0; position: absolute; top: 0; left: 0;"></i>
        <DHLoadingInitializer Message="@Localizer[GetLoadMessage()]"/>
    </MudContainer>
}

@code
{
    private bool? _isSessionEnabled;
    private bool _isLoaded = false;
    private const string LogoutUrl = PageRoutes.Logout;
    private bool _isUserValid = true;

    private static readonly string[] LOAD_MESSAGES = new[] { "Recomputing DNA sequence", "Identifying the pathogen", "Recalculating fungal genome", "Predicting soil mapping", "Analyzing forest coverage" };

    private static string GetLoadMessage()
    {
        return LOAD_MESSAGES[new Random().Next(LOAD_MESSAGES.Length)];
    }

    protected override async Task OnInitializedAsync()
    {
        var user = await _userInformationService.GetAuthenticatedUser(true);
        _isUserValid = await _userSettingsService.HasUserAcceptedTAC();

        if (!user.Identity?.IsAuthenticated ?? true)
        {
            var returnUrl = _navigationManager.ToBaseRelativePath(_navigationManager.Uri);
            _navigationManager.NavigateTo($"/login?redirectUri={returnUrl}", forceLoad: true);
            return;
        }

        try
        {
            _isSessionEnabled = await _userCircuitCounterService.IsSessionEnabled();
            await _auditingService.TrackEvent("Login");
        }
        catch (Exception ex)
        {
            _consentHandler.HandleException(ex);
        }

    // register and or update authenticated portal user
        await _userInformationService.RegisterAuthenticatedPortalUser();
        
        _isLoaded = true;
    }
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);

        if (firstRender)
        {
            var language = await _userSettingsService.GetUserLanguage();
            if (string.IsNullOrWhiteSpace(language))
            {
                await PromptForLanguage();
            }

            var userAcceptedTac = await _userSettingsService.HasUserAcceptedTAC();
            if (!userAcceptedTac)
            {
                await PromptForTermsAndConditions();
            }
        }
    }
    
    private async Task PromptForTermsAndConditions()
    {
        var options = new DialogOptions
        {
            CloseOnEscapeKey = false,
            DisableBackdropClick = true,
        };

        var tocDialog = await _dialogService.ShowAsync<UserTermsAndConditionsDialog>(Localizer["TermsAndConditions"], options);
        var tocDialogResult = await tocDialog.Result;
        if (!tocDialogResult.Canceled && tocDialogResult.Data is true)
        {
            await _userSettingsService.RegisterUserTAC();
            _isUserValid = true;
        }
        else
        {
            _navigationManager.NavigateTo(LogoutUrl, forceLoad: true);
        }
    }

    private async Task PromptForLanguage()
    {
        var options = new DialogOptions
        {
            CloseOnEscapeKey = false,
            DisableBackdropClick = true,
        };

        var languageDialog = await _dialogService.ShowAsync<UserSelectLanguageDialog>(Localizer["LanguagePreferencePrompt"], options);
        var languageDialogResult = await languageDialog.Result;
        if (!languageDialogResult.Canceled)
        {
            var selectedLanguage = languageDialogResult.Data.ToString();
            var language = selectedLanguage?.Equals("english", StringComparison.InvariantCultureIgnoreCase) ?? true ? "en-CA" : "fr-CA";
            await _userSettingsService.RegisterUserLanguage(language);
            await _userSettingsService.SetLanguage(language);
        }
    }
}