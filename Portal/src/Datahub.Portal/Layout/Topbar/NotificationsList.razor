@inject TimeZoneService _timezoneService
@inject ISystemNotificationService _systemNotificationService
@inject NavigationManager _navigationManager
@inject IUserInformationService _userInformationService

@implements IDisposable
@using System.Globalization
@using Datahub.Application.Services.UserManagement
@using Datahub.Core.Data
@using Datahub.Core.Model.Datahub
@using Datahub.Core.Services.Notification
@using Datahub.Core.Services.UserManagement;
@using MudBlazor.Utilities

<span>
    @if (_unreadNotificationCount > 0)
    {
        <MudBadge Dot Color="Color.Primary" Overlap>
            <MudTooltip Text="@Localizer[TooltipText]">
                <div class="sr-only"><p>@Localizer[TooltipText]</p></div>
                <MudToggleIconButton
                    aria-label="Notifications toggle"
                    ToggledIcon="@Icons.Material.Filled.Notifications"
                    ToggledChanged="@ToggleNotificationsList"
                    Toggled="IsNotificationsListOpen"
                    Icon="@Icons.Material.Outlined.Notifications"/>
            </MudTooltip>
        </MudBadge>
    }
    else
    {
        <MudTooltip Text="@Localizer[TooltipText]">
            <div class="sr-only"><p>@Localizer[TooltipText]</p></div>
            <MudToggleIconButton
                aria-label="Notifications toggle"
                ToggledIcon="@Icons.Material.Filled.Notifications"
                ToggledChanged="@ToggleNotificationsList"
                Toggled="IsNotificationsListOpen"
                Icon="@Icons.Material.Outlined.Notifications"/>
        </MudTooltip>
    }

    <MudPopover
        Style="@_style"
        Class="pa-8"
        Open="@IsNotificationsListOpen"
        AnchorOrigin="Origin.BottomRight"
        TransformOrigin="Origin.TopRight">


        @if (_notifications == null || _isLoading)
        {
            @for (var i = 0; i < 1; i++)
            {
                <MudSkeleton/>
                <MudSkeleton SkeletonType="SkeletonType.Rectangle" Width="300px" Height="110px"/>
            }
        }
        else if (_notifications.Count == 0)
        {
            <MudCard>
                <MudCardContent>
                    <MudText>
                        @Localizer["You have no notifications."]
                    </MudText>
                </MudCardContent>
            </MudCard>
        }
        else
        {
            <MudExpansionPanels Elevation="0" Style="@_notificationsStyle">
                @foreach (var notification in _notifications)
                {
                    var time = GetLocalTime(notification).Result;
                    <MudExpansionPanel Text="@time" Style="@BuildNotificationStyle(notification)">
                        <MudCard Outlined>
                            <MudCardContent>
                                <MudText>
                                    @(_userLanguageIsFrench ? notification.NotificationTextFr_TXT : notification.NotificationTextEn_TXT)
                                </MudText>
                            </MudCardContent>

                            @if (!string.IsNullOrEmpty(notification.ActionLink_URL))
                            {
                                <MudCardActions>
                                    <MudStack Row Justify="Justify.SpaceBetween">
                                        <MudButton
                                            OnClick="@(async () => await GoToActionLink(notification))"
                                            EndIcon="@Icons.Material.Filled.Send"
                                            Variant="Variant.Filled"
                                            Color="Color.Primary">
                                            @Localizer[notification.ActionLink_Key ?? $"{LocalizationPrefix}.DefaultActionLinkText"]
                                        </MudButton>
                                        <MudButton
                                            OnClick="@(async () => await ToggleUnread(notification))"
                                            Variant="Variant.Text">
                                            @(notification.Read_FLAG ? @Localizer[$"{LocalizationPrefix}.MarkUnread"] : @Localizer[$"{LocalizationPrefix}.MarkRead"])
                                        </MudButton>
                                    </MudStack>
                                </MudCardActions>
                            }
                        </MudCard>
                    </MudExpansionPanel>
                }
            </MudExpansionPanels>
            <MudStack Row>
                <MudCheckBox Value=@_unreadOnly ValueChanged=@ToggleUnreadOnly T="bool" Label=@Localizer[$"{LocalizationPrefix}.ShowUnreadOnly"] />
                <MudPagination
                    Color="Color.Primary"
                    Count="_totalNotificationCount"
                    Selected="@_currentPage"
                    SelectedChanged="PageChanged"/>
            </MudStack>
        }
        
    </MudPopover>
</span>


@code {
    [Parameter]
    public bool IsNotificationsListOpen { get; set; }

    [Parameter]
    public Action ToggleNotificationsList { get; set; }

    private string _currentUserId;

    private static readonly string LocalizationPrefix = "SYSTEM-NOTIFICATION";
    private List<SystemNotification> _notifications;
    private bool _isLoading = true;

    private int _unreadNotificationCount;
    private int _totalNotificationCount;
    private bool _unreadOnly = true;


    private bool _userLanguageIsFrench => CultureInfo.CurrentUICulture.TwoLetterISOLanguageName.ToLowerInvariant() == "fr";

    private int _currentPage = 1;

    private string _style;
    private string _notificationsStyle;
    private bool _showNotifications;
    private int _notificationBadge;
    private bool _showNotificationBadge => _unreadNotificationCount > 0;
    private string _notificationIcon => _showNotificationBadge ? Icons.Material.Filled.Notifications : Icons.Material.Outlined.Notifications;

    private const string TooltipText = "Notifications";
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        _style = new StyleBuilder()
            .AddStyle("width", "550px")
            .Build();

        _notificationsStyle = new StyleBuilder()
            .AddStyle("max-height", "400px")
            .AddStyle("overflow-y", "auto")
            .Build();


        _currentUserId = await _userInformationService.GetUserIdString();
        _notificationBadge = await _systemNotificationService.GetNotificationCountForUser(_currentUserId, true);


        // prepare the timezone service so timestamps get rendered properly right away
        _systemNotificationService.Notify += OnNotify;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        
        if (firstRender)
        {
            await _timezoneService.LocalDateTime(DateTime.UtcNow);
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();

        await RefreshNotifications();
    }

    public void Dispose()
    {
        _systemNotificationService.Notify -= OnNotify;
    }
}