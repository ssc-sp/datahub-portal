@using MudBlazor.Utilities

@implements IDisposable
@inject IJSRuntime _jsRuntime

<span>
    <MudTooltip Text="@Localizer["Help"]">
        <div class="reader-only">
            <p>@Localizer["Help"]</p>
        </div>
        <MudToggleIconButton
            aria-label="Help toggle"
            ToggledIcon="@Icons.Material.Filled.Help"
            ToggledChanged="@ToggleHelp"
            Toggled="_isHelpPopupOpen"
            Icon="@Icons.Material.Outlined.HelpOutline"/>
    </MudTooltip>

    <MudPopover
        Style="@_style"
        Open="@_isHelpPopupOpen"
        AnchorOrigin="Origin.BottomRight"
        TransformOrigin="Origin.TopRight">
        <span id="help-popup">
            <MudCard Elevation="0" Class="py-4 px-6">
                <MudCardHeader>
                    <CardHeaderContent>
                        <MudText Typo="Typo.h2">@Localizer["Troubleshooting"]</MudText>
                    </CardHeaderContent>
                    <CardHeaderActions>
                        @*Tooltip currently does not work here*@
                        @*issue has been reported here: https://github.com/MudBlazor/MudBlazor/issues/5542*@
                        <MudTooltip Text="@(Localizer["Close"])">
                            <MudIconButton Icon="@Icons.Material.Filled.Close" Color="Color.Default" OnClick="@ToggleHelp"/>
                        </MudTooltip>
                    </CardHeaderActions>
                </MudCardHeader>
                <MudCardContent>
                    <HelpDialog ToggleHelp="@ToggleHelp"/>
                </MudCardContent>
            </MudCard>
        </span>

    </MudPopover>
</span>


@code {


    private async Task ToggleHelp()
    {
        _isHelpPopupOpen = !_isHelpPopupOpen;
        if (_isHelpPopupOpen)
        {
            _helpPopup = await _module.InvokeAsync<IJSObjectReference>("initialize", _dotNetHelper);
        }
        StateHasChanged();
    }

    private bool _isHelpPopupOpen = false;
    private IJSObjectReference _module;
    private IJSObjectReference _helpPopup;
    private DotNetObjectReference<HelpPopup> _dotNetHelper;

    private string _style = new StyleBuilder()
        .AddStyle("width", "550px")
        .AddStyle("overflow-y", "auto")
        .AddStyle("max-height", "800px")
        .Build();


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);

        if (firstRender)
        {
            try
            {
                _module = await _jsRuntime.InvokeAsync<IJSObjectReference>("import","./Layout/Topbar/HelpPopup.razor.js");
            }
            catch (Exception e)
            {
                _module = await _jsRuntime.InvokeAsync<IJSObjectReference>("import","./_content/Datahub.Portal/Layout/Topbar/HelpPopup.razor.js");
            }

            _dotNetHelper = DotNetObjectReference.Create(this);
            
        }
    }


    [JSInvokable]
    public async Task CloseHelpPopup()
    {
        await ToggleHelp();
    }
    

    public void Dispose()
    {
        _dotNetHelper?.Dispose();
        _helpPopup?.DisposeAsync();
    }


}