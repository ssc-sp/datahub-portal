@*Sidebar.razor*@
@using Datahub.Core.Data
@using Datahub.Core.Services.Security;
@using Datahub.Core.Utils
@using MudBlazor.Utilities

@inject ServiceAuthManager ServiceAuthManager
@inject IUserInformationService _userInformationService
@inject IConfiguration Configuration


<MudNavMenu Bordered>
    @foreach (var (href, icon, label,_) in GetLinks().Where(t => t.enabled))
    {
        <div class="mud-nav-item">
            <NavLink class="mud-nav-link mud-ripple px-0 py-4 justify-center" style="@GetNavStyle(icon)" href="@href" Match="NavLinkMatch.Prefix" ActiveClass="active">
                <MudStack AlignItems="AlignItems.Center" Spacing="1">
                    <MudIcon Icon="@icon.Name"/>
                    <MudText Typo="Typo.body2" Style="@_navTextStyle">
                        @Localizer[label]
                    </MudText>
                </MudStack>
            </NavLink>
        </div>
    }
    @foreach (var (href, icon, label, roles) in _authorizedLinks)
    {
        <AuthorizeView Roles="@string.Join(',', roles)">
            <div class="mud-nav-item">
                <NavLink class="mud-nav-link mud-ripple px-0 py-4 justify-center" href="@href" Match="NavLinkMatch.Prefix" ActiveClass="active">
                    <MudStack AlignItems="AlignItems.Center">
                        <MudIcon Icon="@icon.Name"/>
                        <MudText Typo="Typo.body2" Style="@_navTextStyle">
                            @Localizer[label]
                        </MudText>
                    </MudStack>
                </NavLink>
            </div>
        </AuthorizeView>
    }
</MudNavMenu>

@code {

    private bool _userHasInitiatives;
    private bool _isNotDatahubAdmin;
    private string _navTextStyle;

    private List<(string Href, Icon Icon, string Label, List<string> Roles)> _authorizedLinks = new();

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        
        var user = await _userInformationService.GetCurrentGraphUserAsync();
        _authorizedLinks = GetAuthorizedLinks(user.Id);
        
        _userHasInitiatives = !(await _userInformationService.IsUserWithoutInitiatives());
        _isDatahubAdmin = await _userInformationService.IsUserDatahubAdmin();
        _navTextStyle = new StyleBuilder()
            .AddStyle("font-size", ".5rem")
            .AddStyle("text-transform", "uppercase")
            .Build();
    }

    private string GetNavStyle(Icon icon)
    {
        return new StyleBuilder()
            .AddStyle("--mud-palette-primary", icon.HexColor)
            .Build();
    }

    private List<(string Href, Icon Icon, string Label, bool enabled)> GetLinks()
    {
        return new()
        {
            ("/home", Icon.HOME, "SIDEBAR.Home", true),
            ("/w", Icon.PROJECT, "SIDEBAR.Workspaces", true), 
            ("/resources", Icon.RESOURCES, "SIDEBAR.Resources", true),
            ("/tools", Icon.TOOLS, "SIDEBAR.Tools", !_isNotDatahubAdmin),
            ("/discovery", Icon.CATALOG, "SIDEBAR.Catalog", (IsFeatureEnabled("DataCatalog") && _userHasInitiatives)),
            ("/profile", Icon.PROFILE, "My Profile", true),
            //("/data", Icon.STORAGE, "SIDEBAR.Storage"),
            //("/datasets", Icon.DATASETS, "SIDEBAR.Datasets"),
            //("/powerbi", Icon.POWERBI, "SIDEBAR.PowerBI"),      
        };
    }

    private List<(string Href, Icon Icon, string Label, List<string> Roles)> GetAuthorizedLinks(string userId = null)
    {
        if (!_isNotDatahubAdmin)
        {
            return new()
            {
                ("/administration", Icon.ADMIN, "SIDEBAR.Admin", new List<string>() {RoleConstants.DATAHUB_ROLE_ADMIN})
            };
        }

        return new List<(string, Icon, string, List<string>)>();
    }

    private bool IsFeatureEnabled(string name)
    {
        return Configuration[name] == "enabled";
    }
}