@using Datahub.Core.Services.Notification
@inject IJSRuntime JSRuntime
@inject IEmailNotificationService EmailNotificationService
@inject IUserInformationService _userInformationService

<p id="datahub-error-page" style="display: none">An error has occured!</p>

<SectionContent SectionName="side-bar">
    <PersonalSidebar/>
</SectionContent>

<MudCard Class="pa-4">
    <MudCardHeader>
        <CardHeaderContent>
            <MudText Typo="Typo.h4">@Localizer["ERROR-PAGE.SomethingWentWrong-Label"]</MudText>
        </CardHeaderContent>
        <CardHeaderActions>
            <MudTooltip Text="@Localizer["Error"]">
                <MudIconButton Icon="@Icons.Material.Filled.Error" Color="Color.Default"/>
            </MudTooltip>
        </CardHeaderActions>
    </MudCardHeader>
    <MudCardContent>
        <MudStack Spacing="2">
            <MudItem>
                <MudText Typo="Typo.h5">@Localizer["ERROR-PAGE.TechnicalDetails-Label"]</MudText>
                <MudText>@GetGeneralErrorText()</MudText>
            </MudItem>

            <environment include="Development">
                <MudItem>
                    <MudText Typo="Typo.h6">AppInsights Query</MudText>
                    <pre>
                        @AppInsightsQuery
                    </pre>
                </MudItem>

                <MudItem>
                    <MudText Typo="Typo.h6">Message</MudText>
                    <pre>
                        @Exception?.Message
                    </pre>
                </MudItem>

                <MudItem>
                    <MudText Typo="Typo.h6">Stack Trace</MudText>
                    <pre>
                        @Exception?.StackTrace
                    </pre>
                </MudItem>
            </environment>
        </MudStack>
    </MudCardContent>
    <MudCardActions>
        <MudButton Variant="Variant.Text" Color="Color.Primary" OnClick=@HandleEmailDatahub Disabled=@_emailSent>
            @Localizer["Email Datahub"]
        </MudButton>
    </MudCardActions>
</MudCard>

@code {

    [Parameter]
    public string User { get; set; }

    [Parameter]
    public string CorrelationId { get; set; }

    [Parameter]
    public Exception Exception { get; set; }

    private bool _emailSent;

    private MarkupString GetGeneralErrorText()
    {
        var template = Localizer["ERROR-PAGE.ErrorExplanation-Text"].ToString();
        return new MarkupString(string.Format(template, $"<strong>{CorrelationId}</strong>"));
    }

    private string AppInsightsQuery => $"exceptions\n| where customDimensions.correlationId == '{CorrelationId}'";

    private async Task HandleEmailDatahub()
    {
        try
        {
            _emailSent = true;
            await InvokeAsync(StateHasChanged);

            var portalUser = await _userInformationService.GetCurrentPortalUserAsync();

            await EmailNotificationService.EmailErrorToDatahub($"Datahub App Error - {CorrelationId}", portalUser.Email, "",
                AppInsightsQuery, Exception?.StackTrace);
        }
        catch (Exception)
        {
            _emailSent = false;
        }
    }

}