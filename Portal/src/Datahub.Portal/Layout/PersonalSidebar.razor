@using Datahub.Application.Services.UserManagement
@using Datahub.Application.Services.UserManagement
@using Datahub.Core.Model.Achievements
@using Datahub.Core.Model.Projects
@using Datahub.Core.Model.UserTracking
@using Datahub.Infrastructure.Services.UserManagement
@using Datahub.Portal.Components.User
@using MudBlazor.Utilities

@inject IUserInformationService _userInformationService
@inject UserLocationManagerService _userLocationManagerService
@inject IDbContextFactory<DatahubProjectDBContext> _dbContextFactory
@inject IDialogService _dialogService
@inject NavigationManager _navigationManager

@if (!_isLoaded)
{
    return;
}

<MudStack Class="px-4 mt-6" id="nav">
    <MudStack Class="ml-2">
        <UserCard ViewedUserGraphId="@_viewedUser.GraphGuid" Size="@Size.Small" ShowEmail="false"/>
    </MudStack>
    <MudStack Spacing="2">
        <MudText Typo="Typo.h2" Class="ml-2" Style="font-size: 1rem">
            <b>
                @Localizer["My account"]
            </b>
        </MudText>
        <MudNavMenu Color="Color.Primary" role="navigation">
            <ul>
                @foreach (var sectionView in _accountItems)
                {
                    <li>
                        <MudNavLink Href="@GetSectionViewUrl(Localizer[PageRoutes.AccountPrefix], Localizer[sectionView])" Match="NavLinkMatch.All">
                            <MudStack Row AlignItems="AlignItems.Center">
                                <DHIcon Icon="@GetIcon(sectionView)" Size="Size.Small" Color="Color.Dark" Class="mr-2 ml-n2" Style="font-size: 1rem;"/>
                                <MudText Style="@_workspaceLinkStyle">
                                    @GetLabel(sectionView)
                                </MudText>
                            </MudStack>
                        </MudNavLink>
                    </li>
                }
            </ul>
        </MudNavMenu>
    </MudStack>
    <DatahubAuthView AuthLevel="DatahubAuthView.AuthLevels.DatahubAdmin">
        <MudStack Spacing="2">
            <MudText Typo="Typo.h2" Class="ml-2" Style="font-size: 1rem">
                <b>
                    @Localizer["Datahub Admin"]
                </b>
            </MudText>
            <MudNavMenu Color="Color.Primary" role="navigation">
                <ul>
                    @foreach (var sectionView in _datahubAdminItems)
                    {
                        <li>
                            <MudNavLink Href="@GetSectionViewUrl(Localizer[PageRoutes.ToolPrefix], Localizer[sectionView])" Match="NavLinkMatch.All">
                                <MudStack Row AlignItems="AlignItems.Center">
                                    <DHIcon Icon="@GetIcon(sectionView)" Size="Size.Small" Color="Color.Dark" Class="mr-2 ml-n2" Style="font-size: 1rem;"/>
                                    <MudText Style="@_workspaceLinkStyle">
                                        @GetLabel(sectionView)
                                    </MudText>
                                </MudStack>
                            </MudNavLink>
                        </li>
                    }
                </ul>
            </MudNavMenu>
        </MudStack>
    </DatahubAuthView>

    <DatahubAuthView AuthLevel="DatahubAuthView.AuthLevels.DatahubAdminGuestView">
        <MudSwitch T="bool"
                   Color="Color.Primary"
                   Value="@_isViewAsAdmin"
                   ValueChanged="@ToggleAdminMode"
                   Label="@Localizer["Admin Access Enabled"]"/>
    </DatahubAuthView>
</MudStack>

@code {

    private PortalUser _viewedUser;
    private bool _isViewAsAdmin;
    private List<Datahub_Project_User> _userRoles;
    private List<(UserRecentLink, Datahub_Project)> _recentLinks = new();

    private ushort _maxRecentLinks = 5;
    private ushort _maxWorkspacesToShow = 3;
    private ushort _numberOfRemainingWorkspaces = 3;
    private bool _canNotCreateWorkspace => _numberOfRemainingWorkspaces <= 0 && !_isViewAsAdmin;

    private bool _showAllRecentLinks = false;
    private bool _showAllWorkspaces = false;

    private bool _isLoaded = false;

    private const ushort MaxWorkspaceCount = 3;


    public struct SectionViews
    {
        public const string Profile = "";
        public const string Appearance = "appearance";
        public const string Customization = "customization";
        public const string Notifications = "notifications";
        public const string Achievements = "achievements";
        public const string Profile_FR = "";
        public const string Appearance_FR = "apparence";
        public const string Customization_FR = "personnalisation";
        public const string Notifications_FR = "notifications";
        public const string Achievements_FR = "realisations";

        public const string Diagnostics = "diagnostics";
        public const string Diagnostics_FR = "diagnostiques";
        public const string Statistics = "statistics";
        public const string Statistics_FR = "statistiques";
        public const string HealthCheck = "healthcheck";
        public const string HealthCheck_FR = "verification-sante";
        public const string Users = "users";
        public const string Users_FR = "utilisateurs";
        public const string Email = "email";
        public const string Email_FR = "courriel";
        public const string SupportRequests = "support-requests";
        public const string SupportRequests_FR = "demandes-assistance";
        public const string AzureSubscriptions = "azure-subscriptions";
        public const string AzureSubscriptions_FR = "abonnements-azure";
    }


    private List<string> _accountItems = new()
    {
        SectionViews.Profile,
        SectionViews.Customization,
        SectionViews.Appearance,
        SectionViews.Notifications,
        SectionViews.Achievements
    };

    private List<string> _datahubAdminItems = new()
    {
        SectionViews.Diagnostics,
        SectionViews.SupportRequests,
        SectionViews.Statistics,
        SectionViews.HealthCheck,
        SectionViews.Users,
        SectionViews.Email,
        SectionViews.AzureSubscriptions
    };


    private readonly string _workspaceLinkStyle = new StyleBuilder()
        .AddStyle("white-space", "nowrap")
        .AddStyle("overflow", "hidden")
        .AddStyle("text-overflow", "ellipsis")
        .Build();

    protected override async Task OnInitializedAsync()
    {
        _viewedUser = await _userInformationService.GetCurrentPortalUserAsync();
        _isViewAsAdmin = !(await _userInformationService.IsViewingAsGuest());

        await using var dbContext = await _dbContextFactory.CreateDbContextAsync();

        _userRoles = await dbContext.Project_Users
            .Include(u => u.Role)
            .Include(u => u.Project)
            // .ThenInclude(p => p.Users)
            .Include(u => u.PortalUser)
            .Where(u => u.PortalUser.Id == _viewedUser.Id)
            .ToListAsync();

        var userRecent = await _userLocationManagerService.GetRecentLinks(_viewedUser.GraphGuid, _maxRecentLinks);

        _recentLinks = userRecent?
            .Select(l => (l, project: GetProject(dbContext, l)))
            .ToList() ?? new List<(UserRecentLink l, Datahub_Project project)>();

        _numberOfRemainingWorkspaces = (ushort)(MaxWorkspaceCount - _userRoles.Count(u => u.RoleId is (int)Project_Role.RoleNames.WorkspaceLead or (int)Project_Role.RoleNames.Admin));

        _isLoaded = true;
    }

    private List<Datahub_Project_User> GetWorkspaces()
    {
        return _showAllWorkspaces
            ? _userRoles
            : _userRoles
                .Take(_maxWorkspacesToShow)
                .ToList();
    }


    private Datahub_Project GetProject(DatahubProjectDBContext dbContext, UserRecentLink link)
    {
        if (link.DataProject is null) return null;
        return dbContext.Projects
            .AsNoTracking()
            .Include(p => p.Resources)
            .FirstOrDefault(p => p.Project_Acronym_CD == link.DataProject.Trim());
    }

    private string GetSectionViewUrl(string prefix, string sectionView)
    {
        return $"/{prefix}/{sectionView}";
    }

    private string GetIcon(string sectionView)
    {
        return sectionView switch
        {
            SectionViews.Profile => SidebarIcons.Profile,
            SectionViews.Customization => SidebarIcons.Customization,
            SectionViews.Appearance => SidebarIcons.Appearance,
            SectionViews.Notifications => SidebarIcons.Notifications,
            SectionViews.Achievements => SidebarIcons.Achievements,

            SectionViews.Diagnostics => SidebarIcons.Diagnostics,
            SectionViews.Statistics => SidebarIcons.Statistics,
            SectionViews.HealthCheck => SidebarIcons.HealthCheck,
            SectionViews.Users => SidebarIcons.Users,
            SectionViews.Email => SidebarIcons.Email,
            SectionViews.AzureSubscriptions => SidebarIcons.AzureSubscriptions,
            SectionViews.SupportRequests => SidebarIcons.SupportRequests,

            _ => SidebarIcons.Profile
        };
    }

    private string GetLabel(string sectionView)
    {
        return sectionView switch
        {
            SectionViews.Profile => Localizer["Profile"],
            SectionViews.Customization => Localizer["Customization"],
            SectionViews.Appearance => Localizer["Appearance"],
            SectionViews.Notifications => Localizer["Notifications"],
            SectionViews.Achievements => Localizer["Achievements"],

            SectionViews.Diagnostics => Localizer["Diagnostics"],
            SectionViews.Statistics => Localizer["Statistics"],
            SectionViews.HealthCheck => Localizer["Health Check"],
            SectionViews.Users => Localizer["Users"],
            SectionViews.Email => Localizer["Email"],
            SectionViews.AzureSubscriptions => Localizer["Azure Subscriptions"],
            SectionViews.SupportRequests => Localizer["Support Requests"],

            _ => Localizer["Public Profile"]
        };
    }

    private string GetSectionViewUrl((UserRecentLink userRecentLink, Datahub_Project datahubProject) recentActivity)
    {
        return recentActivity.userRecentLink.LinkType switch
        {
            DatahubLinkType.DataProject => $"{PageRoutes.WorkspacePrefix}/{recentActivity.userRecentLink.DataProject}",
            DatahubLinkType.Databricks => TerraformVariableExtraction.ExtractDatabricksUrl(recentActivity.datahubProject),
            DatahubLinkType.Repository => $"{PageRoutes.WorkspacePrefix}/{recentActivity.userRecentLink.DataProject}/{WorkspaceSidebar.SectionViews.Repositories}",
            DatahubLinkType.Storage => $"{PageRoutes.WorkspacePrefix}/{recentActivity.userRecentLink.DataProject}/{WorkspaceSidebar.SectionViews.Storage}",
            DatahubLinkType.ResourceArticle => $"{PageRoutes.ResourcePrefix}/{recentActivity.userRecentLink.ResourceArticleId}",
            _ => "/"
        };
    }


    private string GetIcon((UserRecentLink userRecentLink, Datahub_Project datahubProject) recentActivity)
    {
        return recentActivity.userRecentLink.LinkType switch
        {
            DatahubLinkType.DataProject => SidebarIcons.Workspace,
            DatahubLinkType.Databricks => SidebarIcons.Databricks,
            DatahubLinkType.Repository => SidebarIcons.Repositories,
            DatahubLinkType.Storage => SidebarIcons.Storage,
            DatahubLinkType.ResourceArticle => SidebarIcons.Resources,
            _ => SidebarIcons.Workspace
        };
    }

    private string GetLabel((UserRecentLink userRecentLink, Datahub_Project datahubProject) recentActivity)
    {
        return recentActivity.userRecentLink.LinkType switch
        {
            DatahubLinkType.DataProject => recentActivity.datahubProject?.ProjectName ?? recentActivity.userRecentLink.DataProject ?? "Workspace",
            DatahubLinkType.Databricks => $"{Localizer["Databricks"]} - {recentActivity.datahubProject.ProjectName}",
            DatahubLinkType.Repository => $"{Localizer["Repositories"]} - {recentActivity.datahubProject.ProjectName}",
            DatahubLinkType.Storage => $"{Localizer["Storage"]} - {recentActivity.datahubProject.ProjectName}",
            DatahubLinkType.ResourceArticle => recentActivity.userRecentLink.ResourceArticleTitle,
            _ => recentActivity.datahubProject.ProjectName
        };
    }

    private async Task ToggleAdminMode()
    {
        _isViewAsAdmin = !_isViewAsAdmin;
        await _userInformationService.SetViewingAsGuest(!_isViewAsAdmin);
        _navigationManager.NavigateTo(_navigationManager.Uri, true);
    }
}