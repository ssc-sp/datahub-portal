@using DocumentFormat.OpenXml.Vml.Spreadsheet
@using Datahub.Core.Extensions
@using Datahub.Application.Services.UserManagement
@implements IDisposable
@inject ILogger<DHBreadcrumbs> _logger
@inject IMSGraphService _mSGraphService
@inject DatahubPortalConfiguration _datahubPortalConfiguration

@if (_isResourcePage)
{
    return;
}

<div class="sr-only" id="breadcrumb"><h3>@Localizer["Breadcrumb"]</h3></div>
<MudBreadcrumbs Items="@_items" Separator=">" Class="mb-8 ml-n4">
    <ItemTemplate Context="item">
        @if (!item.Disabled)
        {
            <MudLink Href="@item.Href" Typo="Typo.body1">
                @if (item.Icon != null)
                {
                    <DHIcon Icon="@item.Icon" Class="mr-2" />
                }
                @item.Text
            </MudLink>
        }
        else
        {
            <MudText Typo="Typo.body1">
                @if (item.Icon != null)
                {
                    <DHIcon Icon="@item.Icon" Class="mr-2" />
                }
                @item.Text
            </MudText>
        }
    </ItemTemplate>
</MudBreadcrumbs>

@code {

    [Inject]
    private NavigationManager _navigationManager { get; set; }

    private string _userProfileName = string.Empty;
    private List<BreadcrumbItem> _items;
    private bool _isResourcePage => _navigationManager.ToBaseRelativePath(_navigationManager.Uri).StartsWith("resources");

    protected override void OnInitialized()
    {
        base.OnInitialized();
        _navigationManager.LocationChanged += BuildBreadcrumbs;
        BuildBreadcrumbs();
    }

    private void BuildBreadcrumbs(object sender, LocationChangedEventArgs e)
    {
        BuildBreadcrumbs();
    }

    private void BuildBreadcrumbs()
    {
        InvokeAsync(() =>
        {
            var fullPath = _navigationManager.ToBaseRelativePath(_navigationManager.Uri).Split('?');
            
            var relativePath = fullPath[0];
            var query = fullPath.Length > 1 ? fullPath[1] : string.Empty;
            
            var paths = relativePath
                .Split('/')
                .Where(x => !string.IsNullOrWhiteSpace(x) && !x.Equals("home", StringComparison.InvariantCultureIgnoreCase))
                .ToList();
            var breadcrumbs = new List<BreadcrumbItem>
            {
                new(Localizer["breadcrumb_home"], "/", icon: Icons.Material.Filled.Home)
            };

            breadcrumbs.AddRange(paths
                .Select((x, i) => BuildBreadcrumbItem(
                    x,
                    string.Join("/", paths.Take(i + 1)) + (string.IsNullOrWhiteSpace(query) ? string.Empty : $"?{query}"),
                    i + 1 == paths.Count))
                .ToList());
            _items = breadcrumbs;
            StateHasChanged();
            return Task.CompletedTask;
        });

    }
    
    private BreadcrumbItem BuildBreadcrumbItem(string text, string path, bool disabled = false)
    {
        var label = Localizer[$"breadcrumb_{text}"].ToString();
        if (!label.StartsWith("breadcrumb_"))
        {
            return new BreadcrumbItem(label, path, disabled);
        }
        
        label = text;
        if (label != _userProfileName)
            _logger.LogInformation("No translation found for urlsegment '{Text}' in breadcrumbs.json, ignore if this is an acronym", text);
        return new BreadcrumbItem(label, path, disabled);
    }

    void IDisposable.Dispose()
    {
        _navigationManager.LocationChanged -= BuildBreadcrumbs;
    }

}