@using Datahub.Achievements
@using Blazored.LocalStorage
@using Datahub.Achievements.Models
@using Datahub.Core.Data
@using Datahub.Core.Model.Achievements;
@using Datahub.Core.Services.Achievements;
@using Microsoft.EntityFrameworkCore
@using System.Linq
@using Datahub.Core.Model.Datahub
@using Datahub.Portal.Pages.Profile.Achievements
@using Microsoft.Graph

@inject IPortalUserTelemetryService _telemetryService
@inject ISnackbar _snackbar
@inject NavigationManager _navigationManager
@inject ILocalStorageService _localStorage;
@inject IDbContextFactory<DatahubProjectDBContext> _dbFactoryProject
@inject IUserInformationService _userInformationService
@inject ILogger<DatahubAchievementProvider> _logger

@implements IDisposable

@code {

    protected override void OnInitialized()
    {
        base.OnInitialized();

        _navigationManager.LocationChanged += OnLocationChanged;
        _telemetryService.OnAchievementsEarned += OnAchievementsEarned;

        _snackbar.Configuration.PositionClass = Defaults.Classes.Position.TopCenter;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);

        if (firstRender)
        {
            try
            {
                await _telemetryService.LogTelemetryEvent(TelemetryEvents.UserLogin);

                await using var projectContext = await _dbFactoryProject.CreateDbContextAsync();
                var userId = await _userInformationService.GetUserIdString();

                var numberOfProjects = projectContext.Project_Users
                    .Count(p => p.User_ID == userId);

                if (numberOfProjects > 0)
                    await _telemetryService.LogTelemetryEvent(TelemetryEvents.UserJoinedProject);
            }
            catch (AuthenticationException)
            {
                _logger.LogInformation("Authentication unsuccessful for achievement service. User is not logged in and is likely being redirected to challenge");
            }
        }
    }

    private void OnAchievementsEarned(object sender, AchievementsEarnedEventArgs e)
    {
        e.Achievements.ForEach(achievement =>
        {
            _snackbar.Add<AchievementCard>(
                new Dictionary<string, object> { { "Achievement", achievement } },
                configure: config => { config.HideIcon = true; });
        });
    }

    private void OnAchievementEarned(object sender, AchievementEarnedEventArgs e)
    {
        var message = $"<ul><li><h3>{Localizer["Achievement Unlocked"]}!</h3></li><li><h4>{e.Achievement!.Name}</h4></li><li>{e.Achievement!.Description}</li></ul>";
        _snackbar.Add(message, Severity.Normal, config =>
        {
            config.Icon = e.Achievement!.Icon;
            config.IconColor = Color.Tertiary;
            config.ShowCloseIcon = false;
            config.Onclick = delegate
            {
                _navigationManager.NavigateTo("/profile");
                return Task.CompletedTask;
            };
        });
    }

    private void OnLocationChanged(object sender, LocationChangedEventArgs e)
    {
    //var relativeUrl = new Uri(e.Location).PathAndQuery;
    //InvokeAsync(async () =>
    //{
    //    await _achievementsService.AddOrIncrementTelemetryEvent(relativeUrl, 1);
    //    StateHasChanged();
    //});
    }

    void IDisposable.Dispose()
    {
        _navigationManager.LocationChanged -= OnLocationChanged;
        _telemetryService.OnAchievementsEarned -= OnAchievementsEarned;
    }

}