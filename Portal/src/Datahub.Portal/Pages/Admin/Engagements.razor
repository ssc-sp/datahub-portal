@page "/admin/engagements/{projectAcronym}"
@inject IStringLocalizer DataLocalizer
@implements IDisposable
@using System.Security.Claims
@using Datahub.Application.Services.UserManagement
@using Datahub.Core.Model.Projects
@inject NavigationManager NavigationManager
@inject IMSGraphService MSGraphService
@inject IJSRuntime JSRuntime
@inject IDbContextFactory<DatahubProjectDBContext> DbFactory
@inject IUserInformationService UserInformationService
@inject IDatahubAuditingService AuditingService
@inject ServiceAuthManager ServiceAuthManager

<Datahub.Core.Components.Form.MudFormTemplate T="ClientEngagement"
                                         U="DatahubProjectDBContext"
                                         Metadata="@_formMetadata"
                                         HandleSubmit="HandleValidSubmit"
                                         OnConfigureForms="OnConfigure"
                                         OnChangeForms="OnChange"
                                         CreateNewRecord="CreateNewProject"
                                         SelectedRecord="@_clientengagement"
                                         SetFormEditRecord="SetFormEdit"
                                         HandleFilterChange="HandleFilterChange"
                                         SortAccessors="@_sortAccessors"
                                         Context=@Context />

@code {
    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }

    [Parameter]
    public string projectAcronym { get; set; }
    private FormMetadata<ClientEngagement> _formMetadata = new();

    private List<ClientEngagement> _clientengagements;
    private ClientEngagement _clientengagement;
    //private List<Sector> _sectorLookup;
    private Dictionary<string, Func<ClientEngagement, string>> _sortAccessors = new();
    private DatahubProjectDBContext Context;
    private DatahubProject _project;
    private Microsoft.Graph.Models.User _user = null!;
    private ClaimsPrincipal _claimsUser = null;
    private string _searchFilter = string.Empty;

    protected async override Task OnInitializedAsync()
    {
        _user = await UserInformationService.GetCurrentGraphUserAsync();
        _claimsUser = (await authenticationStateTask).User;
        Context = DbFactory.CreateDbContext();
        _project = Context.Projects.Single(p => p.ProjectAcronymCD == projectAcronym);
        LoadData(_searchFilter);
    }


    private void OnConfigure(MudBlazor.Forms.IModelFormContext context)
    {

    }

    private void CreateNewProject()
    {
        _clientengagement = new ClientEngagement() { LastUpdatedDT = DateTime.Now, CreatedDT = DateTime.Now, CreatedUserId = _user.Mail, LastUpdatedUserId = _user.Mail, Project = _project };
        StateHasChanged();
    }

    private void LoadData(string searchfilter)
    {
        _clientengagements = Context.ClientEngagements.Where(ce => ce.Project == _project).ToList();

        var isUserAdmin = _claimsUser.IsInRole(RoleConstants.DATAHUBROLEADMIN);
        var clientengagements = _clientengagements;
        //if (!string.IsNullOrWhiteSpace(searchfilter))
        //{
        //    clientengagements = _clientengagements.Where(fundcenter =>
        //    {
        //        if (string.IsNullOrWhiteSpace(searchfilter))
        //            return true;
        //        if (fundcenter.Division.FundCenterModifiedEnglish.Contains(searchfilter, StringComparison.OrdinalIgnoreCase))
        //            return true;
        //        if (fundcenter.Branch.FundCenterModifiedEnglish.Contains(searchfilter, StringComparison.OrdinalIgnoreCase))
        //            return true;
        //        if (fundcenter.Sector.FundCenterModifiedEnglish.Contains(searchfilter, StringComparison.OrdinalIgnoreCase))
        //            return true;
        //        return false;
        //    }).ToList();
        //}
        _formMetadata.Header = "Client Engagements";
        _formMetadata.HeaderSubText = @"Below is a list of all engagements for the current initiative";
        _formMetadata.SubHeader = "Engagement Details";
        _formMetadata.DataSet = clientengagements;
        _formMetadata.AccessorFunctions = accessorFunctions;
        _formMetadata.Headers = headers;
        _formMetadata.AllowSearch = true;
        _formMetadata.IsSubmitEnabled = true;
        _formMetadata.IsAddEnabled = true;
    }

    private List<Func<ClientEngagement, string>> accessorFunctions = new List<Func<ClientEngagement, string>>
    {
        new Func<ClientEngagement, string>(p => { return p.EngagementName; }),
        new Func<ClientEngagement, string>(p => { return p.EngagementStartDate?.Date.ToShortDateString(); }),
        new Func<ClientEngagement, string>(p => { return p.RequirementsGatheringEndDate?.Date.ToShortDateString(); }),
        new Func<ClientEngagement, string>(p => { return p.Phase1DevelopmentEndDate?.Date.ToShortDateString(); }),
        new Func<ClientEngagement, string>(p => { return p.Phase1TestingEndDate?.Date.ToShortDateString(); }),
        new Func<ClientEngagement, string>(p => { return p.Phase2DevelopmentEndDate?.Date.ToShortDateString(); }),
        new Func<ClientEngagement, string>(p => { return p.Phase2TestingEndDate?.Date.ToShortDateString(); }),
        new Func<ClientEngagement, string>(p => { return p.FinalUpdatesEndDate?.Date.ToShortDateString(); }),
        new Func<ClientEngagement, string>(p => { return p.FinalReleaseDate?.Date.ToShortDateString(); }),
    };


    private async Task HandleValidSubmit()
    {

        if (_clientengagement != null)
        {
            if (_clientengagement.EngagementID == 0)
            {
                _clientengagement = Context.ClientEngagements.Add(_clientengagement).Entity;
            }
            _clientengagement.LastUpdatedDT = DateTime.Now;
            await Context.SaveChangesAsync();
            LoadData(_searchFilter); ;
            _clientengagement = null;
        }


        StateHasChanged();
    }

    private List<string> headers = new List<string>
    {
        "Engangement Name", "Engagement Start Date", "Requirements End Date", "Phase 1 End Date", "Phase 1 QA End Date", "Phase 2 End Date", "Phase 2 QA End Date", "Final Dev End Date", "Release Date"
    };

    private async Task<ClientEngagement> ClearForm()
    {
        _clientengagement = null;
        StateHasChanged();
        return await Task.FromResult((ClientEngagement)null);
    }

    private string GetDataLabel(string propName)
    {
        return DataLocalizer[propName];
    }

    private async void HandleFilterChange(string selection)
    {
        _searchFilter = selection;
        LoadData(_searchFilter);
        await InvokeAsync(StateHasChanged);
    }

    private void SetFormEdit(ClientEngagement engagement)
    {
        _clientengagement = engagement;
        StateHasChanged();
    }

    private void OnChange(MudBlazor.Forms.ModelFormChangeArgs args)
    {
        OnConfigure(args.Context);
    }

    public void Dispose()
    {
        Context.Dispose();
    }
}
