@*ProjectMetadata.razor*@

@page "/admin/metadata/{ProjectAcronym}"
@using Datahub.Core.Services.Projects;
@using Datahub.Metadata.Model
@using System.Text.Json
@using Datahub.Shared
@using Datahub.Shared.Entities
@inject IMetadataBrokerService MetadataBrokerService
@inject IRequestManagementService _requestManagementService
@inject IDbContextFactory<DatahubProjectDBContext> _dbContextFactory

<div class="manage-access"> 

    <MudText Typo="Typo.h4">@(ProjectAcronym)&nbsp;@(Localizer["Initiative Metadata"])</MudText>    

    <ProjectObjectMetadata 
        ProfileName="project"
        ObjectId=@ProjectAcronym
        Location=@ProjectAcronym
        ProjectAcronym=@ProjectAcronym 
        ObjectType=@MetadataObjectType.DataInitiative
        OnMetadataSaved=@HandleMetadataSaved />
</div>

@code {

    [Parameter]
    public string ProjectAcronym { get; set; }

    private void HandleMetadataSaved(Datahub_Project project)
    {
        project.MetadataAdded = true;

        using var ctx = _dbContextFactory.CreateDbContext();
        var databricksTemplateName = RequestManagementService.GetTerraformServiceType(IRequestManagementService.DATABRICKS);
        var projectDatabricks = ctx.Project_Resources2
            .Where(r => r.ProjectId == project.Project_ID)
            .FirstOrDefault(r => r.ResourceType == databricksTemplateName);

        if (projectDatabricks != null && projectDatabricks.TimeCreated != null)
        {
            var deserializeOptions = new JsonSerializerOptions
            {
                PropertyNameCaseInsensitive = true
            };

            var jsonContent =
                JsonSerializer.Deserialize<Dictionary<string, TerraformOutputVariable>>(projectDatabricks.JsonContent, deserializeOptions);
            var databricksUrlVariable = jsonContent[TerraformVariables.OutputAzureDatabricksWorkspaceUrl];
            
            MetadataBrokerService.CreateChildMetadata(project.Project_Acronym_CD, $"{project.Project_Acronym_CD}-Databricks", 
                MetadataObjectType.Databricks, databricksUrlVariable.Value, true);
        }

        foreach (var db in GetDbs(project))
        {
            MetadataBrokerService.CreateChildMetadata(project.Project_Acronym_CD, db.ResourceId.ToString(), 
                MetadataObjectType.Database, project.Project_Acronym_CD, true);
        }
    }

    private IEnumerable<Project_Resources2> GetDbs(Datahub_Project project)
    {
        return project.Resources
                      .Where(r => r.ResourceType == IRequestManagementService.POSTGRESQL || r.ResourceType == IRequestManagementService.SQLSERVER)
                      .ToList();
    }
}
