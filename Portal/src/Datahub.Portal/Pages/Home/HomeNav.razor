@using MudBlazor.Utilities
@using Datahub.Application.Services.UserManagement
@using Datahub.Portal.Pages.Explore
@using Datahub.Core.Model.Achievements
@using Datahub.Core.Model.Projects
@using Datahub.Core.Model.UserTracking
@using Datahub.Infrastructure.Services.UserManagement

@inject IUserInformationService _userInformationService
@inject UserLocationManagerService _userLocationManagerService
@inject IDbContextFactory<DatahubProjectDBContext> _dbContextFactory

<MudText Typo="Typo.h2">@Localizer["Quick Links"]</MudText>
<div role="group">
    <ul style="display: grid; grid-template-columns: repeat(3, 1fr); list-style-type: none; gap: 25px">
        <li style="display: flex; flex-grow: 1;">
            <MudPaper Elevation="0" Outlined Class="px-3 py-2">
                <MudStack>
                    <MudText Typo="Typo.h3">@Localizer["Recent Links"]</MudText>
                </MudStack>
                <MudStack Spacing="1" Class="px-3 mt-2">
                    @if (_recentLinks.Count == 0)
                    {
                        <MudText Typo="Typo.body2">@Localizer["No recent links found"]</MudText>
                    }
                    else 
                    {
                        <ul>
                            @foreach (var recentActivity in _recentLinks)
                            {
                                <li>
                                    <MudLink Href="@GetSectionViewUrl(recentActivity)" Style="text-overflow: ellipsis; white-space: nowrap; overflow: hidden;">
                                        <DHIcon Icon="@GetIcon(recentActivity)" Size="Size.Small" Class="mr-2 ml-n2" Style="font-size: 1rem;" Color="Color.Dark" />
                                        @GetLabel(recentActivity)
                                    </MudLink>
                                </li>
                            }
                        </ul>
                    }
                </MudStack>
            </MudPaper>
        </li>
        <li style="display: flex; flex-grow: 1;">
            <MudPaper Elevation="0" Outlined Class="px-3 py-2">
                    <MudStack>
                        <MudText Typo="Typo.h3">@Localizer["Create a new Workspace"]</MudText>
                        <MudText Typo="Typo.body2">@Localizer["You can create a new workspace to start working on your project"]</MudText>
                    </MudStack>
                    <MudStack Spacing="1" Class="mt-6">
                        <MudElement>
                            <DHButton EndIcon="@Icons.Material.Filled.KeyboardDoubleArrowRight" Variant="Variant.Filled" Color="Color.Primary" Href="@Localizer[PageRoutes.CreateWorkspace]">
                                @Localizer["Create Workspace"]
                            </DHButton>
                        </MudElement>
                    </MudStack>
            </MudPaper>
        </li>
        <li style="display: flex; flex-grow: 1;">
            <MudPaper Elevation="0" Outlined Class="px-3 py-2">
                    <MudStack>
                        <MudText Typo="Typo.h3">@Localizer["Explore Workspaces & Users"]</MudText>
                        <MudText Typo="Typo.body2">@Localizer["You can explore existing projects and users on the platform using the Explore page"]</MudText>
                    </MudStack>
                    <MudStack Spacing="1" Class="mt-6">
                        <MudElement>
                            <DHButton EndIcon="@Icons.Material.Filled.KeyboardDoubleArrowRight" Variant="Variant.Filled" Color="Color.Primary" Href="@Localizer[PageRoutes.Explore]">
                                @Localizer["Explore"]
                            </DHButton>
                        </MudElement>
                    </MudStack>
            </MudPaper>
        </li>
    </ul>
</div>

@code {
    private List<(UserRecentLink, Datahub_Project)> _recentLinks = new();
    private PortalUser _viewedUser;

    protected override async Task OnInitializedAsync()
    {
        _viewedUser = await _userInformationService.GetCurrentPortalUserAsync();

        await using var dbContext = await _dbContextFactory.CreateDbContextAsync();

        var userRecent = await _userLocationManagerService.GetRecentLinks(_viewedUser.GraphGuid, 5);

        _recentLinks = userRecent?
            .Select(l => (l, project: GetProject(dbContext, l)))
            .ToList() ?? new List<(UserRecentLink l, Datahub_Project project)>();
    }

    private Datahub_Project GetProject(DatahubProjectDBContext dbContext, UserRecentLink link)
    {
        if (link.DataProject is null) return null;
        return dbContext.Projects
            .AsNoTracking()
            .Include(p => p.Resources)
            .FirstOrDefault(p => p.Project_Acronym_CD == link.DataProject.Trim());
    }

    private string GetSectionViewUrl((UserRecentLink userRecentLink, Datahub_Project datahubProject) recentActivity)
    {
        return recentActivity.userRecentLink.LinkType switch
        {
            DatahubLinkType.DataProject => $"{PageRoutes.WorkspacePrefix}/{recentActivity.userRecentLink.DataProject}",
            DatahubLinkType.Databricks => TerraformVariableExtraction.ExtractDatabricksUrl(recentActivity.datahubProject),
            DatahubLinkType.Repository => $"{PageRoutes.WorkspacePrefix}/{recentActivity.userRecentLink.DataProject}/{WorkspaceSidebar.SectionViews.Repositories}",
            DatahubLinkType.Storage => $"{PageRoutes.WorkspacePrefix}/{recentActivity.userRecentLink.DataProject}/{WorkspaceSidebar.SectionViews.Storage}",
            DatahubLinkType.ResourceArticle => $"{PageRoutes.ResourcePrefix}/{recentActivity.userRecentLink.ResourceArticleId}",
            _ => "/"
        };
    }

    private string GetIcon((UserRecentLink userRecentLink, Datahub_Project datahubProject) recentActivity)
    {
        return recentActivity.userRecentLink.LinkType switch
        {
            DatahubLinkType.DataProject => SidebarIcons.Workspace,
            DatahubLinkType.Databricks => SidebarIcons.Databricks,
            DatahubLinkType.Repository => SidebarIcons.Repositories,
            DatahubLinkType.Storage => SidebarIcons.Storage,
            DatahubLinkType.ResourceArticle => SidebarIcons.Resources,
            _ => SidebarIcons.Workspace
        };
    }

    private string GetLabel((UserRecentLink userRecentLink, Datahub_Project datahubProject) recentActivity)
    {
        return recentActivity.userRecentLink.LinkType switch
        {
            DatahubLinkType.DataProject => recentActivity.datahubProject?.ProjectName ?? recentActivity.userRecentLink.DataProject ?? "Workspace",
            DatahubLinkType.Databricks => $"{Localizer["Databricks"]} - {recentActivity.datahubProject.ProjectName}",
            DatahubLinkType.Repository => $"{Localizer["Repositories"]} - {recentActivity.datahubProject.ProjectName}",
            DatahubLinkType.Storage => $"{Localizer["Storage"]} - {recentActivity.datahubProject.ProjectName}",
            DatahubLinkType.ResourceArticle => recentActivity.userRecentLink.ResourceArticleTitle,
            _ => recentActivity.datahubProject.ProjectName
        };
    }
}