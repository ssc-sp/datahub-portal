@page "/home"

@inherits ViewUserBase<HomePage>

@inject DatahubPortalConfiguration _datahubPortalConfiguration
@inject IPortalUserTelemetryService _telemetryService
@inject NavigationManager _navigationManager
@inject IDialogService _dialogService
@inject ILocalStorageService _localStorage
@inject IUserSettingsService _userSettingsService

@using Datahub.Application.Services.Announcements
@using Datahub.Portal.Pages.Landing
@using Datahub.Portal.Pages.Profile.Settings
@using Datahub.Core.Model.Achievements
@using Datahub.Core.Services.Achievements
@using Datahub.Portal.Views.Dialogs

@if (_viewedPortalUser is null)
{
    <MudContainer MaxWidth="MaxWidth.Small">
        <DHLoadingInitializer Message="@Localizer["Initializing Profile..."]"/>
    </MudContainer>
    return;
}

<DatahubAuthView AuthLevel="DatahubAuthView.AuthLevels.Personal" UserGraphId="@_viewedPortalUser.GraphGuid">
    <MudStack Row Justify="Justify.FlexEnd" Class="mb-8" Style="margin-top: -80px;">
        <MudButton Href="@_manageSettingsUrl" Variant="Variant.Text" StartIcon="@Icons.Material.Filled.Settings">
            @Localizer["Manage Settings"]
        </MudButton>
    </MudStack>
</DatahubAuthView>
<MudGrid>
    <MudItem xs="12">
@*         <MudImage Src="@_datahubPortalConfiguration.Media.GetAchievementImageUrl(_viewedPortalUser?.BannerPictureUrl)"
                  Alt="@Localizer["User's background image"]"
                  Class="rounded-lg mud-elevation-4"
                  Style="width: 100%"
                  ObjectFit="ObjectFit.Cover"
                  Height="320"
                  ObjectPosition="ObjectPosition.Center"/> *@

<WelcomeBanner/>
    </MudItem>
    <MudItem xs="12">
        <UserProjects UserId="@_viewedPortalUser?.GraphGuid" SmSize="6"/>
    </MudItem>
</MudGrid>

@code {

    private PortalUser _currentUser;
    private PortalUser _viewedPortalUser;
    private string _manageSettingsUrl => $"/profile/settings/{ProfileSettingsPage.SectionViews.Public}{(string.IsNullOrWhiteSpace(UserIdBase64) ? "" : $"?u={UserIdBase64}")}";
    private string _achievementsUrl => $"/profile/achievements{(string.IsNullOrWhiteSpace(UserIdBase64) ? "" : $"?u={UserIdBase64}")}";
    private bool _isUserValid = true;
    public const string LogoutUrl = "/signout-oidc";
    private List<AnnouncementPreview> _previews = new();
    private bool _isLoading = false;

    protected override async Task OnInitializedAsync()
    {
        _isLoading = true;
        await base.OnInitializedAsync();
        _currentUser = await _userInformationService.GetCurrentPortalUserAsync();

        //_user = await _userInformationService.GetCurrentGraphUserAsync();

        _isUserValid = await _userSettingsService.HasUserAcceptedTAC();
        if (_isUserValid)
        {
            //await AdjustLanguage();
        }
        _isLoading = false;
    }

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();

        _viewedPortalUser = await GetViewedPortalUserWithAchievementsAsync();

        if (_viewedPortalUser.GraphGuid != _currentUser.GraphGuid)
        {
            await _telemetryService.LogTelemetryEvent(TelemetryEvents.UserViewOtherProfile);
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);

        if (firstRender)
        {
            var language = await _userSettingsService.GetUserLanguage();
            if (string.IsNullOrWhiteSpace(language))
            {
                await PromptForLanguage();
            }

            var userAcceptedTac = await _userSettingsService.HasUserAcceptedTAC();
            if (!userAcceptedTac)
            {
                await PromptForTermsAndConditions();
            }
        }
    }

    private async Task PromptForTermsAndConditions()
    {
        var options = new DialogOptions
            {
                CloseOnEscapeKey = false,
                DisableBackdropClick = true,
            };

        var tocDialog = await _dialogService.ShowAsync<UserTermsAndConditionsDialog>(Localizer["TermsAndConditions"], options);
        var tocDialogResult = await tocDialog.Result;
        if (!tocDialogResult.Canceled)
        {
            await _userSettingsService.RegisterUserTAC();
            //await AdjustLanguage();
            _isUserValid = true;
        }
        else
        {
            _navigationManager.NavigateTo(LogoutUrl, forceLoad: true);
        }
    }

    private async Task PromptForLanguage()
    {
        var options = new DialogOptions
            {
                CloseOnEscapeKey = false,
                DisableBackdropClick = true,
            };

        var languageDialog = await _dialogService.ShowAsync<UserSelectLanguageDialog>(Localizer["LanguagePreferencePrompt"], options);
        var languageDialogResult = await languageDialog.Result;
        if (!languageDialogResult.Canceled)
        {
            var selectedLanguage = languageDialogResult.Data.ToString();
            var language = selectedLanguage?.Equals("english", StringComparison.InvariantCultureIgnoreCase) ?? true ? "en-CA" : "fr-CA";
            await _userSettingsService.RegisterUserLanguage(language);
            await _userSettingsService.SetLanguage(language);
        }
    }

    private async Task AdjustLanguage(bool afterRender = false)
    {
        var language = string.Empty;
        if (afterRender)
        {
            language = await _localStorage.GetItemAsStringAsync("language");
        }
        if (string.IsNullOrWhiteSpace(language))
        {
            language = await _userSettingsService.GetUserLanguage();
            if (afterRender)
            {
                await _localStorage.SetItemAsStringAsync("language", language);
            }
            await _userSettingsService.SetLanguage(language);
        }
    }


}