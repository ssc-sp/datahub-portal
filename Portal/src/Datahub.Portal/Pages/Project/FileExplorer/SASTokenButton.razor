@*SASTokenButton.razor*@

@using Datahub.Application.Services;
@using Datahub.Portal.Pages.Project.FileExplorer.ResourcePages
@using Datahub.Core.Services.Storage
@inject IJSRuntime _jsRuntime
@inject IProjectDataRetrievalService _dataRetrievalService

<MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="HandleSasButtonClick">
    <MudText>
        @GetButtonText()
    </MudText>
</MudButton>

@code {

    [CascadingParameter(Name = "ProjectAcronym")]
    public string ProjectAcronym { get; set; }

    [Parameter]
    public EventCallback<List<(string, string)>> OnSubstitutionsChanged { get; set; }

    [Parameter]
    public bool ContainerToken { get; set; }

    const string DefaultContainer = "datahuh";

    private string TokenName => ContainerToken ? "Container" : "SAS";

    private bool _showingCopiedForSasButton;
    private string _sasToken;
    private IJSObjectReference _module;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);

        _module = await _jsRuntime.InvokeAsync<IJSObjectReference>("import",
            "./Pages/Project/FileExplorer/FileExplorerPage.razor.js");
    }

    private string GetButtonText()
    {
        if (string.IsNullOrWhiteSpace(_sasToken))
            return Localizer[$"Generate {TokenName} Token"];

        if (_showingCopiedForSasButton)
            return Localizer["Copied!"];

        return Localizer[$"Copy {TokenName} Token"];
    }

    private async Task HandleSasButtonClick()
    {
        if (string.IsNullOrWhiteSpace(_sasToken))
        {
            var uri = await _dataRetrievalService.GenerateSasTokenAsync(ProjectAcronym, DefaultContainer, 14);
            _sasToken = ContainerToken ? uri.Query[1..] : uri.ToString();

            await OnSubstitutionsChanged.InvokeAsync(new List<(string, string)> {(ResourceSubstitutions.SasUri, _sasToken)});
        }
        else
        {
            _showingCopiedForSasButton = true;
            await _module.InvokeVoidAsync("copyTextToClipboard", _sasToken);
            StateHasChanged();

            await Task.Delay(1000);
            _showingCopiedForSasButton = false;
            StateHasChanged();
        }
    }
}
