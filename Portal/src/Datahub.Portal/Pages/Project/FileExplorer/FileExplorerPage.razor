@inject IDbContextFactory<DatahubProjectDBContext> _dbFactoryProject
@inject IUserInformationService _userInformationService
@inject IProjectDataRetrievalService _projectDataRetrievalService
@inject DatahubPortalConfiguration _datahubPortalConfiguration
@page "/w/{ProjectAcronymParam}/filelist"
@using Datahub.Core.Components.PageBanner
@using Datahub.Core.Services.Storage
@using Datahub.Portal.Pages.Project.FileExplorer.ResourcePages
@using Microsoft.Graph
@using Datahub.Application.Services
@using Datahub.Core.Model.Projects


<!--suppress CssUnresolvedCustomProperty -->
<DHPageTitle PageTitleKey="@_projectName"/>

<DHPageAlert 
    Title=@Localizer["How to use Project Storage"] 
    Key="@PageAlert.Storage"
    WikiLinkEN="/Banners/Workspace-Storage"
    WikiLinkFR="/fr/Banners/Stockage-de-l-espace-de-travail" />

<MudStack>
    <MudText Typo="Typo.h1">@Localizer["{0} Storage Explorer", ProjectAcronymParam]</MudText>
    <CascadingValue Value="@ProjectAcronymParam" Name="ProjectAcronym">
        <CascadingValue Value="@_project" Name="Project">
            <CascadingValue Value="_user" Name="GraphUser">
                    
                @if (_containers.Count > 1)
                {
                <MudStack Style="border-bottom: 1px solid var(--mud-palette-lines-default);" Class="my-6">
                    <MudText Typo="Typo.h2">@Localizer["Current Container"]</MudText>
                    <MudRadioGroup T="string" @bind-SelectedOption="SelectedContainer" Dense>
                        @foreach (var container in _containers)
                        {
                            <MudRadio Option="@container" Color="Color.Primary" Size="Size.Medium">@container</MudRadio>
                        }
                    </MudRadioGroup>
                </MudStack>
                }
                <MudPaper Elevation="0" Class="file-explorer-layout-wrapper py-4 px-6">
                    @if (SelectedContainer != null)
                    {
                        <MudTabs Elevation="0">
                            <MudTabPanel Text="@((_containers.Count == 1) ? _containers[0] : Localizer["File Explorer"])" Icon="fas fa-hdd">
                                <FileExplorer ProjectId=@_projectId ContainerName="@SelectedContainer"/>
                            </MudTabPanel>
                            <DatahubAuthView AuthLevel="DatahubAuthView.AuthLevels.WorkspaceCollaborator" ProjectAcronym="@ProjectAcronymParam">
                                <MudTabPanel Text="@Localizer["AzCopy"]" Icon="fas fa-info-circle">
                                    <AzCopy Container="@SelectedContainer"/>
                                </MudTabPanel>
                                <MudTabPanel Text="@Localizer["Databricks Access"]" Icon="fas fa-info-circle">
                                    <Databricks Container="@SelectedContainer"/>
                                </MudTabPanel>
                                @if (_datahubPortalConfiguration.DesktopFileUploader.DisplayDesktopUploaderTab)
                                {
                                    <MudTabPanel Text="@Localizer["DataHub Uploader"]" Icon="fas fa-info-circle">
                                        <UploaderCode Container="@SelectedContainer"/>
                                    </MudTabPanel>
                                }
                            </DatahubAuthView>
                        </MudTabs>
                    }
                </MudPaper>
            </CascadingValue>
        </CascadingValue>
    </CascadingValue>
</MudStack>

@code {

    [Parameter]
    public string ProjectAcronymParam { get; set; }

    private Datahub_Project _project;
    private int? _projectId;
    private string _projectName;
    private List<string> _containers = new();


    //private string _selectedContainer;

    private List<(string Icon, string LabelText, RenderFragment Content)> _tabs = new();
    private User _user;

    protected override async Task OnInitializedAsync()
    {
        await using var projectContext = await _dbFactoryProject.CreateDbContextAsync();

        _user = await _userInformationService.GetCurrentGraphUserAsync();

        _project = await projectContext.Projects
            .Include(p => p.Users)
            .AsSingleQuery()
            .Where(p => p.Project_Acronym_CD == ProjectAcronymParam)
            .FirstOrDefaultAsync();

        _projectName = _project?.ProjectName;
        _projectId = _project?.Project_ID;

        _containers = await _projectDataRetrievalService.GetContainersAsync(ProjectAcronymParam);
        SelectedContainer = _containers.FirstOrDefault();

    }


    private string selectedContainer;

    public string SelectedContainer
    {
        get { return selectedContainer; }
        set { selectedContainer = value; StateHasChanged(); }
    }
    

    // private void HandleTabChanged(int index)
    // {
    //     if (index >= 0 && index < _containers.Count)
    //     {
    //         _selectedContainer = _containers[index];
    //     }
    // }
}