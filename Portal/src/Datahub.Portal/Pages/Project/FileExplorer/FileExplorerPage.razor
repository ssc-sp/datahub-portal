@* FileExplorerPage.razor *@
@inject IDbContextFactory<DatahubProjectDBContext> _dbFactoryProject
@inject IUserInformationService _userInformationService
@inject IProjectStorageConfigurationService _projectStorageConfigService
@inject DatahubPortalConfiguration _datahubPortalConfiguration
@inject IDialogService _dialogService
@page "/w/{ProjectAcronymParam}/filelist"
@using Datahub.Core.Components.PageBanner
@using Datahub.Core.Model.CloudStorage;
@using Datahub.Core.Services.Storage
@using Datahub.Infrastructure.Services.Storage;
@using Datahub.Portal.Pages.Project.FileExplorer.ResourcePages
@using Datahub.Portal.Pages.Project.FileExplorer.Storage;
@using Microsoft.Graph
@using Datahub.Application.Services
@using Datahub.Core.Model.Projects

<!--suppress CssUnresolvedCustomProperty -->
<DHPageTitle PageTitleKey="@_projectName"/>

<DHPageAlert 
    Title=@Localizer["How to use Project Storage"] 
    Key="@PageAlert.Storage"
    WikiLinkEN="/Banners/Workspace-Storage"
    WikiLinkFR="/fr/Banners/Stockage-de-l-espace-de-travail" />

<MudStack>
    <MudStack Row Justify="Justify.SpaceBetween">
        <MudText Typo="Typo.h1">@Localizer["{0} Storage Explorer", ProjectAcronymParam]</MudText>
        <DatahubAuthView AuthLevel="DatahubAuthView.AuthLevels.WorkspaceAdmin" ProjectAcronym="@ProjectAcronymParam">
            <MudIconButton Icon="@Icons.Material.Outlined.Settings" OnClick="HandleStorageSettings"></MudIconButton>
        </DatahubAuthView>
    </MudStack>
    <CascadingValue Value="@ProjectAcronymParam" Name="ProjectAcronym">
        <CascadingValue Value="@_project" Name="Project">
            <CascadingValue Value="_user" Name="GraphUser">
                @if (MultiContainer)
                {
                    <MudStack Style="border-bottom: 1px solid var(--mud-palette-lines-default);" Class="my-6">
                        <MudText Typo="Typo.h2">@Localizer["Current Container"]</MudText>
                        <MudStack Row Justify="Justify.SpaceBetween">
                            <MudRadioGroup T="CloudStorageContainer" @bind-SelectedOption="SelectedContainer" Dense>
                                @foreach (var container in _cloudContainers)
                                {
                                    <MudRadio Option="@container" Color="Color.Primary" Size="Size.Medium">@container.Name</MudRadio>
                                }
                            </MudRadioGroup>
                        </MudStack>
                    </MudStack>
                }
                <MudPaper Elevation="0" Class="file-explorer-layout-wrapper py-4 px-6">
                    @if (SelectedContainer != null)
                    {
                        <MudTabs Elevation="0" @key="@SelectedContainer.Name">
                            <MudTabPanel Text="@(!MultiContainer ? SelectedContainer.Name : Localizer["File Explorer"])" Icon="fas fa-hdd">
                                <FileExplorer ProjectId=@_projectId Container="@_selectedContainer" />
                            </MudTabPanel>
                            <DatahubAuthView AuthLevel="DatahubAuthView.AuthLevels.WorkspaceCollaborator" ProjectAcronym="@ProjectAcronymParam">
                                <MudTabPanel Text="@Localizer["AzCopy"]" Icon="fas fa-info-circle">
                                    <AzCopy Container=@SelectedContainer />
                                </MudTabPanel>
                                <MudTabPanel Text="@Localizer["Databricks Access"]" Icon="fas fa-info-circle">
                                    <Databricks Container="@SelectedContainer.Name" />
                                </MudTabPanel>
                                @if (_datahubPortalConfiguration.DesktopFileUploader.DisplayDesktopUploaderTab)
                                {
                                    <MudTabPanel Text="@Localizer["DataHub Uploader"]" Icon="fas fa-info-circle">
                                        <UploaderCode Container=@SelectedContainer />
                                    </MudTabPanel>
                                }
                            </DatahubAuthView>
                        </MudTabs>
                    }
                </MudPaper>
            </CascadingValue>
        </CascadingValue>
    </CascadingValue>
</MudStack>

@code {

    [Parameter]
    public string ProjectAcronymParam { get; set; }

    private Datahub_Project _project;
    private int? _projectId;
    private string _projectName;

    private List<CloudStorageContainer> _cloudContainers = new();
    private CloudStorageContainer _selectedContainer;

    private List<(string Icon, string LabelText, RenderFragment Content)> _tabs = new();
    private User _user;

    protected override async Task OnInitializedAsync()
    {
        await using var projectContext = await _dbFactoryProject.CreateDbContextAsync();

        _user = await _userInformationService.GetCurrentGraphUserAsync();

        _project = await projectContext.Projects
            .Include(p => p.Users)
            .AsSingleQuery()
            .Where(p => p.Project_Acronym_CD == ProjectAcronymParam)
            .FirstOrDefaultAsync();

        _projectName = _project?.ProjectName;
        _projectId = _project?.Project_ID;

        await LoadContainersAsync();
    }

    private async Task LoadContainersAsync()
    {
        _cloudContainers = new();

        // pick the project storage containers
        var accountName = _projectStorageConfigService.GetProjectStorageAccountName(ProjectAcronymParam);
        var accountKey = await _projectStorageConfigService.GetProjectStorageAccountKey(ProjectAcronymParam);

        var projectStorageManager = new AzureCloudStorageManager(accountName, accountKey);
        var containerNames = await projectStorageManager.GetContainersAsync();

        _cloudContainers.AddRange(containerNames.Select(c => new CloudStorageContainer(c, projectStorageManager)));

        var dbStorage = await GetCloudStorages();
        foreach (var stg in dbStorage)
        {
            if (stg.Provider != "Azure")
                continue;

            var variables = stg.ConnectionData.Split('|');
            if (variables.Length != 2)
                continue;

            var storageManager = new AzureCloudStorageManager(variables[0], variables[1]);
            containerNames = await storageManager.GetContainersAsync();

            _cloudContainers.AddRange(containerNames.Select(c => new CloudStorageContainer(c, storageManager)));
        }

        _selectedContainer = _cloudContainers.FirstOrDefault();
    }

    public CloudStorageContainer SelectedContainer
    {
        get 
        { 
            return _selectedContainer; 
        }
        set 
        { 
            _selectedContainer = value; 
        }
    }

    private bool MultiContainer => _cloudContainers?.Count > 1;

    private async Task<List<ProjectCloudStorage>> GetCloudStorages()
    {
        await using var ctx = await _dbFactoryProject.CreateDbContextAsync();
        return await ctx.ProjectCloudStorages.Where(e => e.ProjectId == _project.Project_ID).ToListAsync();
    }

    private async Task HandleStorageSettings()
    {
        var dialogOptions = new DialogOptions() { MaxWidth = MaxWidth.Medium, FullWidth = true };
        var dialogParams = new DialogParameters();
        var dialog = await _dialogService.ShowAsync<ConfigureProjectStorage>(Localizer["Configure Storage"], dialogParams, dialogOptions);
        var result = await dialog.Result;
        if (!result.Canceled)
        {
            if (result.Data is string connectionData)
            {
                var (accountName, accountKey) = ParseConnectionString(connectionData);
                await UpdateProjectAzureStorage($"{accountName}|{accountKey}");
                await LoadContainersAsync();
                await InvokeAsync(StateHasChanged);
            }
        }
    }

    private async Task UpdateProjectAzureStorage(string connectionData)
    {
        await using var ctx = await _dbFactoryProject.CreateDbContextAsync();
        var projectStorage = await ctx.ProjectCloudStorages.Where(e => e.ProjectId == _project.Project_ID).FirstOrDefaultAsync();

        if (projectStorage is null)
        {
            projectStorage = new()
            {
                ProjectId = _project.Project_ID,
                Provider = "Azure",
            };
        }

        projectStorage.ConnectionData = connectionData;

        if (projectStorage.Id == 0)
        {
            ctx.ProjectCloudStorages.Add(projectStorage);
        }
        else
        {
            ctx.ProjectCloudStorages.Update(projectStorage);
        }

        await ctx.SaveChangesAsync();
    }

    static (string AccountName, string AccountKey) ParseConnectionString(string text)
    {
        string FindValue(string[] valuePairs, string varName)
        {
            return valuePairs.Where(p => p.StartsWith(varName)).Select(p => p[varName.Length..]).FirstOrDefault();
        }

        var valuePairs = (text ?? "").Split(";", StringSplitOptions.RemoveEmptyEntries);

        return (FindValue(valuePairs, "AccountName="), FindValue(valuePairs, "AccountKey="));
    }
}