@* FileExplorerPage.razor *@
@inject IDbContextFactory<DatahubProjectDBContext> _dbFactoryProject
@inject IUserInformationService _userInformationService
@inject IProjectStorageConfigurationService _projectStorageConfigService
@inject DatahubPortalConfiguration _datahubPortalConfiguration
@inject IDialogService _dialogService
@page "/w/{ProjectAcronymParam}/filelist"
@using Datahub.Core.Components.PageBanner
@using Datahub.Core.Model.CloudStorage;
@using Datahub.Core.Services.Storage
@using Datahub.Infrastructure.Services.Storage;
@using Datahub.Portal.Pages.Project.FileExplorer.ResourcePages
@using Datahub.Portal.Pages.Project.FileExplorer.Storage;
@using Microsoft.Graph
@using Datahub.Application.Services
@using Datahub.Core.Model.Projects

<!--suppress CssUnresolvedCustomProperty -->
<DHPageTitle PageTitleKey="@_projectName"/>

<DHPageAlert 
    Title=@Localizer["How to use Project Storage"] 
    Key="@PageAlert.Storage"
    WikiLinkEN="/Banners/Workspace-Storage"
    WikiLinkFR="/fr/Banners/Stockage-de-l-espace-de-travail" />

<MudStack>
    <MudStack Row Justify="Justify.SpaceBetween">
        <MudText Typo="Typo.h1">@Localizer["{0} Storage Explorer", ProjectAcronymParam]</MudText>
        <DatahubAuthView AuthLevel="DatahubAuthView.AuthLevels.WorkspaceAdmin" ProjectAcronym="@ProjectAcronymParam">
            @* <MudIconButton Icon="@Icons.Material.Outlined.Settings" OnClick="HandleStorageSettings"></MudIconButton> *@

            <MudMenu AnchorOrigin="Origin.BottomRight" TransformOrigin="Origin.TopRight" FullWidth>
                <ActivatorContent>
                    <MudButton Class="ml-2">
                        <MudIcon Icon="@Icons.Material.Outlined.Settings" />
                    </MudButton>
                </ActivatorContent>
                <ChildContent>
                    <MudMenuItem OnClick=@(() => ShowStorageSettingsDialog(CloudStorageProviderType.Azure))>Azure</MudMenuItem>
                    <MudMenuItem OnClick=@(() => ShowStorageSettingsDialog(CloudStorageProviderType.AWS))>AWS</MudMenuItem>
                </ChildContent>
            </MudMenu>
        </DatahubAuthView>
    </MudStack>
    <CascadingValue Value="@ProjectAcronymParam" Name="ProjectAcronym">
        <CascadingValue Value="@_project" Name="Project">
            <CascadingValue Value="_user" Name="GraphUser">
                @if (MultiContainer)
                {
                    <MudStack Style="border-bottom: 1px solid var(--mud-palette-lines-default);" Class="my-6">
                        <MudStack Row Justify=@Justify.FlexStart AlignItems=@AlignItems.Center >
                            <MudText Typo="Typo.h2">@Localizer["Current Container"]</MudText>
                            <StorageContainerSelector @bind-SelectedContainer=@SelectedContainer CloudContainers=_cloudContainers />
                        </MudStack>
                    </MudStack>
                }
                <MudPaper Elevation="0" Class="file-explorer-layout-wrapper py-4 px-6">
                    @if (SelectedContainer != null)
                    {
                        <MudTabs Elevation="0" @key="@SelectedContainer.Name">
                            <MudTabPanel Text="@(!MultiContainer ? SelectedContainer.Name : Localizer["File Explorer"])" Icon="fas fa-hdd">
                                <FileExplorer ProjectId=@_projectId Container="@_selectedContainer" />
                            </MudTabPanel>
                            <DatahubAuthView AuthLevel="DatahubAuthView.AuthLevels.WorkspaceCollaborator" ProjectAcronym="@ProjectAcronymParam">
                                @if (SelectedContainer.StorageManager.AzCopyEnabled)
                                {
                                    <MudTabPanel Text="@Localizer["AzCopy"]" Icon="fas fa-info-circle">
                                        <AzCopy Container=@SelectedContainer />
                                    </MudTabPanel>
                                }
                                @if (SelectedContainer.StorageManager.DatabrickEnabled)
                                {
                                    <MudTabPanel Text="@Localizer["Databricks Access"]" Icon="fas fa-info-circle">
                                        <Databricks Container="@SelectedContainer.Name" />
                                    </MudTabPanel>
                                }
                                @if (SelectedContainer.StorageManager.AzCopyEnabled && _datahubPortalConfiguration.DesktopFileUploader.DisplayDesktopUploaderTab)
                                {
                                    <MudTabPanel Text="@Localizer["DataHub Uploader"]" Icon="fas fa-info-circle">
                                        <UploaderCode Container=@SelectedContainer />
                                    </MudTabPanel>
                                }
                            </DatahubAuthView>
                        </MudTabs>
                    }
                </MudPaper>
            </CascadingValue>
        </CascadingValue>
    </CascadingValue>
</MudStack>

@code {

    [Parameter]
    public string ProjectAcronymParam { get; set; }

    private Datahub_Project _project;
    private int? _projectId;
    private string _projectName;

    private List<CloudStorageContainer> _cloudContainers = new();
    private CloudStorageContainer _selectedContainer;

    private List<(string Icon, string LabelText, RenderFragment Content)> _tabs = new();
    private User _user;

    protected override async Task OnInitializedAsync()
    {
        await using var projectContext = await _dbFactoryProject.CreateDbContextAsync();

        _user = await _userInformationService.GetCurrentGraphUserAsync();

        _project = await projectContext.Projects
            .Include(p => p.Users)
            .AsSingleQuery()
            .Where(p => p.Project_Acronym_CD == ProjectAcronymParam)
            .FirstOrDefaultAsync();

        _projectName = _project?.ProjectName;
        _projectId = _project?.Project_ID;

        await LoadContainersAsync();
    }

    private async Task LoadContainersAsync()
    {
        _cloudContainers = new();

        // pick the project storage containers
        var accountName = _projectStorageConfigService.GetProjectStorageAccountName(ProjectAcronymParam);
        var accountKey = await _projectStorageConfigService.GetProjectStorageAccountKey(ProjectAcronymParam);

        var projectStorageManager = new AzureCloudStorageManager(accountName, accountKey);
        var containerNames = await projectStorageManager.GetContainersAsync();

        _cloudContainers.AddRange(containerNames.Select(c => new CloudStorageContainer(accountName, c, CloudStorageProviderType.Azure, projectStorageManager)));

        var dbStorage = await GetCloudStorages();
        foreach (var stg in dbStorage.Where(s => s.Enabled))
        {
            var variables = stg.ConnectionData.Split('|');
            if (stg.Provider == "Azure")
            {
                var azConnectionData = CloudStorageConnectionDataDecoder.DecodeAzure(stg.ConnectionData);
                if (azConnectionData is null)
                {
                    continue;
                }

                var storageManager = new AzureCloudStorageManager(azConnectionData.AccountName, azConnectionData.AccountKey);
                containerNames = await storageManager.GetContainersAsync();
                _cloudContainers.AddRange(containerNames.Select(c => new CloudStorageContainer(azConnectionData.AccountName, c, CloudStorageProviderType.Azure, storageManager)));
            }
            else if (stg.Provider == "AWS")
            {
                var awsConnectionData = CloudStorageConnectionDataDecoder.DecodeAWS(stg.ConnectionData);
                if (awsConnectionData is null)
                {
                    continue;
                }

                var containerName = stg.Name ?? "AWS";

                var storageManager = new AWSCloudStorageManager(containerName, awsConnectionData.AccessKeyId, awsConnectionData.AccessKeySecret, 
                    awsConnectionData.Region, awsConnectionData.BucketName);
                containerNames = await storageManager.GetContainersAsync();
                _cloudContainers.AddRange(containerNames.Select(c => new CloudStorageContainer("AWS", c, CloudStorageProviderType.AWS, storageManager)));
            }
        }

        _selectedContainer = _cloudContainers.FirstOrDefault();
    }

    public CloudStorageContainer SelectedContainer
    {
        get 
        { 
            return _selectedContainer; 
        }
        set 
        { 
            _selectedContainer = value; 
        }
    }

    private bool MultiContainer => _cloudContainers?.Count > 1;

    private async Task<List<ProjectCloudStorage>> GetCloudStorages()
    {
        await using var ctx = await _dbFactoryProject.CreateDbContextAsync();
        return await ctx.ProjectCloudStorages.AsNoTracking().Where(e => e.ProjectId == _project.Project_ID).ToListAsync();
    }

    private async Task ShowStorageSettingsDialog(CloudStorageProviderType cloudStorageProvider)
    {
        var dialogOptions = new DialogOptions() { MaxWidth = MaxWidth.Medium, FullWidth = true };

        var dialogParams = new DialogParameters();
        dialogParams.Add(nameof(StorageConfigurationDialog.CloudProvider), cloudStorageProvider);

        var cloudProvider = await FetchOrCreateReadonlyCloudStorage(cloudStorageProvider);
        var cloudProviderSettings = new CloudStorageSettings(cloudProvider);

        dialogParams.Add(nameof(StorageConfigurationDialog.CloudStorageSettings), cloudProviderSettings);

        var dialogTitle = cloudStorageProvider switch
        {
            CloudStorageProviderType.Azure => Localizer["Configure Azure Storage"],
            CloudStorageProviderType.AWS => Localizer["Configure AWS Storage"],
            _ => "Configure Storage"
        };

        var dialog = await _dialogService.ShowAsync<StorageConfigurationDialog>(dialogTitle, dialogParams, dialogOptions);

        var result = await dialog.Result;

        if (!result.Canceled)
        {
            if (result.Data is CloudStorageSettings storageSettings)
            {
                await UpdateCloudStorage(cloudStorageProvider, storageSettings);
                await LoadContainersAsync();
                await InvokeAsync(StateHasChanged);
            }
        }
    }

    private async Task<ProjectCloudStorage> FetchOrCreateReadonlyCloudStorage(CloudStorageProviderType cloudStorageProvider)
    {
        await using var ctx = await _dbFactoryProject.CreateDbContextAsync();
        return await FetchOrCreateProjectCloudStorageInternal(ctx, cloudStorageProvider, true);
    }

    private async Task<ProjectCloudStorage> FetchOrCreateProjectCloudStorageInternal(DatahubProjectDBContext ctx, CloudStorageProviderType cloudStorageProvider, bool readOnly)
    {
        var projectStorageQuery = (IQueryable<ProjectCloudStorage>) ctx.ProjectCloudStorages;
        if (readOnly)
        {
            projectStorageQuery = projectStorageQuery.AsNoTracking();
        }

        var projectStorage = await projectStorageQuery
            .Where(e => e.ProjectId == _project.Project_ID && e.Provider == cloudStorageProvider.ToString())
            .FirstOrDefaultAsync();

        if (projectStorage is null)
        {
            projectStorage = new()
            {
                ProjectId = _project.Project_ID,
                Provider = cloudStorageProvider.ToString()
            };

            if (!readOnly)
            {
                await ctx.ProjectCloudStorages.AddAsync(projectStorage);
            }
        }

        return await Task.FromResult(projectStorage);
    }

    private async Task UpdateCloudStorage(CloudStorageProviderType cloudStorageProvider, CloudStorageSettings settings)
    {
        await using var ctx = await _dbFactoryProject.CreateDbContextAsync();
        var projectStorage = await FetchOrCreateProjectCloudStorageInternal(ctx, cloudStorageProvider, false);

        settings.ApplyTo(projectStorage);

        await ctx.SaveChangesAsync();
    }

}