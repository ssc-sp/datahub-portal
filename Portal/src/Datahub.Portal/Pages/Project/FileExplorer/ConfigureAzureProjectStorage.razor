<MudDialog>
    <DialogContent>
        <MudTextField @bind-Value="_accountName" 
                      Label="Storage Account Name" 
                      Variant="Variant.Text" 
                      Adornment=@Adornment.End 
                      AdornmentIcon=@Icons.Material.Filled.ContentPaste/>

        <MudTextField @bind-Value="_accountKey"
                      Label="Account Key"
                      Variant="Variant.Text"
                      InputType="InputType.Password"
                      Adornment=@Adornment.End
                      AdornmentIcon=@Icons.Material.Filled.ContentPaste />

    </DialogContent>
    <DialogActions>
        <MudButton OnClick="HandleCancel" Class="px-4">@Localizer["Cancel"]</MudButton>
        <MudButton Color="Color.Primary" OnClick="HandleSave" Disabled="@SaveDisabled()" Variant="Variant.Filled">
            @Localizer["Save"]
        </MudButton>
    </DialogActions>
</MudDialog>

@code {

    [CascadingParameter]
    MudDialogInstance MudDialog { get; set; } = null!;

    public string _accountName { get; set; } = "";
    public string _accountKey { get; set; } = "";

    private void HandleCancel() => MudDialog.Cancel();

    private void HandleSave()
    {
        MudDialog.Close(DialogResult.Ok($"{_accountName}|{_accountKey}"));
    }

    private bool SaveDisabled()
    {
        return string.IsNullOrEmpty(_accountName) || string.IsNullOrEmpty(_accountKey);
    }

    static (string AccountName, string AccountKey) ParseConnectionString(string text)
    {
        string FindValue(string[] valuePairs, string varName)
        {
            return valuePairs.Where(p => p.StartsWith(varName)).Select(p => p[varName.Length..]).FirstOrDefault();
        }

        var valuePairs = (text ?? "").Split(";", StringSplitOptions.RemoveEmptyEntries);

        return (FindValue(valuePairs, "AccountName="), FindValue(valuePairs, "AccountKey="));
    }
}
