@* StorageConfigurationDialog.razor *@

<MudDialog>
    <DialogContent>
        <MudStack>
            <MudTextField @bind-Value=@CloudStorageSettings.Name Label="Name" Variant=@Variant.Text />
            <MudCheckBox @bind-Checked=@CloudStorageSettings.Enabled >Enabled</MudCheckBox>
            @if (CloudProvider == CloudStorageProviderType.AWS)
            {
                <AWSConnectionDataInput @bind-ConnectionData=@CloudStorageSettings.ConnectionData OnValidationChanged=@HandleConnectionValidationChange />
            }
            else if (CloudProvider == CloudStorageProviderType.Azure)
            {
                <AzureConnectionDataInput @bind-ConnectionData=@CloudStorageSettings.ConnectionData OnValidationChanged=@HandleConnectionValidationChange />
            }
        </MudStack>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick=@HandleCancel Class="px-4">@Localizer["Cancel"]</MudButton>
        <MudButton Color="Color.Primary" OnClick="HandleSave" Disabled=@SaveDisabled Variant="Variant.Filled">
            @Localizer["Save"]
        </MudButton>
    </DialogActions>
</MudDialog>


@code {

    [CascadingParameter]
    public MudDialogInstance MudDialog { get; set; }

    [Parameter]
    public CloudStorageProviderType CloudProvider { get; set; }

    [Parameter]
    public CloudStorageSettings CloudStorageSettings { get; set; }

    private bool _isConnectionValid = false;

    private bool SaveDisabled => !_isConnectionValid;

    private void HandleConnectionValidationChange(bool isValid)
    {
        _isConnectionValid = isValid;
    }

    private void HandleCancel() => MudDialog.Cancel();

    private void HandleSave()
    {
        MudDialog.Close(DialogResult.Ok(CloudStorageSettings));
    }
}
