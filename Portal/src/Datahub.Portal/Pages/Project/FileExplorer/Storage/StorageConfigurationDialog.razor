@using Datahub.Markdown.Model
@* StorageConfigurationDialog.razor *@

@inject Datahub.Core.Services.Docs.DocumentationService DocService

<MudDialog>
    <TitleContent>
        <MudStack Row AlignItems=@AlignItems.Baseline >
            <MudText Typo=@Typo.h6>@MudDialog.Title</MudText>
            <MudSpacer />
            <MudIconButton Icon=@Icons.Material.Filled.HelpOutline Disabled=@HideHelpIcon Href=@HelpUrl Title=@Localizer["Help"]  />
        </MudStack>
    </TitleContent>
    <DialogContent>
        <MudStack>
            <MudTextField @bind-Value=@CloudStorageSettings.Name Label=@Localizer["Friendly Name"] Variant=@Variant.Text />
            <MudCheckBox @bind-Checked=@CloudStorageSettings.Enabled >@Localizer["Enabled"]</MudCheckBox>
            @if (CloudProvider == CloudStorageProviderType.AWS)
            {
                <AWSConnectionDataInput @bind-ConnectionData=@ConnectionDataInternal OnValidationChanged=@HandleConnectionValidationChange />
            }
            else if (CloudProvider == CloudStorageProviderType.Azure)
            {
                <AzureConnectionDataInput @bind-ConnectionData=@ConnectionDataInternal OnValidationChanged=@HandleConnectionValidationChange />
            }
            else if (CloudProvider == CloudStorageProviderType.GCP)
            {
                <GCPConnectionDataInput @bind-ConnectionData=@CloudStorageSettings.ConnectionData OnValidationChanged=@HandleConnectionValidationChange />
            }
            <MudCheckBox @bind-Checked=@_isUnclassified>@Localizer["UnclassifiedDataConfirmation"]</MudCheckBox>
        </MudStack>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick=@HandleCancel Class="px-4">@Localizer["Cancel"]</MudButton>
        <MudButton Color="Color.Primary" OnClick="HandleSave" Disabled=@SaveDisabled Variant="Variant.Filled">
            @Localizer["Save"]
        </MudButton>
    </DialogActions>
</MudDialog>


@code {

    [CascadingParameter]
    public MudDialogInstance MudDialog { get; set; }

    [Parameter]
    public CloudStorageProviderType CloudProvider { get; set; }

    [Parameter]
    public CloudStorageSettings CloudStorageSettings { get; set; }

    private string _initialConnectionData = string.Empty;
    private bool ConnectionDataChanged => !_initialConnectionData.Equals(ConnectionDataInternal);
    private string ConnectionDataInternal
    {
        get => CloudStorageSettings.ConnectionData;
        set
        {
            CloudStorageSettings.ConnectionData = value;
            if (ConnectionDataChanged)
            {
                _isUnclassified = false;
            }
        }
    }

    private string _helpUrl = string.Empty;
    private string HelpUrl
    {
        get => _helpUrl;
        set
        {
            _helpUrl = value;
            InvokeAsync(MudDialog.StateHasChanged);
        }
    }
    private bool HideHelpIcon => string.IsNullOrEmpty(HelpUrl);

    private bool _isConnectionValid = false;
    private bool _isUnclassified = false;

    private bool SaveDisabled => !(_isConnectionValid && _isUnclassified);

    private void HandleConnectionValidationChange(bool isValid)
    {
        _isConnectionValid = isValid;
    }

    private void HandleCancel() => MudDialog.Cancel();

    private void HandleSave()
    {
        MudDialog.Close(DialogResult.Ok(CloudStorageSettings));
    }

    private async Task PopulateHelpUrl()
    {
        // Use the English help URLs and document root to find the guid - the resource link will show up in the user's selected language
        var helpResourceUrl = CloudProvider switch
        {
            CloudStorageProviderType.GCP => "/UserGuide/Storage/Import-GCP-Storage.md",
            CloudStorageProviderType.Azure => "/UserGuide/Storage/Import-Azure-Storage.md",
            CloudStorageProviderType.AWS => "/UserGuide/Storage/Import-AWS-Storage.md",
            _ => "/UserGuide/Storage/Import-Storage.md"
        };

        var docRoot = await DocService.GetLanguageRoot(DocumentationGuideRootSection.UserGuide, "en");
        var id = docRoot?.LocatePath(helpResourceUrl)?.Id;
        if (id is not null)
        {
            HelpUrl = $"/resources/{id}";
        }
    }

    protected override async Task OnInitializedAsync()
    {
        _initialConnectionData = CloudStorageSettings?.ConnectionData ?? string.Empty;
        _isUnclassified = !string.IsNullOrEmpty(_initialConnectionData);
        await PopulateHelpUrl();
    }

}
