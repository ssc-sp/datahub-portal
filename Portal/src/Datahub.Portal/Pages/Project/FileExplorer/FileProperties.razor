@*FileProperties.razor*@
@using Datahub.Core.Components.Code
@using Datahub.Core.Services.Api;
@using Datahub.Core.Services.Storage;
@using Datahub.Metadata.Model
@using Datahub.Application.Services

@inject DataRetrievalService _dataRetrievalService
@inject CommonAzureServices _commonAzureServices;
@inject UIControlsService _uiControlService;
@inject IProjectDataRetrievalService _projectDataRetrievalService

@if (File != null)
{
    <div class="storage-properties">
        <div class="title-container">
            <i class="@DatahubTools.GetFileTypeIcon(File.fileformat)"></i>
            <AeTypography Variant="h3" class="details-title-text">
                @Path.GetFileName(File.name)
            </AeTypography>
        </div>

        <div class="access-container">
            <AeTypography Variant="h4">@Localizer["Who has access"]</AeTypography>
            <span class="circle-item">
                <ProfileCircle FullName="@ProjectAcronym"/>
                <AeTypography>@ProjectAcronym</AeTypography>
            </span>
        </div>

        <div class="properties">
            <AeTypography class="properties-title" Variant="h4">@Localizer["Storage Properties"]</AeTypography>
            @foreach (var (key, value) in _properties)
            {
                if (!string.IsNullOrEmpty(value) && value != "[]")
                {
                    <AeTypography class="label">@Localizer["ITEM-DETAILS-PAGE." + key]</AeTypography>
                    <AeTypography class="text">@value</AeTypography>
                }
            }

            <AeTypography class="label">@Localizer["Power BI URL"]</AeTypography>
            <InlineCodeWithCopy>@_powerBiPasteText</InlineCodeWithCopy>
            
            <AeTypography class="label">@Localizer["File URL"]</AeTypography>
            <InlineCodeWithCopy>@_fileLinkUrl</InlineCodeWithCopy>

        </div>
        <div>
            <AeButton OnClickEvent=@ShowMetadataEditor>@Localizer["Metadata"]</AeButton> 
        </div>
    </div>
}

@code {

    [CascadingParameter(Name = "ProjectAcronym")]
    public string ProjectAcronym { get; set; }

    [Parameter]
    public int? ProjectId { get; set; }

    [Parameter]
    public FileMetaData File { get; set; }
    
    [Parameter]
    public string ContainerName { get; set; } = "datahub";

    [Parameter]
    public bool Readonly { get; set; }

    [Parameter]
    public EventCallback OnMetadataChanged { get; set; }

    private List<(string, string)> _properties;
    private string _powerBiPasteText;
    private string _fileLinkUrl;
    
    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();

        if (File == null)
            return;

        _properties = File.GetMetadataProperties()
            .Where(p => p.isVisible)
            .Select(p => (p.key, Value: File.GetMetadataPropertyValue(p.key)))
            .ToList();
        
        var storageMetadata = await _projectDataRetrievalService.GetStorageMetadataAsync(ProjectAcronym, ContainerName);
        var accountName = storageMetadata.Url.Split('.')[0].Replace("https://", "");
        _fileLinkUrl = $"{storageMetadata.Url}/{File.folderpath}{File.filename}";
        _powerBiPasteText = $"abfs://{_commonAzureServices.FileSystemName}@{accountName}.dfs.core.windows.net/{File.folderpath}{File.filename}";
    }

    private void ShowMetadataEditor()
    {
        RenderFragment metadataEditor = @<ObjectMetadataEditor 
                @key=@File.fileid 
                ObjectId=@File.fileid 
                DefaultMetadataId=@ProjectAcronym
                Name=@File.filename
                Location=@ProjectAcronym
                SecurityClass=@File.securityclass
                SaveButtonLabel=@Localizer["OPENDATA-WIZARD.Save_button"]
                OnSave=@HandleSaveMetadata
                OnDiscard=@HandleDiscardMetadata
                ProfileName="catalog"
                ObjectType=@MetadataObjectType.File
                UpdateCatalog=@(!Readonly)
                ValidateRequired
                Preview=@Readonly
                ProjectId=@ProjectId
            />;
        _uiControlService.ShowDialog(Localizer["Metadata"], metadataEditor);
    }

    private async Task HandleSaveMetadata()
    {
        _uiControlService.HideDialog();
        await OnMetadataChanged.InvokeAsync();
    }

    private void HandleDiscardMetadata()
    {
        _uiControlService.HideDialog();
    }
}

