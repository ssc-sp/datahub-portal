@*ProjectStorageReport.razor*@

@page "/w/{ProjectAcronym}/storage"

@inject IDbContextFactory<DatahubProjectDBContext> dbContextFactory

@if (_averages != null)
{
    <MudText Typo="Typo.h4">@Localizer["Storage daily average (over last 30 days)"]</MudText>
    <div>
        <MudChart ChartType="ChartType.Bar"
                  ChartSeries="@DailySeries"
                  XAxisLabels="@XAxisDailyLabels"
                  Width="100%"
                  Height="350px" />
    </div>
}

@code {

    [Parameter]
    public string ProjectAcronym { get; set; }

    private List<DayAverage> _averages = default;

    private List<ChartSeries> DailySeries => new()
    {
        new() { Name = Localizer["Average (MB)"], Data = _averages.Select(e => e.Average / (1024 * 1024 * 1024)).ToArray() }
    };

    private string[] XAxisDailyLabels => _averages.Select(e => FormatDay(e.Day)).ToArray();

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        _averages = await GetLast30DaysAverages();        
    }

    private async Task<List<DayAverage>> GetLast30DaysAverages()
    {
        var minDate = DateTime.Now.AddDays(-30).Date;

        await using var ctx = await dbContextFactory.CreateDbContextAsync();
        var averages = await ctx.Projects
            .Where(e => e.Project_Acronym_CD == ProjectAcronym)
            .Join(ctx.Project_Storage_Avgs, p => p.Project_ID, s => s.ProjectId, (p, s) => s)
            .Where(e => e.Date >= minDate)
            .Select(e => new DayAverage(e.Date.Day, e.AverageCapacity))
            .ToListAsync();

        return averages;
    }

    static string FormatDay(int day) => $"{day.ToString("D2")}";

    record DayAverage(int Day, double Average);
}
