@*ProjectInfo.razor*@

@using Datahub.Core.Components.Skeleton
@using Datahub.Core.Enums
@using Datahub.Core.Model.Datahub
@using Datahub.Core.Services.Metadata;
@using Datahub.Metadata.DTO
@using Datahub.Infrastructure.Services.Projects;
@using Datahub.Infrastructure.Services.Azure

@inject UIControlsService _uiControlService
@inject NavigationManager _navigationManager
@inject IMetadataBrokerService _metadataBrokerService
@inject IDbContextFactory<DatahubProjectDBContext> _dbContextFactory
@inject DatahubPortalConfiguration _datahubPortalConfiguration

@if (_loading)
{
    <Skeleton Height="2.5rem" Width="150px"/>
    <Skeleton Height="2.5rem" Width="150px"/>
    <Skeleton Height="5rem" Width="650px"/>
    <Skeleton Height="2rem" Width="900px"/>
    <Skeleton Height="2rem" Width="900px"/>
    <Skeleton Height="2rem" Width="300px"/>
    return;
}

<MudStack Row>
    <MudChip Label Color="@Color.Dark" class="project-data-sensitivity">@Localizer[Project.Data_Sensitivity]</MudChip>
    <AuthorizeView Roles="@string.Join(",", $"{ProjectAcronym}", RoleConstants.DATAHUB_ROLE_ADMIN)">
        @if (CreditsDataExists && _projectBudget > 0)
        {
            <MudBadge Icon="@Icons.Material.Filled.QuestionMark" Color="@GetCostChipColor()" Overlap="@true" Bordered="@true">
                <MudChip Label="true"
                         Icon="@Icons.Material.Filled.AttachMoney"
                         IconColor="@GetCostChipColor()"
                         Variant="@Variant.Text"
                         Color="@GetCostChipColor()"
                         OnClick=@HandleShowCosts>
                    @($"{CurrentCredits:C} {Localizer["Total spent"]}")
                </MudChip>
            </MudBadge>
        }
        else
        {
            <MudChip Label="true"
                     Icon="@Icons.Material.Filled.AttachMoney"
                     IconColor="@GetCostChipColor()"
                     Variant="@Variant.Text"
                     Color="@GetCostChipColor()"
                     Disabled="true">
                @Localizer["No recent data"]
            </MudChip>
        }
    </AuthorizeView>
    <AuthorizeView Roles="@string.Join(",", $"{ProjectAcronym}{RoleConstants.ADMIN_SUFFIX}", RoleConstants.DATAHUB_ROLE_ADMIN)">
        @{
            var color = Project?.MetadataAdded ?? false ? Color.Default : Color.Warning;
            var icon = Project?.MetadataAdded ?? false ? Icons.Material.Filled.Edit : Icons.Material.Filled.Warning;
            <MudChip Icon="@icon"
                     IconColor="@color"
                     Variant="@Variant.Text"
                     Color="@color"
                     class="project-data-sensitivity"
                     OnClick="@HandleEditMetadata"
                     Label>
                @Localizer["Edit Metadata"]
            </MudChip>
        }
    </AuthorizeView>

</MudStack>

<MudStack>
    <MudText Typo="Typo.h1">
        <MudIcon Icon="@_projectIcon" Title="@Localizer["Project Icon"]"/>
        @Project.ProjectName
    </MudText>
    <AuthorizeView Roles="@string.Join(",", $"{ProjectAcronym}", RoleConstants.DATAHUB_ROLE_ADMIN)">
        @if (Project.Project_Phase == TerraformOutputStatus.PendingApproval)
        {
            <MudAlert Severity="Severity.Warning">@Localizer["The workspace is currently being configured in Azure. No resources can be provisioned until this step is completed."]</MudAlert>
        }

        @if (Project?.MetadataAdded != true)
        {
            <MudAlert Severity="Severity.Warning">@Localizer["The workspace metadata is currently incomplete. No resources can be provisioned until the project metadata has been filled"]</MudAlert>
        }

        @if ((Project?.Project_Budget ?? 0) == 0)
        {
            <MudAlert Severity="Severity.Warning">
                <MudLink Href="@_datahubPortalConfiguration.SupportFormUrl" Underline="Underline.None">
                    @Localizer["The project doesn't have a budget assigned. Contact a Datahub Administrator."]
                </MudLink>
            </MudAlert>
        }
    </AuthorizeView>

    <DHMarkdown class="description" Content="@GetProjectDescription()"/>
</MudStack>


@code {

    [CascadingParameter(Name = "Project")]
    private Datahub_Project Project { get; set; }

    [CascadingParameter(Name = "IsProjectAdmin")]
    private bool IsProjectAdmin { get; set; }

    [CascadingParameter(Name = "IsDatahubAdmin")]
    private bool IsDatahubAdmin { get; set; }
    
    private Project_Credits _projectCredits = default;

    private decimal CurrentCredits => Convert.ToDecimal(_projectCredits.Current);

    private bool CreditsDataExists => _projectCredits is not null && _projectCredits.ProjectId != 0;

    private decimal _projectBudget;
    private bool _loading = true;
    private FieldValueContainer _projectMetadata;

    private string ProjectAcronym => Project?.Project_Acronym_CD;
    private string _projectIcon => $"fas fa-{Project?.Project_Icon ?? Icon.DEFAULT_PROJECT_ICON}";

    protected override async Task OnInitializedAsync()
    {
        using var ctx = await _dbContextFactory.CreateDbContextAsync();

        _projectCredits = await ctx.Project_Credits.FirstOrDefaultAsync(e => e.ProjectId == Project.Project_ID) ?? new();

        _projectBudget = Project.Project_Budget ?? 0;
        _projectMetadata = await _metadataBrokerService.GetObjectMetadataValues(ProjectAcronym);

        _loading = false;
    }

    private Color GetCostChipColor()
    {
        if (CurrentCredits < 0.01m)
            return Color.Dark;
        if (CurrentCredits >= _projectBudget)
            return Color.Error;
        if (CurrentCredits >= 0.75m * _projectBudget)
            return Color.Warning;
        return Color.Default;
    }

    private string GetToolTipText()
    {
        var projectName = $"{Project.ProjectName} ";
        if (CurrentCredits >= _projectBudget)
            return projectName + Localizer["is over budget"];
        if (CurrentCredits >= 0.75m * _projectBudget)
            return projectName + Localizer["is nearing budget"];
        return projectName + Localizer["is under budget"];
    }

    private Color GetProtectionColor() => (Project?.Data_Sensitivity ?? "").ToUpper() switch
    {
        "CLASSIFIED"  or
            "PROTECTED B" or
            "PROTECTED C" => Color.Secondary,
        "PROTECTED A" => Color.Error,
        _ => Color.Dark
        };

    private string GetProjectDataSensitivity()
    {
        return !string.IsNullOrWhiteSpace(Project?.Data_Sensitivity) ? Project.Data_Sensitivity : "Unclassified";
    }

    private void HandleEditMetadata(MouseEventArgs args)
    {
        _navigationManager.NavigateTo($"/w/{Project.Project_Acronym_CD}/metadata");
    }

    private void HandleShowCosts(MouseEventArgs args)
    {
        _navigationManager.NavigateTo($"/w/{Project.Project_Acronym_CD}/costs");
    }

    private string GetProjectDescription()
    {
        var description = _projectMetadata.GetValue($"description_{CultureService.Culture}", null);
        return description ?? Project.ProjectDescription;
    }

}