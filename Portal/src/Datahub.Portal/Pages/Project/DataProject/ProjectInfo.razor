@*ProjectInfo.razor*@

@using Datahub.Core.Components.Skeleton
@using Datahub.Core.Enums
@using Datahub.Core.Model.Datahub
@using Datahub.Core.Services.Metadata;
@using Datahub.Metadata.DTO
@inject IDbContextFactory<DatahubProjectDBContext> _dbFactoryProject
@inject UIControlsService _uiControlService
@inject NavigationManager NavigationManager
@inject IMetadataBrokerService MetadataBrokerService

@if (_loading)
{
    <Skeleton Height="2.5rem" Width="150px"/>
    <Skeleton Height="2.5rem" Width="150px"/>
    <Skeleton Height="5rem" Width="650px"/>
    <Skeleton Height="2rem" Width="900px"/>
    <Skeleton Height="2rem" Width="900px"/>
    <Skeleton Height="2rem" Width="300px"/>
    return;
}

<MudStack Row>
    <MudChip Color="@Color.Dark" class="project-data-sensitivity">@Localizer[Project.Data_Sensitivity]</MudChip>

    @if (_currentProjectMonthlyCost is not null && _projectBudget > 0)
    {
        <MudBadge Icon="@Icons.Filled.QuestionMark" Color="@GetCostChipColor()" Overlap="@true" Bordered="@true">
            <MudChip Icon="@Icons.Filled.AttachMoney" IconColor="@GetCostChipColor()" Variant="@Variant.Text"
                     Color="@GetCostChipColor()" class="project-data-sensitivity" OnClick=@HandleToggleCosts>
                @($"{_currentProjectMonthlyCost:C} {Localizer["Azure cost for current month"]}")
            </MudChip>
        </MudBadge>
    }

    @if ((IsProjectAdmin || IsDatahubAdmin) && Project.MetadataAdded != true)
    {
        <MudChip Icon="@Icons.Filled.Info"
                 IconColor="@Color.Warning"
                 Variant="@Variant.Text"
                 Color="@Color.Warning"
                 class="project-data-sensitivity"
                 OnClick=@HandleEditMetadata>
            @Localizer["Edit Metadata"]
        </MudChip>
    }
</MudStack>

<MudStack>
    <MudText Typo="Typo.h3">
        <MudIcon Icon="@_projectIcon" Title="@Localizer["Project Icon"]" />
        @Project.ProjectName
    </MudText>

    @if (Project.Project_Phase == TerraformOutputStatus.PendingApproval)
    {
        <MudAlert Severity="Severity.Warning">@Localizer["The project is currently pending approval. No resources can be provisioned until the project is approved by a Datahub Administrator"]</MudAlert>
    }


    <DHMarkdown class="description" Content=@GetProjectDescription()/>

    @if (_showCosts && _currentProjectMonthlyCost.HasValue && _currentProjectMonthlyCost.Value < _projectBudget)
    {
        <ProjectCosting ProjectBudget=@_projectBudget ConsumedBudget=@_currentProjectMonthlyCost.Value/>
    }
</MudStack>


@code {

    [CascadingParameter(Name = "Project")]
    private Datahub_Project Project { get; set; }

    [CascadingParameter(Name = "IsProjectAdmin")]
    private bool IsProjectAdmin { get; set; }

    [CascadingParameter(Name = "IsDatahubAdmin")]
    private bool IsDatahubAdmin { get; set; }

    private string ProjectAcronym => Project?.Project_Acronym_CD;

    private decimal? _currentProjectMonthlyCost;
    private string _projectIcon => $"fas fa-{Project?.Project_Icon ?? Icon.DEFAULT_PROJECT_ICON}";
    private decimal _projectBudget;
    private bool _loading = true;
    private bool _showCosts;
    private FieldValueContainer _projectMetadata;

    protected override async Task OnInitializedAsync()
    {
        using var projectContext = _dbFactoryProject.CreateDbContext();

        var projectMonthlyCost = await projectContext.Project_Current_Monthly_Costs.FirstOrDefaultAsync(mc => mc.ProjectAcronym == ProjectAcronym.ToLower());
        if (projectMonthlyCost != null)
            _currentProjectMonthlyCost = projectMonthlyCost.TotalCost;

        _projectBudget = Project.Project_Budget ?? 0;

        _projectMetadata = await MetadataBrokerService.GetObjectMetadataValues(ProjectAcronym);

        _loading = false;
    }

    private Color GetCostChipColor()
    {
        if (_currentProjectMonthlyCost.HasValue)
        {
            if (_currentProjectMonthlyCost < 0.01m)
                return Color.Dark;
            if (_currentProjectMonthlyCost >= _projectBudget)
                return Color.Error;
            if (_currentProjectMonthlyCost >= 0.75m * _projectBudget)
                return Color.Warning;
        }
        return Color.Default;
    }

    private string GetToolTipText()
    {
        var projectName = $"{Project.ProjectName} ";
        if (_currentProjectMonthlyCost >= _projectBudget)
            return projectName + Localizer["is over budget"];
        if (_currentProjectMonthlyCost >= 0.75m * _projectBudget)
            return projectName + Localizer["is nearing budget"];
        return projectName + Localizer["is under budget"];
    }

    private Color GetProtectionColor() => (Project?.Data_Sensitivity ?? "").ToUpper() switch
    {
        "CLASSIFIED"  or
            "PROTECTED B" or
            "PROTECTED C" => Color.Secondary,
        "PROTECTED A" => Color.Error,
        _ => Color.Dark
        };

    private string GetProjectDataSensitivity()
    {
        return !string.IsNullOrWhiteSpace(Project?.Data_Sensitivity) ? Project.Data_Sensitivity : "Unclassified";
    }

    private void HandleToggleCosts(MouseEventArgs args)
    {
        _showCosts = !_showCosts;
    }

    private void HandleEditMetadata(MouseEventArgs args)
    {
        NavigationManager.NavigateTo($"/admin/metadata/{Project.Project_Acronym_CD}");
    }

    private string GetProjectDescription()
    {
        var description = _projectMetadata.GetValue($"notes_translated_{CultureService.Culture}", null);
        return description ?? Project.ProjectDescription;
    }

}