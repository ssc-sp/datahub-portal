@*ProjectInfo.razor*@

@using Datahub.Core.Components.Skeleton
@using Datahub.Core.Enums
@using Datahub.Core.Model.Datahub
@using Datahub.Core.Model.Projects
@using Datahub.Core.Services.Metadata;
@using Datahub.Metadata.DTO
@using Datahub.Infrastructure.Services.Projects;
@using Datahub.Infrastructure.Services.Azure

@inject UIControlsService _uiControlService
@inject NavigationManager _navigationManager
@inject IMetadataBrokerService _metadataBrokerService
@inject IDbContextFactory<DatahubProjectDBContext> _dbContextFactory
@inject DatahubPortalConfiguration _datahubPortalConfiguration

@if (_loading)
{
    <Skeleton Height="2.5rem" Width="150px"/>
    <Skeleton Height="2.5rem" Width="150px"/>
    <Skeleton Height="5rem" Width="650px"/>
    <Skeleton Height="2rem" Width="900px"/>
    <Skeleton Height="2rem" Width="900px"/>
    <Skeleton Height="2rem" Width="300px"/>
    return;
}

<MudStack Row>
    <MudChip Label Color="@Color.Dark" class="project-data-sensitivity">@Localizer[_project.Data_Sensitivity]</MudChip>
    <DatahubAuthView AuthLevel="DatahubAuthView.AuthLevels.WorkspaceCollaborator" ProjectAcronym="@ProjectAcronym">
        @if (CreditsDataExists && _projectBudget > 0)
        {
            <MudBadge Icon="@Icons.Material.Filled.QuestionMark" Color="@GetCostChipColor()" Overlap="@true" Bordered="@true">
                <MudChip Label="true"
                         Icon="@Icons.Material.Filled.AttachMoney"
                         IconColor="@GetCostChipColor()"
                         Variant="@Variant.Text"
                         Color="@GetCostChipColor()"
                         OnClick=@HandleShowCosts>
                    @($"{CurrentCredits:C} {Localizer["Total spent"]}")
                </MudChip>
            </MudBadge>
        }
        else
        {
            <MudChip Label="true"
                     Icon="@Icons.Material.Filled.AttachMoney"
                     IconColor="@GetCostChipColor()"
                     Variant="@Variant.Text"
                     Color="@GetCostChipColor()"
                     Disabled="true">
                @Localizer["No recent data"]
            </MudChip>
        }
        @if (_projectStorage != null)
        {
            <MudChip Label="true"
                     Icon="@Icons.Material.Filled.Storage"
                     IconColor="@GetCostChipColor()"
                     Variant="@Variant.Text"
                     Color="@GetCostChipColor()">
                @($"{FormattedAverageCapacity()} GiB")
            </MudChip>
        }
    </DatahubAuthView>    

    <DatahubAuthView AuthLevel="DatahubAuthView.AuthLevels.WorkspaceAdmin" ProjectAcronym="@ProjectAcronym">
        @{
            var color = _project?.MetadataAdded ?? false ? Color.Default : Color.Warning;
            var icon = _project?.MetadataAdded ?? false ? Icons.Material.Filled.Edit : Icons.Material.Filled.Warning;
            <MudChip Icon="@icon"
                     IconColor="@color"
                     Variant="@Variant.Text"
                     Color="@color"
                     class="project-data-sensitivity"
                     OnClick="@HandleEditMetadata"
                     Label>
                @Localizer["Edit Metadata"]
            </MudChip>
        }
    </DatahubAuthView>
</MudStack>

<MudStack>
    <MudText Typo="Typo.h1">
        <MudIcon Icon="@_projectIcon" Title="@Localizer["Project Icon"]"/>
        @_project.ProjectName
    </MudText>
    <DatahubAuthView AuthLevel="DatahubAuthView.AuthLevels.WorkspaceCollaborator" ProjectAcronym="@ProjectAcronym">
        @if (_project.Project_Phase == TerraformOutputStatus.PendingApproval)
        {
            <MudAlert Severity="Severity.Warning">@Localizer["The workspace is currently being configured in Azure. No resources can be provisioned until this step is completed."]</MudAlert>
        }

        @if (_project?.MetadataAdded != true)
        {
            <MudAlert Severity="Severity.Warning">@Localizer["The workspace metadata is currently incomplete. No resources can be provisioned until the project metadata has been filled"]</MudAlert>
        }

        @if ((_project?.Project_Budget ?? 0) == 0)
        {
            <MudAlert Severity="Severity.Warning">
                <MudLink Href="@_datahubPortalConfiguration.SupportFormUrl" Underline="Underline.None">
                    @Localizer["The project doesn't have a budget assigned. Contact a Datahub Administrator."]
                </MudLink>
            </MudAlert>
        }
    </DatahubAuthView>
    <DHMarkdown class="description" Content="@GetProjectDescription()"/>
</MudStack>


@code {

    [Parameter]
    public string ProjectAcronym { get; set; }

    private Datahub_Project _project;

    private Project_Credits _projectCredits = default;
    private decimal CurrentCredits => Convert.ToDecimal(_projectCredits.Current);

    private Project_Storage _projectStorage = default;

    private bool CreditsDataExists => _projectCredits is not null && _projectCredits.ProjectId != 0;

    private decimal _projectBudget;
    private bool _loading = true;
    private FieldValueContainer _projectMetadata;

    private string _projectIcon => $"fas fa-{_project?.Project_Icon ?? Icon.DEFAULT_PROJECT_ICON}";

    protected override void OnInitialized()
    {
        base.OnInitialized();

        if (string.IsNullOrWhiteSpace(ProjectAcronym))
        {
            throw new InvalidOperationException($"'{nameof(ProjectAcronym)}' is required");
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await using var ctx = await _dbContextFactory.CreateDbContextAsync();
        _project = await ctx.Projects
            .AsNoTracking()
            .FirstOrDefaultAsync(e => e.Project_Acronym_CD == ProjectAcronym);

        _projectCredits = await ctx.Project_Credits.FirstOrDefaultAsync(e => e.ProjectId == _project.Project_ID) ?? new();
        _projectBudget = _project.Project_Budget ?? 0;
        _projectMetadata = await _metadataBrokerService.GetObjectMetadataValues(ProjectAcronym);
        _projectStorage = await GetProjectStorage(ctx);

        _loading = false;
        StateHasChanged();
    }

    private async Task<Project_Storage> GetProjectStorage(DatahubProjectDBContext ctx)
    {
        return await ctx.Project_Storage_Avgs
            .Where(e => e.ProjectId == _project.Project_ID)
            .OrderByDescending(e => e.Date)
            .FirstOrDefaultAsync();
    }

    private Color GetCostChipColor()
    {
        if (CurrentCredits < 0.01m)
            return Color.Dark;
        if (CurrentCredits >= _projectBudget)
            return Color.Error;
        if (CurrentCredits >= 0.75m * _projectBudget)
            return Color.Warning;
        return Color.Default;
    }

    private string GetToolTipText()
    {
        var projectName = $"{_project.ProjectName} ";
        if (CurrentCredits >= _projectBudget)
            return projectName + Localizer["is over budget"];
        if (CurrentCredits >= 0.75m * _projectBudget)
            return projectName + Localizer["is nearing budget"];
        return projectName + Localizer["is under budget"];
    }

    private Color GetProtectionColor() => (_project?.Data_Sensitivity ?? "").ToUpper() switch
    {
        "CLASSIFIED"  or
            "PROTECTED B" or
            "PROTECTED C" => Color.Secondary,
        "PROTECTED A" => Color.Error,
        _ => Color.Dark
    };

    private string GetProjectDataSensitivity()
    {
        return !string.IsNullOrWhiteSpace(_project?.Data_Sensitivity) ? _project.Data_Sensitivity : "Unclassified";
    }

    private void HandleEditMetadata(MouseEventArgs args)
    {
        _navigationManager.NavigateTo($"/w/{_project.Project_Acronym_CD}/metadata");
    }

    private void HandleShowCosts(MouseEventArgs args)
    {
        _navigationManager.NavigateTo($"/w/{_project.Project_Acronym_CD}/costs");
    }

    private string GetProjectDescription()
    {
        var description = _projectMetadata.GetValue($"description_{CultureService.Culture}", null);
        return description ?? _project.ProjectDescription;
    }

    private string FormattedAverageCapacity()
    {
        var gibs = _projectStorage.AverageCapacity / (1024 * 1024 * 1024);
        return gibs.ToString("0.00");
    }
}