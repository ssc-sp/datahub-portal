@using Datahub.Core.Services.Projects;
@using Datahub.Portal.Services.Notification;
@using Datahub.ProjectTools.Services;
@using Microsoft.Extensions.Options
@using Datahub.Portal.Pages.Project.DataProject.ProjectTools
@using Datahub.Core.Model.Datahub
@using Datahub.Core.Services.Notification
@using MudBlazor.Utilities
@using Datahub.Application.Configuration
@using Datahub.Application.Services.Notebooks
@using Datahub.Core.Model.Projects
@using Datahub.Core.Model.Repositories
@using Datahub.Portal.Pages.Project.Repositories

@inject ServiceAuthManager _serviceAuthManager
@inject IUserInformationService _userInformationService
@inject IDbContextFactory<DatahubProjectDBContext> _dbFactoryProject
@inject IOptions<DataProjectsConfiguration> _configuration
@inject ServiceAuthManager ServiceAuthManager
@inject ProjectToolsEmailService _emailNotificationService
@inject ProjectResourcesListingService ProjectResourcesListingService
@inject DatahubPortalConfiguration _datahubPortalConfiguration
@inject NavigationManager NavigationManager
@inject IDatahubAuditingService _auditingService
@inject IDatabricksApiService _databricksApiService

<DatahubAuthView AuthLevel="DatahubAuthView.AuthLevels.WorkspaceGuest" ProjectAcronym="@ProjectAcronym">
    <Authorized>
        @if (_isLoading)
        {
            <MudProgressCircular Color="Color.Primary" Indeterminate="true"/>
        }
        else
        {
            @if (_activeResources?.Count > 0)
            {
                <MudStack Class="my-12">
                    <MudText Class="mb-4" Typo="Typo.h2">@Localizer["Your Workspace Tools"]</MudText>
                    @if (_datahubPortalConfiguration.ReverseProxy.Enabled && !string.IsNullOrWhiteSpace(_project?.WebApp_URL))
                    {
                        <AzureWebAppCard ProjectAcronym="@ProjectAcronym"/>
                    }
                    <MudElement Class="mt-4" HtmlTag="div" class="@_toolContainerClass">
                        @foreach (var active in _activeResources)
                        {
                            <DynamicComponent Parameters="active.parameters" Type="active.type"/>
                        }
                    </MudElement>
                </MudStack>
            }

            @if (_inactiveResources?.Count > 0)
            {
                <MudStack Class="my-12">
                    <MudStack Row Justify="Justify.SpaceBetween" AlignItems="AlignItems.Center">
                        <MudText Class="mb-4" Typo="Typo.h2">@Localizer["Tools Catalogue"]</MudText>
                        <DatahubAuthView AuthLevel="DatahubAuthView.AuthLevels.DatahubAdmin">
                            <MudTooltip Text="@ResourceWhitelistButtonTooltip" RootClass="mx-4" Placement="Placement.Bottom"
                                        Arrow="true">
                                <MudButton Variant="Variant.Text" Color="Color.Primary" Class="px-2" Href="@WhitelistUrl">
                                    @Localizer[ResourceWhitelistButtonText]
                                </MudButton>
                            </MudTooltip>
                        </DatahubAuthView>
                    </MudStack>
                    @if (_isLoading)
                    {
                        <MudProgressCircular Color="Color.Primary" Indeterminate="true"/>
                    }
                    else
                    {
                        <MudElement HtmlTag="div" class="@_toolContainerClass">
                            @foreach (var resource in _inactiveResources)
                            {
                                <DynamicComponent Parameters="resource.parameters" Type="resource.type"/>
                            }
                        </MudElement>
                    }
                </MudStack>
            }
        }
    </Authorized>
    <NotAuthorized>
        <MudStack>
            <DatahubAuthView AuthLevel="DatahubAuthView.AuthLevels.Authenticated">
                <MudStack>
                    <MudText Class="mt-2 mb-6" Typo="Typo.h2">@Localizer["Shared Content"]</MudText>
                    @if (_projectRepositories != null && _projectRepositories.Any())
                    {
                        @foreach (var projectRepository in _projectRepositories)
                        {
                            <RepositoryCard ProjectRepository="@projectRepository"/>
                        }
                    }
                    else
                    {
                        <MudText Typo="Typo.body1">@Localizer["No shared content available."]</MudText>
                        <MudText Typo="Typo.body1">@Localizer["Please contact the workspace administrators for access or to share repositories."]</MudText>
                    }
                </MudStack>
            </DatahubAuthView>
        </MudStack>
    </NotAuthorized>
</DatahubAuthView>

@code {

    [CascadingParameter(Name = "ProjectAcronym")]
    private string ProjectAcronym { get; set; }

    private bool _isLoading = true;
    private string WhitelistUrl => $"{_datahubPortalConfiguration.ProjectUrlSegment}/{ProjectAcronym}/whitelist";

    private Datahub_Project _project;
    private List<Project_Resources2> _projectDatabaseResources = new();
    private List<ProjectRepository> _projectRepositories = new();

    private List<(Type type, IDictionary<string, object> parameters)> _activeResources;
    private List<(Type type, IDictionary<string, object> parameters)> _inactiveResources;
    private string _toolContainerClass;

        private const string ResourceWhitelistButtonText = "Edit Available Resources";
        private const string ResourceWhitelistButtonTooltip = "Whitelist resources for this workspace (Only available to Datahub Admins)";

    private void ReloadPage()
    {
        NavigationManager.NavigateTo(NavigationManager.Uri, true);
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();

        _toolContainerClass = new CssBuilder()
            .AddClass("d-flex")
            .AddClass("flex-wrap")
            .AddClass("gap-4")
            .Build();
    }

    protected override async Task OnInitializedAsync()
    {
        if (string.IsNullOrWhiteSpace(ProjectAcronym))
        {
            throw new InvalidOperationException($"'{nameof(ProjectAcronym)}' is required");
        }

        await base.OnInitializedAsync();

        _projectRepositories = await _databricksApiService.ListDisplayedWorkspaceRepositoriesAsync(ProjectAcronym);

        await using var projectDbContext = await _dbFactoryProject.CreateDbContextAsync();

        var allResources = await ProjectResourcesListingService.GetResourcesForProject(ProjectAcronym);
        _activeResources = allResources.SelectMany(a => a.GetActiveResources()).ToList();
        _inactiveResources = allResources
            .Select(a => a.GetInactiveResource())
            .Where(a => a != null)
            .Select(a => a.Value)
            .ToList();
        
        _project = await projectDbContext.Projects
            .FirstOrDefaultAsync(p => p.Project_Acronym_CD == ProjectAcronym);
        
        _isLoading = false;
    }

}