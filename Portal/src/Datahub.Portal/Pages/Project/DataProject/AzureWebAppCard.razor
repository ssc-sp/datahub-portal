@using Datahub.Application.Services.ReverseProxy
@using Datahub.Core.Model.Projects
@using MudBlazor.Utilities
@inject IDbContextFactory<DatahubProjectDBContext> _dbFactoryProject
@inject DatahubPortalConfiguration _portalConfiguration
@inject IReverseProxyConfigService ReverseProxyConfigService

<DatahubAuthView AuthLevel="DatahubAuthView.AuthLevels.WorkspaceGuest" ProjectAcronym="@ProjectAcronym">
    <MudPaper Class="@_cardCss" Style="@_cardStyle">
        <MudStack Justify="Justify.SpaceBetween">
            <MudStack>
                <MudStack Row>
                    <MudIcon Icon="fa-light fa-display-code" Color="Color.Secondary"/>
                    <MudText Class="mb-3" Typo="Typo.h5">@Localizer["Web App Service"]</MudText>
                    <DatahubAuthView AuthLevel="DatahubAuthView.AuthLevels.DatahubAdmin" ProjectAcronym="@ProjectAcronym">
                        <MudSpacer/>
                        <MudSwitch T="bool?" Checked="_webAppEnabled" Color="Color.Primary" Label="@Localizer["Enable Web Application"]" CheckedChanged="@HandleToggle"/>
                    </DatahubAuthView>
                </MudStack>
                <MudElement Class="mb-2">
                    <MudText Typo="Typo.body2">
                        @Localizer["Azure's Linux App Service allows you to quickly build, deploy, and scale web apps and APIs developed with .NET, .NET Core, Node.js, Java, Python, or PHP in containers."]
                    </MudText>
                </MudElement>
            </MudStack>
            <MudStack>
                <MudElement>
                    <MudStack AlignItems="AlignItems.Start" Justify="Justify.FlexEnd" Class="flex-1 my-2">
                        <MudButton Variant="Variant.Text" EndIcon="@SidebarIcons.External" Color="Color.Primary" Size="Size.Small">
                            <DHLink Underline="Underline.None"
                                    Typo="Typo.button"
                                    LinkType="DatahubLinkType.AzureWebApp"
                                    AzureWebAppUrl="@_azureWebAppUrl"
                                    DataProject="@ProjectAcronym">
                                @Localizer["Open Web App"]
                            </DHLink>
                        </MudButton>
                    </MudStack>
                </MudElement>
            </MudStack>
        </MudStack>
    </MudPaper>
</DatahubAuthView>

@code {

    [Parameter]
    public string ProjectAcronym { get; set; }

    private string _azureWebAppUrl => $"/{ReverseProxyConfigService.BuildWebAppURL(ProjectAcronym)}/";

    private string _descriptionStyle;
    private string _cardContentStyle;
    private string _cardCss;
    private string _cardStyle;

    private bool _webAppEnabled = false;

    protected override async Task OnInitializedAsync()
    {
        await using var projectContext = await _dbFactoryProject.CreateDbContextAsync();

        _webAppEnabled = await projectContext.Projects
            .AsNoTracking()
            .Where(p => p.Project_Acronym_CD == ProjectAcronym)
            .Select(p => p.WebAppEnabled)
            .FirstOrDefaultAsync() ?? false;
    }

    protected override void OnInitialized()
    {
        _cardCss = new CssBuilder()
            .AddClass("pa-6")
            .AddClass("d-flex")
            .Build();

        _cardStyle = new StyleBuilder()
    // .AddStyle("flex-basis", "400px")
            .AddStyle("flex-grow", "1")
    // .AddStyle("max-width", "calc(50% - 8px)")
            .Build();

        _descriptionStyle = new StyleBuilder()
            .Build();

        _cardContentStyle = new StyleBuilder()
            .AddStyle("min-height", "140px")
            .Build();
    }

    private async Task HandleToggle(bool? toggleValue)
    {
        _webAppEnabled = !_webAppEnabled;

        await using var ctx = await _dbFactoryProject.CreateDbContextAsync();
        var project = await ctx.Projects
            .Where(p => p.Project_Acronym_CD == ProjectAcronym)
            .FirstOrDefaultAsync();

        project.WebAppEnabled = _webAppEnabled;
        await ctx.SaveChangesAsync();
    }

}