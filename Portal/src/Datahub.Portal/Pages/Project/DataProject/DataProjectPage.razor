@* @page "/w/{ProjectAcronymParam}" *@

@using Datahub.Core.Model.UserTracking;
@using Datahub.Portal.Pages.Project.DataProject.ProjectTools
@using Datahub.Core.Components.PageBanner
@using Datahub.Core.Services.Achievements
@using Datahub.Core.Model.Achievements
@using Datahub.Core.Model.Projects

@inject IDbContextFactory<DatahubProjectDBContext> _dbFactoryProject
@inject IUserInformationService _userInformationService
@inject IPortalUserTelemetryService _telemetryService
@inject IDatahubAuditingService _auditingService
@inject UserLocationManagerService _userLocationManagerService
@inject ILogger<DataProjectPage> _logger
@inject DatahubPortalConfiguration Configuration


<DHPageAlert
    Title=@Localizer["Welcome to your Workspace"]
    Key="@PageAlert.ProjectFeatures"
    WikiLinkEN="/Banners/Workspace"
    WikiLinkFR="/fr/Banners/Espace-de-travail"/>

<DHPageTitle PageTitleKey="@_projectName"/>

@if (_project is not null)
{
    <MudGrid>
        <CascadingValue Value=@ProjectAcronymParam Name="ProjectAcronym">
            <MudItem sm="12" md="7" lg="8">
                <ProjectInfo ProjectAcronym="@ProjectAcronymParam"/>
                @if (_clientEngagements.Any())
                {
                    <ProjectEngagements/>
                }
                <ProjectCatalog IsFrench="@_isFrench"/>

                <ProjectToolListing/>


            </MudItem>
            <MudItem sm="12" md="5" lg="4">
                <ProjectUserCardList ProjectAcronym="@ProjectAcronymParam"/>

            </MudItem>
        </CascadingValue>
    </MudGrid>
}

@code {

    [Parameter]
    public string ProjectAcronymParam { get; set; }

    private Datahub_Project _project;
    private string _userId;
    private string _projectName;
    private bool _isFrench;
    private string _wsAppBase;
    private List<Client_Engagement> _clientEngagements = new();

    private bool ReverseProxyEnabled => Configuration.ReverseProxy.Enabled;

    protected override async Task OnInitializedAsync()
    {
        await using var projectContext = await _dbFactoryProject.CreateDbContextAsync();

        _project = await projectContext.Projects
            .AsNoTracking()
            .Include(p => p.ServiceRequests)
            .Include(p => p.Pipelines)
            .Include(p => p.Whitelist)
            .Where(p => p.Project_Acronym_CD == ProjectAcronymParam)
            .FirstOrDefaultAsync();

        if (_project is null)
            return;

        _isFrench = Thread.CurrentThread.CurrentCulture.Name.Equals("fr-ca", StringComparison.OrdinalIgnoreCase);
        _projectName = _project?.ProjectName;

        _userId = await _userInformationService.GetUserIdString();
        if (_userId is null) _logger.LogError("UserId is null");

        var isMemberOfProject = projectContext.Project_Users
            .Any(p => p.User_ID == _userId && p.Project.Project_Acronym_CD == ProjectAcronymParam);

        if (isMemberOfProject)
        {
            await _telemetryService.LogTelemetryEvent(TelemetryEvents.UserViewProject);
        }
        else
        {
            await _telemetryService.LogTelemetryEvent(TelemetryEvents.UserViewProjectNotMemberOf);
        }

        _clientEngagements = await projectContext.Client_Engagements.Where(ce => ce.Project == _project && ce.Is_Engagement_Active).ToListAsync();
        await _auditingService.TrackEvent("Open Initiative", ("Initiative", _projectName), ("Acronym", ProjectAcronymParam));

    // record recent link
        await RecordRecentLink();
    }

    private bool WebAppEnabled => ReverseProxyEnabled && _project?.WebAppEnabled == true;
    private bool WebAppSaveDisabled => WebAppEnabled && string.IsNullOrWhiteSpace(_project?.WebApp_URL);

    private async Task RecordRecentLink()
    {
        if (string.IsNullOrEmpty(ProjectAcronymParam))
            return;

        var userRecentLink = new UserRecentLink()
        {
            LinkType = DatahubLinkType.DataProject,
            DataProject = ProjectAcronymParam,
            accessedTime = DateTimeOffset.Now
        };

        await _userLocationManagerService.RegisterNavigation(userRecentLink);
    }


}