@* @page "/w/{ProjectAcronymParam}" *@

@using Datahub.Core.Model.UserTracking;
@using Datahub.Portal.Pages.Project.DataProject.ProjectTools
@using Datahub.Portal.Components.PageAlerts
@using Datahub.Core.Services.Achievements
@using Datahub.Core.Model.Achievements
@using Datahub.Core.Model.Projects
@using Datahub.Application.Services

@inject IDbContextFactory<DatahubProjectDBContext> _dbFactoryProject
@inject IUserInformationService _userInformationService
@inject IPortalUserTelemetryService _telemetryService
@inject IDatahubAuditingService _auditingService
@inject UserLocationManagerService _userLocationManagerService
@inject ILogger<DataProjectPage> _logger
@inject DatahubPortalConfiguration Configuration
@inject IDialogService _dialogService
@inject IResourceMessagingService _resourceMessagingService
@inject ISnackbar _snackbar


<DHPageTitle PageTitleKey="@_projectName"/>

@if (_project is not null)
{
    <MudGrid>
        <CascadingValue Value=@ProjectAcronymParam Name="ProjectAcronym">
            <MudItem sm="12" md="7" lg="8">
                <ProjectInfo ProjectAcronym="@ProjectAcronymParam"/>
                @if (_clientEngagements.Any())
                {
                    <ProjectEngagements/>
                }
                <ProjectCatalog IsFrench="@_isFrench"/>

                <ProjectToolListing/>


            </MudItem>
            <MudItem sm="12" md="5" lg="4">
                <ProjectUserCardList ProjectAcronym="@ProjectAcronymParam"/>

            </MudItem>
            <DatahubAuthView AuthLevel="DatahubAuthView.AuthLevels.WorkspaceLead">
                <MudButton Variant="Variant.Text"
                           Color="Color.Error"
                           EndIcon="@Icons.Material.Filled.Delete"
                           OnClick="OpenDeletionDialog">
                    @Localizer["Delete Workspace"]
                </MudButton>
            </DatahubAuthView>
        </CascadingValue>
    </MudGrid>
}

@code {

    [Parameter]
    public string ProjectAcronymParam { get; set; }

    private DatahubProject _project;
    private string _userId;
    private string _projectName;
    private bool _isFrench;
    private List<ClientEngagement> _clientEngagements = new();

    private bool ReverseProxyEnabled => Configuration.ReverseProxy.Enabled;

    protected override async Task OnInitializedAsync()
    {
        await using var projectContext = await _dbFactoryProject.CreateDbContextAsync();

        _project = await projectContext.Projects
            .AsNoTracking()
            // .Include(p => p.ProjectRequestAudits)
            .Include(p => p.Pipelines)
            .Include(p => p.Whitelist)
            .Where(p => p.ProjectAcronymCD == ProjectAcronymParam)
            .FirstOrDefaultAsync();

        if (_project is null)
            return;

        _isFrench = Thread.CurrentThread.CurrentCulture.Name.Equals("fr-ca", StringComparison.OrdinalIgnoreCase);
        _projectName = _project?.ProjectName;

        _userId = await _userInformationService.GetUserIdString();
        if (_userId is null) _logger.LogError("UserId is null");

        var isMemberOfProject = projectContext.ProjectUsers
            .Any(p => p.UserID == _userId && p.Project.ProjectAcronymCD == ProjectAcronymParam);

        if (isMemberOfProject)
        {
            await _telemetryService.LogTelemetryEvent(TelemetryEvents.UserViewProject);
        }
        else
        {
            await _telemetryService.LogTelemetryEvent(TelemetryEvents.UserViewProjectNotMemberOf);
        }

        _clientEngagements = await projectContext.ClientEngagements.Where(ce => ce.Project == _project && ce.IsEngagementActive).ToListAsync();
        await _auditingService.TrackEvent("Open Initiative", ("Initiative", _projectName), ("Acronym", ProjectAcronymParam));

    // record recent link
        await RecordRecentLink();
    }

    private bool WebAppEnabled => ReverseProxyEnabled && _project?.WebAppEnabled == true;
    private bool WebAppSaveDisabled => WebAppEnabled && string.IsNullOrWhiteSpace(_project?.WebAppURL);

    private async Task RecordRecentLink()
    {
        if (string.IsNullOrEmpty(ProjectAcronymParam))
            return;

        var userRecentLink = new UserRecentLink()
        {
            LinkType = DatahubLinkType.DataProject,
            DataProject = ProjectAcronymParam,
            AccessedTime = DateTimeOffset.Now
        };

        await _userLocationManagerService.RegisterNavigation(userRecentLink);
    }
    
    private async Task OpenDeletionDialog()
    {
        var parameters = new DialogParameters
        {
            { "ProjectAcronym", ProjectAcronymParam },
            { "ProjectName", _projectName }
        };

        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Medium, FullWidth = true};

        var dialog = _dialogService.Show<DeleteProjectDialog>("Delete Workspace", parameters, options);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            try
            {
                var userEmail = await _userInformationService.GetUserEmail();
                var workspaceDefinition = await _resourceMessagingService.GetWorkspaceDefinition(ProjectAcronymParam, requestingUserEmail: userEmail);
                await _resourceMessagingService.SendToTerraformDeleteQueue(workspaceDefinition, _project.ProjectID);
                _snackbar.Add("Workspace succesfully queued for deletion", Severity.Success);
            }
            catch (Exception e)
            {
                _logger.LogError(e.Message);
                _snackbar.Add("Error deleting workspace", Severity.Error);
            }
        }
    }
}