@using Datahub.Metadata.DTO
@using Datahub.Metadata.Model
@using Datahub.PowerBI.Services
@using Datahub.Core.Services.Storage
@using Datahub.Infrastructure.Services.Storage

@if (_results.Count > 0)
{
    <div class="project-tools">
        <MudStack>
            <MudText Typo="Typo.h2">@Localizer["Shared Datasets"]</MudText>
            <MudGrid>
                @foreach (var result in _results)
                {
                    <MudItem sm="4">
                        <MudCard Class="d-flex align-center justify-center mud-width-full pa-8" 
                                 style="height: 100%; cursor: pointer;" 
                                 onclick=@(async () => await OpenCard(result))>
                            <MudGrid>
                                <MudItem sm="2">
                                    <MudStack Row="false">
                                        <MudIcon Icon=@GetIconClass(result.DataType) Size="Size.Medium" />
                                    </MudStack>
                                </MudItem>
                                <MudItem sm="8">
                                    <MudStack>
                                        <MudText Typo="Typo.body1">@(IsFrench ? result.NameFrench : result.NameEnglish)</MudText>
                                        <MudText Typo="Typo.caption">@GetObjectType(result.DataType)</MudText>
                                    </MudStack>
                                </MudItem>
                            </MudGrid>
                        </MudCard>
                    </MudItem>
                }
            </MudGrid>
        </MudStack>
    </div>
}
else
{
    if (_loading)
    {
        <MudStack>
            <MudText Typo="Typo.h2">@Localizer["Shared Datasets"]</MudText>
            <MudGrid>
                @for (var i = 0; i < 6; i++)
                {
                    <MudItem sm="4">
                        <span style="display: flex; margin: 1rem 0">
                            <Skeleton Circle Width="2rem" Height="2rem" />
                            <span style="display: block; width: .5rem"></span>
                            <Skeleton Width="150px" Height="2rem" />
                        </span>
                    </MudItem>
                }
            </MudGrid>
        </MudStack>
    }    
}

@code {

    [Inject]
    public NavigationManager _navigationManager { get; set; }

    [Inject]
    public IMetadataBrokerService _metadataBrokerService { get; set; }

    [Inject]
    public IPowerBiDataService _powerBiDataService { get; set; }

    [Inject]
    public DataRetrievalService _retrievalService { get; set; }

    [Inject]
    public IJSRuntime JSRuntime { get; set; }

    [CascadingParameter(Name = "ProjectId")]
    public int ProjectId { get; set; }

    [Parameter]
    public bool IsFrench { get; set; }

    private List<CatalogObjectResult> _results { get; set; } = new();
    private bool _loading;

    protected override async Task OnParametersSetAsync()
    {
        if (ProjectId != 0)
        {
            _loading = true;
            _results = await _metadataBrokerService.GetProjectCatalogItems(ProjectId);
            _loading = false;
        }        
    }

    private string GetIconClass(MetadataObjectType type)
    {
        var iconClass = type switch
        {
            MetadataObjectType.File => "file",
            MetadataObjectType.PowerBIWorkspace or
            MetadataObjectType.PowerBIReport or 
            MetadataObjectType.PowerBIDataset => "chart-bar",
            _ => "square"
        };
        return $"fas fa-{iconClass}";
    }

    private string GetObjectType(MetadataObjectType type) => Localizer[$"DISCOVERY-DATA-TYPES.{type}"];

    private async Task OpenCard(CatalogObjectResult result)
    {
        if (result.DataType == MetadataObjectType.PowerBIReport)
            await ViewPowerBIReport(result);
        if (result.DataType == MetadataObjectType.File)
            await DownloadFile(result);
    }

    private async Task ViewPowerBIReport(CatalogObjectResult result)
    {
        if (Guid.TryParse(result.MetadataObjectIdTXT, out var guid))
        {
            var report = await _powerBiDataService.GetReportById(guid);
            if (report is not null)
                _navigationManager.NavigateTo($"/powerbi-report/{report.WorkspaceId}/{report.ReportID}");
        }
    }

    private async Task DownloadFile(CatalogObjectResult result)
    {
        var uri = await _retrievalService.GetDownloadAccessToSasBlob(DataRetrievalService.DEFAULTCONTAINERNAME, fileName: result.NameEnglish, projectUploadCode: result.Location);
        await JSRuntime.InvokeVoidAsync("open", uri.ToString(), "_blank");
    }
}
