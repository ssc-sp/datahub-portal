@using Datahub.Application.Services
@using Datahub.Core.Model.Achievements
@using Datahub.Core.Model.Projects
@using MudBlazor.Utilities
@using Datahub.Portal.Components.User
@using Datahub.Application.Commands


@inject IDbContextFactory<DatahubProjectDBContext> _dbContextFactory
@inject IUserInformationService _userInformationService
@inject IProjectUserManagementService _projectUserManagementService
@inject ILogger<DataProjectPage> _logger
@inject IDialogService _dialogService
@inject ISnackbar _snackbar


<DatahubAuthView AuthLevel="@DatahubAuthView.AuthLevels.WorkspaceCollaborator" ProjectAcronym="@ProjectAcronym">
    <Authorized>
        <MudStack>
            <MudStack Row>
                <MudText Typo="Typo.h2">
                    @Localizer["Workspace Members"]
                </MudText>
                <MudButton Variant="Variant.Filled" Color="Color.Primary" EndIcon="@Icons.Material.Outlined.PersonAdd" OnClick="OpenDialog">
                    @Localizer["Invite New User"]
                </MudButton>
            </MudStack>
            <DatahubAuthView AuthLevel="DatahubAuthView.AuthLevels.WorkspaceAdmin" ProjectAcronym="@ProjectAcronym">
                @if (_usersToAdd.Any())
                {
                    <MudStack>
                        <MudText Typo="Typo.h2">
                            @Localizer["You will be inviting the following users to your workspace"]
                        </MudText>
                        <MudList>
                            @foreach (var userToBeAdded in _usersToAdd)
                            {
                                <MudListItem Avatar="@Icons.Material.Outlined.PersonAdd">
                                    <MudStack Row>
                                        <MudText Typo="Typo.body2">
                                            @userToBeAdded.DisplayName
                                        </MudText>
                                        <ProjectMembersRoleSelect OnRoleChanged="@(newRoleId => UpdateProjectMemberRole(userToBeAdded, newRoleId))"/>
                                    </MudStack>
                                </MudListItem>
                            }
                        </MudList>
                    </MudStack>
                }
            </DatahubAuthView>

            <MudTable Items="@_filteredProjectUsers" Striped Filter="@(new Func<Datahub_Project_User, bool>(SearchFilter))" Class="project-members-table mt-6">
                <ToolBarContent>
                    <MudStack>
                        <MudTabs Elevation="0">
                            <MudTabPanel Text="@Localizer["All"]"
                                         BadgeData="@_allCount"
                                         BadgeColor="Color.Transparent"
                                         Style="@_tabStyle"
                                         OnClick="@(() => ProjectMemberRoleFilter(null))"/>
                            <MudTabPanel Text="@Localizer["Workspace Leads"]"
                                         BadgeData="@_workspaceLeadCount"
                                         BadgeColor="Color.Transparent"
                                         Style="@_tabStyle"
                                         OnClick="@(() => ProjectMemberRoleFilter((int)Project_Role.RoleNames.WorkspaceLead))"
                                         Disabled="@(_workspaceLeadCount == 0)"/>
                            <MudTabPanel Text="@Localizer["Admins"]"
                                         BadgeData="@_adminCount"
                                         BadgeColor="Color.Transparent"
                                         Style="@_tabStyle"
                                         OnClick="@(() => ProjectMemberRoleFilter((int)Project_Role.RoleNames.Admin))"
                                         Disabled="@(_adminCount == 0)"/>
                            <MudTabPanel Text="@Localizer["Collaborators"]"
                                         BadgeData="@_contributorCount"
                                         BadgeColor="Color.Transparent"
                                         Style="@_tabStyle"
                                         OnClick="@(() => ProjectMemberRoleFilter((int)Project_Role.RoleNames.Collaborator))"
                                         Disabled="@(_contributorCount == 0)"/>
                            <MudTabPanel Text="@Localizer["Guests"]"
                                         BadgeData="@_guestCount"
                                         BadgeColor="Color.Transparent"
                                         Style="@_tabStyle"
                                         OnClick="@(() => ProjectMemberRoleFilter((int)Project_Role.RoleNames.Guest))"
                                         Disabled="@(_guestCount == 0)"/>
                        </MudTabs>
                        <MudSpacer/>
                        <MudTextField @bind-Value="_filterString" Placeholder="@Localizer["Search"]" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium"/>
                    </MudStack>
                </ToolBarContent>

                <HeaderContent>
                    <MudTh>
                        <MudTableSortLabel SortBy="@(new Func<Datahub_Project_User, object>(x => x.PortalUser.DisplayName))" InitialDirection="SortDirection.Ascending">
                            @Localizer["Account"]
                        </MudTableSortLabel>
                    </MudTh>
                    <MudTh>
                        <MudTableSortLabel SortBy="@(new Func<Datahub_Project_User, object>(x => x.PortalUser.Email))">
                            @Localizer["Email"]
                        </MudTableSortLabel>
                    </MudTh>
                    <MudTh>@Localizer["Role"]</MudTh>
                    <MudTh>
                        <MudTableSortLabel SortBy="@(new Func<Datahub_Project_User, object>(x => x.Approved_DT))">
                            @Localizer["Added to Workspace"]
                        </MudTableSortLabel>
                    </MudTh>
                    <MudTh></MudTh>
                </HeaderContent>

                <RowTemplate Context="rowContext">
                    <MudTd>
                        <MudStack Row>
                            <UserAvatar ViewedUser="@rowContext.PortalUser" Size="@Size.Small"/>
                            <MudText Typo="Typo.body2">
                                @rowContext.PortalUser.DisplayName
                            </MudText>
                        </MudStack>
                    </MudTd>
                    <MudTd>@rowContext.PortalUser.Email</MudTd>
                    <MudTd>
                        <DatahubAuthView AuthLevel="DatahubAuthView.AuthLevels.WorkspaceAdmin" ProjectAcronym="@ProjectAcronym">
                            <Authorized>
                                <ProjectMembersRoleSelect OnRoleChanged="@(newRoleId => UpdateProjectMemberRole(rowContext, newRoleId))"/>
                            </Authorized>
                            <NotAuthorized>
                                <MudText Typo="Typo.body2">@Localizer[rowContext.Role.Name]</MudText>
                            </NotAuthorized>
                        </DatahubAuthView>
                    </MudTd>
                    <MudTd>
                        @if (rowContext.Approved_DT != null)
                        {
                            @rowContext.Approved_DT.Value.ToString("MMMM dd, yyyy")
                        }
                    </MudTd>
                    <MudTd>
                        <UserViewProfileIconButton ViewedUserGraphId="@rowContext.PortalUser.GraphGuid"/>
                    </MudTd>
                </RowTemplate>

                <PagerContent>
                    <MudTablePager RowsPerPageString="@Localizer["Rows per page:"]"
                                   InfoFormat="@("{first_item}-{last_item} " + Localizer["of"] + " {all_items}")"/>
                </PagerContent>
            </MudTable>
        </MudStack>
    </Authorized>
    <NotAuthorized>
        <MudAlert Severity="Severity.Error" Elevation="0">
            @Localizer["You are not authorized to view this page."]
        </MudAlert>
    </NotAuthorized>
</DatahubAuthView>

@code {

    [CascadingParameter(Name = "ProjectAcronym")]
    public string ProjectAcronym { get; set; }

    private string _filterString = "";
    private string _tabStyle;
    //     private const string PROFILE_LINK_ICON = "fa-duotone fa-chevrons-right";
    //     private const string ADD_USER_ICON = "fa-duotone fa-user-plus";
    //     private const string INVITE_USERS_DIALOG_TITLE = "Invite New Users";
    //     private const string EMAIL_FAILED_MESSAGE = "Unable to invite the following users. Please check their email addresses and try again, or contact DataHub support:";
    // private bool _isLoading = true;
    // private bool _updateInProgress;
    //
    private int _workspaceLeadCount => _projectUsers?.Count(x => x.Role.Id == (int)Project_Role.RoleNames.WorkspaceLead) ?? 0;
    private int _adminCount => _projectUsers?.Count(x => x.Role.Id == (int)Project_Role.RoleNames.Admin) ?? 0;
    private int _contributorCount => _projectUsers?.Count(x => x.Role.Id == (int)Project_Role.RoleNames.Collaborator) ?? 0;
    private int _guestCount => _projectUsers?.Count(x => x.Role.Id == (int)Project_Role.RoleNames.Guest) ?? 0;
    private int _allCount => _projectUsers?.Count ?? 0;
    // private ProjectMemberRole? _currentRoleFilter = null;
    // private List<ProjectMember> _projectUsers;
    // private List<ProjectMember> _filteredProjectMembers;
    private List<Datahub_Project_User> _projectUsers;
    private List<Datahub_Project_User> _filteredProjectUsers;

    private List<ProjectUserAddUserCommand> _usersToAdd;
    private List<ProjectUserUpdateCommand> _usersToUpdate;

    // private string _currentUserId;
    // private string _currentUserName;
    //
    // private List<ProjectMember> _usersToBeUpdated = new();
    // private List<ProjectMember> _currentSavedUsers = new();



    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();
        _projectUsers = await _projectUserManagementService.GetProjectUsersAsync(ProjectAcronym);
    }

    private bool SearchFilter(Datahub_Project_User projectUser)
    {
        if (string.IsNullOrWhiteSpace(_filterString))
            return true;
        if (projectUser.PortalUser?.DisplayName?.Contains(_filterString, StringComparison.OrdinalIgnoreCase) == true)
            return true;
        return projectUser.PortalUser?.Email?.Contains(_filterString, StringComparison.OrdinalIgnoreCase) == true;
    }

    private void ProjectMemberRoleFilter(int? roleId)
    {
        _filteredProjectUsers = _projectUsers
            .Where(x => roleId is null || x.Role.Id == roleId)
            .Where(x => x.Role.Id != (int)Project_Role.RoleNames.Remove)
            .Where(SearchFilter)
            .ToList();
    }

    private void UpdateProjectMemberRole(Datahub_Project_User projectUser, int newRoleId)
    {
    // check if the user is already in the list of users to be updated
        var existingUser = _usersToUpdate.FirstOrDefault(x => x.ProjectUser.PortalUser.GraphGuid == projectUser.PortalUser.GraphGuid);
        if (existingUser != null)
        {
            existingUser.NewRoleId = newRoleId;
        }
        else
        {
            _usersToUpdate.Add(new ProjectUserUpdateCommand()
            {
                ProjectUser = projectUser,
                NewRoleId = newRoleId
            });
        }
        StateHasChanged();
    }


    private void UpdateProjectMemberRole(ProjectUserAddUserCommand projectUser, int newRoleId)
    {
        projectUser.RoleId = newRoleId;
        StateHasChanged();
    }

    private async Task OpenDialog()
    {
        var currentUser = await _userInformationService.GetCurrentPortalUserAsync();
        var dialogOptions = new DialogOptions { MaxWidth = MaxWidth.ExtraLarge };
        var dialogParameters = new DialogParameters
        {
            { "CurrentProjectMembers", _projectUsers.Where(x => x.Role.Id != (int)Project_Role.RoleNames.Remove).ToList() },
            { "ProjectAcronym", ProjectAcronym },
            { "Inviter", currentUser }
        };
        var dialog = await _dialogService.ShowAsync<AddNewUsersToProjectDialog>(Localizer["Invite New Users"], dialogParameters, dialogOptions);
        var result = await dialog.Result;
        if (!result.Canceled)
        {
            if (result.Data is not List<ProjectUserAddUserCommand> userAddUserCommands)
            {
                _snackbar.Add(Localizer["Error inviting new users to workspace"], Severity.Error);
            }
            else
            {
                _usersToAdd.AddRange(userAddUserCommands
                    .Where(c => 
                        !_usersToAdd.Any(x => x.Email.Equals(c.Email, StringComparison.InvariantCultureIgnoreCase)))
                    .ToList());
                StateHasChanged();
            }
        }
    }

    private async Task SaveChanges()
    {
        if(_usersToUpdate.Any() || _usersToAdd.Any())
        {
            await _projectUserManagementService.ProcessProjectUserCommandsAsync(_usersToUpdate, _usersToAdd);
            _usersToUpdate.Clear();
            _usersToAdd.Clear();
        }
        else
        {
            _snackbar.Add(Localizer["No changes to save"], Severity.Info);
        }
        StateHasChanged();
    }

}