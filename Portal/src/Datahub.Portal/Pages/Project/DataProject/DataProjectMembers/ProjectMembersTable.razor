@using Datahub.Core.Data.Project
@using Datahub.Application.Services
@using MudBlazor.Utilities
@inject ServiceAuthManager ServiceAuthManager
@inject IDbContextFactory<DatahubProjectDBContext> DbFactoryProject
@inject IUserInformationService UserInformationService
@inject IProjectUserManagementService ProjectUserManagementService
@inject ILogger<DataProjectPage> Logger
@inject IDialogService DialogService
@inject ISnackbar Snackbar


@if (_isLoading)
{
    <MudSkeleton SkeletonType="SkeletonType.Rectangle" Width="100%" Height="700px" Class="mt-6"/>
    return;
}

<AuthorizeView Roles="@string.Join(",", $"{ProjectAcronym}-admin", RoleConstants.DATAHUB_ROLE_ADMIN)">
    <Authorized>
        <MudStack >
            @if (_usersToBeUpdated.Any())
            {
                <MudAlert Severity="Severity.Info" Class="my-3">
                    <MudText Typo="Typo.body2">@Localizer["You have unsaved changes. Please save them before leaving this page."]</MudText>
                </MudAlert>
                <MudElement>
                    <MudButton Variant="Variant.Filled" Color="Color.Primary" Disabled="@_updateInProgress" OnClick="SaveChanges">
                        @Localizer["Save Changes"]
                    </MudButton>
                </MudElement>
            }
            @if (!_updateInProgress)
            {
                <MudTable Items="@_filteredProjectMembers" Striped Filter="new Func<ProjectMember, bool>(SearchFilter)" Class="project-members-table mt-6">

                    <ToolBarContent>
                        <MudStack AlignItems="AlignItems.End" Style="width: 100%;" Class="pa-6">
                            <MudButton Variant="Variant.Filled" Color="Color.Primary" EndIcon="@ADD_USER_ICON" OnClick="OpenDialog">
                                @Localizer["Invite New User"]
                            </MudButton>
                            <MudGrid Justify="Justify.SpaceBetween" Style="width: 100%;">
                                <MudTabs Elevation="0">
                                    <MudTabPanel Text="@Localizer["All"]" BadgeData='@_allCount' BadgeColor="Color.Transparent" Style="@GetStyleForTabs()"
                                                 OnClick="@(() => ProjectMemberRoleFilter(null))"/>
                                    <MudTabPanel Text="@Localizer["Workspace Leads"]" BadgeData='@_publisherCount' Disabled="_publisherCount == 0" Style="@GetStyleForTabs()"
                                                 OnClick="@(() => ProjectMemberRoleFilter(ProjectMemberRole.WorkspaceLead))" BadgeColor="Color.Transparent"/>
                                    <MudTabPanel Text="@Localizer["Admins"]" BadgeData='@_adminCount' BadgeColor="Color.Transparent" Style="@GetStyleForTabs()"
                                                 OnClick="@(() => ProjectMemberRoleFilter(ProjectMemberRole.Admin))" Disabled="_adminCount == 0"/>
                                    <MudTabPanel Text="@Localizer["Collaborators"]" BadgeData='@_contributorCount' BadgeColor="Color.Transparent" Style="@GetStyleForTabs()"
                                                 OnClick="@(() => ProjectMemberRoleFilter(ProjectMemberRole.Collaborator))" Disabled="_contributorCount == 0"/>
                                </MudTabs>
                                <MudSpacer/>
                                
                                <MudTextField @bind-Value="_searchString" Placeholder="@Localizer["Search"]" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
                            </MudGrid>
                        </MudStack>
                    </ToolBarContent>
                    <HeaderContent>
                        <MudTh>
                            <MudTableSortLabel SortBy="@(new Func<ProjectMember, object>(x => x.Name))" InitialDirection="SortDirection.Ascending">
                                @Localizer["Account"]
                            </MudTableSortLabel>
                        </MudTh>
                        <MudTh>
                            <MudTableSortLabel SortBy="@(new Func<ProjectMember, object>(x => x.Email))">
                                @Localizer["Email"]
                            </MudTableSortLabel>
                        </MudTh>
                        <MudTh>@Localizer["Role"]</MudTh>
                        <MudTh>
                            <MudTableSortLabel SortBy="@(new Func<ProjectMember, object>(x => x.UserAddedToProject))">
                                @Localizer["Added to Workspace"]
                            </MudTableSortLabel>
                        </MudTh>
                        <MudTh></MudTh>
                    </HeaderContent>
                    <RowTemplate Context="rowContext">

                        <MudTd>@rowContext.Name</MudTd>
                        <MudTd>@rowContext.Email</MudTd>
                        <MudTd>
                            @if (_isDatahubAdmin || !_currentUserId.Equals(rowContext.UserId, StringComparison.InvariantCultureIgnoreCase))
                            {
                                <ProjectMembersRoleSelect ProjectMember="@rowContext" OnRoleChanged="UpdateProjectMemberRole"/>
                            }
                            else
                            {
                                <MudText Typo="Typo.body2">@Localizer[ProjectMembersRoleSelect.RoleTitles[@rowContext.Role]]</MudText>
                            }
                        </MudTd>
                        <MudTd>
                            @rowContext.UserAddedToProject?.ToString("MMMM dd, yyyy")
                        </MudTd>
                        <MudTd>
                            <MudButton Variant="Variant.Text" EndIcon="@PROFILE_LINK_ICON" Color="Color.Primary"
                                       Href="@($"/profile/{Convert.ToBase64String(@System.Text.Encoding.UTF8.GetBytes(rowContext.UserId))}")">
                                @Localizer["View Profile"]
                            </MudButton>
                        </MudTd>
                    </RowTemplate>
                    <PagerContent>
                        <MudTablePager RowsPerPageString="@Localizer["Rows per page:"]"
                                       InfoFormat="@PagerInfoFormat"/>
                    </PagerContent>
                </MudTable>
            }
            else
            {
                <MudStack Spacing="0" AlignItems="AlignItems.Center" Justify="Justify.Center" Class="py-8">
                    <MudProgressCircular Color="Color.Primary" Size="Size.Large" Indeterminate="true"/>
                    <MudText Typo="Typo.caption">@Localizer["Updating workspace..."]</MudText>
                </MudStack>
            }
        </MudStack>

        <style>
                .project-members-table .mud-table-toolbar {
                    height: fit-content !important;
                }
            </style>
    </Authorized>
    <NotAuthorized>
        <MudText>
            @Localizer["You are not authorized to view this page."]
        </MudText>
    </NotAuthorized>
</AuthorizeView>


@code {

    [CascadingParameter(Name = "ProjectAcronym")]
    public string ProjectAcronym { get; set; }

    private string _searchString = "";
        private const string PROFILE_LINK_ICON = "fa-duotone fa-chevrons-right";
        private const string ADD_USER_ICON = "fa-duotone fa-user-plus";
        private const string INVITE_USERS_DIALOG_TITLE = "Invite New Users";
        private const string EMAIL_FAILED_MESSAGE = "Unable to invite the following users. Please check their email addresses and try again, or contact DataHub support:";
    private bool _isLoading = true;
    private bool _updateInProgress;

    private int _publisherCount;
    private int _adminCount;
    private int _contributorCount;
    private int _allCount;
    private ProjectMemberRole? _currentRoleFilter = null;
    private List<ProjectMember> _projectUsers;
    private List<ProjectMember> _filteredProjectMembers;
    private bool _isProjectAdmin = false;
    private bool _isDatahubAdmin = false;

    private string _currentUserId;
    private string _currentUserName;

    private List<ProjectMember> _usersToBeUpdated = new();
    private List<ProjectMember> _currentSavedUsers = new();

    private string PagerInfoFormat => "{first_item}-{last_item} " + Localizer["of"] + " {all_items}";


    protected override async Task OnInitializedAsync()
    {
        var user = await UserInformationService.GetCurrentGraphUserAsync();
        _currentUserName = user?.DisplayName ?? user?.UserPrincipalName ?? "";

        _currentUserId = await UserInformationService.GetUserIdString();
        if (_currentUserId is null)
            Logger.LogError("UserId is null");

        var authUser = (await UserInformationService.GetAuthenticatedUser());
        _isDatahubAdmin = !ServiceAuthManager.GetViewingAsGuest(_currentUserId) && authUser.IsInRole(RoleConstants.DATAHUB_ROLE_ADMIN);
        _isProjectAdmin = !ServiceAuthManager.GetViewingAsGuest(_currentUserId) && authUser.IsInRole($"{ProjectAcronym}-admin");
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await RefreshProjectUsers();
            _isLoading = false;
            StateHasChanged();
        }
    }

    private bool SearchFilter(ProjectMember item)
    {
        if (string.IsNullOrWhiteSpace(_searchString))
            return true;
        if (item.Name?.Contains(_searchString, StringComparison.OrdinalIgnoreCase) == true)
            return true;
        return item.Email?.Contains(_searchString, StringComparison.OrdinalIgnoreCase) == true;
    }

    private void ProjectMemberRoleFilter(ProjectMemberRole? role)
    {
        _filteredProjectMembers = _projectUsers
            .Where(x => role is null || x.Role == role)
            .Where(x => x.Role != ProjectMemberRole.Remove)
            .Where(SearchFilter)
            .ToList();
        StateHasChanged();
        _currentRoleFilter = role;
    }

    private void UpdateProjectMemberRole(ProjectMember projectMember)
    {
        UpdateUsersToBeUpdated(projectMember);
        UpdateProjectRoleCounts();
        ProjectMemberRoleFilter(_currentRoleFilter);
        StateHasChanged();
    }

    private void UpdateProjectRoleCounts()
    {
        _allCount = _projectUsers.Count(t => t.Role != ProjectMemberRole.Remove);
        _publisherCount = _projectUsers.Count(x => x.Role == ProjectMemberRole.WorkspaceLead);
        _adminCount = _projectUsers.Count(x => x.Role == ProjectMemberRole.Admin);
        _contributorCount = _projectUsers.Count(x => x.Role == ProjectMemberRole.Collaborator);
    }

    private async Task OpenDialog()
    {
        var dialogOptions = new DialogOptions() { MaxWidth = MaxWidth.ExtraLarge };
        var dialogParameters = new DialogParameters
        {
            { "CurrentProjectMembers", _projectUsers.Where(x => x.Role != ProjectMemberRole.Remove).ToList() },
            { "ProjectAcronym", ProjectAcronym },
            { "Inviter", _currentUserName }
        };
        var dialog = await DialogService.ShowAsync<AddNewUsersToProjectDialog>(Localizer[INVITE_USERS_DIALOG_TITLE], dialogParameters, dialogOptions);
        var result = await dialog.Result;
        if (!result.Canceled)
        {
            if (result.Data is not List<ProjectMember> newUsers)
            {
                Snackbar.Add(Localizer["Error inviting new users to workspace"], Severity.Error);
            }
            else
            {
                _projectUsers.AddRange(newUsers);
                foreach (var user in newUsers)
                {
                    UpdateUsersToBeUpdated(user);
                }
            }
            UpdateProjectRoleCounts();
            ProjectMemberRoleFilter(_currentRoleFilter);
            StateHasChanged();
        }
    }

    private void UpdateUsersToBeUpdated(ProjectMember member)
    {
        if (_usersToBeUpdated.Any(u => u.UserId == member.UserId))
            _usersToBeUpdated.Remove(_usersToBeUpdated.First(u => u.UserId == member.UserId));
    // only add if the role has changed
        if (_currentSavedUsers.FirstOrDefault(u => u.UserId == member.UserId)?.Role != member.Role)
            _usersToBeUpdated.Add(member);
    }

    private async Task RefreshProjectUsers(bool fetchProjects = true)
    {
        if (_isDatahubAdmin || _isProjectAdmin)
        {
            if (fetchProjects)
            {
                await using var projectContext = await DbFactoryProject.CreateDbContextAsync();
                _projectUsers = await ServiceAuthManager.GetProjectMembers(ProjectAcronym);
    //create a hard copy of the current saved project members
                _currentSavedUsers = _projectUsers.Select(x => new ProjectMember(x)).ToList();
            }
            ProjectMemberRoleFilter(_currentRoleFilter);
            UpdateProjectRoleCounts();
        }
    }

    private string GetStyleForTabs()
    {
        return new StyleBuilder()
            .AddStyle("min-width", "190px")
            .Build();
    }

    private async Task SaveChanges()
    {
        if (_usersToBeUpdated.Count == 0)
        {
            Snackbar.Add(Localizer["No changes to save"], Severity.Info);
            return;
        }
        _updateInProgress = true;
        StateHasChanged();
    //force update to show progress indicator
        await Task.Delay(1);
        var userInvitesThatFailed = (await ProjectUserManagementService.BatchUpdateUsersInProject(ProjectAcronym, _usersToBeUpdated)).ToList();
        if (userInvitesThatFailed.Any())
        {
            Snackbar.Add(@Localizer[EMAIL_FAILED_MESSAGE] + " " + string.Join(", ", userInvitesThatFailed),
                Severity.Error, configure => configure.VisibleStateDuration = 10000);
        }
        _usersToBeUpdated.Clear();
        await RefreshProjectUsers();
        _updateInProgress = false;
        StateHasChanged();
    }

}