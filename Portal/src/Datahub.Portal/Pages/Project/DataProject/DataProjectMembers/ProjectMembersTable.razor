@using Datahub.Core.Data.Project
@using Datahub.Application.Services
@inject ServiceAuthManager ServiceAuthManager
@inject IDbContextFactory<DatahubProjectDBContext> DbFactoryProject
@inject IUserInformationService UserInformationService
@inject IProjectUserManagementService ProjectUserManagementService
@if (_isLoading)
{

    <MudSkeleton SkeletonType="SkeletonType.Rectangle" Width="90%" Height="600px"/>
}
else {
    <MudTable Items="@_filteredProjectMembers" Striped Filter="new Func<ProjectMember, bool>(FilterProject)">
        <ToolBarContent>
            <MudText Typo="Typo.h6">To Be Replaced By Tabs</MudText>
            <MudSpacer/>
            <MudTextField @bind-Value="_searchString" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
        </ToolBarContent>
        <HeaderContent>
            <MudTh>
                <MudTableSortLabel SortBy="new Func<ProjectMember, object>(x => x.Name)" InitialDirection="SortDirection.Descending">
                    @Localizer["Account"]
                </MudTableSortLabel></MudTh>
            <MudTh>
                <MudTableSortLabel SortBy="new Func<ProjectMember, object>(x => x.Email)">
                    @Localizer["Email"]
                </MudTableSortLabel>
            </MudTh>
            <MudTh>@Localizer["Role"]</MudTh>
            <MudTh>
                <MudTableSortLabel SortBy="new Func<ProjectMember, object>(x => x.UserAddedProject)">
                    @Localizer["Added to Project"]
                </MudTableSortLabel>
            </MudTh>
            <MudTh></MudTh>
        </HeaderContent>
        <RowTemplate>

            <MudTd>@context.Name</MudTd>
            <MudTd>@context.Email</MudTd>
            <MudTd>
                <ProjectMembersRoleSelect ProjectMember="@context" OnRoleChanged="UpdateProjectMemberRole"/>
            </MudTd>
            <MudTd>
                @context.UserAddedProject?.ToString("MMMM dd, yyyy")
            </MudTd>
        </RowTemplate>
        <PagerContent>
            <MudTablePager/>
        </PagerContent>
    </MudTable>
}
@code {
    [CascadingParameter(Name = "ProjectAcronym")]
    public string ProjectAcronym { get; set; }

    private string _searchString = "";
    private bool _isLoading = true;

    private List<string> _authorizedRoles = new();

    private List<ProjectMember> _projectUsers;
    private List<ProjectMember> _filteredProjectMembers;
    private Microsoft.Graph.User _user;

    protected override async Task OnInitializedAsync()
    {
        await using var projectContext = await DbFactoryProject.CreateDbContextAsync();

        _user = await UserInformationService.GetCurrentGraphUserAsync();

        _projectUsers = await ServiceAuthManager.GetProjectMembers(ProjectAcronym);
        _filteredProjectMembers = _projectUsers;

        _isLoading = false;
    }
    
    private bool FilterProject(ProjectMember item)
    {
        if (string.IsNullOrWhiteSpace(_searchString))
            return true;
        if (item.Name?.Contains(_searchString, StringComparison.OrdinalIgnoreCase) == true)
            return true;
        return item.Email?.Contains(_searchString, StringComparison.OrdinalIgnoreCase) == true;
    }
    
    private async Task UpdateProjectMemberRole(ProjectMember projectMember)
    {
        if (projectMember.Role == ProjectMemberRole.Remove)
        {
            await ProjectUserManagementService.RemoveUserFromProject(ProjectAcronym, projectMember.UserId);
            _projectUsers.Remove(projectMember);
        }
        else
        {
            await ProjectUserManagementService.UpdateUserInProject(ProjectAcronym, projectMember);
        }
    }
}