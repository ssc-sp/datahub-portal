@using Datahub.Core.Data.Project
@using Datahub.Application.Services
@using MudBlazor.Utilities
@inject ServiceAuthManager ServiceAuthManager
@inject IDbContextFactory<DatahubProjectDBContext> DbFactoryProject
@inject IUserInformationService UserInformationService
@inject IProjectUserManagementService ProjectUserManagementService
@inject ILogger<DataProjectPage> Logger
@inject IDialogService DialogService
@inject ISnackbar Snackbar


@if (_isLoading)
{

    <MudSkeleton SkeletonType="SkeletonType.Rectangle" Width="100%" Height="700px"/>
}
else if (_isDatahubAdmin || _isProjectAdmin) {
    @if (_usersToBeUpdated.Any())
    {
        <MudButton Variant="Variant.Filled" Color="Color.Primary" Disabled="@_updateInProgress" 
                   Style="width: 100%" Class="my-2" OnClick="SaveChanges">
            @Localizer["Save Changes"]
        </MudButton>
    }
    @if (!_updateInProgress)
    {
        <MudTable Items="@_filteredProjectMembers" Striped Filter="new Func<ProjectMember, bool>(SearchFilter)" Class="project-members-table">

            <ToolBarContent>
                <MudStack AlignItems="AlignItems.End" Style="width: 100%;" Class="pa-6">
                    <MudButton Variant="Variant.Filled" Color="Color.Primary" EndIcon="@ADD_USER_ICON" OnClick="OpenDialog">
                        @Localizer["Invite New User"]
                    </MudButton>
                    <MudGrid Justify="Justify.SpaceBetween" Style="width: 100%;">
                        <MudTabs Elevation="0">
                            <MudTabPanel Text="@Localizer["All"]" BadgeData='@_allCount' BadgeColor="Color.Transparent" Style="@GetStyleForTabs()"
                                         OnClick="@(() => ProjectMemberRoleFilter(null))"/>
                            <MudTabPanel Text="@Localizer["Workspace Leads"]" BadgeData='@_publisherCount' Disabled="_publisherCount == 0" Style="@GetStyleForTabs()"
                                         OnClick="@(() => ProjectMemberRoleFilter(ProjectMemberRole.WorkspaceLead))" BadgeColor="Color.Transparent"/>
                            <MudTabPanel Text="@Localizer["Admins"]" BadgeData='@_adminCount' BadgeColor="Color.Transparent" Style="@GetStyleForTabs()"
                                         OnClick="@(() => ProjectMemberRoleFilter(ProjectMemberRole.Admin))" Disabled="_adminCount == 0"/>
                            <MudTabPanel Text="@Localizer["Collaborators"]" BadgeData='@_contributorCount' BadgeColor="Color.Transparent" Style="@GetStyleForTabs()"
                                         OnClick="@(() => ProjectMemberRoleFilter(ProjectMemberRole.Collaborator))" Disabled="_contributorCount == 0"/>
                        </MudTabs>
                        <MudSpacer/>
                        <MudTextField @bind-Value="_searchString" Placeholder="@Localizer["Search"]" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
                    </MudGrid>
                </MudStack>
            </ToolBarContent>
            <HeaderContent>
                <MudTh>
                    <MudTableSortLabel SortBy="new Func<ProjectMember, object>(x => x.Name)" InitialDirection="SortDirection.Ascending">
                        @Localizer["Account"]
                    </MudTableSortLabel></MudTh>
                <MudTh>
                    <MudTableSortLabel SortBy="new Func<ProjectMember, object>(x => x.Email)">
                        @Localizer["Email"]
                    </MudTableSortLabel>
                </MudTh>
                <MudTh>@Localizer["Role"]</MudTh>
                <MudTh>
                    <MudTableSortLabel SortBy="new Func<ProjectMember, object>(x => x.UserAddedToProject)">
                        @Localizer["Added to Workspace"]
                    </MudTableSortLabel>
                </MudTh>
                <MudTh></MudTh>
            </HeaderContent>
            <RowTemplate>

                <MudTd>@context.Name</MudTd>
                <MudTd>@context.Email</MudTd>
                <MudTd>
                    @if (!_currentUserId.Equals(context.UserId, StringComparison.InvariantCultureIgnoreCase))
                    {
                        <ProjectMembersRoleSelect ProjectMember="@context" OnRoleChanged="UpdateProjectMemberRole"/>
                    }
                    else
                    {
                        <MudText Typo="Typo.body2">@Localizer[ProjectMembersRoleSelect.RoleTitles[@context.Role]]</MudText>
                    }
                </MudTd>
                <MudTd>
                    @context.UserAddedToProject?.ToString("MMMM dd, yyyy")
                </MudTd>
                <MudTd>
                    <MudButton Variant="Variant.Text" EndIcon="@PROFILE_LINK_ICON" Color="Color.Primary"
                               Href="@($"/profile/{Convert.ToBase64String(@System.Text.Encoding.UTF8.GetBytes(context.UserId))}")">
                        @Localizer["View Profile"]
                    </MudButton>
                </MudTd>
            </RowTemplate>
            <PagerContent>
                <MudTablePager RowsPerPageString="@Localizer["Rows per page:"]"
                               InfoFormat="@PagerInfoFormat"/>
            </PagerContent>
        </MudTable>
    }
    else
    {

        <MudStack Spacing="0" AlignItems="AlignItems.Center" Justify="Justify.Center" Class="py-8">
            <MudProgressCircular Color="Color.Primary" Size="Size.Large" Indeterminate="true" />
            <MudText Typo="Typo.caption">@Localizer["Updating workspace..."]</MudText>
        </MudStack>

    }

    <style>
        .project-members-table .mud-table-toolbar {
            height: fit-content !important;
        }
    </style>
}
@code {
    [CascadingParameter(Name = "ProjectAcronym")]
    public string ProjectAcronym { get; set; }

    private string _searchString = "";
    private const string PROFILE_LINK_ICON = "fa-duotone fa-chevrons-right";
    private const string ADD_USER_ICON = "fa-duotone fa-user-plus";
    private const string INVITE_USERS_DIALOG_TITLE = "Invite New Users";
    private bool _isLoading = true;
    private bool _updateInProgress;

    private int _publisherCount;
    private int _adminCount;
    private int _contributorCount;
    private int _allCount;
    private ProjectMemberRole? _currentRoleFilter = null;
    private List<ProjectMember> _projectUsers;
    private List<ProjectMember> _filteredProjectMembers;
    private bool _isProjectAdmin = false;
    private bool _isDatahubAdmin = false;

    private string _currentUserId;
    private string _currentUserName;
    
    private List<(string UserId, ProjectMemberRole NewRole)> _usersToBeUpdated = new();
    private List<(string UserId, ProjectMemberRole Role)> _currentSavedUsers = new();
    
    private string PagerInfoFormat => "{first_item}-{last_item} " + Localizer["of"] + " {all_items}";


    protected override async Task OnInitializedAsync()
    {
        var user = await UserInformationService.GetCurrentGraphUserAsync();
        _currentUserName = user?.DisplayName ?? user?.UserPrincipalName ?? "";

        _currentUserId = await UserInformationService.GetUserIdString();
        if (_currentUserId is null) 
            Logger.LogError("UserId is null");

        var authUser = (await UserInformationService.GetAuthenticatedUser());
        _isDatahubAdmin = !ServiceAuthManager.GetViewingAsGuest(_currentUserId) && authUser.IsInRole(RoleConstants.DATAHUB_ROLE_ADMIN);
        _isProjectAdmin = !ServiceAuthManager.GetViewingAsGuest(_currentUserId) && authUser.IsInRole($"{ProjectAcronym}-admin");
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await RefreshProjectUsers();
            _isLoading = false;
            StateHasChanged();
        }
    }

    private bool SearchFilter(ProjectMember item)
    {
        if (string.IsNullOrWhiteSpace(_searchString))
            return true;
        if (item.Name?.Contains(_searchString, StringComparison.OrdinalIgnoreCase) == true)
            return true;
        return item.Email?.Contains(_searchString, StringComparison.OrdinalIgnoreCase) == true;
    }
    
    private void ProjectMemberRoleFilter(ProjectMemberRole? role)
    {
        _filteredProjectMembers = _projectUsers
            .Where(x => role is null || x.Role == role)
            .Where(x => x.Role != ProjectMemberRole.Remove)
            .Where(SearchFilter)
            .ToList();
        StateHasChanged();
        _currentRoleFilter = role;
    }
    
    private void UpdateProjectMemberRole(ProjectMember projectMember)
    {
        UpdateUsersToBeUpdated(projectMember.UserId, projectMember.Role);
        UpdateProjectRoleCounts();
        ProjectMemberRoleFilter(_currentRoleFilter);
        StateHasChanged();
    }

    private void UpdateProjectRoleCounts()
    {
        _allCount = _projectUsers.Count(t => t.Role != ProjectMemberRole.Remove);
        _publisherCount = _projectUsers.Count(x => x.Role == ProjectMemberRole.WorkspaceLead);
        _adminCount = _projectUsers.Count(x => x.Role == ProjectMemberRole.Admin);
        _contributorCount = _projectUsers.Count(x => x.Role == ProjectMemberRole.Collaborator);
    }

    private async Task OpenDialog()
    {
        var dialogOptions = new DialogOptions() { MaxWidth = MaxWidth.ExtraLarge };
        var dialogParameters = new DialogParameters 
        { 
            { "CurrentProjectMembers", _projectUsers.Where(x => x.Role != ProjectMemberRole.Remove).ToList()}, 
            {"ProjectAcronym", ProjectAcronym},
            {"Inviter", _currentUserName }
        };
        var dialog = await DialogService.ShowAsync<AddNewUsersToProjectDialog>(Localizer[INVITE_USERS_DIALOG_TITLE], dialogParameters, dialogOptions);
        var result = await dialog.Result;
        if (!result.Canceled)
        {
            if (result.Data is not List<ProjectMember> newUsers)
            {
                Snackbar.Add(Localizer["Error inviting new users to workspace"], Severity.Error);
            }
            else
            {
                _projectUsers.AddRange(newUsers);
                foreach (var user in newUsers)
                {
                    UpdateUsersToBeUpdated(user.UserId, user.Role);
                }
            }
            UpdateProjectRoleCounts();
            ProjectMemberRoleFilter(_currentRoleFilter);
            StateHasChanged();
        }
    }

    private void UpdateUsersToBeUpdated(string userId, ProjectMemberRole role )
    {
        if (_usersToBeUpdated.Any(u => u.UserId == userId))
            _usersToBeUpdated.Remove(_usersToBeUpdated.First(u => u.UserId == userId));
        // only add if the role has changed
         if (_currentSavedUsers.FirstOrDefault(u => u.UserId == userId).Role != role)
             _usersToBeUpdated.Add((userId, role));
    }

    private async Task RefreshProjectUsers(bool fetchProjects = true)
    {
        if (_isDatahubAdmin || _isProjectAdmin)
        {
            if (fetchProjects)
            {
                await using var projectContext = await DbFactoryProject.CreateDbContextAsync();
                _projectUsers = await ServiceAuthManager.GetProjectMembers(ProjectAcronym);
                //create a hard copy of the current saved project members
                _currentSavedUsers = _projectUsers.Select(x => (x.UserId, x.Role)).ToList();
                
            }
            ProjectMemberRoleFilter(_currentRoleFilter);
            UpdateProjectRoleCounts();
        }
    }

    private string GetStyleForTabs()
    {
        return new StyleBuilder()
            .AddStyle("min-width", "190px")
            .Build();
    }
    
    private async Task SaveChanges()
    {
        if (_usersToBeUpdated.Count == 0)
        {
            Snackbar.Add(Localizer["No changes to save"], Severity.Info);
            return;
        }
        _updateInProgress = true;
        StateHasChanged();
        //force update to show progress indicator
        await Task.Delay(1);
        await ProjectUserManagementService.BatchUpdateUsersInProject(ProjectAcronym, _usersToBeUpdated);
        _usersToBeUpdated.Clear();
        await RefreshProjectUsers();
        _updateInProgress = false;
        StateHasChanged();
    }
}