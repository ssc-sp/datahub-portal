@using System.ComponentModel.DataAnnotations
@using System.Net.Mail
@using Datahub.Application.Services
@using Datahub.Core.Data.Project
@inject IMSGraphService _msGraphService 
@inject IUserEnrollmentService _userEnrollmentService

<MudDialog>
    <DialogContent>
        <MudText Class="py-2">@Localizer["Search for new users below using their email address. New users will be added as contributors."]</MudText>
        <MudAutocomplete T="string" @ref="@_autocomplete" Label="@Localizer["User's GC Email"]" ValueChanged="AddUser"
            DebounceInterval="500" SearchFuncWithCancel="@SearchUsers" AdornmentColor="Color.Primary" AdornmentIcon="@SearchIcon"
            Error="@_error" ErrorText="@_errorMessage" ShowProgressIndicator="@_searchingForUsers" ResetValueOnEmptyText
            bind-Value="_userSearch">
            <ItemTemplate>
                <MudStack Class="px-2" Row Justify="Justify.SpaceBetween" AlignItems="AlignItems.Center">
                    <MudStack Spacing="0">
                        @{
                            var user = _searchResultUsers.FirstOrDefault(u => u.Mail == context);
                        }
                        <MudText Typo="Typo.h6">@user?.DisplayName</MudText>
                        <MudText Typo="Typo.h6">@user?.Mail</MudText>
                    </MudStack>
                    <MudIcon Icon="@AddUserIcon" Color="Color.Primary" Class="px-2"/>
                </MudStack>
            </ItemTemplate>
        </MudAutocomplete>
        <MudList Clickable>
            @foreach (var user in _users)
            {
                <MudListItem Text="@GetListText(user)" Icon="@RemoveUserIcon" IconColor="Color.Primary"
                             OnClick="() => RemoveUser(user)"/>
            }
        </MudList>
        
    </DialogContent>

    <DialogActions>
        <MudButton OnClick="Cancel" Class="px-4">@Localizer["Cancel"]</MudButton>
        <MudButton Color="Color.Primary" OnClick="UpdateProject" Disabled="@(_users.Count == 0)" Variant="Variant.Filled">
            @Localizer["Add New Users"]
        </MudButton>
    </DialogActions>
</MudDialog>

@code {
    #nullable enable
    [CascadingParameter]
    MudDialogInstance MudDialog { get; set; } = null!;

    [Parameter]
    public string ProjectAcronym { get; set; } = null!;

    [Parameter]
    public string Inviter { get; set; } = null!;

    [Parameter]
    public List<ProjectMember> CurrentProjectMembers { get; set; } = new();

    private readonly List<GraphUser> _users = new();
    private readonly EmailAddressAttribute _emailValidator = new() { ErrorMessage = "The email address is invalid" };
    private string _userSearch = string.Empty;
    private MudAutocomplete<string> _autocomplete = null!;
    private bool _searchingForUsers;
    private bool _error;
    private string _errorMessage = string.Empty;

    private List<GraphUser> _searchResultUsers = new();

    private const string SearchIcon = "fa-duotone fa-magnifying-glass";
    private const string AddUserIcon = "fa-duotone fa-user-plus";
    private const string RemoveUserIcon = "fa-duotone fa-trash-can-slash";
    private const string UserExistsError = "The user is already in the project";
    private const string NotValidEmailError = "Please enter a valid GC email address";

    // added to catch the case where the user is in graph but ID is null (GitHub issue # 404)
    private const string NewUserId = "NEW_USER";

    private async Task<IEnumerable<string>> SearchUsers(string search, CancellationToken cancellationToken)
    {
        if (string.IsNullOrWhiteSpace(search))
        {
            return new List<string>();
        }
        _searchingForUsers = true;
        StateHasChanged();

        var foundUsersDict = await _msGraphService.GetUsersListAsync(search, cancellationToken);
        //get found users as GraphUsers and remove current users from the list
        _searchResultUsers = foundUsersDict
            .Select(u => u.Value)
            .Where(u => CurrentProjectMembers.All(x => x.UserId != u.Id) || _users.Any(user => user.Id == u.Id))
            .ToList();

        // If an exact match is found, put it at the top of the list, otherwise add an add user option
        var matchIndex = _searchResultUsers.FindIndex(u => u.Mail.Equals(search, StringComparison.InvariantCultureIgnoreCase));
        ClearError();
        StateHasChanged();
        switch (matchIndex)
        {
            case > 0:
                {
                    var exactMatch = _searchResultUsers[matchIndex];
                    _searchResultUsers.RemoveAt(matchIndex);
                    _searchResultUsers.Insert(0, exactMatch);
                }
                break;
            case -1 when _emailValidator.IsValid(search):
                _searchResultUsers.Insert(0, new GraphUser()
                {
                    mailAddress = new MailAddress(search), DisplayName = Localizer["Add New User"], Id = NewUserId
                });
                break;
        }

        _searchingForUsers = false;
        return _searchResultUsers.Select(u => u.Mail);
    }

    private void UserExistsInProjectError()
    {
        _error = true;
        _errorMessage = Localizer[UserExistsError];
    }

    private void EmailNotValidError()
    {
        _error = true;
        _errorMessage = Localizer[NotValidEmailError];
    }

    private void UserNotValidError()
    {
        _error = true;
        _errorMessage = Localizer[NotValidEmailError];
    }

    private void ClearError()
    {
        _error = false;
        _errorMessage = string.Empty;
    }

    private void AddUser(string searchValue)
    {
        var user = _searchResultUsers.FirstOrDefault(u => u.Mail.Equals(searchValue, StringComparison.OrdinalIgnoreCase));

        if (user is null)
        {
            return;
        }

        if (string.IsNullOrWhiteSpace(user.Id))
        {
            UserNotValidError();
            return;
        }
        if (CurrentProjectMembers.Any(projectMember => projectMember.Email.Equals(user.Mail, StringComparison.OrdinalIgnoreCase)))
        {
            UserExistsInProjectError();
            return;
        }
        if (user.Id.Equals(NewUserId) && !_userEnrollmentService.IsValidGcEmail(user.Mail))
        {
            EmailNotValidError();
            return;
        }
        ClearError();
        _users.Add(user);
        _userSearch = string.Empty;
        _autocomplete?.Clear();
        StateHasChanged();
    }

    private void RemoveUser(GraphUser user)
    {
        _users.Remove(user);
    }

    private static string GetListText(GraphUser user)
    {
        return user.Id == NewUserId ? user.Mail : $"{user.DisplayName} ({user.Mail})";
    }

    private async Task UpdateProject()
    {
        try
        {
            var projectMembers = new List<ProjectMember>();
            // If the user is new, send an invite and get the ID, otherwise just get the ID
            foreach (var user in _users)
            {
                if (user.Id.Equals(NewUserId))
                    user.Id = await _userEnrollmentService.SendUserDatahubPortalInvite(user.Mail, Inviter);
                var projectMember = new ProjectMember(user)
                {
                    Name = await _msGraphService.GetUserName(user.Id, CancellationToken.None),
                };
                projectMembers.Add(projectMember);
            }

            MudDialog.Close(DialogResult.Ok<List<ProjectMember>?>(projectMembers));
        }
        catch (Exception)
        {
            // todo: show error message and don't close the dialog yet!
            MudDialog.Close(DialogResult.Ok<List<ProjectMember>?>(null));            
        }

    }

    private void Cancel() => MudDialog.Cancel();
}