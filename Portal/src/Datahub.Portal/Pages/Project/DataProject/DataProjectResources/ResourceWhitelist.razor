@*ResourceWhitelist.razor*@

@using Datahub.Application.Services
@using Datahub.Application.Services.UserManagement
@using Datahub.Core.Data.ResourceProvisioner
@using Datahub.Core.Model.Projects
@using Datahub.Core.Services.Projects
@using Datahub.Shared.Entities
@using Microsoft.AspNetCore.Components

@inject IUserInformationService _userInformationService
@inject IProjectResourceWhitelistService _projectResourceWhitelistService
@inject ISnackbar _snackbar
@inject IResourceMessagingService ResourceMessagingService
@inject IRequestManagementService _requestManagementService

@if (_isLoaded)
{
    <MudText Typo="Typo.h2" Class="my-4">@Localizer["Manage Workspace Resources"]</MudText>
    <MudGrid>
        @foreach (Resource resource in Enum.GetValues(typeof(Resource)))
        {
            var resourceName = GetResourceName(resource);
            <MudItem xs="12" sm="6" md="4" lg="3" Class="my-2">
                <MudCard Class="pb-4 px-2" Style="height: 150px">
                    <MudCardHeader>
                        <CardHeaderContent>
                            <MudText Typo="Typo.h3">@resourceName</MudText>
                        </CardHeaderContent>
                        <CardHeaderActions>
                            @if (resource != Resource.ResourceGroup)
                            {
                                <ResourceWhitelistSwitch ResourceEnabled="GetResourceEnabled(resource)" ResourceEnabledChanged="@(async () => await ToggleResourceEnabled(resource))"/>
                            }
                        </CardHeaderActions>
                    </MudCardHeader>
                    <MudCardActions>
                        <DHButton Variant="Variant.Filled" Color="Color.Primary" EndIcon="@Icons.Material.Filled.Queue" OnClick="@(async () => await AddResourceToQueue(resource))">
                            @Localizer["Add to Queue"]
                        </DHButton>
                    </MudCardActions>
                </MudCard>
            </MudItem>
        }
        @if (IsDatahubAdmin)
        {
            <MudItem xs="12" sm="6" md="4" lg="3" Class="my-2">
                <MudCard Class="pb-4 px-2">
                    <MudCardHeader>
                        <CardHeaderContent>
                            <MudText Typo="Typo.h3">@Localizer["Assigned Budget"]</MudText>
                        </CardHeaderContent>
                    </MudCardHeader>
                    <MudCardContent>
                        <MudNumericField 
                            Variant="Variant.Outlined"
                            Label=@Localizer["Edit budget"]
                            DebounceInterval="250"
                            Immediate="false" 
                            Min="0"
                            Format="N2" 
                            Culture="@Culture" 
                            T="double?" 
                            @bind-Value="@_budget" 
                        />
                    </MudCardContent>
                    <MudCardActions>
                        <DHButton Variant="Variant.Filled" 
                                   Color="Color.Primary" 
                                   EndIcon="@Icons.Material.Filled.AttachMoney"
                                   Disabled=IsSaveBudgetDisabled
                                   OnClick="HandleSaveBudget">
                            @Localizer["Save"]
                        </DHButton>
                    </MudCardActions>
                </MudCard>
            </MudItem>
        }
    </MudGrid>
}

@code {

    [CascadingParameter(Name = "IsDatahubAdmin")]
    private bool IsDatahubAdmin { get; set; }

    [CascadingParameter(Name = "Project")]
    private Datahub_Project Project { get; set; }

    [Parameter]
    public EventCallback<decimal> OnBudgetUpdated { get; set; }

    private Project_Whitelist _whitelist;
    private bool _isLoaded;

    private double? _budget;

    private CultureInfo Culture => Thread.CurrentThread.CurrentCulture;

    private enum Resource
    {
        ResourceGroup,
        Storage,
        Databricks,
        VMs
    }

    protected override async Task OnInitializedAsync()
    {
        if (!IsDatahubAdmin) 
            return;

        _whitelist = await _projectResourceWhitelistService.GetWhitelistByProjectAsync(Project.Project_ID);
        _budget = Convert.ToDouble(Project.Project_Budget);
        _isLoaded = true;

        StateHasChanged();
    }

    private async Task AddResourceToQueue(Resource resource)
    {
        // var user = await _userInformationService.GetCurrentGraphUserAsync();
        bool success;
        _snackbar.Add(Localizer["Temporarily disabled {0} during refactor.", resource], Severity.Error);
        return;
        //
        // switch (resource)
        // {
        //     case Resource.ResourceGroup:
        //         await _requestManagementService.HandleTerraformRequestServiceAsync(Project, TerraformTemplate.NewProjectTemplate);
        //         success = true;
        //         break;
        //     case Resource.Storage:
        //         success = await _requestManagementService.HandleTerraformRequestServiceAsync(Project, TerraformTemplate.AzureStorageBlob);
        //
        //         break;
        //     case Resource.Databricks:
        //         success = await _requestManagementService.HandleTerraformRequestServiceAsync(Project, TerraformTemplate.AzureDatabricks);
        //         break;
        //     case Resource.VMs:
        //         _snackbar.Add(Localizer["Resource {0} is not yet supported", resource], Severity.Error);
        //         success = false;
        //         break;
        //     default:
        //         throw new ArgumentOutOfRangeException(nameof(resource), resource, null);
        // }
        //
        // if (success)
        // {
        //     _snackbar.Add(Localizer["Resource {0} added to queue", resource], Severity.Success);
        // }
        // else
        // {
        //     _snackbar.Add(Localizer["Resource {0} failed to add to queue", resource], Severity.Error);
        // }
    }

    private string GetResourceName(Resource resource)
    {
        return resource switch
        {
            Resource.ResourceGroup => Localizer["Resource Group"],
            Resource.Storage => Localizer["Storage"],
            Resource.Databricks => Localizer["Databricks"],
            Resource.VMs => Localizer["Virtual Machines"],
            _ => throw new ArgumentOutOfRangeException(nameof(resource), resource, null)
        };
    }

    private bool GetResourceEnabled(Resource resource)
    {
        return resource switch
        {
            Resource.ResourceGroup => true,
            Resource.Storage => _whitelist.AllowStorage,
            Resource.Databricks => _whitelist.AllowDatabricks,
            Resource.VMs => _whitelist.AllowVMs,
            _ => throw new ArgumentOutOfRangeException(nameof(resource), resource, null)
        };
    }

    private async Task ToggleResourceEnabled(Resource resource)
    {
        switch (resource)
        {
            case Resource.ResourceGroup:
                break;
            case Resource.Storage:
                _whitelist.AllowStorage = !_whitelist.AllowStorage;
                break;
            case Resource.Databricks:
                _whitelist.AllowDatabricks = !_whitelist.AllowDatabricks;
                break;
            case Resource.VMs:
                _whitelist.AllowVMs = !_whitelist.AllowVMs;
                break;
            default:
                throw new ArgumentOutOfRangeException(nameof(resource), resource, null);
        }

        await _projectResourceWhitelistService.UpdateProjectResourceWhitelistAsync(_whitelist);
        _snackbar.Add(Localizer["Resource {0} updated", resource], Severity.Success);
    }

    private void HandleCheckChanged(Resource resource)
    {
        InvokeAsync(() => ToggleResourceEnabled(resource));
    }

    private async Task HandleSaveBudget()
    {
        await OnBudgetUpdated.InvokeAsync(Convert.ToDecimal(_budget));
    }

    private bool IsSaveBudgetDisabled => Project is null;
}
