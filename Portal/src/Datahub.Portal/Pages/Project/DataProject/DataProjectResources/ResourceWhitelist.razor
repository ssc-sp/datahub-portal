@using Datahub.Application.Services
@using Microsoft.AspNetCore.Components

@inject IUserInformationService UserInformationService
@inject IProjectResourceWhitelistService ProjectResourceWhitelistService
@if (_isLoaded)
{
    <MudText Typo="Typo.h2" Class="my-4">@Localizer["Workspace Resources Whitelist"]</MudText>    
    <MudStack Row AlignItems="AlignItems.Center" Class="my-4">
        <ResourceWhitelistSwitch ResourceEnabled="_whitelist.AllowStorage" ResourceEnabledChanged="SetStorage" />
        <MudText Typo="Typo.h6">@Localizer["Allow Storage"]</MudText>
    </MudStack>
    <MudStack Row AlignItems="AlignItems.Center" Class="my-4">
        <ResourceWhitelistSwitch ResourceEnabled="_whitelist.AllowDatabricks" ResourceEnabledChanged="SetDatabricks" />
        <MudText Typo="Typo.h6">@Localizer["Allow Databricks"]</MudText>
    </MudStack>
    <MudStack Row AlignItems="AlignItems.Center" Class="my-4">
        <ResourceWhitelistSwitch ResourceEnabled="_whitelist.AllowVMs" ResourceEnabledChanged="SetVMs" />
        <MudText Typo="Typo.h6">@Localizer["Allow Virtual Machines"]</MudText>
    </MudStack>
}
else
{
    <MudSkeleton Width="100%" Height="400px"/>
}

@code {
    [CascadingParameter(Name = "IsDatahubAdmin")]
    private bool IsDatahubAdmin { get; set; }
    [CascadingParameter(Name = "Project")]
    private Datahub_Project Project { get; set; }
    
    private Project_Whitelist _whitelist;
    private bool _isLoaded;
    
    
    protected override void OnInitialized()
    {
        if (!IsDatahubAdmin) return;
        _whitelist = Project.Whitelist ?? new Project_Whitelist {Project = Project};
        _isLoaded = true;
        StateHasChanged();
    }


    private async Task SetStorage( bool allowStorage)
    {
        _whitelist.AllowStorage = allowStorage;
        await ProjectResourceWhitelistService.UpdateProjectResourceWhitelistAsync(_whitelist);
    }

    private async Task SetDatabricks( bool allowDatabricks)
    {
        _whitelist.AllowDatabricks = allowDatabricks;
        await ProjectResourceWhitelistService.UpdateProjectResourceWhitelistAsync(_whitelist);
    }


    private async Task SetVMs( bool allowVMs)
    {
        _whitelist.AllowVMs = allowVMs;
        await ProjectResourceWhitelistService.UpdateProjectResourceWhitelistAsync(_whitelist);
    }
}