@*WhitelistWorkspaceResourcesPage.razor*@

@page "/w/{ProjectAcronymParam}/whitelist"

@using Datahub.Core.Services.Projects;
@using Datahub.Shared.Entities;

@inject IUserInformationService UserInformationService
@inject IDbContextFactory<DatahubProjectDBContext> DbFactoryProject
@inject ServiceAuthManager ServiceAuthManager
@inject ILogger<DataProjectPage> Logger
@inject NavigationManager NavigationManager
@inject IRequestManagementService requestManagementService
@inject IDatahubAuditingService auditingService

@if (_project is not null && _isDatahubAdmin)
{
    <CascadingValue Value="@_project" Name="Project">
        <CascadingValue Value="@_isDatahubAdmin" Name="IsDatahubAdmin">
            <CascadingValue Value="@_isProjectAdmin" Name="IsProjectAdmin">
                <ProjectInfo/>
                <ResourceWhitelist OnBudgetUpdated=@HandleBudgetUpdated />
            </CascadingValue>
        </CascadingValue>
    </CascadingValue>
}

@code {
    [Parameter]
    public string ProjectAcronymParam { get; set; }

    private Datahub_Project _project;

    private bool _isDatahubAdmin;
    private bool _isProjectAdmin;
    private string _userId;

    protected override async Task OnInitializedAsync()
    {
        _userId = await UserInformationService.GetUserIdString();
        if (_userId is null) Logger.LogError("UserId is null");

        var authUser = (await UserInformationService.GetAuthenticatedUser());
        _isDatahubAdmin = !ServiceAuthManager.GetViewingAsGuest(_userId) && authUser.IsInRole(RoleConstants.DATAHUB_ROLE_ADMIN);
        if (!_isDatahubAdmin)
        {
            //redirect back to workspace page
            NavigationManager.NavigateTo($"/w/{ProjectAcronymParam}");
            return;
        }

        _isProjectAdmin = !ServiceAuthManager.GetViewingAsGuest(_userId) && authUser.IsInRole($"{_project?.Project_Acronym_CD}-admin");
        await using var projectContext = await DbFactoryProject.CreateDbContextAsync();

        _project = await projectContext.Projects            
            .Where(p => p.Project_Acronym_CD == ProjectAcronymParam)
            .FirstOrDefaultAsync();
    }

    private async Task HandleBudgetUpdated(decimal budget)
    {
        if (_project.Project_Budget == budget)
            return;

        await using var ctx = await DbFactoryProject.CreateDbContextAsync();

        _project.Project_Budget = budget;

        ctx.Attach(_project);
        ctx.Projects.Update(_project);
        await ctx.TrackSaveChangesAsync(auditingService);

        await requestManagementService.HandleTerraformRequestServiceAsync(_project, TerraformTemplate.VariableUpdate);
    }
}