
@using Datahub.Application.Configuration


@inject IDbContextFactory<DatahubProjectDBContext> _dbFactory
@inject DatahubPortalConfiguration _datahubPortalConfiguration


@page "/w"

<UserProjects />

@if (_filteredProjects.Any())
{
    <MudTable Striped Items="_filteredProjects" Class="my-12" Filter="new Func<Datahub_Project,bool>(ProjectFilter)">
    <ToolBarContent>
            <MudText Typo="Typo.h2" Class="py-4">@Localizer["All Workspaces"]</MudText>
            <MudSpacer />
            <MudTextField T="string" Placeholder="@Localizer["Search"]" DebounceInterval="500"
                          @bind-Value="_projectSearchFilter" Adornment="Adornment.Start" 
                          AdornmentIcon="@Icons.Material.Filled.Search" Clearable="true">
            </MudTextField>
        </ToolBarContent>
        <HeaderContent>
            <MudTh>
                <MudTableSortLabel SortBy="new Func<Datahub_Project, object>(x => x.Project_Acronym_CD)">@Localizer["Acronym"]</MudTableSortLabel>
            </MudTh>
            <MudTh>
                <MudTableSortLabel SortBy="new Func<Datahub_Project, object>(x => x.Project_Name)" InitialDirection="SortDirection.Ascending">@Localizer["Name"]</MudTableSortLabel>
            </MudTh>
            <MudTh>
                <MudTableSortLabel SortBy="new Func<Datahub_Project, object>(x => x.Sector_Name)" >@Localizer["Department/Agency"]</MudTableSortLabel>
            </MudTh>
            <MudTh></MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Acronym">@context.Project_Acronym_CD</MudTd>
            <MudTd DataLabel="Name">@context.Project_Name</MudTd>
            <MudTd DataLabel="Department/Agency">@Localizer[context.Sector_Name ?? "N/A"]</MudTd>
            <MudTd DataLabel="ProjectButton"> 
                <MudButton EndIcon="@UserWorkspaceOpenIcon" Variant="Variant.Text" Color="Color.Primary"
                           Href="@($"/{_datahubPortalConfiguration.ProjectUrlSegment}/{context.Project_Acronym_CD}")">
                    @Localizer["Open Workspace"]
                </MudButton>
            </MudTd>
        </RowTemplate>
        <PagerContent>
            <MudTablePager />
        </PagerContent>
    </MudTable>
}
else
{
    <div class="no-projects">
        <i class="fas fa-box-full"></i>
        <MudText Typo="Typo.h5">@Localizer["Sorry, we can't find any projects that match your filter!"]</MudText>
    </div>
}


@code {
    
    private const string UserWorkspaceOpenIcon = Icons.Material.Filled.KeyboardDoubleArrowRight;

    private List<Datahub_Project> _allProjects;
    private List<Datahub_Project> _filteredProjects;
    private List<Datahub_Project> _featured;
    
    private string _projectSearchFilter = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await using var context = await _dbFactory.CreateDbContextAsync();
        _allProjects = context.Projects
            .Where(p =>
                (p.Project_Status == (int) ProjectStatus.InProgress || p.Is_Featured) &&
                !p.Is_Private && !string.IsNullOrWhiteSpace(p.Project_Acronym_CD)
                && !string.IsNullOrWhiteSpace(p.Project_Name))
            // .Include(p => p.Users)
            .ToList();
        _featured = _allProjects.Where(p => p.Is_Featured).ToList();
        _filteredProjects = _allProjects;
    }
    
    private bool ProjectFilter(Datahub_Project project)
    {
        return project.Project_Name.ToLowerInvariant().Contains(_projectSearchFilter.ToLowerInvariant()) ||
               project.Project_Acronym_CD.ToLowerInvariant().Contains(_projectSearchFilter.ToLowerInvariant()) ||
               project.Sector_Name.ToLowerInvariant().Contains(_projectSearchFilter.ToLowerInvariant());
    }
}