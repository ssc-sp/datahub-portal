@* TbsOpenGovPublishPage.razor *@

@using Datahub.Application.Services.Publishing;
@using Datahub.Core.Model.Achievements;
@using StatusEnum = Datahub.Core.Model.Datahub.TbsOpenGovSubmission.ProcessSteps;
@inject IUserInformationService UserService
@*
@inject IPublicDataFileService PublicDataFileService
@inject IMSGraphService GraphService
@inject UIControlsService UI
@inject NotifierService NotifierService
@using Datahub.Core.Services.Api
@implements IDisposable
*@

<MudText Typo=@Typo.h2>TBS Open Government Registry</MudText>

@if(SubmissionLoaded)
{

    <MudButton OnClick=@ToggleTimeline >Collapse</MudButton>

    <DHSteps 
        T=@StatusEnum
        StepItems=@_steps
        CurrentStepStateFunc=@GetCurrentStepState
        StepTitleFunc=@GetStepTitle
        StepMessageFunc=@GetStepDescription
        Collapsed=@_timelineCollapsed
        />

    @if(ShowFileSelectionPane)
    {
        <MudCard>
            <MudList>
                <MudListItem>
                    <Datahub.Core.Components.OpenDataSharing.FilePurposeSelector 
                        FilePurpose=@TbsOpenGovSubmission.DATASET_FILE_TYPE
                        Submission=@Submission
                        Syncer=@Syncer
                        Required
                    />
                </MudListItem>
                <MudListItem>
                    <Datahub.Core.Components.OpenDataSharing.FilePurposeSelector 
                        FilePurpose=@TbsOpenGovSubmission.METADATA_FILE_TYPE
                        Submission=@Submission
                        Syncer=@Syncer
                        Required
                    />
                </MudListItem>
                <MudListItem>
                    <Datahub.Core.Components.OpenDataSharing.FilePurposeSelector 
                        FilePurpose=@TbsOpenGovSubmission.DATA_DICTIONARY_FILE_TYPE
                        Submission=@Submission
                        Syncer=@Syncer
                        Required
                    />
                </MudListItem>
                <MudListItem>
                    <Datahub.Core.Components.OpenDataSharing.FilePurposeSelector
                        FilePurpose=@TbsOpenGovSubmission.SUPPORTING_DOC_FILE_TYPE
                        MultiSelect
                        Submission=@Submission
                        Syncer=@Syncer 
                    />
                </MudListItem>
            </MudList>
        </MudCard>
    }

    @if (ShowOpenGovCriteriaForm)
    {
        <MudCard>
            <Datahub.Portal.Pages.Forms.ShareWorkflow.ApprovalForm ApprovalFormId=@_approvalFormId
                                                               OnSubmitForm=@UpdateApprovalFormId
                                                               DatasetTitle=@_datasetTitle
                                                               PortalUser=@_requestingUser />
        </MudCard>
    }


}


@code {

    [Parameter]
    public TbsOpenGovSubmission Submission { get; set; }

    [Parameter]
    public EventCallback OnSubmissionUpdated { get; set; }

    private bool _timelineCollapsed = true;
    private async Task ToggleTimeline()
    {
        _timelineCollapsed = !_timelineCollapsed;
        await InvokeAsync(StateHasChanged);
    }

    private GenericSyncer Syncer = new();

    private bool SubmissionLoaded => Submission != null;

    private bool ShowOpenGovCriteriaForm => _stepStates[StatusEnum.Initial] == DHSteps<StatusEnum>.StepState.Running;
    private bool ShowFileSelectionPane => _stepStates[StatusEnum.AwaitingFiles] == DHSteps<StatusEnum>.StepState.Running;

    private Dictionary<StatusEnum, DHSteps<StatusEnum>.StepState> _stepStates = new();
    private Dictionary<StatusEnum, (string, string)?> _stepInfo = new();

    private List<StatusEnum> _steps = Enum.GetValues<StatusEnum>().ToList();

    private (string, string)? GetStepPair(StatusEnum status)
    {
        var prefix = $"{TbsOpenGovSubmission.LOCALIZATION_PREFIX}.Status";
        var title = $"{prefix}.{status}.Title";
        var desc = $"{prefix}.{status}.Description";
        return (Localizer[title], Localizer[desc]);
    }

    private DHSteps<StatusEnum>.StepState GetCurrentStepState(StatusEnum s) => _stepStates[s];
    private StatusEnum? _currentStep;
    private (string, string)? GetStepInfo(StatusEnum s) => s == _currentStep || !_timelineCollapsed ? _stepInfo[s] : new(string.Empty, string.Empty);
    private string GetStepTitle(StatusEnum s) => GetStepInfo(s)?.Item1;
    private string GetStepDescription(StatusEnum s) => GetStepInfo(s)?.Item2;

    private int _approvalFormId = 0;
    private string _datasetTitle;
    private PortalUser _requestingUser;

    private async Task UpdateApprovalFormId(Forms.ShareWorkflow.ApprovalFormSubmitArgs args)
    {
        //TODO 

        _approvalFormId = args.FormId;

        await Task.CompletedTask;
    }

    private void SetStatusSteps()
    {
        if (!SubmissionLoaded) return;

        _currentStep = null;

        _stepStates = _steps
            .Select(s => TbsOpenGovPublishingUtils.CheckStepStatus(Submission, s))
            .ToDictionary(s => s.Step, s => s.Completed ? 
                DHSteps<StatusEnum>.StepState.Passed : 
                s.Started ? 
                    DHSteps<StatusEnum>.StepState.Running : 
                    DHSteps<StatusEnum>.StepState.Queued);

        if (_stepStates[StatusEnum.Published] == DHSteps<StatusEnum>.StepState.Passed)
        {
            _currentStep = StatusEnum.Published;
        }
        else
        {
            _currentStep = _stepStates.OrderBy(kvp => kvp.Key).FirstOrDefault(kvp => kvp.Value == DHSteps<StatusEnum>.StepState.Running).Key;
        }
    }

    protected override void OnParametersSet()
    {
        SetStatusSteps();
        base.OnParametersSet();
    }

    protected override async Task OnInitializedAsync()
    {
        _stepInfo = _steps.ToDictionary(s => s, s => GetStepPair(s));
        _stepStates = _steps.ToDictionary(s => s, s => DHSteps<StatusEnum>.StepState.Queued);

        SetStatusSteps();

        _requestingUser = Submission?.RequestingUser ?? await UserService.GetCurrentPortalUserAsync();

        await base.OnInitializedAsync();
    }
}
