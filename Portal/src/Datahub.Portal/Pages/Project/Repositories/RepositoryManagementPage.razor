@using Datahub.Application.Services.Notebooks
@using Datahub.Core.Data.Databricks
@using Datahub.Portal.Pages.Project.DataProject
@using Microsoft.Identity.Web
@using Microsoft.Rest

@inject IDatabricksApiService _databricksApiService
@inject ITokenAcquisition _tokenAcquisition
@inject MicrosoftIdentityConsentAndConditionalAccessHandler _consentHandler


@page "/w/{ProjectAcronymParam}/repository"

<DatahubAuthView AuthLevel="DatahubAuthView.AuthLevels.WorkspaceCollaborator" ProjectAcronym="@ProjectAcronymParam">
    <MudStack>
        <ProjectInfo ProjectAcronym="@ProjectAcronymParam"/>
        <MudText Typo="Typo.h2">@Localizer["Workspace Repositories"]</MudText>

        <MudGrid>
            @foreach (var repositoryInfo in _repositoryInfos)
            {
                <RepositoryGridItem RepositoryInfo="@repositoryInfo" ProjectAcronym="@ProjectAcronymParam"/>
            }
        </MudGrid>
    </MudStack>
</DatahubAuthView>

@code {

    [Parameter]
    public string ProjectAcronymParam { get; set; }

    private List<RepositoryInfo> _repositoryInfos = new();

    public static readonly string[] RequiredScopes = new string[]
    {
    //"https://management.azure.com/.default"
        // "2ff814a6-3304-4ab8-85cb-cd0e6f879c1d/.default"
        "2ff814a6-3304-4ab8-85cb-cd0e6f879c1d/user_impersonation"
    };
    
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        
        var accessToken = "";
        
        try
        {
            accessToken = await _tokenAcquisition.GetAccessTokenForUserAsync(RequiredScopes);
        }
        catch (MicrosoftIdentityWebChallengeUserException e)
        {
            // token's expired, or consent is needed
            _consentHandler.HandleException(e);
            return;
        }
        catch (HttpOperationException)
        {
            // something else went wrong
            throw new UnauthorizedAccessException();
        }
        
        _repositoryInfos = await _databricksApiService.ListWorkspaceRepositories(ProjectAcronymParam, accessToken);
    }
}