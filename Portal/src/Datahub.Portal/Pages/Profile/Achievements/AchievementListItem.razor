@using MudBlazor.Utilities
@using Datahub.Core.Model.Achievements
@inject DatahubPortalConfiguration _datahubPortalConfiguration

<MudGrid Style="@_itemStyle">
    <MudItem xs="12" sm="8">
        <AchievementCard Achievement="UserAchievement?.Achievement ?? Achievement" />
    </MudItem>
    <MudItem xs="6" sm="2" Class="d-flex align-center">
        <MudStack Spacing="0">
            <MudText Typo="Typo.body2">@GetRarity()</MudText>
            <MudText Typo="Typo.body2">@_randomNumber %</MudText>
        </MudStack>
    </MudItem>
    <MudItem xs="6" sm="2" Class="d-flex align-center justify-center">
        @if (UserAchievement?.Earned ?? false)
        {
            <MudStack Spacing="0" Class="d-flex align-center">
                <MudText Typo="Typo.body2">@DateTime.Now.ToString("yyyy MMMM dd")</MudText>
                <MudText Typo="Typo.body2">@DateTime.Now.ToString("h:mm tt")</MudText>
            </MudStack>
        }
        else
        {
            var progress = Completion is null ? 1d : (Completion.Value.Item1 / (double)Completion.Value.Item2) * 100;
            <MudProgressLinear Value="progress" aria-label="Achievement completion progress">
                <MudText Class="mb-6" Typo="Typo.caption" Color="Color.Dark">
                    @if (Completion is null)
                    {
                        <span>0 / 1</span>
                    }
                    else
                    {
                        <span>@Completion.Value.Item1 / @Completion.Value.Item2</span>
                    }
                </MudText>
            </MudProgressLinear>
        }
    </MudItem>
</MudGrid>


@code {

    [Parameter]
    public UserAchievement UserAchievement { get; set; }
    
    [Parameter]
    public Achievement Achievement { get; set; }

    [Parameter]
    public (int, int)? Completion { get; set; } = (0,1);

    private readonly int _randomNumber = new Random().Next(1, 100);

    private string _itemStyle => UserAchievement?.UnlockedAt != null ? "" : "opacity: 0.5;";

    private string GetRarity()
    {
        switch (_randomNumber)
        {
            case < 5:
                return Localizer["Legendary"];
            case < 25:
                return Localizer["Epic"];
            case < 50:
                return Localizer["Rare"];
            case < 75:
                return Localizer["Uncommon"];
            default:
                return Localizer["Common"];
        }
    }

}