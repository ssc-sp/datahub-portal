@page "/profile"
@page "/profile/{UserIdBase64}"

@inject IUserInformationService _userInformationService
@inject IConfiguration _configuration
@inject IMSGraphService _mSGraphService;
@inject AchievementService _achievementService;

@using MudBlazor.Utilities
@using Datahub.Portal.Components.Projects
@using Datahub.Portal.Pages.Profile.Sections
@using Datahub.Achievements.Models
@using Datahub.Core.Extensions

@if (_user is null)
{
    <MudContainer MaxWidth="MaxWidth.Small">
        <DHLoadingInitializer Message="@Localizer["Initializing Profile..."]"/>
    </MudContainer>

    return;
}

@if (_user.Id is null)
{
    <MudText>Sorry, that user does not exist</MudText>
    return;
}

<MudContainer Class="mt-16 px-8" MaxWidth="MaxWidth.Large">
    <MudGrid Justify="Justify.Center">
        <MudItem xs="12" Style="@_imageStyle" Class="rounded-lg mud-elevation-4"/>
        <MudItem xs="10" Class="">
            <ProfileTitle User="@_user"/>
        </MudItem>
        <MudItem xs="8">
            <UserProjects/>
        </MudItem>
        <MudItem xs="8">
            <ProfileAchievements User="@_user"/>
        </MudItem>
    </MudGrid>
</MudContainer>

@code {

    [Parameter]
    public string UserIdBase64 { get; set; }

    // yan's id: e828f0bf-a85e-42c3-b13e-08e267b05e0c
    // base64 encoded: ZTgyOGYwYmYtYTg1ZS00MmMzLWIxM2UtMDhlMjY3YjA1ZTBj

    private GraphUser _user;

    private string _imageStyle;

    protected override void OnInitialized()
    {
        base.OnInitialized();

        _imageStyle = new StyleBuilder()
            .AddStyle("background", string.Join("linear-gradient(180deg, rgba(0, 0, 0, 0) 0%, black 100%)",
                $"url('{GetBackground()}') no-repeat center center fixed"))
            .AddStyle("background-size", "cover")
            .AddStyle("height", "250px")
            .AddStyle("width", "100%")
            .Build();
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        var user = await _userInformationService.GetCurrentGraphUserAsync();
        if (string.IsNullOrWhiteSpace(UserIdBase64))
        {
            _user = await _mSGraphService.GetUserAsync(user.Id, CancellationToken.None);
        }
        else
        {
            var decodedUserId = UserIdBase64.Base64Decode();
            _user = await _mSGraphService.GetUserAsync(decodedUserId, CancellationToken.None);
            if (_user?.Id != null && user?.Id != decodedUserId)
            {
                await _achievementService.AddOrIncrementTelemetryEvent(DatahubUserTelemetry.TelemetryEvents.UserViewOtherProfile);
            }
        }
    }


    private string GetBackground()
    {
    //earth-background.jpg
    //LandingBgFolder
        var folder = _configuration["LandingBgFolder"] ?? "nrcan";
        var imgCount = (_configuration.GetSection("LandingBgImgCount").Get<int?>() ?? 12) - 1;
        var randomId = (int)Math.Round(new Random().NextDouble() * imgCount);
        return $"/img/{folder}/landing{randomId:00}.jpg";
    }

}