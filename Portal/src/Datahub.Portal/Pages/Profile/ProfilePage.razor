@page "/profile"

@inject IUserInformationService _userInformationService
@inject DatahubPortalConfiguration _datahubPortalConfiguration

@using Datahub.Portal.Pages.Profile.Settings

@if (_viewedPortalUser is null)
{
    <MudContainer MaxWidth="MaxWidth.Small">
        <DHLoadingInitializer Message="@Localizer["Initializing Profile..."]"/>
    </MudContainer>
    return;
}

<MudStack Row Justify="Justify.FlexEnd" Class="mt-n4 mb-8">
    <MudButton Href="@($"/profile/settings/{ProfileSettingsPage.SectionViews.Public}")" Variant="Variant.Text" StartIcon="@Icons.Material.Filled.Settings">@Localizer["Manage Settings"]</MudButton>
</MudStack>
<MudGrid>
    <MudItem xs="12">
        <MudImage Src="@_datahubPortalConfiguration.Achievements.GetAchievementImageUrl(_viewedPortalUser.BannerPictureUrl)"
                  Alt="@Localizer["User's background image"]"
                  Class="rounded-lg mud-elevation-4"
                  Style="width: 100%"
                  ObjectFit="ObjectFit.Cover"
                  Height="320"
                  ObjectPosition="ObjectPosition.Center"/>
    </MudItem>
    <MudItem xs="12" md="8">
        <MudStack Row AlignItems="AlignItems.Center" Class="mb-6">
            <MudAvatar Style="width:120px; height: 120px">
                <MudImage Src="@_datahubPortalConfiguration.Achievements.GetAchievementPortraitUrl(_viewedPortalUser.ProfilePictureUrl)"
                          Alt="@Localizer["User's profile picture"]"
                          Height="120"
                          Width="120"/>
            </MudAvatar>
            <MudStack Spacing="0">
                <MudText Typo="Typo.h1">
                    <strong>@_viewedPortalUser.DisplayName</strong>
                </MudText>
                <MudText Typo="Typo.caption" Class="ml-2">@_viewedPortalUser.Email</MudText>
            </MudStack>
        </MudStack>
        <UserProjects UserId="@_viewedPortalUser.GraphGuid"/>
    </MudItem>
    <MudItem xs="12" md="4">
        <MudStack Spacing="6">
            <ProfileAchievements Achievements="@_userTrophies" ShowAll="@true" Title="@Localizer["Trophy Achievements"]"/>
            <ProfileAchievements Achievements="@_userAchievements" ShowAll="@false" Title="@Localizer["Achievements"]"/>
        </MudStack>
    </MudItem>
</MudGrid>

@code {

    [SupplyParameterFromQuery(Name = "u")]
    public string UserIdBase64 { get; set; }

    // yan's id: e828f0bf-a85e-42c3-b13e-08e267b05e0c
    // base64 encoded: ZTgyOGYwYmYtYTg1ZS00MmMzLWIxM2UtMDhlMjY3YjA1ZTBj

    //TODO: remove this when new model is ready
        private const string TempTrophyImage = "https://static1.pocketlintimages.com/wordpress/wp-content/uploads/161649-apps-news-feature-all-these-incredible-images-were-made-by-artificial-intelligence-image2-nry8isc9do.jpg?q=50&fit=crop&w=750&dpr=1.5";
        private const string TempAchievementImage = "https://imageio.forbes.com/specials-images/imageserve/64213c10fc7ed6f0a3eb47ae/The-Intersection-Of-AI-And-Human-Creativity--Can-Machines-Really-Be-Creative-/960x0.jpg?format=jpg&width=960";
    // TODO: replace with Achievement model
    private List<(string name, string description, string imageSrc)> _userTrophies = new();
    private List<(string name, string description, string imageSrc)> _userAchievements = new();

    private PortalUser _viewedPortalUser;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        var graphUser = await _userInformationService.GetCurrentGraphUserAsync();
        var language = await _userInformationService.GetUserLanguage();

        _viewedPortalUser = new PortalUser
        {
            GraphGuid = graphUser.Id,
            DisplayName = graphUser.DisplayName,
            Email = graphUser.Mail,
            Language = language
        };
        
        await GetUserAchievements();
    }


    protected override async Task OnParametersSetAsync()
    {
    // await base.OnParametersSetAsync();
    // var user = await _userInformationService.GetCurrentGraphUserAsync();
    // if (string.IsNullOrWhiteSpace(UserIdBase64))
    // {
    //     _user = await _mSGraphService.GetUserAsync(user.Id, CancellationToken.None);
    // }
    // else
    // {
    //     var decodedUserId = UserIdBase64.Base64Decode();
    //     _user = await _mSGraphService.GetUserAsync(decodedUserId, CancellationToken.None);
    //     if (_user?.Id != null && user?.Id != decodedUserId)
    //     {
    //         await _achievementService.AddOrIncrementTelemetryEvent(DatahubUserTelemetry.TelemetryEvents.UserViewOtherProfile);
    //     }
    // }
    // _isCurrentUser = user?.Id.Equals(_user?.Id, StringComparison.Ordinal) ?? false;
    }

    private async Task GetUserAchievements()
    {
    // userAchievements where type == Trophy
        var randomInteger = Random.Shared.Next(2, 20);
        _userTrophies = Enumerable.Repeat(("Best Datahubber üèÜ", "I am the best üòÉ.", TempTrohpyImage:TempTrophyImage), randomInteger).ToList();


        randomInteger = Random.Shared.Next(12, 120);
        _userAchievements = Enumerable.Repeat(("Some Cool Achievement", "You visited some part of the site.", TempTrohpyImage:TempAchievementImage), randomInteger).ToList();
    }


}