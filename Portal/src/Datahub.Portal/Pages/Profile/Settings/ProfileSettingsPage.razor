@using Datahub.Portal.Pages.Profile.Settings.Views
@using Datahub.Portal.Components.User
@using Datahub.Core.Model.Achievements

@inject IUserInformationService _userInformationService

@page "/profile/settings/{Section?}"

<MudContainer MaxWidth="MaxWidth.Large">
    <MudGrid>
        <MudItem xs="3">
                <!--suppress CssUnresolvedCustomProperty -->
                <MudStack Spacing="6" Style="position: sticky; top: calc(var(--mud-appbar-height) + 8px);">
                <UserCard ViewedUser="@_viewedPortalUser"/>
                <ProfileSettingsSidebar ViewedUser="@_viewedPortalUser"/>
            </MudStack>
        </MudItem>
        <MudItem xs="9" md="7">
            @if (_viewedPortalUser is null)
            {
                <DHLoadingInitializer Message="@Localizer["Loading Settings"]"/>
            }
            else
            {
                @switch (Section)
                {
                    case SectionViews.Appearance:
                        <SettingsAppearanceView ViewedUser="@_viewedPortalUser" OnViewedUserChanged="HandleViewedUserChanged"/>
                        break;
                    case SectionViews.Notifications:
                        <SettingsNotificationsView ViewedUser="@_viewedPortalUser"/>
                        break;
                    case SectionViews.Public:
                        <SettingsPublicProfileView ViewedUser="@_viewedPortalUser" OnViewedUserChanged="HandleViewedUserChanged"/>
                        break;
                    default:
                        <SettingsPublicProfileView ViewedUser="@_viewedPortalUser" OnViewedUserChanged="HandleViewedUserChanged"/> // redundant, but just in case
                        break;
                }
            }
        </MudItem>
    </MudGrid>
</MudContainer>

@code {

    [Parameter]
    public string Section { get; set; }

    private PortalUser _viewedPortalUser;

    public struct SectionViews
    {
        public const string Public = "public";
        public const string Appearance = "appearance";
        public const string Notifications = "notifications";
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        _viewedPortalUser = await _userInformationService.GetCurrentPortalUserWithAchievementsAsync();
    }

    private async Task HandleViewedUserChanged(PortalUser updatedUser)
    {
        _viewedPortalUser = updatedUser;
        await InvokeAsync(StateHasChanged);
    }

}