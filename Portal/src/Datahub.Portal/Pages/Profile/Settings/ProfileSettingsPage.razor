@inherits ViewUserBase<ProfileSettingsPage>

@using Datahub.Portal.Pages.Profile.Settings.Views
@using Datahub.Portal.Components.User
@using Datahub.Core.Model.Achievements

@inject ISnackbar _snackbar

@page "/profile/settings/{Section?}"

@if (_viewedPortalUser is null)
{
    return;
}
<DatahubAuthView AuthLevel="DatahubAuthView.AuthLevels.Personal" UserGraphId="@_viewedPortalUser.GraphGuid">
    <Authorized>

        <MudContainer MaxWidth="MaxWidth.Large">
            <MudGrid>
                <MudItem xs="12">
                    <UserCard ViewedUserGraphId="@_viewedPortalUser.GraphGuid"/>
                </MudItem>
                <MudItem xs="3">
                    <ProfileSettingsSidebar ViewedUser="@_viewedPortalUser" UserIdBase64="@UserIdBase64"/>
                </MudItem>
                <MudItem xs="9" md="7">
                    @if (_viewedPortalUser is null)
                    {
                        <DHLoadingInitializer Message="@Localizer["Loading Settings"]"/>
                    }
                    else
                    {
                        @switch (Section)
                        {
                            case SectionViews.Appearance:
                                <SettingsAppearanceView ViewedUser="@_viewedPortalUser" OnViewedUserChanged="HandleViewedUserChanged"/>
                                break;
                            case SectionViews.Notifications:
                                <SettingsNotificationsView ViewedUser="@_viewedPortalUser"/>
                                break;
                            case SectionViews.Public:
                                <SettingsPublicProfileView ViewedUser="@_viewedPortalUser" OnViewedUserChanged="HandleViewedUserChanged"/>
                                break;
                            default:
                                <SettingsPublicProfileView ViewedUser="@_viewedPortalUser" OnViewedUserChanged="HandleViewedUserChanged"/> // redundant, but just in case
                                break;
                        }
                    }
                </MudItem>
            </MudGrid>
        </MudContainer>
    </Authorized>
    <NotAuthorized>
        <MudGrid Justify="Justify.Center">
            <MudItem xs="12" sm="9">
                <MudStack Spacing="6">
                    <MudText Typo="Typo.h2">@Localizer["These are not the settings you're looking for..."]</MudText>
                    <MudLink Href="/profile/settings" Typo="Typo.body1">@Localizer["Click here to return to your settings"]</MudLink>
                </MudStack>
            </MudItem>
        </MudGrid>
    </NotAuthorized>
</DatahubAuthView>

@code {

    [Parameter]
    public string Section { get; set; }

    private PortalUser _viewedPortalUser;

    public struct SectionViews
    {
        public const string Public = "public";
        public const string Appearance = "appearance";
        public const string Notifications = "notifications";
    }

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();

        _viewedPortalUser = await GetViewedPortalUserWithAchievementsAsync();
    }

    private async Task HandleViewedUserChanged(PortalUser updatedUser)
    {
        _viewedPortalUser = updatedUser;
        var success = await _userInformationService.UpdatePortalUserAsync(updatedUser);
        if (success)
        {
            _snackbar.Add(Localizer["User information updated"], Severity.Success);
        }
        else
        {
            _snackbar.Add(Localizer["Failed to update user information"], Severity.Error);
        }

        await InvokeAsync(StateHasChanged);
    }

}