@using Datahub.Portal.Components.User

@inject IUserInformationService _userInformationService
@inject DatahubPortalConfiguration _datahubPortalConfiguration
@inject IDialogService _dialogService

<MudStack Spacing="8" Class="mb-16">
    <MudStack>
        <MudText Typo="Typo.h4">@Localizer["Portal Appearance"]</MudText>
        <MudDivider/>
    </MudStack>
    <SettingsField Label="@Localizer["Theme Preferences"]" Description="@Localizer["Choose how DataHub looks to you. Select a single theme, or sync with your operating system automatically."]">
        <MudSelect T="string" Label="Current Theme" Variant="Variant.Outlined" AnchorOrigin="Origin.BottomCenter" Value="@("DataHub Light")">
            <MudSelectItem T="string" Value="@("DataHub Light")"/>
            <MudSelectItem Disabled T="string" Value="@("DataHub Dark")"/>
            <MudSelectItem Disabled T="string" Value="@("Space Light")"/>
            <MudSelectItem Disabled T="string" Value="@("Space Dark")"/>
        </MudSelect>
    </SettingsField>
    <SettingsField Label="@Localizer["Language Selection"]" Description="@Localizer["Choose your preferred language for DataHub."]">
        <MudSelect T="string" Label="Current Language" Variant="Variant.Outlined" AnchorOrigin="Origin.BottomCenter" Value="@ViewedUser.Language" ValueChanged="HandleLanguageChanged">
            <MudSelectItem T="string" Value="@("en-CA")">English</MudSelectItem>
            <MudSelectItem T="string" Value="@("fr-CA")">Francais</MudSelectItem>
            <MudSelectItem Disabled T="string" Value="@("Klingon")">Klingon</MudSelectItem>
        </MudSelect>
    </SettingsField>
</MudStack>

@code {

    [Parameter]
    public PortalUser ViewedUser { get; set; }

    [Parameter]
    public EventCallback<PortalUser> OnViewedUserChanged { get; set; }

    private async Task HandleLanguageChanged(string language)
    {
        ViewedUser.Language = language;
        await _userInformationService.RegisterUserLanguage(language);
        _userInformationService.SetLanguage(language);
        await OnViewedUserChanged.InvokeAsync(ViewedUser);
    }


}