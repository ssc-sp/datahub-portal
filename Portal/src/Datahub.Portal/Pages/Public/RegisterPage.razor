@using Datahub.Portal.Data.Forms
@using Datahub.Application.Services

@inject ILogger<RegisterPage> _logger
@inject IMetadataBrokerService _metadataBrokerService
@inject IUserEnrollmentService _userEnrollmentService
@inject NavigationManager _navigationManager

@page "/register"

<PageTitle>@Localizer["DataHub | Registration"]</PageTitle>

<PublicLandingDescription>
    <MudStack>
        <MudForm @ref="@_form" @bind-IsValid="@_success" @bind-Errors="@_errors">
            <MudStack>
                <MudText>
                    @Localizer["Register for the Federal Science DataHub"]
                </MudText>

                <MudTextField T="string"
                              Label=@Localizer["Government of Canada Email"]
                                  @bind-Value="_email"
                              Required
                              Variant="Variant.Outlined"
                              RequiredError=@Localizer["Government of Canada Email is required"]
                              Validation=@(new Func<string, string>(EmailValidation))/>

                <MudTextField T="string"
                              Label=@Localizer["(Optional) How did you hear about the Federal Science DataHub?"]
                              Variant="Variant.Outlined"
                              Lines="5"
                              @bind-Value="@_comment"/>

                <MudCheckBox T="bool"
                             Required
                             RequiredError=@Localizer["Agreement with the Terms and conditions is required"]
                             Class="mt-8">

                    <MudText Typo="Typo.body2">
                        @Localizer["I agree to the "]
                        <MudLink Href="/terms-and-conditions" Typo="Typo.body2">
                            @Localizer["Terms and conditions"]
                        </MudLink>
                        @Localizer[" of use for the FSDH Proof-of-Concept Phase 2"]
                    </MudText>

                </MudCheckBox>

                @if (_isRegistering)
                {
                    <MudButton Variant="Variant.Filled" Color="Color.Primary" Disabled Class="mx-auto mt-4">
                        @Localizer["Registering"]
                        <MudProgressCircular Class="ml-4" Color="Color.Default" Size="Size.Small" Indeterminate="true"/>
                    </MudButton>
                }
                else
                {
                    <MudButton Variant="Variant.Filled" Color="Color.Primary" Disabled="@(!_success)" Class="mx-auto mt-4" OnClick="HandleValidSubmit">
                        @Localizer["Register"]
                    </MudButton>
                }
            </MudStack>
        </MudForm>
        <MudText Typo="Typo.body2" Align="Align.Center">
            @Localizer["Already registered?"]
            <MudLink Typo="Typo.body2" Href="/login">@Localizer["Login instead"]</MudLink>
        </MudText>
    </MudStack>
</PublicLandingDescription>


@code {

    private string _email;
    private string _comment;
    private bool _success = true;
    private bool _isRegistering;
    private string[] _errors = { };
    private MudForm _form;

    private string EmailValidation(string email)
    {
        return _userEnrollmentService.IsValidGcEmail(email) ? null : Localizer["Invalid Government of Canada email address"];
    }

    private async Task HandleValidSubmit()
    {
        _isRegistering = true;
        StateHasChanged();

        _logger.LogInformation("Saving registration details for user with email: {Email}", _email);
        await _userEnrollmentService.SaveRegistrationDetails(_email, _comment);
        
        _logger.LogInformation("Attempting to register user with email: {Email}", _email);
        var userId = await _userEnrollmentService.SendUserDatahubPortalInvite(_email, default);

        if (!string.IsNullOrWhiteSpace(userId))
        {
            _logger.LogInformation("User with email: {Email} has been registered with id: {UserId}", _email, userId);
            _navigationManager.NavigateTo("/login");
        }
        else
        {
            _logger.LogWarning("User with email: {Email} was not registered", _email);
            _success = false;
        }
        _isRegistering = false;
        StateHasChanged();
    }

}