@using Datahub.Application.Configuration
@inject CultureService _cultureService
@inject ILogger<TermsAndConditionsPage> _logger
@inject DatahubPortalConfiguration _datahubPortalConfiguration
@inject IHttpClientFactory _httpClientFactory

@page "/terms-and-conditions"

<MudContainer Class="my-16" MaxWidth="MaxWidth.Medium">
    <MudText Typo="Typo.h1" Class="mb-8" Align="Align.Center">
        @Localizer["Terms and Conditions"]
    </MudText>
    <DHMarkdown Content="@_markdownContent" LinkRewriter="@RewriteLink"/>
</MudContainer>


@code {
    
    private string _markdownContent = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        
        _markdownContent = await GetTermsAndConditionsMarkdownContent();
    }

    private async Task<string> GetTermsAndConditionsMarkdownContent()
    {

        var fullUrl = _cultureService.IsEnglish ? _datahubPortalConfiguration.TermsAndConditionsUrl.En : _datahubPortalConfiguration.TermsAndConditionsUrl.Fr;

        var client = _httpClientFactory.CreateClient();
        try
        {
            var output = await client.GetStringAsync(fullUrl);
            return Core.Services.Docs.MarkdownHelper.RemoveFrontMatter(output);
        }
        catch (Exception ex)
        {
            _logger.LogWarning(ex, $"Cannot load terms and conditions from documentation website", fullUrl);
            return null;
        }
    }
    
    private static string RewriteLink(string link)
    {
        return link;
    }
}