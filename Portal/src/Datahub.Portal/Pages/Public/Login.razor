@page "/login"

@inject NavigationManager _navigationManager
@inject IUserInformationService _userInformationService
@inject IConfiguration _configuration

<PageTitle>@Localizer["DataHub | Login"]</PageTitle>

<PublicLandingDescription>
    <MudStack AlignItems="AlignItems.Center" Class="mb-16 pb-16">
        <MudText Typo="Typo.h4" Class="text-center">@Localizer["Welcome to DataHub"]</MudText>
        <MudText Typo="Typo.h6" Class="text-center">@Localizer["Please login to continue"]</MudText>
        <MudStack AlignItems="AlignItems.Center" Class="mt-4">
            <MudButton Class="mx-auto" Variant="Variant.Filled" Color="Color.Primary" OnClick="@HandleLogin">@Localizer["Login"]</MudButton>
        </MudStack>
        <MudText Typo="Typo.body2" Class="mt-8">
            @Localizer["Don't have an account?"]
            <MudLink Href="/register" Typo="Typo.body2">@Localizer["Register instead"]</MudLink>
        </MudText>
    </MudStack>
</PublicLandingDescription>

@code {

    [Parameter]
    [SupplyParameterFromQuery]
    public string redirectUri { get; set; }

    private void HandleLogin()
    {
        //See https://stackoverflow.com/questions/64853618/oidc-authentication-in-server-side-blazor for an alternative
        var url = $"{_navigationManager.BaseUri}MicrosoftIdentity/Account/Challenge?redirectUri={redirectUri}&scope=user.read%20openid%20offline_access%20profile&loginHint=&domainHint=&claims=&policy=";
        _navigationManager.NavigateTo(url, true);
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        var user = await _userInformationService.GetAuthenticatedUser(true);
        if (user.Identity?.IsAuthenticated == true)
        {
            _navigationManager.NavigateTo("/");
        }
        else if (_configuration.GetValue<bool>("ShowLoginPage") != true)
        {
            HandleLogin();
        }
    }
}