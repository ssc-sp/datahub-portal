@page "/login"
@page "/connexion"
@using Datahub.Application.Services.UserManagement

@inject NavigationManager _navigationManager
@inject IUserInformationService _userInformationService
@inject DatahubPortalConfiguration _portalConfiguration

<style>
    .custom-email-field {
        padding: 4px; /* Adjust padding as needed */
        width: 100%; /* Make the field take full width of its container */
        max-width: none; /* Remove any max-width constraint */
        box-sizing: border-box; /* Ensure padding is included in the width */
    }

    .custom-email-field:focus {
        border-color: #007bff;
        outline: none;
    }
    .flex-container {
        display: flex;
        flex-direction: column;
        align-items: center;
        width: 100%;
    }

    .flex-item {
        width: 100%;
        max-width: 400px; 
        text-align: center;
    }
</style>

<EditForm Model="@loginModel">

<PageTitle>@Localizer["Login - Federal Science DataHub"]</PageTitle>

<MudStack Class="my-16 py-16">
    <MudStack AlignItems="AlignItems.Center" Class="mt-4">
        <div class="flex-container">
            <MudText Typo="Typo.h2" Class="text-center flex-item">@Localizer["Please login to continue"]</MudText>
            <MudStack Class="form-group flex-item" AlignItems="AlignItems.Center">
                    <MudTextField id="Email" T="string" Label="@Localizer["Email address"]" @bind-Value="loginModel.Email" Variant="Variant.Outlined" Class="custom-email-field my-2" />
            </MudStack>
        </div>
        <MudButton HtmlTag="a" Class="mx-auto px-16 my-4" Variant="Variant.Filled" Color="Color.Primary" OnClick="@HandleLogin">@Localizer["Login"]</MudButton>
        <MudText Typo="Typo.body1">
            @Localizer["Don't have an account?"]
            <MudLink Href="/register" Typo="Typo.body1">@Localizer["Register instead"]</MudLink>
        </MudText>
    </MudStack>
</MudStack>
</EditForm>
@code {
    [Parameter][SupplyParameterFromQuery] public string redirectUri { get; set; }

    private LoginModel loginModel = new LoginModel();

    internal async void HandleLogin()
    {
        var loginHint = loginModel.Email;
        var existingUser = await _userInformationService.GetPortalUserByEmailAsync(loginHint);
        if (existingUser == null || existingUser.IsDeleted)
        {
            _navigationManager.NavigateTo($"/register?email={loginHint}");
        }
        else
        {
            if (existingUser.IsLocked)
            {
                _navigationManager.NavigateTo("/locked");
                return;
            }

            //See https://stackoverflow.com/questions/64853618/oidc-authentication-in-server-side-blazor for an alternative
            if (string.IsNullOrWhiteSpace(redirectUri))
            {
                redirectUri = _navigationManager.BaseUri;
            }

            var url = $"{_navigationManager.BaseUri}MicrosoftIdentity/Account/Challenge?redirectUri={redirectUri}&scope=user.read%20openid%20offline_access%20profile&loginHint={loginHint}&domainHint=&claims=&policy=";
            _navigationManager.NavigateTo(url, true);
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        var user = await _userInformationService.GetAuthenticatedUser(true);
        if (user.Identity?.IsAuthenticated == true)
        {
            _navigationManager.NavigateTo("/");
        }
        else if (!_portalConfiguration.ShowLoginPage)
        {
            HandleLogin();
        }
    }
    public class LoginModel
    {
        public string Email { get; set; }
    }
}