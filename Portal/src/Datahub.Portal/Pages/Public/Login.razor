@page "/login"
@page "/connexion"
@using Datahub.Application.Services.UserManagement

@inject NavigationManager _navigationManager
@inject IUserInformationService _userInformationService
@inject DatahubPortalConfiguration _portalConfiguration

<EditForm Model="@loginModel">

<PageTitle>@Localizer["Login - Federal Science DataHub"]</PageTitle>

<MudStack Class="my-16 py-16">
    <MudStack AlignItems="AlignItems.Center" Class="mt-4">
        <MudText Typo="Typo.h2" Class="text-center">@Localizer["Please login to continue"]</MudText>
            <div class="form-group">
                <label asp-for="Email">Email address</label>
                <InputText id="Email" style="border: black 1px solid; border-radius: 4px;" @bind-Value="loginModel.Email" class="form-control" />
            </div>
        <MudButton HtmlTag="a" Class="mx-auto px-16 my-4" Variant="Variant.Filled" Color="Color.Primary" OnClick="@HandleLogin">@Localizer["Login"]</MudButton>
        <MudText Typo="Typo.body1">
            @Localizer["Don't have an account?"]
            <MudLink Href="/register" Typo="Typo.body1">@Localizer["Register instead"]</MudLink>
        </MudText>
    </MudStack>
</MudStack>
</EditForm>
@code {

    [Parameter] [SupplyParameterFromQuery] public string redirectUri { get; set; }

    private LoginModel loginModel = new LoginModel();

    private void HandleLogin()
    {
        var loginHint = loginModel.Email;
        //See https://stackoverflow.com/questions/64853618/oidc-authentication-in-server-side-blazor for an alternative
        if (string.IsNullOrWhiteSpace(redirectUri))
        {
            redirectUri = _navigationManager.BaseUri;
        }

        var url = $"{_navigationManager.BaseUri}MicrosoftIdentity/Account/Challenge?redirectUri={redirectUri}&scope=user.read%20openid%20offline_access%20profile&loginHint={loginHint}&domainHint=&claims=&policy=";
        _navigationManager.NavigateTo(url, true);
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        var user = await _userInformationService.GetAuthenticatedUser(true);
        if (user.Identity?.IsAuthenticated == true)
        {
            _navigationManager.NavigateTo("/");
        }
        else if (!_portalConfiguration.ShowLoginPage)
        {
            HandleLogin();
        }
    }
    public class LoginModel
    {
        public string Email { get; set; }
    }
}