@using Datahub.Portal.Data.Forms
@using Datahub.Core.Components.Common
@using Datahub.Application.Services

@inject ILogger<Signup> _logger
@inject IDbContextFactory<DatahubProjectDBContext> _dbFactory

@inject IUserEnrollmentService _userEnrollmentService


@page "/register"

<PageTitle>DataHub | Registration</PageTitle>

<div class="signup-container">
    <AeTypography class="language-toggle">
        <LanguageToggle/>
    </AeTypography>
    <div class="info-container">
    </div>
    <div class="form-container" style="overflow-y:auto;">
        <div class="form-section">
            <AeTypography class="form-title">
                <span class="info-logo">
                    <img src="/_content/Datahub.Core/img/datahub-logo-v2.png" alt="datahub-logo"/>
                </span>
                @Localizer["Federal Science Data Hub"]
            </AeTypography>
            <div class="info-content">
                <AeTypography class="info-welcome">@Localizer["Welcome to the Government of Canada's new one-stop hub for science data solutions."]</AeTypography>
                <AeTypography class="info-hosted">@Localizer["Hosted by SSC (Proof-of-Concept Phase)"]</AeTypography>
                <AeTypography>@((MarkupString)Localizer["<b>Onboard here to escape the silos.</b> With one simple sign-on, you can:"].ToString())</AeTypography>
                <br/>
                <ul class="info-list">
                    <li class="info-bullet"><AeTypography>@((MarkupString)Localizer["Access fit-for-purpose, scalable <b>storage</b> for GC science Data"].ToString())</AeTypography></li>
                    <li class="info-bullet"><AeTypography>@((MarkupString)Localizer["Easily <b>share</b> your data with your GC colleagues"].ToString())</AeTypography></li>
                    <li class="info-bullet"><AeTypography>@((MarkupString)Localizer["Perform <b>analytics</b> and <b>collaborate</b> with your GC science partners in an interactive environment"].ToString())</AeTypography></li>
                </ul>
            </div>
            <br/>
            <br/>
            <br/>

            <AeTypography class="form-subtitle">Data Hub Registration</AeTypography>

            @if (_showThankYou)
            {
                <div class="thank-you">
                    <AeTypography class="thank-you-title">@Localizer["Thank you for registering with DataHub."]</AeTypography>
                    <AeTypography class="thank-you-subtitle">@Localizer["You will receive an email with your account details."]</AeTypography>
                    <AeTypography class="thank-you-subtitle">@Localizer["You will be redirected to the log in page."]</AeTypography>
                    <a href="/home" style="color:blue;">@Localizer["Log in"]</a>
                </div>
                <meta http-equiv="refresh" content="5; url=/home" />
            }
            else
            {
                <AeModelForm
                    Model="_basicIntakeForm"
                    OnValidSubmit="HandleValidSubmit"
                    SubmitLabel=@Localizer["REGISTER"]
                    OnConfigure="HandleConfigure"
                    LabelForPropertyFunc="HandleLocalize"
                    LabelsOnTop/>
                <AeTypography>@Localizer["already registered?"] <a href="/home" style="color:blue;">@Localizer["Log in instead"]</a></AeTypography>
            }
        </div>
    </div>
</div>

@code {

    private BasicRegistrationForm _basicIntakeForm;
    private bool _showThankYou;
    private string graphed;

    protected override void OnInitialized()
    {
        base.OnInitialized();
        _basicIntakeForm = new BasicRegistrationForm();
    }

    private async Task HandleValidSubmit()
    {
        var userId = await _userEnrollmentService.SendUserDatahubPortalInvite(_basicIntakeForm.Email);
        if (!string.IsNullOrWhiteSpace(userId))
        {
            _showThankYou = true;
        }
    }

    private static Task HandleConfigure(IModelFormContext context)
    {
        context.RegisterOptionValueProperty<BasicRegistrationForm>(f => f.DepartmentName, () => BasicRegistrationForm.DepartmentDictionary.Keys);
        context.RegisterFieldNotes<BasicRegistrationForm>(s => s.Email, "Government of Canada email address is required");
        context.RegisterFieldNotes<BasicRegistrationForm>(s => s.DepartmentName, "Government of Canada department is required");
        return Task.CompletedTask;
    }

    private string HandleLocalize(string propName)
    {
        return !string.IsNullOrEmpty(propName) ? Localizer[propName] : string.Empty;
    }

}