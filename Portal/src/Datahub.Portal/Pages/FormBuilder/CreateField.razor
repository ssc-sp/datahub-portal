@page "/w/{ProjectAcronym}/forms/{FormId}/newfield"
@inject NavigationManager NavManager
@implements IDisposable
@inject IDbContextFactory<DatahubProjectDBContext> DbFactory

@if(_formField == null)
{
    <h3>Please Wait</h3>
}
else
{
    <h3>New Form Field</h3>

    <AeModelForm
        Model="@_formField"
        SubmitLabel="Save Changes"
        OnValidSubmit="@HandleValidSubmit"
        CancelLabel="Reset"
        OnCancel="@DoCreateFormField"
    />
}

@if (_form != null)
{
    <AeButton To="@($"/w/{ProjectAcronym}/forms/{_form.WebFormID}")">Back</AeButton>
}
else
{
    <AeButton To="@($"/w/{ProjectAcronym}/forms")">Back</AeButton>
}

@code {

    [Parameter]
    public string ProjectAcronym { get; set; }

    [Parameter]
    public string FormId { get; set; }

    private DatahubProjectDBContext projectContext;
    private WebFormField _formField;
    private WebForm _form;

    protected override async Task OnInitializedAsync()
    {
        projectContext = DbFactory.CreateDbContext();
        _form = await projectContext.WebForms
            .Include(f => f.Fields)
            .Include(f => f.Project)
            .SingleOrDefaultAsync(f => f.WebFormID == int.Parse(FormId));
        
        if (_form != null)
        {
            _formField = await DoCreateFormField();
        }
        else
        {
            NavManager.NavigateTo($"/w/{ProjectAcronym}/forms");
        }
    }

    private async Task<WebFormField> DoCreateFormField()
    {
        return await Task.FromResult(new WebFormField()
        {
            WebForm = _form
        });
    }

    private async void HandleValidSubmit()
    {
        //TODO error handling, logging
        _formField.DateUpdatedDT = DateTime.UtcNow;
        var result = await projectContext.Fields.AddAsync(_formField);
        _formField = result.Entity;
        await projectContext.SaveChangesAsync();

        NavManager.NavigateTo($"/w/{ProjectAcronym}/forms/fields/{_formField.FieldID}");
    }

    public void Dispose() { projectContext.Dispose(); }
}
