@* PublishingSubmissionPage.razor *@

@* @page "/w/{ProjectAcronym}/publishing/{SubmissionIdStr}" *@
@using Datahub.Application.Services.Publishing;
@inject IUserInformationService UserService
@inject IOpenDataPublishingService PublishingService
@inject NavigationManager NavManager

@if (IsTbsSubmission)
{
    @*<MudButton OnClick=@TwiddleSubmission>Twiddle</MudButton>*@
    <TbsOpenGovPublishPage Submission=@_tbsSubmission OnSubmissionUpdated=@UpdateTbsOpenGovSubmission />
}
else if (ValidSubmissionId)
{
    <MudProgressCircular Indeterminate Size=@Size.Large />
}
else
{
    <MudText>Invalid id</MudText>
}


@code {

    [Parameter]
    public string WorkspaceAcronym { get; set; }

    [Parameter]
    public string SubSection { get; set; }

    private long? SubmissionId => long.TryParse(SubSection, out var result) ? result : default;
    private bool ValidSubmissionId => SubmissionId.HasValue;

    private OpenDataSubmission _submission;
    private TbsOpenGovSubmission _tbsSubmission => _submission as TbsOpenGovSubmission;

    private bool IsTbsSubmission => _tbsSubmission != null;



    private async Task TwiddleSubmission()
    {
        var reset = false;
        if (reset) await LoadSubmission();
        await InvokeAsync(StateHasChanged);
    }

    private async Task UpdateTbsOpenGovSubmission()
    {
        _submission = await PublishingService.UpdateTbsOpenGovSubmission(_tbsSubmission);
        await InvokeAsync(StateHasChanged);
    }

    private async Task LoadSubmission()
    {
        if (!ValidSubmissionId) return;

        _submission = null;
        await InvokeAsync(StateHasChanged);

        try
        {
            _submission = await PublishingService.GetOpenDataSubmissionAsync(SubmissionId.Value);
        }
        catch (OpenDataPublishingException e)
        {
            if (e?.InnerException is FileNotFoundException)
            {
                //TODO log
            }

            NavManager.NavigateTo($"/w/{WorkspaceAcronym}/publishing");
        }

        await InvokeAsync(StateHasChanged);
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadSubmission();

        await base.OnInitializedAsync();
    }
}
