@* PublishingSubmissionPage.razor *@

@using Datahub.Application.Services.Publishing;
@using Datahub.Application.Services.Security;
@inject IUserInformationService UserService
@inject IOpenDataPublishingService PublishingService
@inject NavigationManager NavManager
@inject IKeyVaultUserService _kvService;
@inject Microsoft.Identity.Web.MicrosoftIdentityConsentAndConditionalAccessHandler _consentHandler

@implements IDisposable

@if (IsTbsSubmission)
{
    <TbsOpenGovPublishPage Submission=@_tbsSubmission OnSubmissionUpdated=@UpdateTbsOpenGovSubmission WorkspaceAcronym=@WorkspaceAcronym />
}
else if (ValidSubmissionId)
{
    <MudProgressCircular Indeterminate Size=@Size.Large />
}
else
{
    <MudText>Invalid id</MudText>
}


@code {

    [Parameter]
    public string WorkspaceAcronym { get; set; }

    [Parameter]
    public string SubSection { get; set; }

    private System.Threading.Timer _fileStatusTimer;

    private long? SubmissionId => long.TryParse(SubSection, out var result) ? result : default;
    private bool ValidSubmissionId => SubmissionId.HasValue;

    private OpenDataSubmission _submission;
    private TbsOpenGovSubmission _tbsSubmission => _submission as TbsOpenGovSubmission;

    private bool IsTbsSubmission => _tbsSubmission != null;


    private async Task UpdateTbsOpenGovSubmission()
    {
        _submission = await PublishingService.UpdateTbsOpenGovSubmission(_tbsSubmission);
        await InvokeAsync(StateHasChanged);
    }

    private async Task LoadSubmission()
    {
        if (!ValidSubmissionId) return;

        _submission = null;
        await InvokeAsync(StateHasChanged);

        try
        {
            _submission = await PublishingService.GetOpenDataSubmissionAsync(SubmissionId.Value);
        }
        catch (OpenDataPublishingException e)
        {
            if (e?.InnerException is FileNotFoundException)
            {
                //TODO log
            }

            NavManager.NavigateTo($"/w/{WorkspaceAcronym}/publishing");
        }

        await InvokeAsync(StateHasChanged);
    }

    protected override async Task OnInitializedAsync()
    {
        try 
        {
            await _kvService.Authenticate();
        }
        catch (Microsoft.Identity.Web.MicrosoftIdentityWebChallengeUserException e)
        {
            _consentHandler.HandleException(e);
        }
        
        await LoadSubmission();

        _fileStatusTimer = new System.Threading.Timer(async (object? stateInfo) =>
        {
            var numRefreshed = await PublishingService.RefreshFileUploadStatuses(_submission);
            if (numRefreshed > 0)
            {
                await InvokeAsync(StateHasChanged);
            }
        }, new System.Threading.AutoResetEvent(false), 2000, 2000);

        await base.OnInitializedAsync();
    }

    public void Dispose()
    {
        if (_fileStatusTimer != null)
        {
            _fileStatusTimer.Dispose();
        }
    }
}
