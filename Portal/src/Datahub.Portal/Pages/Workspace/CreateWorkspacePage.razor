@using Datahub.Application.Services
@using Datahub.Portal.Components.Forms
@inject IProjectCreationService _projectCreationService
@inject NavigationManager _navigationManager
@inject DatahubPortalConfiguration _portalConfiguration

@attribute [Route(PageRoutes.CreateWorkspace)]
@attribute [Route(PageRoutes.CreateWorkspace_FR)]

<PageTitle>@Localizer["Create a Workspace - Federal Science DataHub"]</PageTitle>

<DatahubAuthView AuthLevel="DatahubAuthView.AuthLevels.Authenticated">
    <DHForm>
        <DHInput Type="text" Required="true" Label="@Localizer["Workspace title"]" Description="@Localizer["Display title for your workspace."]" Hint="@Localizer["Cannot be changed in the future."]" Placeholder="@Localizer["My new workspace"]"/>
        <DHInput Type="text" Required="true" Label="@Localizer["Workspace acronym"]" Description="@Localizer["A unique alphanumeric acronym to identify the workspace. Click the generate button to generate an acronym based on the title."]" Hint="@Localizer["Cannot be changed in the future"]" Placeholder="" EndButton="@Localizer["Generate"]"/>
        <DHInput Type="select-multiple" Required="false" Label="@Localizer["Which features are of interest to you? (optional)"]" Description="@Localizer["Select all that apply."]" Hint="">
            <option value="Storage">@Localizer["Storage"]</option>
            <option value="Analytics">@Localizer["Analytics"]</option>
            <option value="Collaboration">@Localizer["Collaboration"]</option>
            <option value="Other">@Localizer["Other"]</option>
        </DHInput>
        <MudStack Row>
            <DHButton HtmlTag="button" type="button" Color="Color.Error" Size="Size.Large" Variant="Variant.Outlined">@Localizer["Cancel"]</DHButton>
            <DHButton HtmlTag="button" type="button" Color="Color.Dark" Size="Size.Large" Variant="Variant.Outlined">@Localizer["Reset"]</DHButton>
            <DHButton HtmlTag="button" type="submit" Color="Color.Primary" Size="Size.Large" Variant="Variant.Filled">@Localizer["Submit"]</DHButton>
        </MudStack>
    </DHForm>
</DatahubAuthView>

@code {
    public bool ShowCancel { get; set; } = true;

#nullable enable
    private const int MaxAcronymLength = 7;
    private string? _errorMessage;
    private string _projectTitle = string.Empty;
    private string _projectAcronym = string.Empty;
    private string _interestedFeatures = string.Empty;
    private MudTextField<string>? _acronymField;

    private bool _success;
    private bool _isCreating;

    private bool _githubIntegration;
    private bool _createRepository;

    private async Task GenerateAcronym()
    {
        if (string.IsNullOrWhiteSpace(_projectTitle))
        {
            _errorMessage = Localizer["Workspace Title is required to generate an acronym"];
            return;
        }

        _projectAcronym = await _projectCreationService.GenerateProjectAcronymAsync(_projectTitle);
        _success = true;
        _acronymField?.ResetValidation();
    }

    private void CloseAlert()
    {
        _errorMessage = null;
    }

    private async Task<string?> ValidateAcronym(string acronym)
    {
        if (await _projectCreationService.AcronymExists(acronym))
            return Localizer["Workspace Acronym already exists"];

        // check it is alphanumeric
        if (!acronym.All(char.IsLetterOrDigit))
            return Localizer["Acronym must be alphanumeric"];

        return (acronym.Length > MaxAcronymLength ? Localizer["Acronym must be {0} characters or less", MaxAcronymLength] : null)!;
    }

    private readonly Converter<string> _converter = new()
    {
        SetFunc = value => value?.ToUpperInvariant() ?? string.Empty,
        GetFunc = text => text?.ToUpperInvariant() ?? string.Empty,
    };

    private async Task UpdateProjectAcronym()
    {
        if (string.IsNullOrWhiteSpace(_projectTitle)) return;
        _projectAcronym = await _projectCreationService.GenerateProjectAcronymAsync(_projectTitle);
    }

    private async Task CreateProject()
    {
        _success = string.IsNullOrWhiteSpace(await ValidateAcronym(_projectAcronym)); // Force validation - users can avoid otherwise by clicking the button while the field is selected.

        if (_success)
        {
            if (_isCreating)
                return;
            _isCreating = true;
            //update Button
            StateHasChanged();
            await Task.Delay(1);
            // TODO: Get Organization name?

            var isAdded = await _projectCreationService.CreateProjectAsync(_projectTitle, _projectAcronym, "Unspecified");
            _isCreating = false;
            if (isAdded)
            {
                await _projectCreationService.SaveProjectCreationDetailsAsync(_projectAcronym, _interestedFeatures);
                //MudDialog.Close(DialogResult.Ok(_projectAcronym));
                _navigationManager.NavigateTo(PageRoutes.Home);
            }
            else
            {
                _errorMessage = Localizer["An error occurred while creating the workspace"];
                StateHasChanged();
            }
        }
    }

    private void HandleIntegrateWithGit()
    {
        _githubIntegration = true;
    }

    private void ToggleCreateRepo(bool value)
    {
        _createRepository = value;
    }


#nullable disable
}