@using System.ComponentModel.DataAnnotations
@using Datahub.Application.Services
@using Datahub.Portal.Components.Forms
@inject IProjectCreationService _projectCreationService
@inject NavigationManager _navigationManager
@inject ILogger<CreateWorkspacePage> _logger
@implements IDisposable

@attribute [Route(PageRoutes.CreateWorkspace)]
@attribute [Route(PageRoutes.CreateWorkspace_FR)]

<PageTitle>@Localizer["Create a Workspace - Federal Science DataHub"]</PageTitle>

<DatahubAuthView AuthLevel="DatahubAuthView.AuthLevels.Authenticated">
    <DHFormContainer>
        <EditForm EditContext="_editContext" FormName="WorkspaceCreation">
            <DHMainContentTitle Title="@Localizer["Create a new workspace"]"/>
            <DataAnnotationsValidator/>
            <ValidationSummary/>
            <DHFormField Required For="@Model.WorkspaceTitle" Id="@workspaceTitleId" Title="@Localizer["Workspace title"]" Description="@Localizer["Display title for your new workspace."]">
                <DHInput Type="DHInputType.Text">
                    <InputText id="@workspaceTitleId" class="form-control" aria-describedby="@(workspaceTitleId+"-help")" @bind-Value="@Model.WorkspaceTitle" DisplayName="@Localizer["Workspace title"]"/>
                </DHInput>
            </DHFormField>
            <DHFormField Required For="@Model.WorkspaceAcronym" Id="@workspaceAcronymId" Title="@Localizer["Workspace acronym"]" Description="@Localizer["A unique alphanumeric acronym to identify the workspace. Click the generate button to generate an acronym based on the title"]">
                <DHInput Type="DHInputType.TextButton" EndButton="@Localizer["Generate"]" EndButtonAction="() => GenerateAcronym()">
                    <InputText @bind-Value="@Model.WorkspaceAcronym" class="form-control" aria-describedby="@(workspaceAcronymId+"-help")" DisplayName="@Localizer["Workspace acronym"]"/>
                </DHInput>
            </DHFormField>
            <DHFormField Id="@interestedFeatureId" Title="@Localizer["Which feature is of most interest to you?"]">
                <DHInput Type="DHInputType.Select">
                    <InputSelect @bind-Value="@Model.InterestedFeature" class="form-control" aria-describedby="@(interestedFeatureId+"-help")" DisplayName="@Localizer["Interested feature"]">
                        <option>@Localizer["Storage"]</option>
                        <option>@Localizer["Analytics"]</option>
                        <option>@Localizer["Collaboration"]</option>
                        <option>@Localizer["Other"]</option>
                    </InputSelect>
                </DHInput>
            </DHFormField>
            <MudStack Row>
                <button type="button" class="btn btn-default" @onclick="@ClearForm">
                    @Localizer["Reset"]
                </button>
                <button type="submit" class="btn btn-primary">
                    @Localizer["Submit"]
                </button>
            </MudStack>
        </EditForm>
    </DHFormContainer>
</DatahubAuthView>

@code {
    public bool ShowCancel { get; set; } = true;

    [SupplyParameterFromForm] private CreateWorkspaceModel? Model { get; set; }
    private EditContext? _editContext;
    private ValidationMessageStore _messageStore;
    private string workspaceTitleId = "workspace-title";
    private string workspaceAcronymId = "workspace-acronym";
    private string interestedFeatureId = "interested-feature";

    private void Submit()
    {
        _logger.LogInformation("Submitting form");
    }

    private void ClearForm()
    {
        Model = new CreateWorkspaceModel();
    }

#nullable enable
    private const int MaxAcronymLength = 7;
    private string? _errorMessage;
    private string _projectTitle = string.Empty;
    private string _projectAcronym = string.Empty;
    private string _interestedFeatures = string.Empty;
    private MudTextField<string>? _acronymField;

    private bool _success;
    private bool _isCreating;

    private bool _githubIntegration;
    private bool _createRepository;

    protected override void OnInitialized()
    {
        Model ??= new CreateWorkspaceModel();
        _editContext = new EditContext(Model);
        _editContext.OnValidationRequested += HandleValidationRequested;
        _messageStore = new ValidationMessageStore(_editContext);
    }

    private void HandleValidationRequested(object? sender, ValidationRequestedEventArgs e)
    {
        _messageStore.Clear();
        _editContext.Validate();
    }

    private async Task GenerateAcronym()
    {
        Model!.WorkspaceAcronym = await _projectCreationService.GenerateProjectAcronymAsync(Model.WorkspaceTitle);
    }

    private void CloseAlert()
    {
        _errorMessage = null;
    }

    private async Task<string?> ValidateAcronym(string acronym)
    {
        if (await _projectCreationService.AcronymExists(acronym))
            return Localizer["Workspace Acronym already exists"];

        // check it is alphanumeric
        if (!acronym.All(char.IsLetterOrDigit))
            return Localizer["Acronym must be alphanumeric"];

        return (acronym.Length > MaxAcronymLength ? Localizer["Acronym must be {0} characters or less", MaxAcronymLength] : null)!;
    }

    private readonly Converter<string> _converter = new()
    {
        SetFunc = value => value?.ToUpperInvariant() ?? string.Empty,
        GetFunc = text => text?.ToUpperInvariant() ?? string.Empty,
    };

    private async Task UpdateProjectAcronym()
    {
        if (string.IsNullOrWhiteSpace(_projectTitle)) return;
        _projectAcronym = await _projectCreationService.GenerateProjectAcronymAsync(_projectTitle);
    }

    private async Task CreateProject()
    {
        _success = string.IsNullOrWhiteSpace(await ValidateAcronym(_projectAcronym)); // Force validation - users can avoid otherwise by clicking the button while the field is selected.

        if (_success)
        {
            if (_isCreating)
                return;
            _isCreating = true;
            //update Button
            StateHasChanged();
            await Task.Delay(1);
            // TODO: Get Organization name?

            var isAdded = await _projectCreationService.CreateProjectAsync(_projectTitle, _projectAcronym, "Unspecified");
            _isCreating = false;
            if (isAdded)
            {
                await _projectCreationService.SaveProjectCreationDetailsAsync(_projectAcronym, _interestedFeatures);
                //MudDialog.Close(DialogResult.Ok(_projectAcronym));
                _navigationManager.NavigateTo(PageRoutes.Home);
            }
            else
            {
                _errorMessage = Localizer["An error occurred while creating the workspace"];
                StateHasChanged();
            }
        }
    }

    private void HandleIntegrateWithGit()
    {
        _githubIntegration = true;
    }

    private void ToggleCreateRepo(bool value)
    {
        _createRepository = value;
    }

    public class CreateWorkspaceModel
    {
        [Required] public string WorkspaceTitle { get; set; }

        [Required]
        [MaxLength(4)]
        [MinLength(3)]
        [EmailAddress]
        [DataType(DataType.EmailAddress)]
        public string WorkspaceAcronym { get; set; }

        public string? InterestedFeature { get; set; }
    }


#nullable disable
    public void Dispose()
    {
        ((IDisposable)_acronymField)?.Dispose();
    }

}