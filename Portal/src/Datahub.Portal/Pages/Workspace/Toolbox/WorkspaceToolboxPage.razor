@using Datahub.Application.Services.UserManagement
@using Datahub.Shared.Entities
@using Datahub.Core.Model.Projects
@using Datahub.Core.Services.Projects

@inject IDbContextFactory<DatahubProjectDBContext> _contextFactory
@inject IRequestManagementService _requestManagementService
@inject IUserInformationService _userInformationService
@inject ILogger<WorkspaceToolboxPage> _logger
@inject ISnackbar _snackbar

<MudStack>
    <MudText Typo="Typo.h2">
        @Localizer["Toolbox Catalogue"]
    </MudText>
    <MudText>
        @Localizer["The Toolbox Catalogue is a collection of tools that can be added to your workspace. You can add tools to your workspace by clicking on the 'Add to Workspace' button."]
    </MudText>

    <MudDivider Class="my-6"/>
    <MudAlert Severity="Severity.Info" Variant="Variant.Outlined" Style="color: #000;" Class="mb-6">
        @Localizer["The \"Add to Workspace\" button will show the state your tool request after being clicked."]
    </MudAlert>

    @if (_metadataRequired)
    {
        <MudAlert Severity="Severity.Warning" Variant="Variant.Outlined" Style="color: #000;" Class="mb-6">
            @Localizer["The workspace metadata is currently incomplete. No resources can be provisioned until the project metadata has been filled"].
            <MudLink Href="@_metadataUrl">
                @Localizer["Click here to edit the metadata."]
            </MudLink>
        </MudAlert>
    }

    <MudGrid>
        @foreach (var tool in _toolList)
        {
            <MudItem xs="12" sm="6" md="4">
                <MudPaper Outlined Class="pt-4 px-6 pb-6">
                    <MudStack Style="height: 280px;">
                        <MudStack Row AlignItems="AlignItems.Center">
                            <MudIcon aria-hidden="true" focusable="false" Icon="@GetIcon(tool)" Class="mr-2"/>
                            <MudText Typo="Typo.h3">
                                @GetLabel(tool)
                            </MudText>
                        </MudStack>
                        <MudText>
                            @GetDescription(tool)
                        </MudText>
                        <MudSpacer/>
                        <MudStack Row>
                            @switch (_toolCurrentDevelopmentStatusMap[tool])
                            {
                                case ToolStatus.Available:
                                    <MudButton Variant="@Variant.Filled" Color="@Color.Primary" OnClick="@(async () => await AddToolToWorkspace(tool))">
                                        @Localizer["Add to Workspace"]
                                        <MudIcon aria-hidden="true" focusable="false" Icon="fa-light fa-layer-plus" Class="ml-2" Style="font-size: 0.8rem;"/>
                                    </MudButton>
                                    break;
                                case ToolStatus.SendingRequest:
                                    <SpinnerButton Variant="@Variant.Filled">
                                        @Localizer["Sending Request..."]
                                    </SpinnerButton>
                                    break;
                                case ToolStatus.PendingRequest:
                                    <ToolBeingProvisionedButton Variant="@Variant.Filled"/>
                                    break;
                                case ToolStatus.Exists:
                                    <MudButton Variant="@Variant.Filled" Color="@Color.Primary" Disabled>
                                        @Localizer["Tool has been created"]
                                        <MudIcon aria-hidden="true" focusable="false" Icon="fa-light fa-check-to-slot" Class="ml-2" Style="font-size: 0.8rem;"/>
                                    </MudButton>
                                    break;
                                case ToolStatus.Disabled:
                                    <MudButton Variant="@Variant.Filled" Color="@Color.Primary" Disabled>
                                        @Localizer["Not Enabled"]
                                        <MudIcon aria-hidden="true" focusable="false" Icon="fa-light fa-layer-plus" Class="ml-2" Style="font-size: 0.8rem;"/>
                                    </MudButton>
                                    break;
                                case ToolStatus.UnderDevelopment:
                                    <MudButton Variant="@Variant.Filled" Color="@Color.Primary" Disabled>
                                        @Localizer["Under Development"]
                                        <MudIcon aria-hidden="true" focusable="false" Icon="fa-light fa-space-station-moon-construction" Class="ml-2" Style="font-size: 0.8rem;"/>
                                    </MudButton>
                                    break;
                                case ToolStatus.MetadataRequired:
                                    <MudButton Variant="@Variant.Filled" Color="@Color.Primary" Disabled>
                                        @Localizer["Metadata Required"]
                                        <MudIcon aria-hidden="true" focusable="false" Icon="@SidebarIcons.Metadata" Class="ml-2" Style="font-size: 0.8rem;"/>
                                    </MudButton>
                                    break;
                                default:
                                    <MudButton Variant="@Variant.Filled" Color="@Color.Primary" Disabled>
                                        @Localizer["Unknown"]
                                        <MudIcon aria-hidden="true" focusable="false" Icon="fa-light fa-layer-plus" Class="ml-2" Style="font-size: 0.8rem;"/>
                                    </MudButton>
                                    break;
                            }
                        </MudStack>
                    </MudStack>
                </MudPaper>
            </MudItem>
        }
    </MudGrid>
</MudStack>

@code {

    [Parameter] public string WorkspaceAcronym { get; set; }

    private Datahub_Project _workspace;

    private readonly List<string> _toolList =
    [
        TerraformTemplate.AzureDatabricks,
        TerraformTemplate.AzureStorageBlob,
        TerraformTemplate.AzureAppService,
        TerraformTemplate.AzurePostgres,
        TerraformTemplate.AzureArcGis,
        TerraformTemplate.AzureAPI
    ];

    private enum ToolStatus
    {
        Available,
        SendingRequest,
        PendingRequest,
        Disabled,
        UnderDevelopment,
        Exists,
        MetadataRequired,
        Error
    }

    private readonly Dictionary<string, ToolStatus> _toolCurrentDevelopmentStatusMap = new()
    {
        { TerraformTemplate.AzureDatabricks, ToolStatus.Available },
        { TerraformTemplate.AzureStorageBlob, ToolStatus.Available },
        { TerraformTemplate.AzureAppService, ToolStatus.Available },
        { TerraformTemplate.AzurePostgres, ToolStatus.Available },
        { TerraformTemplate.AzureArcGis, ToolStatus.UnderDevelopment },
        { TerraformTemplate.AzureAPI, ToolStatus.UnderDevelopment }
    };

    private bool _metadataRequired = true;
    private string _metadataUrl => $"{PageRoutes.WorkspacePrefix}/{WorkspaceAcronym}/{WorkspaceSidebar.SectionViews.Metadata}";

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        await using var context = await _contextFactory.CreateDbContextAsync();
        _workspace = await context.Projects
            .AsNoTracking()
            .Include(w => w.Resources)
            .FirstOrDefaultAsync(w => w.Project_Acronym_CD == WorkspaceAcronym);

        _metadataRequired = _workspace?.MetadataAdded != true;
        if (_metadataRequired)
        {
            foreach (var (tool, _) in _toolCurrentDevelopmentStatusMap)
            {
                _toolCurrentDevelopmentStatusMap[tool] = ToolStatus.MetadataRequired;
            }
        }
        else
        {
            // loop through the tools and check if they exist
            foreach (var tool in _toolList)
            {
                _toolCurrentDevelopmentStatusMap[tool] = GetToolStatus(tool);
            }
        }
    }

    private ToolStatus GetToolStatus(string tool)
    {
        if (_toolCurrentDevelopmentStatusMap[tool] != ToolStatus.Available)
        {
            return _toolCurrentDevelopmentStatusMap[tool];
        }

        var toolResource = _workspace.Resources.FirstOrDefault(r => r.ResourceType.EndsWith(tool));
        if (toolResource == null)
        {
            return ToolStatus.Available;
        }

        if (toolResource.CreatedAt == null)
        {
            return ToolStatus.PendingRequest;
        }

        if (toolResource.CreatedAt < DateTime.UtcNow)
        {
            return ToolStatus.Exists;
        }

        return ToolStatus.Error;
    }

    private async Task AddToolToWorkspace(string tool)
    {
        _logger.LogInformation("Adding tool {Tool} to workspace {WorkspaceAcronym}", tool, WorkspaceAcronym);
        _toolCurrentDevelopmentStatusMap[tool] = ToolStatus.SendingRequest;
        await InvokeAsync(StateHasChanged);

        try
        {
            var currentUser = await _userInformationService.GetCurrentPortalUserAsync();
            await _requestManagementService.HandleTerraformRequestServiceAsync(_workspace, tool, currentUser);
            _logger.LogInformation("Tool {Tool} successfully added to workspace {WorkspaceAcronym}", tool, WorkspaceAcronym);
            _toolCurrentDevelopmentStatusMap[tool] = ToolStatus.PendingRequest;
            _snackbar.Add(Localizer["{0} successfully added to your workspace", GetLabel(tool)], Severity.Success);
            await InvokeAsync(StateHasChanged);
        }
        catch (Exception e)
        {
            _logger.LogError(e, "Error adding tool {Tool} to workspace {WorkspaceAcronym}", tool, WorkspaceAcronym);
            _toolCurrentDevelopmentStatusMap[tool] = ToolStatus.Error;
            _snackbar.Add(Localizer["Error adding {0} to your workspace", GetLabel(tool)], Severity.Error);
        }
    }

    private string GetLabel(string tool)
    {
        return tool switch
        {
            TerraformTemplate.AzureDatabricks => Localizer["Azure Databricks"],
            TerraformTemplate.AzureStorageBlob => Localizer["Azure Storage Blob"],
            TerraformTemplate.AzureAppService => Localizer["Azure App Service"],
            TerraformTemplate.AzurePostgres => Localizer["Azure Postgres"],
            TerraformTemplate.AzureArcGis => Localizer["Azure ArcGIS"],
            TerraformTemplate.AzureAPI => Localizer["Azure API Management"],
            _ => tool
        };
    }

    private string GetDescription(string tool)
    {
        return tool switch
        {
            TerraformTemplate.AzureDatabricks => Localizer["Azure Databricks is a fast, easy, and collaborative Apache Spark-based analytics platform. Accelerate big data analytics and artificial intelligence (AI) solutions with Azure Databricks, a fast, easy and collaborative Apache Spark-based analytics service."],
            TerraformTemplate.AzureStorageBlob => Localizer["Azure Blob storage is Microsoft's object storage solution for the cloud. Blob storage is optimized for storing massive amounts of unstructured data, such as text or binary data."],
            TerraformTemplate.AzureAppService => Localizer["Azure App Service is a fully managed web hosting service for building web apps, mobile back ends, and RESTful APIs. It offers auto-scaling and high availability, supports both Windows and Linux, and enables automated deployments from GitHub, Azure DevOps, or any Git repo."],
            TerraformTemplate.AzurePostgres => Localizer["Azure Database for PostgreSQL is a relational database service based on the open-source Postgres database engine. It's a fully managed database-as-a-service offering that can handle mission-critical workloads with predictable performance, security, high availability, and dynamic scalability."],
            TerraformTemplate.AzureArcGis => Localizer["ArcGIS is a geographic information system (GIS) for working with maps and geographic information. It is used for creating and using maps, compiling geographic data, analyzing mapped information, sharing and discovering geographic information, using maps and geographic information in a range of applications, and managing geographic information in a database."],
            TerraformTemplate.AzureAPI => Localizer["Azure API Management is a fully managed service that enables participants to publish, secure, transform, maintain, and monitor APIs. To use API Management, you must first create an Azure App Service."],
            _ => tool
        };
    }

    private string GetIcon(string tool)
    {
        return tool switch
        {
            TerraformTemplate.AzureDatabricks => SidebarIcons.Databricks,
            TerraformTemplate.AzureStorageBlob => SidebarIcons.Storage,
            TerraformTemplate.AzureAppService => SidebarIcons.WebApp,
            TerraformTemplate.AzurePostgres => SidebarIcons.SqlDatabase,
            TerraformTemplate.AzureArcGis => SidebarIcons.ArcGis,
            TerraformTemplate.AzureAPI => SidebarIcons.Api,
            _ => SidebarIcons.Default
        };
    }

}