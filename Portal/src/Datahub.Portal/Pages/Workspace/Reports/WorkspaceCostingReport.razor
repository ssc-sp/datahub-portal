@*ProjectCosting.razor*@

@* @page "/w/{ProjectAcronym}/costs" *@

@using Datahub.Core.Data.CostEstimators
@using Datahub.Infrastructure.Services.Azure;
@using System.Text.Json;
@using Datahub.Application.Services
@using Datahub.Core.Model.Projects
@using Color = MudBlazor.Color
@using Size = MudBlazor.Size
@using Align = MudBlazor.Align
@using Datahub.Application.Services.Cost
@using ApexCharts
@using Datahub.Portal.Pages.Workspace.Reports.Charts

@inject IDbContextFactory<DatahubProjectDBContext> _dbContextFactory
@inject IAzurePriceListService _azurePriceListService
@inject NavigationManager _navigationManager
@inject IWorkspaceCostManagementService _costMgmt
@inject ISnackbar _snackbar
@inject ILogger<WorkspaceCostingReport> _logger

@if (_loading)
{
    <DHLoadingInitializer/>
    return;
}

@if (!AreCreditsValid())
{
    <MudStack>
        <MudText Typo="Typo.h2">@Localizer["Cost Analysis"]</MudText>
        <MudText Typo="Typo.body1">@Localizer["No cost data available, please check back later"]</MudText>
    </MudStack>
    return;
}

<MudStack>
    <CascadingValue Value="@Locales">
        @if (_currentPerService?.Count > 0)
        {
            <MudStack Row>
                <MudText Typo="Typo.h2">@Localizer["Cost Analysis"]</MudText>
                <DatahubAuthView ProjectAcronym="@WorkspaceAcronym" AuthLevel="DatahubAuthView.AuthLevels.WorkspaceAdmin">
                    <MudSpacer/>
                    <DHButton StartIcon="@(_refreshing ? "" : SidebarIcons.Restart)" Variant="Variant.Outlined" Color="Color.Dark" OnClick="HandleRefresh">
                        @if (_refreshing)
                        {
                            <MudProgressCircular Indeterminate="true" Size="Size.Small"/>
                        }
                        else
                        {
                            @Localizer["Refresh"]
                        }
                    </DHButton>
                </DatahubAuthView>
            </MudStack>

            @if (_lastUpdateValid)
            {
                <MudText Style="font-style: italic">
                    @Localizer["Last updated {0} {1}", $"{ConvertToLocalTime(_projectCredits.LastUpdate!.Value):yyyy-MM-dd HH:mm}", TimeZone.CurrentTimeZone.StandardName]
                </MudText>
            }

            @if (!_validData)
            {
                <MudAlert Variant="Variant.Outlined" Severity="Severity.Warning" Style="color: #000">
                    @Localizer["Costing data has not been updated in the last 7 days, please check back later for updated costs."]
                </MudAlert>
            }

            @if (_refreshing)
            {
                <MudGrid Justify="Justify.FlexStart" Spacing="10" Class="pt-2">
                    <MudItem xs="12">
                        <MudText Typo="Typo.h6" Align="Align.Center">@Localizer["Refreshing your data. This may take some time..."]</MudText>
                    </MudItem>
                    <MudItem xs="6">
                        <MudStack>
                            <MudSkeleton Height="30px" Width="100px" SkeletonType="SkeletonType.Text"/>
                            <MudSkeleton Height="310px" SkeletonType="SkeletonType.Rectangle"/>
                        </MudStack>
                    </MudItem>
                    <MudItem xs="6">
                        <MudStack>
                            <MudSkeleton Height="30px" Width="80px" SkeletonType="SkeletonType.Text"/>
                            <MudSkeleton Height="310px" SkeletonType="SkeletonType.Rectangle"/>
                        </MudStack>
                    </MudItem>
                    <MudItem xs="12">
                        <MudStack>
                            <MudSkeleton Height="30px" Width="200px" SkeletonType="SkeletonType.Text"/>
                            <MudSkeleton Height="310px" SkeletonType="SkeletonType.Rectangle"/>
                        </MudStack>
                    </MudItem>
                </MudGrid>
                return;
            }

            <MudStack Row>
                <MudChip Label="true"
                         Icon="@Icons.Material.Filled.AttachMoney"
                         Color="@MonthChipColor"
                         Variant="@Variant.Text"
                         OnClick="@HandleShowMonth" T="string">
                    @($"{CurrentCost:C} {Localizer["Total"]}")
                </MudChip>
                <MudChip Label="true"
                         Icon="@Icons.Material.Filled.AttachMoney"
                         Color="@YesterdayChipColor"
                         Variant="@Variant.Text"
                         OnClick="@HandleShowYesterday" T="string">
                    @($"{YesterdayCost:C} {Localizer["Yesterday"]}")
                </MudChip>
            </MudStack>
            <MudStack Row>
                <MudStack Style="height: 100%; width: 100%">
                    @if (_showingTotal)
                    {
                        <ServiceCostsDonut ServiceCosts="@_currentPerService" Title="@Localizer["Total costs"]"/>
                    }
                    else
                    {
                        <ServiceCostsDonut ServiceCosts="@_yesterdayPerService" Title="@Localizer["Yesterday costs"]"/>
                    }
                </MudStack>
                @if (_projectCosts.Count > 0)
                {
                    <MudStack Style="width: 100%; height: 100%">
                        <DailyCostsStackBar DailyCosts="@_last30DaysCosts" Title="@Localizer["Daily costs (last 30 days)"]"/>
                    </MudStack>
                }
            </MudStack>
        }
        @if (_projectCosts.Count > 0)
        {
            <MudStack Row>
                <MudChip Label="true"
                         Icon="@Icons.Material.Filled.AttachMoney"
                         Color="@AccumulatedChipColor"
                         Variant="@Variant.Text"
                         OnClick="@HandleShowAccumulated" T="string">
                    @(Localizer["Accumulated"])
                </MudChip>
                <MudChip Label="true"
                         Icon="@Icons.Material.Filled.CalendarMonth"
                         Color="@MonthlyChipColor"
                         Variant="@Variant.Text"
                         OnClick="@HandleShowMonthly" T="string">
                    @(Localizer["Monthly"])
                </MudChip>
            </MudStack>
            <MudStack Row Class="mb-6">
                <MudStack Style="width: 100%; height: 400px">
                    @if (_showingAccumulated)
                    {
                        <AccumulatedCostsArea Title="@Localizer["Accumulated costs"]" Costs="@_fiscalYearCosts"/>
                    }
                    else
                    {
                        <MonthlyCostsStackBar Title="@Localizer["Monthly costs"]" Costs="@_fiscalYearCosts"/>
                    }
                </MudStack>
            </MudStack>
            <WorkspaceCostsTable WorkspaceAcronym="@WorkspaceAcronym"/>
        }
        @if (_remainingBudget > 0 && _spendingEstimation != null)
        {
            <MudStack>
                <MudText Typo="Typo.h3">@Localizer["Cost estimations"]</MudText>
                <MudStack>
                    <MudText>
                        <b>@Localizer["Project_Remaining_Credit_label"]</b> @(string.Format(Localizer["Project_Remaining_Credit_text"], _remainingBudget, _projectBudget))
                    </MudText>

                    <MudText >
                        <b>@Localizer["Storage Equivalent:"]</b> @(string.Format(Localizer["Project_Remaining_Credit_Storage"], _remainingBudget, _storageEquivalentFormatted))
                    </MudText>

                    <MudStack Row>
                        <MudStack>
                            <MudText>
                                <b>@Localizer["Compute Equivalent:"]</b> @(string.Format(Localizer["Project_Remaining_Credit_Compute"], _remainingBudget))
                            </MudText>
                        </MudStack>
                        <MudStack>
                            <MudText>
                                @(string.Format(Localizer["Project_Remaining_Credit_Compute_Small"], _spendingEstimation.ComputeSmall))
                            </MudText>
                            <MudText>
                                @(string.Format(Localizer["Project_Remaining_Credit_Compute_Medium"], _spendingEstimation.ComputeMedium))
                            </MudText>
                            <MudText>
                                @(string.Format(Localizer["Project_Remaining_Credit_Compute_Large"], _spendingEstimation.ComputeLarge))
                            </MudText>
                        </MudStack>
                    </MudStack>
                </MudStack>
            </MudStack>
        }
    </CascadingValue>
</MudStack>

@code {

    [Parameter] public string WorkspaceAcronym { get; set; }
    [CascadingParameter] public List<ChartLocale> Locales { get; set; }

    // Project data
    public decimal _projectBudget { get; set; }
    private Project_Credits _projectCredits { get; set; }
    private List<Datahub_Project_Costs> _projectCosts { get; set; } = new();

    // Cost data
    private List<DailyServiceCost> _allCosts { get; set; } = new();
    private List<DailyServiceCost> _fiscalYearCosts { get; set; } = new();
    private List<DailyServiceCost> _last30DaysCosts { get; set; } = new();
    private List<DailyServiceCost> _currentPerDay { get; set; } = new();
    private List<DailyServiceCost> _currentPerService { get; set; } = new();
    private List<DailyServiceCost> _yesterdayPerService { get; set; } = new();

    // UI state
    private bool _showingTotal = true;
    private bool _showingAccumulated = true;
    private bool _lastUpdateValid => _projectCredits is not null && _projectCredits.LastUpdate is not null;
    private bool _validData => _lastUpdateValid && _projectCredits.LastUpdate >= DateTime.UtcNow.AddDays(-7);
    private bool _loading = true;
    private bool _refreshing = false;

    // Chip labels
    private string SelectedTotalLabel => _showingTotal ? Localizer["Total"] : Localizer["Yesterday"];
    private decimal SelectedTotalCost => _showingTotal ? CurrentCost : YesterdayCost;
    private decimal CurrentCost => Convert.ToDecimal(_projectCredits.Current);
    private decimal YesterdayCost => Convert.ToDecimal(_projectCredits.YesterdayCredits);

    // Chip colors
    private Color MonthChipColor => _showingTotal ? Color.Primary : Color.Default;
    private Color YesterdayChipColor => _showingTotal ? Color.Default : Color.Primary;
    private Color AccumulatedChipColor => _showingAccumulated ? Color.Primary : Color.Default;
    private Color MonthlyChipColor => _showingAccumulated ? Color.Default : Color.Primary;

    // Misc
    private decimal _remainingBudget;
    private SpendingEstimation _spendingEstimation;
    private string _storageEquivalentFormatted;

    
    


    protected override async Task OnInitializedAsync()
    {
        await using var ctx = await _dbContextFactory.CreateDbContextAsync();
        var project = await GetProject();

        if (project?.Credits is null)
        {
            _loading = false;
            return;
        }

        await FetchDatabaseData();


        _remainingBudget = _projectBudget - CurrentCost;
        if (_remainingBudget > 0)
        {
            _spendingEstimation = await GetSpendingEstimations(_remainingBudget);
            _storageEquivalentFormatted = FormatStorageCapacity(_spendingEstimation.Storage);
        }

        if (AreCreditsValid()) HydrateCosts();
        StateHasChanged();
        _loading = false;
    }

    private async Task<Datahub_Project> GetProject()
    {
        using var ctx = await _dbContextFactory.CreateDbContextAsync();
        var project = await ctx.Projects
            .Include(p => p.Credits)
            .AsSingleQuery()
            .FirstOrDefaultAsync(p => p.Project_Acronym_CD == WorkspaceAcronym);
        return project;
    }

    private async Task FetchDatabaseData()
    {
        using var ctx = await _dbContextFactory.CreateDbContextAsync();
        var project = await GetProject();
        _projectCosts = ctx.Project_Costs.Where(c => c.Project_ID == project.Project_ID).OrderBy(c => c.Date).ToList();
        _projectCredits = project.Credits;
        _projectBudget = project.Project_Budget ?? 0;
    }

    private async Task<SpendingEstimation> GetSpendingEstimations(decimal amount)
    {
        // storage
        var storageCostGrid = await _azurePriceListService.GetAzureStoragePriceLists();

        var searchKey = IAzurePriceListService.GenerateAzureStoragePriceListKey(AccessTierType.Hot, DataRedundancyType.LRS);
        var priceList = storageCostGrid.PriceLists[searchKey];
        var storage = decimal.ToDouble(amount / priceList.Capacity.BasePrice);

        // compute
        var compCostGrid = await _azurePriceListService.GetAzureComputeCostPrices();

        var smPerHour = CalculateComputeCost(5, compCostGrid.Ds3VmPrice, compCostGrid.DbuPrice, 0.75M, 1);
        var mdPerHour = CalculateComputeCost(3, compCostGrid.Ds4VmPrice, compCostGrid.DbuPrice, 1.50M, 1);
        var lgPerHour = CalculateComputeCost(3, compCostGrid.Ds5VmPrice, compCostGrid.DbuPrice, 3.00M, 1);

        var small = Math.Truncate(decimal.ToDouble(amount / smPerHour));
        var medium = Math.Truncate(decimal.ToDouble(amount / mdPerHour));
        var large = Math.Truncate(decimal.ToDouble(amount / lgPerHour));

        return new(storage, small, medium, large);
    }

    private decimal CalculateComputeCost(int numVms, decimal vmCost, decimal dbuPrice, decimal dbuFactor, int numHours)
    {
        var totalHours = numVms * numHours;
        var vmPrice = totalHours * vmCost;
        var dbuUnits = totalHours * dbuFactor;
        var dbuPriceTotal = dbuUnits * dbuPrice;
        return 1.1M * (vmPrice + dbuPriceTotal);
    }

    private string FormatStorageCapacity(double gigabytes)
    {
        var rounded = Math.Truncate(gigabytes * 100) / 100.0;

        if (Math.Truncate(rounded) < 1024)
            return $"{rounded} GB";

        rounded = Math.Truncate((gigabytes / 1024) * 100) / 100.0;

        return $"{rounded} TB";
    }

    private void HydrateCosts()
    {
        ParseProjectCredits();
        ParseProjectCosts();
    }

    private void ParseProjectCredits()
    {
        _currentPerDay = DeserializeCredits<AzureDailyCost>(_projectCredits.CurrentPerDay);
        _currentPerService = DeserializeCredits<AzureServiceCost>(_projectCredits.CurrentPerService);
        _yesterdayPerService = DeserializeCredits<AzureServiceCost>(_projectCredits.YesterdayPerService);
    }

    private void ParseProjectCosts()
    {
        _allCosts = ConvertCosts(_projectCosts);
        _fiscalYearCosts = _allCosts.Where(c => c.Date >= CostManagementUtilities.CurrentFiscalYear.StartDate).ToList();
        _last30DaysCosts = _allCosts.Where(c => c.Date >= DateTime.UtcNow.AddDays(-30)).ToList();
    }

    private List<DailyServiceCost> DeserializeCredits<T>(string json)
    {
        try
        {
            return JsonSerializer.Deserialize<List<DailyServiceCost>>(json);
        }
        catch
        {
            var costs = JsonSerializer.Deserialize<List<T>>(json);
            return ConvertCosts(costs);
        }
    }

    private List<DailyServiceCost> ConvertCosts<T>(List<T> costs)
    {
        if (typeof(T) == typeof(AzureDailyCost))
        {
            var typedCosts = costs as List<AzureDailyCost>;
            return typedCosts!.Select(c => new DailyServiceCost
            {
                Amount = (decimal)c.Cost,
                Date = c.Date
            }).ToList();
        }

        if (typeof(T) == typeof(AzureServiceCost))
        {
            var typedCosts = costs as List<AzureServiceCost>;
            return typedCosts!.Select(c => new DailyServiceCost
            {
                Amount = (decimal)c.Cost,
                Source = c.Name
            }).ToList();
        }

        if (typeof(T) == typeof(Datahub_Project_Costs))
        {
            var typedCosts = costs as List<Datahub_Project_Costs>;
            return typedCosts!.Select(c => new DailyServiceCost
            {
                Amount = (decimal)c.CadCost,
                Date = c.Date,
                Source = c.ServiceName
            }).ToList();
        }

        throw new Exception("Invalid type");
    }

    private bool AreCreditsValid()
    {
        if (_projectCredits is null) return false;
        if (string.IsNullOrEmpty(_projectCredits.CurrentPerService)) return false;
        if (string.IsNullOrEmpty(_projectCredits.CurrentPerDay)) return false;
        if (string.IsNullOrEmpty(_projectCredits.YesterdayPerService)) return false;
        return true;
    }

    private DateTime ConvertToLocalTime(DateTime UTCTime)
    {
        TimeZone localZone = TimeZone.CurrentTimeZone;
        return localZone.ToLocalTime(UTCTime);
    }

    private async Task HandleShowMonth()
    {
        _showingTotal = true;
        StateHasChanged();
    }

    private async Task HandleShowYesterday()
    {
        _showingTotal = false;
        StateHasChanged();
    }

    private async Task HandleShowAccumulated()
    {
        _showingAccumulated = true;
        StateHasChanged();
    }

    private async Task HandleShowMonthly()
    {
        _showingAccumulated = false;
        StateHasChanged();
    }

    private async Task HandleRefresh()
    {
        _refreshing = true;
        var beforeUpdate = _projectCredits.LastUpdate;

        var success = await _costMgmt.RefreshWorkspaceCostsAsync(WorkspaceAcronym);
        await FetchDatabaseData();
        var afterUpdate = _projectCredits.LastUpdate;

        if (success && beforeUpdate != afterUpdate)
        {
            _logger.LogInformation("Successfully refreshed cost data for workspace {WorkspaceAcronym}", WorkspaceAcronym);
            _snackbar.Add(Localizer["Successfully refreshed cost data!"], Severity.Success);
        }
        else
        {
            _logger.LogError("Error when refreshing cost data for workspace {WorkspaceAcronym}", WorkspaceAcronym);
            _snackbar.Add(Localizer["Error when refreshing cost data, please try again later."], Severity.Error);
        }

        _refreshing = false;
        StateHasChanged();
    }

    record SpendingEstimation(double Storage, double ComputeSmall, double ComputeMedium, double ComputeLarge);

}

