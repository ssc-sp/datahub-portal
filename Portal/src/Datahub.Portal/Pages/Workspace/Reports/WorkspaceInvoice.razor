@using Datahub.Core.Model.Projects
@using Microsoft.JSInterop

@inject IJSRuntime _jsRuntime
@inject IDbContextFactory<DatahubProjectDBContext> dbContextFactory

@page "/w/{WorkspaceAcronym}/costs/{ReportName}"

<MudStack>
    @if (report != null)
    {
        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="@(() => PrintPage())" Style="position: absolute; top: 6rem; right:  1rem;">
            @Localizer["Print / Save to PDF"]
        </MudButton>
        <MudText Typo="Typo.h1">
            @Localizer["Report {0} for {1}", ReportName, WorkspaceAcronym]
        </MudText>
        <MudDivider />
        <MudText Typo="Typo.h2">
            @Localizer["Report Details"]
        </MudText>
        <MudSimpleTable>
            <thead>
                <tr>
                    <th>@Localizer["Report ID"]</th>
                    <th>@Localizer["Generated Date"]</th>
                    <th>@Localizer["Start Date"]</th>
                    <th>@Localizer["End Date"]</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td>@report.Id</td>
                    <td>@report.GeneratedDate</td>
                    <td>@report.CoverageStartDate</td>
                    <td>@report.CoverageEndDate</td>
                </tr>
            </tbody>
        </MudSimpleTable>
        <MudDivider />
        <MudText Typo="Typo.h2">
            @Localizer["Costs"]
        </MudText>
        <MudSimpleTable>
            <thead>
                <tr>
                    <th>@Localizer["Service"]</th>
                    <th>@Localizer["Cost"]</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var cost in costs)
                {
                    <tr>
                        <td>@cost.Key</td>
                        <td>$@cost.Value</td>
                    </tr>
                }
                <tr>
                    <td>TOTAL</td>
                    <td>$@costs.Values.Sum()</td>
                </tr>
            </tbody>
        </MudSimpleTable>
    }
    else
    {
        <MudText Typo="Typo.caption">
            Loading report data...
        </MudText>
    }
</MudStack>

@code {
    [Parameter] public string WorkspaceAcronym { get; set; }
    [Parameter] public string ReportName { get; set; }

    private IJSObjectReference _module;

    private ProjectReports report;

    // Dictionary of costs, name of service to float cost, randomly set for demo purposes
    private Dictionary<string, float> costs = new Dictionary<string, float>
    {
        { "Azure Database for PostgreSQL", 1000.00f },
        { "Key Vault", 500.00f },
        { "Microsoft Defender for Cloud", 200.00f },
        { "Storage", 300.00f },
        { "Automation", 100.00f },
        { "Azure Databricks", 400.00f },
        { "Bandwidth", 200.00f },
        { "Virtual Machines", 500.00f },
        { "Virtual Network", 100.00f },
        { "Event Grid", 300.00f },
        { "Azure Monitor", 200.00f }
    };


    protected override async Task OnInitializedAsync()
    {
        await using var ctx = await dbContextFactory.CreateDbContextAsync();

        // Retrieve the project from the database
        Datahub_Project project = await ctx.Projects
            .Where(p => p.Project_Acronym_CD == WorkspaceAcronym)
            .FirstOrDefaultAsync();

        report = new ProjectReports
        {
            Id = 1,
            ProjectId = 1,
            GeneratedDate = DateTime.Now,
            UpdatedDate = DateTime.Now,
            CoverageStartDate = DateTime.Now.AddDays(-30),
            CoverageEndDate = DateTime.Now,
            GeneratedBy = "System generated",
            ReportType = 1,
            ReportStatus = 1,
            ReportName = ReportName,
            ReportUrl = "https://www.google.com"
        };

        // TODO: Get costing data from CoverageStartDate to CoverageEndDate
    }


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                _module = await _jsRuntime.InvokeAsync<IJSObjectReference>("import", "./Pages/Workspace/Reports/WorkspaceInvoice.razor.js");
            }
            catch (Exception e)
            {
                _module = await _jsRuntime.InvokeAsync<IJSObjectReference>("import", "./_content/Datahub.Portal/Workspace/Reports/WorkspaceInvoice.razor.js");
            }
        }
    }

    private async Task PrintPage()
    {
        await _module.InvokeAsync<string>("printpage");
    }
}
