@*ProjectStorageReport.razor*@

@* @page "/w/{ProjectAcronym}/storage" *@
@using ApexCharts

@inject IDbContextFactory<DatahubProjectDBContext> dbContextFactory

@if (_averages != null)
{
    <MudText Typo="Typo.h3">@Localizer["Storage analysis"]</MudText>
    <MudStack Style="height: 400px; width: 100%">
        <ApexChart TItem="@DayAverage" Title="@Localizer["Storage daily average (over last 30 days)"]" Options="@_storageDailyChartOptions" Height="400">
            <ApexPointSeries 
                TItem="DayAverage"
                Name="@Localizer["Average capacity (GB)"]"
                Items="@_averages"
                XValue="@(avg => avg.Date.ToString("yyyy-MM-dd"))"
                YValue="@(avg => (decimal?)avg.Average/(1024*1024*1024))"
                SeriesType="SeriesType.Line"
                />
        </ApexChart>
    </MudStack>
}
else
{
    <MudAlert Severity="Severity.Info">@Localizer["No data available"]</MudAlert>
}

@code {

    [Parameter]
    public string WorkspaceAcronym { get; set; }

    private List<DayAverage> _averages = default;
    private ApexChartOptions<DayAverage> _storageDailyChartOptions { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        _averages = await GetLast30DaysAverages();
        _storageDailyChartOptions.Yaxis = new List<YAxis>();
        _storageDailyChartOptions.Yaxis.Add(new YAxis
        {
           Title = new AxisTitle
           {
               Text = Localizer["Average capacity (GB)"].ToString(),
           },
           DecimalsInFloat = 2,
           Min = 0,
        });
    }

    private async Task<List<DayAverage>> GetLast30DaysAverages()
    {
        var minDate = DateTime.Now.AddDays(-30).Date;

        await using var ctx = await dbContextFactory.CreateDbContextAsync();
        var averages = await ctx.Projects
            .Where(e => e.Project_Acronym_CD == WorkspaceAcronym)
            .Join(ctx.Project_Storage_Avgs, p => p.Project_ID, s => s.ProjectId, (p, s) => s)
            .Where(e => e.Date >= minDate)
            .Select(e => new DayAverage(e.Date, e.AverageCapacity))
            .ToListAsync();

        return averages;
    }

    record DayAverage(DateTime Date, double Average);
}
