@using Datahub.Core.Model.Projects
@using Datahub.Metadata.DTO
@using Datahub.Portal.Pages.Workspace
@using Datahub.Portal.Pages.Workspace.Subpages

@inject IDbContextFactory<DatahubProjectDBContext> _dbFactoryProject
@inject IMetadataBrokerService _metadataBrokerService

@page "/w/{ProjectAcronymParam}/{Section?}"


<SectionContent SectionName="side-bar">
    <WorkspaceSidebar WorkspaceAcronym="@ProjectAcronymParam" />
</SectionContent>

<MudContainer MaxWidth="MaxWidth.Large">
    <MudGrid>
        <MudItem xs="12" sm="8">
            <WorkspaceInfo WorkspaceAcronym="@ProjectAcronymParam"/>
        </MudItem>
        <MudItem xs="12" sm="4">
            <WorkspaceAdminInfo WorkspaceAcronym="@ProjectAcronymParam"/>
        </MudItem>
        <MudDivider/>
        <MudItem xs="12">
            @switch (Section)
            {
                case WorkspaceSidebar.SectionViews.Users:
                    <WorkspaceUsers WorkspaceAcronym="@ProjectAcronymParam"/>
                    break;
                case WorkspaceSidebar.SectionViews.Metadata:
                    <WorkspaceMetadata WorkspaceAcronym="@ProjectAcronymParam"/>
                    break;
                case WorkspaceSidebar.SectionViews.Marketplace:
                    <WorkspaceMarketplace WorkspaceAcronym="@ProjectAcronymParam"/>
                    break;
                case WorkspaceSidebar.SectionViews.Reports:
                    <WorkspaceReports WorkspaceAcronym="@ProjectAcronymParam"/>
                    break;
                case WorkspaceSidebar.SectionViews.Settings:
                    <WorkspaceSettings WorkspaceAcronym="@ProjectAcronymParam"/>
                    break;
                
                // The dashboard is the default view, commented out for clarity
                // case WorkspacePageSidebar.SectionViews.Dashboard:
                default:
                    <WorkspaceDashboard WorkspaceAcronym="@ProjectAcronymParam"/>
                    break;
            }
        </MudItem>
    </MudGrid>
</MudContainer>


@code {

    [Parameter]
    public string ProjectAcronymParam { get; set; }

    [Parameter]
    public string Section { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        await using var db = await _dbFactoryProject.CreateDbContextAsync();
    }
}