@using Datahub.Application.Services.Security
@using Datahub.Portal.Views.Dialogs
@using Datahub.Shared.Entities
@using Microsoft.Identity.Web
@using Datahub.Core.Model.Projects
@using System.Text.Json
@using Datahub.Application.Services.WebApp

@inject IDbContextFactory<DatahubProjectDBContext> _dbContextFactory
@inject IKeyVaultUserService _keyVaultUserService
@inject IDialogService _dialogService
@inject ISnackbar _snackbar
@inject ILogger<WorkspaceWebAppPage> _logger
@inject MicrosoftIdentityConsentAndConditionalAccessHandler _consentHandler
@inject IWorkspaceWebAppManagementService _webAppMgmtService

@if (!_isElevated)
{
    <DHLoadingInitializer Message="@Localizer["Validating your credentials..."]"/>
    return;
}
<MudStack>
    <MudStack Row="true">
        <MudText Typo="Typo.h1">
            @Localizer["Web Application"]
        </MudText>
        <MudStack AlignItems="AlignItems.End" Justify="Justify.Center">
            <MudIcon Icon="@SidebarIcons.Circle" Color="@(_webAppState ? Color.Success : Color.Error)" Title="@(_webAppState ? Localizer["Running"] : Localizer["Stopped"])"/>
        </MudStack>
        <MudSpacer/>
        @if (_isProvisioned)
        {
            @if (!_webAppState)
            {
                <MudButton Disabled="@_isStartStopping" Variant="Variant.Filled" StartIcon="@SidebarIcons.Start" IconColor="@Color.Success" Size="Size.Small" OnClick="@(async () => { await ExecuteAsyncWithStateChangeDelay(_webAppMgmtService.Start, _webAppId, 2000); })">
                    @if (_isStartStopping)
                    {
                        <MudProgressCircular Color="Color.Default" Indeterminate="true" Size="Size.Small"/>
                    }
                    else
                    {
                        @Localizer["Start"]
                    }
                </MudButton>
            }
            else
            {
                <MudButton Disabled="@_isStartStopping" Variant="Variant.Filled" StartIcon="@SidebarIcons.Stop" IconColor="@Color.Error" Size="Size.Small" OnClick="@(async () => { await ExecuteAsyncWithStateChangeDelay(_webAppMgmtService.Stop, _webAppId, 2000); })">
                    @if (_isStartStopping)
                    {
                        <MudProgressCircular Color="Color.Default" Indeterminate="true" Size="Size.Small"/>
                    }
                    else
                    {
                        @Localizer["Stop"]
                    }
                </MudButton>
            }

            <MudButton Disabled="@(_isRestarting || !_webAppState)" Variant="Variant.Filled" StartIcon="@SidebarIcons.Restart" Size="Size.Small" OnClick="@(async () => { await ExecuteAsyncWithStateChangeDelay(_webAppMgmtService.Restart, _webAppId, 2000); })">
                @if (_isRestarting)
                {
                    <MudProgressCircular Color="Color.Default" Indeterminate="true" Size="Size.Small"/>
                }
                else
                {
                    @Localizer["Restart"]
                }
            </MudButton>
            <MudButton Color="Color.Primary" Size="Size.Small" Variant="Variant.Filled" StartIcon="@SidebarIcons.Gear" OnClick="@(async () => await ConfigureWebApp())">
                @Localizer["Configure"]
            </MudButton>
        }
    </MudStack>

    <MudText>
        @Localizer["Here you can manage your web application. You can view and edit the configurations of your web application"]
    </MudText>

    @if (_isProvisioned && _isConfigured)
    {
        <WorkspaceWebAppInfoTable WebAppHost="@_webAppHost" WebAppId="@_webAppId" Framework="@_webAppFramework" GitRepo="@_webAppRepo" ComposePath="@_webAppCompose"/>
    }
    else if (_isProvisioned)
    {
        <MudText>
            @Localizer["This web application is not configured yet. Please configure it by clicking the \"Configure\" button at the top right of the page."]
        </MudText>
    }
    else
    {
        <MudText>
            @Localizer["This web application is not provisioned yet. Please come back soon."]
        </MudText>
    }
    @if (_resource is not null)
    {
        <EnvironmentVariablesTable resource="@_resource" projectAcronym="@WorkspaceAcronym" isEditable="false"/>
    }
</MudStack>


@code {

    [Parameter, EditorRequired] public string WorkspaceAcronym { get; set; }

    private string _webAppHost = "<web_app_host>";
    private string _webAppId = "<web_app_id>";
    private string _webAppFramework = "<framework>";
    private string _webAppRepo = "<git_repo>";
    private string _webAppCompose = "<path_to_compose>";

    private AppServiceConfiguration _appConfiguration;
    private Project_Resources2 _resource;

    private bool _isConfigured;
    private bool _isProvisioned;
    private bool _isElevated;
    private bool _webAppState;
    private bool _isStartStopping;
    private bool _isRestarting;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        try
        {
            await _keyVaultUserService.Authenticate();
            _isElevated = true;
            _resource = await _webAppMgmtService.GetResource(WorkspaceAcronym);
            await HydrateValues();
            _webAppState = await _webAppMgmtService.GetState(_webAppId);
        }
        catch (MicrosoftIdentityWebChallengeUserException e)
        {
            _consentHandler.HandleException(e);
        }
        catch (Exception e)
        {
            _logger.LogError(e, "Failed to get consent from user");
        }

        StateHasChanged();
    }

    private async Task HydrateValues()
    {
        using var ctx = await _dbContextFactory.CreateDbContextAsync();
        var workspace = await ctx.Projects
            .Include(x => x.Resources)
            .FirstOrDefaultAsync(x => x.Project_Acronym_CD == WorkspaceAcronym);
        _appConfiguration = TerraformVariableExtraction.ExtractAppServiceConfiguration(workspace);

        if (_appConfiguration != null)
        {
            _webAppHost = _appConfiguration.HostName;
            _webAppId = _appConfiguration.Id;

            _isProvisioned = !(string.IsNullOrWhiteSpace(_webAppHost) && string.IsNullOrWhiteSpace(_webAppId));
            _isConfigured = !(string.IsNullOrWhiteSpace(_appConfiguration.Framework) && string.IsNullOrWhiteSpace(_appConfiguration.GitRepo) && string.IsNullOrWhiteSpace(_appConfiguration.ComposePath));

            if (_isConfigured)
            {
                _webAppFramework = _appConfiguration.Framework;
                _webAppRepo = _appConfiguration.GitRepo;
                _webAppCompose = _appConfiguration.ComposePath;
            }
        }
    }

    private async Task ExecuteAsyncWithStateChangeDelay(Func<string, Task<bool>> action, string param, int delay)
    {
        if (action.Method.Name == "Start" || action.Method.Name == "Stop")
        {
            _isStartStopping = true;
        }
        else if (action.Method.Name == "Restart")
        {
            _isRestarting = true;
        }

        StateHasChanged();
        await action.Invoke(param);
        await Task.Delay(delay);
        _webAppState = await _webAppMgmtService.GetState(_webAppId);
        _isStartStopping = false;
        _isRestarting = false;
        StateHasChanged();
    }

    private async Task ConfigureWebApp()
    {
        using var ctx = await _dbContextFactory.CreateDbContextAsync();
        var resource = await _webAppMgmtService.GetResource(ctx, WorkspaceAcronym);

        var dialogOptions = new DialogOptions()
        {
            MaxWidth = MaxWidth.Medium,
            FullWidth = true,
            CloseButton = true
        };

        var dialogParameters = new DialogParameters
        {
            { "Configuration", _appConfiguration },
            { "WorkspaceAcronym", WorkspaceAcronym },
            { "Resource", resource }
        };

        var dialog = await _dialogService.ShowAsync<AzureAppServiceConfigurationDialog>(Localizer["Configure Web Application"], dialogParameters, dialogOptions);
        var dialogResult = await dialog.Result;

        if (!dialogResult.Canceled)
        {
            try
            {
                var resultData = dialogResult.Data as (AppServiceConfiguration Config, Dictionary<string, string> EnvVars)?;
                var config = resultData?.Config;
                var envVars = resultData?.EnvVars;

                await _webAppMgmtService.SaveConfiguration(WorkspaceAcronym, config!);
                await SaveEnvironmentVariableKeys(envVars);
                await SetEnvironmentVariableValues(envVars);
                await _webAppMgmtService.Configure(WorkspaceAcronym, config);
                _logger.LogInformation("Web app configuration processed");
                _snackbar.Add(Localizer["Web application configuration processed"], Severity.Success);
                StateHasChanged();
            }
            catch (Exception e)
            {
                _logger.LogError(e, "Failed to save web app configuration");
                _snackbar.Add(Localizer["Web application configuration failed"], Severity.Error);
            }
        }
    }

    private async Task SaveEnvironmentVariableKeys(Dictionary<string, string> envVars)
    {
        using var ctx = await _dbContextFactory.CreateDbContextAsync();
        var projectResource = await _webAppMgmtService.GetResource(ctx, WorkspaceAcronym);

        var envVarKeys = envVars.Keys.ToList();
        var jsonKeys = JsonSerializer.Serialize(envVarKeys);
        var inputJson = JsonSerializer.Deserialize<Dictionary<string, dynamic>>(projectResource.InputJsonContent);
        inputJson["environment_variables_keys"] = jsonKeys;
        var jsonObject = JsonSerializer.Serialize(inputJson);
        projectResource.InputJsonContent = jsonObject;

        await ctx.SaveChangesAsync();
    }

    private async Task SetEnvironmentVariableValues(Dictionary<string, string> envVars)
    {
        foreach (var envVar in envVars)
        {
            await _keyVaultUserService.StoreSecret(WorkspaceAcronym, envVar.Key, envVar.Value);
        }
    }

}