@using Datahub.Application.Services.Security
@using Datahub.Portal.Views.Dialogs
@using Datahub.Shared.Entities
@using Microsoft.Identity.Web
@using System.Text.Json.Nodes
@using Datahub.Infrastructure.Queues.Messages
@using MediatR

@inject IDbContextFactory<DatahubProjectDBContext> _dbContextFactory
@inject IDialogService _dialogService
@inject ISnackbar _snackbar
@inject ILogger<WorkspaceWebAppPage> _logger
@inject IMediator _mediatr

<MudStack>
    <MudStack Row="true">
        <MudText Typo="Typo.h1">
            @Localizer["Web Application"]
        </MudText>
        <MudSpacer/>
        @if (_isProvisioned)
        {
            <MudButton Color="Color.Primary" Size="Size.Medium" Variant="Variant.Filled" OnClick="async () => { await ConfigureWebApp(); }">
                @Localizer["Configure"]
                <MudIcon Class="ml-2" Icon="@Icons.Material.Filled.Settings"/>
            </MudButton>
        }
    </MudStack>

    <MudText>
        @Localizer["Here you can manage your web application. You can view and edit the configurations of your web application"]
    </MudText>

    @if (_isProvisioned && _isConfigured)
    {
        <WorkspaceWebAppInfoTable WebAppHost="@_webAppHost" WebAppId="@_webAppId" Framework="@_webAppFramework" GitRepo="@_webAppRepo" ComposePath="@_webAppCompose"/>
    }
    else if (_isProvisioned)
    {
        <MudText>
            @Localizer["This web application is not configured yet. Please configure it by clicking the \"Configure\" button at the top right of the page."]
        </MudText>
    }
    else
    {
        <MudText>
            @Localizer["This web application is not provisioned yet. Please come back soon."]
        </MudText>
    }

</MudStack>

@code {

    [Parameter, EditorRequired] public string WorkspaceAcronym { get; set; }

    private string _webAppHost = "<web_app_host>";
    private string _webAppId = "<web_app_id>";
    private string _webAppFramework = "<framework>";
    private string _webAppRepo = "<git_repo>";
    private string _webAppCompose = "<path_to_compose>";
    private AppServiceConfiguration _appConfiguration;

    private bool _isConfigured;
    private bool _isProvisioned;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        await HydrateValues();
        StateHasChanged();
    }

    private async Task HydrateValues()
    {
        await using var context = await _dbContextFactory.CreateDbContextAsync();
        var workspace = await context.Projects
            .Include(x => x.Resources)
            .FirstOrDefaultAsync(x => x.Project_Acronym_CD == WorkspaceAcronym);

        if (workspace == null)
            throw new Exception($"Workspace with acronym {WorkspaceAcronym} not found");

        _appConfiguration = TerraformVariableExtraction.ExtractAppServiceConfiguration(workspace);

        if (_appConfiguration != null)
        {
            _webAppHost = _appConfiguration.HostName;
            _webAppId = _appConfiguration.Id;

            _isProvisioned = !(string.IsNullOrWhiteSpace(_webAppHost) && string.IsNullOrWhiteSpace(_webAppId));
            _isConfigured = !(string.IsNullOrWhiteSpace(_appConfiguration.Framework) && string.IsNullOrWhiteSpace(_appConfiguration.GitRepo) && string.IsNullOrWhiteSpace(_appConfiguration.ComposePath));

            if (_isConfigured)
            {
                _webAppFramework = _appConfiguration.Framework;
                _webAppRepo = _appConfiguration.GitRepo;
                _webAppCompose = _appConfiguration.ComposePath;
            }
        }
    }

    private async Task ConfigureWebApp()
    {
        var dialogOptions = new DialogOptions()
        {
            MaxWidth = MaxWidth.Medium,
            FullWidth = true,
            CloseButton = true
        };

        var dialogParameters = new DialogParameters
        {
            { "Configuration", _appConfiguration }
        };

        var dialog = await _dialogService.ShowAsync<AzureAppServiceConfigurationDialog>(Localizer["Configure Web Application"], dialogParameters, dialogOptions);
        var dialogResult = await dialog.Result;

        if (!dialogResult.Canceled)
        {
            try
            {
                var config = dialogResult.Data as AppServiceConfiguration;
                await SaveWebAppConfiguration(config);
                await TriggerWebAppConfiguration();
                _logger.LogInformation("Web app configuration processed");
                _snackbar.Add(Localizer["Web application configuration processed"], Severity.Success);
                StateHasChanged();
            }
            catch (Exception e)
            {
                _logger.LogError(e, "Failed to save web app configuration");
                _snackbar.Add(Localizer["Web application configuration failed"], Severity.Error);
            }
        }
    }

    private async Task SaveWebAppConfiguration(AppServiceConfiguration config)
    {
        await using var context = await _dbContextFactory.CreateDbContextAsync();
        var workspace = await context.Projects
            .Include(x => x.Resources)
            .FirstOrDefaultAsync(x => x.Project_Acronym_CD == WorkspaceAcronym);

        if (workspace == null)
            throw new Exception($"Workspace with acronym {WorkspaceAcronym} not found");

        var projectResource = workspace.Resources
            .FirstOrDefault(x => x.ResourceType == TerraformTemplate.AzureAppService);

        if (projectResource == null)
            throw new Exception($"Azure App Service resource not found for workspace {WorkspaceAcronym}");

        var jsonObject = new JsonObject
        {
            ["app_service_framework"] = config.Framework,
            ["app_service_git_repo"] = config.GitRepo,
            ["app_service_compose_path"] = config.ComposePath
        };

        projectResource.InputJsonContent = jsonObject.ToString();

        await context.SaveChangesAsync();
    }

    private async Task TriggerWebAppConfiguration()
    {
        var message = new WorkspaceAppServiceConfigurationMessage(WorkspaceAcronym);
        await _mediatr.Send(message);
    }
}