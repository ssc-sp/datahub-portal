@using Datahub.Application.Services.Security
@using Datahub.Portal.Views.Dialogs
@using Datahub.Shared.Entities
@using Microsoft.Identity.Web
@using Datahub.Core.Model.Projects
@using System.Text.Json
@using Datahub.Application.Services.WebApp

@inject IDbContextFactory<DatahubProjectDBContext> _dbContextFactory
@inject IKeyVaultUserService _keyVaultUserService
@inject IDialogService _dialogService
@inject ISnackbar _snackbar
@inject ILogger<WorkspaceWebAppPage> _logger
@inject MicrosoftIdentityConsentAndConditionalAccessHandler _consentHandler
@inject IWorkspaceWebAppManagementService _webAppMgmtService

@if (!_isElevated)
{
    <DHLoadingInitializer Message="@Localizer["Validating your credentials..."]"/>
    return;
}
<MudStack>
    <MudStack Row="true">
        <MudText Typo="Typo.h2">
            @Localizer["Web Application"]
        </MudText>
        @if (_isConfigured)
        {
            <MudStack AlignItems="AlignItems.End" Justify="Justify.Center">
                <MudIcon Icon="@SidebarIcons.Circle" Color="@(_webAppState ? Color.Success : Color.Error)" Title="@(_webAppState ? Localizer["Running"] : Localizer["Stopped"])"/>
            </MudStack>
        }
        <MudSpacer/>
        @if (_isProvisioned)
        {
            @if (_isConfigured)
            {
                @if (!_webAppState)
                {
                    <MudButton Disabled="@_isStartStopping" Variant="Variant.Filled" StartIcon="@SidebarIcons.Start" IconColor="@Color.Success" Size="Size.Small" OnClick="@(async () => { await ExecuteAsyncWithStateChangeDelay(_webAppMgmtService.Start, _webAppId, 2000); })">
                        @if (_isStartStopping)
                        {
                            <MudProgressCircular Color="Color.Default" Indeterminate="true" Size="Size.Small"/>
                        }
                        else
                        {
                            @Localizer["Start"]
                        }
                    </MudButton>
                }
                else
                {
                    <MudButton Disabled="@_isStartStopping" Variant="Variant.Filled" StartIcon="@SidebarIcons.Stop" IconColor="@Color.Error" Size="Size.Small" OnClick="@(async () => { await ExecuteAsyncWithStateChangeDelay(_webAppMgmtService.Stop, _webAppId, 2000); })">
                        @if (_isStartStopping)
                        {
                            <MudProgressCircular Color="Color.Default" Indeterminate="true" Size="Size.Small"/>
                        }
                        else
                        {
                            @Localizer["Stop"]
                        }
                    </MudButton>
                }

                <MudButton Disabled="@(_isRestarting || !_webAppState)" Variant="Variant.Filled" StartIcon="@SidebarIcons.Restart" Size="Size.Small" OnClick="@(async () => { await ExecuteAsyncWithStateChangeDelay(_webAppMgmtService.Restart, _webAppId, 2000); })">
                    @if (_isRestarting)
                    {
                        <MudProgressCircular Color="Color.Default" Indeterminate="true" Size="Size.Small"/>
                    }
                    else
                    {
                        @Localizer["Restart"]
                    }
                </MudButton>
            }

            <MudButton Color="Color.Primary" Size="Size.Small" Variant="Variant.Filled" StartIcon="@SidebarIcons.Gear" OnClick="@(async () => await ConfigureWebApp())">
                @Localizer["Configure"]
            </MudButton>
        }
    </MudStack>

    <MudText>
        @Localizer["Here you can manage your web application. You can view and edit the configurations of your web application"]
    </MudText>

    @if (_isProvisioned)
    {
        <MudSwitch 
            T=@bool 
            Checked=@_isUrlRewritingEnabled 
            Color=@Color.Primary 
            Label=@Localizer["Enable URL Rewriting"] 
            CheckedChanged=@HandleToggleUrlRewriting
            Disabled=@_isSaving />
    }

    @if (_isProvisioned && _isConfigured)
    {
        <WorkspaceWebAppInfoTable 
            @ref=@_webappInfoTable
            WebAppHost="@_webAppHost" 
            WebAppId="@_webAppId" 
            Framework="@_webAppFramework" 
            GitRepo="@_webAppRepo" 
            ComposePath="@_webAppCompose" 
            WorkspaceAcronym="@WorkspaceAcronym"/>
    }
    else if (_isProvisioned)
    {
        <MudText>
            @Localizer["This web application is not configured yet. Please configure it by clicking the 'Configure' button at the top right of the page."]
        </MudText>
    }
    else
    {
        <MudText>
            @Localizer["This web application is not provisioned yet. Please come back soon."]
        </MudText>
    }
    @if (_resource is not null && _isConfigured)
    {
        <EnvironmentVariablesTable resource="@_resource" projectAcronym="@WorkspaceAcronym" isEditable="false"/>
    }
    @if (_isProvisioned)
    {
        <MudDivider DividerType="DividerType.Middle"/>
        <MudPaper Class="pa-6 mt-4 mb-12" Elevation="1">
            <MudText Typo="Typo.h2">
                @Localizer["Additional information"]
            </MudText>
            <MudAlert Class="mt-4" Severity="Severity.Warning">
                <strong>
                    @Localizer["Please read before configuration to ensure that you do not run into any issues!"]
                </strong>
            </MudAlert>
            <MudText Typo="Typo.body1" Class="mt-4">
                @Localizer["Web applications in FSDH are deployed and hosted using the "]
                <MudLink Href="https://azure.microsoft.com/en-ca/products/app-service">@Localizer["Azure App Service. "]</MudLink>
                @Localizer["For this reason, there are certain limitations you must follow in order to successfully deploy your web application."]
            </MudText>
            <MudText Typo="Typo.h3" Class="mt-4">
                @Localizer["Limitations to docker compose:"]
            </MudText>
            <MudText Typo="Typo.body1" Class="mt-4">
                @Localizer["The following are supported and unsupported docker compose configuration options as per "]
                <MudLink Href="https://learn.microsoft.com/en-us/azure/app-service/configure-custom-container?tabs=debian&pivots=container-linux#configure-multi-container-apps">
                    @Localizer["Microsoft's documentation on multi-container web apps. "]
                </MudLink>
            </MudText>
            <MudText Typo="Typo.h4" Class="mt-4">
                @Localizer["Supported options:"]
            </MudText>
            <MudText Typo="Typo.body1">
                <ul class="ml-4">
                    <li style="display: list-item; list-style-type: circle"><code>command</code></li>
                    <li style="display: list-item; list-style-type: circle"><code>entrypoint</code></li>
                    <li style="display: list-item; list-style-type: circle"><code>environment</code></li>
                    <li style="display: list-item; list-style-type: circle"><code>image</code></li>
                    <li style="display: list-item; list-style-type: circle"><code>ports</code></li>
                    <li style="display: list-item; list-style-type: circle"><code>restart</code></li>
                    <li style="display: list-item; list-style-type: circle"><code>services</code></li>
                    <li style="display: list-item; list-style-type: circle"><code>volumes</code></li>
                </ul>
            </MudText>
            <MudText Typo="Typo.h4" Class="mt-4">
                @Localizer["Unsupported options:"]
            </MudText>
            <MudText>
                <ul class="ml-4">
                    <li style="display: list-item; list-style-type: circle"><code>build</code> @Localizer[", not allowed without "] <code>image</code>.</li>
                    <li style="display: list-item; list-style-type: circle"><code>depends_on</code> @Localizer[", will be ignored."]</li>
                    <li style="display: list-item; list-style-type: circle"><code>networks</code> @Localizer[", will be ignored."]</li>
                    <li style="display: list-item; list-style-type: circle"><code>secrets</code>@Localizer[", will be ignored."]</li>
                    <li style="display: list-item; list-style-type: circle"><code>ports</code>@Localizer[" other than 80 and 8080 will be ignored."]</li>
                </ul>
            </MudText>
            <MudText Typo="Typo.h4" Class="mt-4">
                @Localizer["Syntax limitations:"]
            </MudText>
            <MudText>
                <ul class="ml-4" >
                    <li style="display: list-item; list-style-type: circle"><code>version: "X"</code>@Localizer[" must always be the first YAML statement in the file."]</li>
                    <li style="display: list-item; list-style-type: circle">@Localizer["ports section in the YAML must use quoted numbers."]</li>
                    <li style="display: list-item; list-style-type: circle">@Localizer["image > volume section in the YAML must be quoted and cannot have permissions definitions."]</li>
                    <li style="display: list-item; list-style-type: circle">@Localizer["volumes section must not have an empty curly brace after the volume name."]</li>
                </ul>
            </MudText>
            <MudText Typo="Typo.h3" Class="mt-4">
                @Localizer["Limitations to images:"]
            </MudText>
            <MudText Typo="Typo.body1" Class="mt-4">
                @Localizer["We currently only support public images, i.e. images that are available on Docker Hub or other public repositories. In order to deploy private images, please fill a support request."]
            </MudText>
        </MudPaper>
    }
</MudStack>


@code {

    [Parameter, EditorRequired] public string WorkspaceAcronym { get; set; }

    private string _webAppHost = "<web_app_host>";
    private string _webAppId = "<web_app_id>";
    private string _webAppFramework = "<framework>";
    private string _webAppRepo = "<git_repo>";
    private string _webAppCompose = "<path_to_compose>";

    private AppServiceConfiguration _appConfiguration;
    private Project_Resources2 _resource;

    private bool _isUrlRewritingEnabled;
    private WorkspaceWebAppInfoTable _webappInfoTable;

    private bool _isConfigured;
    private bool _isProvisioned;
    private bool _isElevated;
    private bool _webAppState;
    private bool _isStartStopping;
    private bool _isRestarting;
    private bool _isSaving;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        try
        {
            await _keyVaultUserService.Authenticate();
            _isElevated = true;
        }
        catch (MicrosoftIdentityWebChallengeUserException e)
        {
            _consentHandler.HandleException(e);
        }
        catch (Exception e)
        {
            _logger.LogError(e, "Failed to get consent from user");
        }

        _resource = await _webAppMgmtService.GetResource(WorkspaceAcronym);
        await HydrateValues();
        _webAppState = await _webAppMgmtService.GetState(_webAppId);
        StateHasChanged();
    }

    private async Task HandleToggleUrlRewriting(bool value)
    {
        _isSaving = true;
        var oldValue = _isUrlRewritingEnabled;
        _isUrlRewritingEnabled = value;
        using var ctx = await _dbContextFactory.CreateDbContextAsync();
        var workspace = await ctx.Projects.FirstOrDefaultAsync(x => x.Project_Acronym_CD == WorkspaceAcronym);
        if (workspace != null)
        {
            workspace.WebAppUrlRewritingEnabled = value;
            await ctx.SaveChangesAsync();
            _snackbar.Add(Localizer["URL Rewriting setting updated"], Severity.Success);
            if (_webappInfoTable != null)
            {
                _webappInfoTable.RefreshUrl();
            }
        }
        else
        {
            _isUrlRewritingEnabled = oldValue;
            _snackbar.Add(Localizer["Could not update URL Rewriting setting"], Severity.Error);
        }

        _isSaving = false;
    }

    private async Task HydrateValues()
    {
        using var ctx = await _dbContextFactory.CreateDbContextAsync();
        var workspace = await ctx.Projects
            .Include(x => x.Resources)
            .FirstOrDefaultAsync(x => x.Project_Acronym_CD == WorkspaceAcronym);
        _appConfiguration = TerraformVariableExtraction.ExtractAppServiceConfiguration(workspace);
        _isUrlRewritingEnabled = workspace.WebAppUrlRewritingEnabled;

        if (_appConfiguration != null)
        {
            _webAppHost = _appConfiguration.HostName;
            _webAppId = _appConfiguration.Id;

            _isProvisioned = !(string.IsNullOrWhiteSpace(_webAppHost) && string.IsNullOrWhiteSpace(_webAppId));
            _isConfigured = !(string.IsNullOrWhiteSpace(_appConfiguration.Framework) && string.IsNullOrWhiteSpace(_appConfiguration.GitRepo) && string.IsNullOrWhiteSpace(_appConfiguration.ComposePath));

            if (_isConfigured)
            {
                _webAppFramework = _appConfiguration.Framework;
                _webAppRepo = _appConfiguration.GitRepo;
                _webAppCompose = _appConfiguration.ComposePath;
            }
        }
    }

    private async Task ExecuteAsyncWithStateChangeDelay(Func<string, Task<bool>> action, string param, int delay)
    {
        if (action.Method.Name == "Start" || action.Method.Name == "Stop")
        {
            _isStartStopping = true;
        }
        else if (action.Method.Name == "Restart")
        {
            _isRestarting = true;
        }

        StateHasChanged();
        await action.Invoke(param);
        await Task.Delay(delay);
        _webAppState = await _webAppMgmtService.GetState(_webAppId);
        _isStartStopping = false;
        _isRestarting = false;
        StateHasChanged();
    }

    private async Task ConfigureWebApp()
    {
        using var ctx = await _dbContextFactory.CreateDbContextAsync();
        var resource = await _webAppMgmtService.GetResource(ctx, WorkspaceAcronym);
        if (_appConfiguration.IsGitRepoPrivate)
        {
            _appConfiguration.GitToken = await _keyVaultUserService.GetSecretAsync(WorkspaceAcronym, _appConfiguration.GitTokenSecretName);
        }

        var dialogOptions = new DialogOptions()
        {
            MaxWidth = MaxWidth.Medium,
            FullWidth = true,
            CloseButton = true
        };

        var dialogParameters = new DialogParameters
        {
            { "Configuration", _appConfiguration },
            { "WorkspaceAcronym", WorkspaceAcronym },
            { "Resource", resource }
        };

        var dialog = await _dialogService.ShowAsync<AzureAppServiceConfigurationDialog>(Localizer["Configure Web Application"], dialogParameters, dialogOptions);
        var dialogResult = await dialog.Result;

        if (!dialogResult.Canceled)
        {
            try
            {
                var resultData = dialogResult.Data as (AppServiceConfiguration Config, Dictionary<string, string> EnvVars)?;
                var config = resultData?.Config;
                var envVars = resultData?.EnvVars;

                await _webAppMgmtService.SaveConfiguration(WorkspaceAcronym, config!);
                await _webAppMgmtService.FillSystemConfiguration(WorkspaceAcronym, config);
                await SetGitToken(config);
                await SaveEnvironmentVariableKeys(envVars);
                await SetEnvironmentVariableValues(envVars);
                await _webAppMgmtService.Configure(WorkspaceAcronym, config);
                _logger.LogInformation("Web app configuration processed");
                _snackbar.Add(Localizer["Web application configuration processed"], Severity.Success);
                StateHasChanged();
            }
            catch (Exception e)
            {
                _logger.LogError(e, "Failed to save web app configuration");
                _snackbar.Add(Localizer["Web application configuration failed"], Severity.Error);
            }
        }
    }

    private async Task SaveEnvironmentVariableKeys(Dictionary<string, string> envVars)
    {
        using var ctx = await _dbContextFactory.CreateDbContextAsync();
        var projectResource = await _webAppMgmtService.GetResource(ctx, WorkspaceAcronym);

        var envVarKeys = envVars.Keys.ToList();
        var jsonKeys = JsonSerializer.Serialize(envVarKeys);
        var inputJson = JsonSerializer.Deserialize<Dictionary<string, dynamic>>(projectResource.InputJsonContent);
        inputJson["environment_variables_keys"] = jsonKeys;
        var jsonObject = JsonSerializer.Serialize(inputJson);
        projectResource.InputJsonContent = jsonObject;

        await ctx.SaveChangesAsync();
    }

    private async Task SetEnvironmentVariableValues(Dictionary<string, string> envVars)
    {
        foreach (var envVar in envVars)
        {
            try
            {
                await _keyVaultUserService.StoreOrUpdateSecret(WorkspaceAcronym, envVar.Key, envVar.Value);
                _logger.LogInformation("Environment variable \"{envVar.Key}\"value stored");
            }
            catch (Exception e)
            {
                _logger.LogError(e, "Failed to store environment variable \"{envVar.Key}\"");
            }
        }
    }

    private async Task SetGitToken(AppServiceConfiguration config)
    {
        if (!string.IsNullOrWhiteSpace(config.GitToken))
        {
            try
            {
                await _keyVaultUserService.StoreOrUpdateSecret(WorkspaceAcronym, config.GitTokenSecretName, config.GitToken);
                _logger.LogInformation("Git token stored");
            } catch (Exception e)
            {
                _logger.LogError(e, "Failed to store git token");
            }
        }
    }

}