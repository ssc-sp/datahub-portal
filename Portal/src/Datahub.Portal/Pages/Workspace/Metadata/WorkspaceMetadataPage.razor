@*ProjectMetadata.razor*@

@* @page "/w/{ProjectAcronym}/metadata" *@

@using Datahub.Core.Services.Projects;
@using Datahub.Metadata.Model
@using System.Text.Json
@using Datahub.Core.Model.Projects
@using Datahub.Shared
@using Datahub.Shared.Entities

@inject IMetadataBrokerService MetadataBrokerService
@inject IDbContextFactory<DatahubProjectDBContext> _dbContextFactory
@inject ILogger<WorkspaceMetadataPage> Logger
@inject ServiceAuthManager _serviceAuthManager
@inject IUserInformationService _userInformationService

<MudPaper Class="py-4 px-6">
    <MudStack>
        <MudText Class="mb-6" Typo="Typo.h2">@Localizer["Workspace"] @WorkspaceAcronym @Localizer["Metadata"]</MudText>
        <ProjectObjectMetadata
            ProfileName="project"
            ObjectId="@WorkspaceAcronym"
            Location="@WorkspaceAcronym"
            ProjectAcronym="@WorkspaceAcronym"
            ValidateRequired="false"
            ObjectType="@MetadataObjectType.DataInitiative"
            OnMetadataSaved="@HandleMetadataSaved"/>
    </MudStack>
</MudPaper>

@code {

    [Parameter]
    public string WorkspaceAcronym { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        var user = await _userInformationService.GetCurrentGraphUserAsync();
    }

    private void HandleMetadataSaved(DatahubProject project)
    {
        try
        {
            using var ctx = _dbContextFactory.CreateDbContext();
            var databricksTemplateName = TerraformTemplate.GetTerraformServiceType(TerraformTemplate.AzureDatabricks);
            var projectDatabricks = ctx.ProjectResources2
                .Where(r => r.ProjectId == project.ProjectID)
                .FirstOrDefault(r => r.ResourceType == databricksTemplateName);

            if (projectDatabricks is { CreatedAt: not null })
            {
                var databricksUrlVariable = TerraformVariableExtraction.ExtractDatabricksUrl(projectDatabricks);

                MetadataBrokerService.CreateChildMetadata(project.ProjectAcronymCD, $"{project.ProjectAcronymCD}-Databricks",
                    MetadataObjectType.Databricks, databricksUrlVariable, true);
            }

            foreach (var db in GetDbs(project))
            {
                MetadataBrokerService.CreateChildMetadata(project.ProjectAcronymCD, db.ResourceId.ToString(),
                    MetadataObjectType.Database, project.ProjectAcronymCD, true);
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Internal error updating project child metadata");
        }
    }

    private IEnumerable<ProjectResources2> GetDbs(DatahubProject project)
    {
        return project.Resources
            .Where(r => r.ResourceType == TerraformTemplate.GetTerraformServiceType(TerraformTemplate.AzurePostgres)) 
            .ToList();
    }


}