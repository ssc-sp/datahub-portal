@using Datahub.Core.Model.Projects
@using Datahub.Infrastructure.Services.Azure
@using Datahub.Core.Data.CostEstimators
@using Datahub.Application.Services
@using Datahub.Application.Services.Budget
@using Datahub.Application.Services.Cost
@using System.Text.Json
@inject IDbContextFactory<DatahubProjectDBContext> _dbContextFactory
@inject IAzurePriceListService _azurePriceListService

@if (_projectBudget != 0 && AreCreditsValid())
{
    <MudGrid>
        <MudItem xs="12">
            <MudText Typo="Typo.h2">@Localizer["Administrative Summary"]</MudText>
        </MudItem>
        <MudItem xs="12" sm="6">
            <MudChart ChartType="ChartType.Donut"
                      ChartOptions="@_chartOptions"
                      Width="150px"
                      Height="150px"
                      InputData="@(new[] { (double)(_remainingBudget / _projectBudget), (double)(1 - (_remainingBudget / _projectBudget)) })">
                <CustomGraphics>
                    <text class="donut-inner-text" x="50%" y="50%" dominant-baseline="middle" text-anchor="middle" fill="black" font-family="Helvetica" font-size="6">@Localizer["{0}", $"{(_projectBudget-_remainingBudget):C}"]</text>
                    <text class="donut-inner-text" x="50%" y="60%" dominant-baseline="middle" text-anchor="middle" fill="black" font-family="Helvetica" font-size="5">@Localizer["spent"]</text>
                </CustomGraphics>
            </MudChart>
        </MudItem>
        <MudItem xs="12" sm="6">
            <MudStack>
                <MudText>@Localizer["{0} remaining credits of {1}", $"{_remainingBudget:C}", $"{_projectBudget:C}"]</MudText>
                <MudText>@Localizer["{0} credits consumed yesterday", $"{_yesterdayCost:C}"]</MudText>
                <MudText>@Localizer["{0} credits consumed on average (daily)", $"{_averageDailyCost:C}"]</MudText>
                <DHButton Href="@($"{PageRoutes.WorkspacePrefix}/{WorkspaceAcronym}/{WorkspaceSidebar.SectionViews.Reports}")" Variant="Variant.Text">
                    @Localizer["View Reports"]
                </DHButton>
            </MudStack>
        </MudItem>
    </MudGrid>
}

@code {

    [Parameter, EditorRequired] public string WorkspaceAcronym { get; set; }

    private decimal _projectBudget { get; set; }
    private Project_Credits _projectCredits { get; set; }

    private decimal CurrentCost => Convert.ToDecimal(_projectCredits?.Current ?? 0);

    private decimal _remainingBudget;
    private decimal _yesterdayCost => _yesterdayServiceCosts.Sum(s => s.Amount);
    private decimal _averageDailyCost => _currentDailyCosts.Any() ? _currentDailyCosts.Average(d => d.Amount) : 0;

    private List<DailyServiceCost> _currentDailyCosts { get; set; } = new();
    private List<DailyServiceCost> _currentServiceCosts { get; set; } = new();
    private List<DailyServiceCost> _yesterdayServiceCosts { get; set; } = new();

    private ChartOptions _chartOptions = new ChartOptions
    {
        ShowLegend = false,
        ChartPalette = new[] { DatahubTheme.DefaultTheme.PaletteLight.Primary.ToString(), DatahubTheme.DefaultTheme.PaletteLight.GrayLighter.ToString() },
    };

    protected override async Task OnInitializedAsync()
    {
        await using var ctx = await _dbContextFactory.CreateDbContextAsync();

        var project = await ctx.Projects
            .Include(p => p.Credits)
            .AsSingleQuery()
            .FirstOrDefaultAsync(p => p.Project_Acronym_CD == WorkspaceAcronym);

        _projectCredits = project.Credits;
        _projectBudget = project.Project_Budget ?? 0;

        _remainingBudget = _projectBudget - CurrentCost;

        if (AreCreditsValid()) HydrateCosts();
    }

    private void HydrateCosts()
    {
        try
        {
            _currentDailyCosts = JsonSerializer.Deserialize<List<DailyServiceCost>>(_projectCredits.CurrentPerService);
        }
        catch (Exception e)
        {
            var dailyCosts = JsonSerializer.Deserialize<List<AzureDailyCost>>(_projectCredits.CurrentPerService);
            _currentDailyCosts = ConvertCosts(dailyCosts);
        }

        try
        {
            _currentServiceCosts = JsonSerializer.Deserialize<List<DailyServiceCost>>(_projectCredits.CurrentPerService);
        }
        catch (Exception e)
        {
            var serviceCosts = JsonSerializer.Deserialize<List<AzureServiceCost>>(_projectCredits.CurrentPerService);
            _currentServiceCosts = ConvertCosts(serviceCosts);
        }

        try
        {
            _yesterdayServiceCosts = JsonSerializer.Deserialize<List<DailyServiceCost>>(_projectCredits.YesterdayPerService);
        }
        catch (Exception e)
        {
            var serviceCosts = JsonSerializer.Deserialize<List<AzureServiceCost>>(_projectCredits.YesterdayPerService);
            _yesterdayServiceCosts = ConvertCosts(serviceCosts);
        }
    }

    private List<DailyServiceCost> ConvertCosts(List<AzureServiceCost> costs)
    {
        return costs.Select(c => new DailyServiceCost
        {
            Amount = (decimal)c.Cost,
            Source = c.Name
        }).ToList();
    }

    private List<DailyServiceCost> ConvertCosts(List<AzureDailyCost> costs)
    {
        return costs.Select(c => new DailyServiceCost
        {
            Amount = (decimal)c.Cost,
            Date = c.Date
        }).ToList();
    }

    private bool AreCreditsValid()
    {
        if (_projectCredits is null) return false;
        if (string.IsNullOrEmpty(_projectCredits.CurrentPerService)) return false;
        if (string.IsNullOrEmpty(_projectCredits.CurrentPerDay)) return false;
        if (string.IsNullOrEmpty(_projectCredits.YesterdayPerService)) return false;
        return true;
    }

}