@using Datahub.Core.Services.Storage
@using Datahub.Infrastructure.Services.Storage
@using Datahub.Core.Storage
@using Datahub.Portal.Pages.Workspace.Storage.Container

@inject CultureService _cultureService
@inject IConfiguration _configuration

<MudStack>
    @*<SASTokenButton OnSubstitutionsChanged="HandleSubstitutionsChanged" ContainerToken />*@
    @if (Container.StorageManager is AWSCloudStorageManager)
    {
        <EmbeddedWiki PageNameEn="/UserGuide/Databricks/Access-aws-storage-account-in-Databricks.md"
                      PageNameFr="/fr/UserGuide/Databricks/Accédez-à-votre-compte-aws-de-stockage-dans-Databricks.md"
                      Substitutions="_substitutions" />
    } else if (Container.StorageManager is AzureCloudStorageManager)
    {
        <EmbeddedWiki PageNameEn="/UserGuide/Databricks/Access-your-storage-account-in-Databricks.md"
                      PageNameFr="/fr/UserGuide/Databricks/Accédez-à-votre-compte-de-stockage-dans-Databricks.md"
                      Substitutions="_substitutions" />

    }
    else if (Container.StorageManager is GoogleCloudStorageManager)
    {
        <EmbeddedWiki PageNameEn="/UserGuide/Databricks/Access-gcp-storage-account-in-Databricks.md"
                      PageNameFr="/fr/UserGuide/Databricks/Accédez-à-votre-compte-gcp-de-stockage-dans-Databricks.md"
                      Substitutions="_substitutions" />
    }

</MudStack>


@code {

    [CascadingParameter(Name = "ProjectAcronym")]
    public string ProjectAcronym { get; set; }

    [Parameter, EditorRequired]
    public CloudStorageContainer Container { get; set; }

    private List<(string, string)> _substitutions;

    protected override void OnInitialized()
    {
        base.OnInitialized();
        _substitutions = Container.StorageManager.GetSubstitutions(ProjectAcronym, Container);
    }
    
    private string GetPageName()
    {
        return _configuration[$"WikiPageTitles:DatabricksStorageAccess:{_cultureService.Culture}"];
    }
}