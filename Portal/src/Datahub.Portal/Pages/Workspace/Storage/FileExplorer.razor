@* FileExplorer.razor *@
@using Datahub.Core.Storage;
@using Datahub.Core.Components.FileUpload
@using Datahub.Core.Services.Achievements;
@using Datahub.Core.Services.Storage;
@using Datahub.Application.Services
@using Datahub.Portal.Pages.Workspace.Storage.Container

@inject IUserInformationService _userInformationService
@inject IDbContextFactory<DatahubProjectDBContext> _dbFactoryProject
@inject IJSRuntime _jsRuntime
@inject IPortalUserTelemetryService _telemetryService

@implements IAsyncDisposable

<CascadingValue Value="@StorageAccountMetadata" Name="StorageAccountMetadata">
    <div class="file-explorer-layout">
        <Heading
            CurrentFolder="@_currentFolder"
            SelectedItems="@_selectedItems"
            Files="@_files"
            Folders="@_folders"
            MetadataSignature=@_metadataSignature
            OnNewFolder="HandleNewFolder"
            SetCurrentFolder="SetCurrentFolder"
            OnFileDelete="HandleFileDelete"
            OnFileDownload="HandleFileDownload"
            OnFileRename="HandleFileRename"
            OnDeleteFolder="HandleDeleteFolder" />

        <div class="file-list">
            <div class="file-list-header">
                <div></div>
                <AeTypography>
                    @Localizer["Name"]
                    @* <AeSearchInput *@
                    @*     SearchIconFAClass="fas fa-search" *@
                    @*     OnInputChangeWithLastKey="HandleSearch" *@
                    @*     style="margin: 0 1rem;"/> *@
                </AeTypography>
                <AeTypography>@Localizer["Size"]</AeTypography>
                <AeTypography>@Localizer["Last Modified"]</AeTypography>
                <i class="fas fa-sort-alpha-down"></i>
            </div>

            @if (_loading)
            {
                <LoadingFileList/>
            }
            else
            {
                <UploadSnackbar UploadingFiles="_uploadingFiles">
                    <DropZone MaxHeight OnFilesDrop="UploadFiles">
                        @if (_currentFolder != _root)
                        {
                            var parentFolder = GetDirectoryName(_currentFolder);
                            <DropZone
                                OnFilesDrop="async (e) => await UploadFiles(e, parentFolder)"
                                OnFileItemDrop="async filename => await HandleFileItemDrop(parentFolder, filename)">
                                <FileItem
                                    Name="[..]"
                                    Folder
                                    @onclick="@(() => _selectedItems = new HashSet<string> { parentFolder })"
                                    @ondblclick="async () => await SetCurrentFolder(parentFolder)">
                                    <Icon>
                                        <i class="fas fa-folder"></i>
                                    </Icon>
                                </FileItem>
                            </DropZone>
                        }
                        @foreach (var folderName in _folders
                            .Where(f => f?.Contains(_filterValue) ?? false)
                            .OrderBy(f => f.ToLower()))
                        {
                            <DropZone
                                OnFilesDrop="async (e) => await UploadFiles(e, folderName)"
                                OnFileItemDrop="async filename => await HandleFileItemDrop(folderName, filename)">
                                <FileItem
                                    Name="@GetFileName(folderName)"
                                    Highlighted="_selectedItems.Contains(folderName)"
                                    Folder
                                    @onclick="@(() => _selectedItems = new HashSet<string> { folderName })"
                                    @ondblclick="async () => await SetCurrentFolder(folderName)">
                                    <Icon>
                                        <i class="fas fa-folder"></i>
                                    </Icon>
                                </FileItem>
                            </DropZone>
                        }
                        @foreach (var file in _files
                            .Where(f => f?.Name?.Contains(_filterValue) ?? false)
                            .OrderBy(f => f.Name.ToLower()))
                        {
                            <FileItem
                                Name="@GetFileName(file.Name)"
                                Modified="@file.Modified"
                                Size="@file.Filesize"
                                @onclick="@(() => _selectedItems = new HashSet<string> {file.Name})"
                                OnSelectionClick="() => HandleFileSelectionClick(file.Name)"
                                Highlighted="_selectedItems.Contains(file.Name)">
                                <Icon>
                                    <i class="@DatahubTools.GetFileTypeIcon(file.Fileformat)"></i>
                                </Icon>
                            </FileItem>
                        }
                    </DropZone>
                </UploadSnackbar>
            }
        </div>
        <div class="item-details">
            <div class="details-sticky">
                <div class="details-container">
                    @if (_loading || _folders.Contains(_selectedItem) || _currentFolder == _selectedItem)
                    {
                        <StorageProperties DisplayName="@GetFileName(_selectedItem)" Container="@Container" />
                    }
                    else
                    {
                        var file = _files.FirstOrDefault(f => f.Name.Equals(_selectedItem, StringComparison.OrdinalIgnoreCase));
                        <FileProperties @key=@_selectedItem
                                        ProjectId=@ProjectId 
                                        File=@file 
                                        Readonly="!OwnsFile(file)" 
                                        OnMetadataChanged=@HandleMetadataChanged />
                    }
                </div>
            </div>
        </div>

    </div>
</CascadingValue>

@code {

    [CascadingParameter(Name = "ProjectAcronym")]
    public string ProjectAcronym { get; set; }

    [CascadingParameter(Name = "GraphUser")]
    public Microsoft.Graph.Models.User GraphUser { get; set; }

    [Parameter]
    public int? ProjectId { get; set; }

    [Parameter]
    public CloudStorageContainer Container { get; set; }

    public StorageMetadata StorageAccountMetadata { get; set; }

    private CloudStorageContainer _lastContainer = default;

    private string ContainerName => Container?.Name;

    private ICloudStorageManager StorageManager => Container?.StorageManager;

    private string _userId;

    private bool _loading = true;
    private List<FileMetaData> _uploadingFiles;
    private string _continuationToken;

    private readonly string _root = "/";
    private string _currentFolder = "/";
    private string _selectedItem => _selectedItems.FirstOrDefault("/");

    private HashSet<string> _selectedItems = new();

    private List<string> _folders = new();
    private List<FileMetaData> _files = new();
    private string _filterValue = string.Empty;

    private IJSObjectReference _module;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        if (firstRender)
        {
            _module = await _jsRuntime.InvokeAsync<IJSObjectReference>("import", "./Pages/Workspace/Storage/FileExplorer.razor.js");
            if (StorageManager != null)
            {
                StorageAccountMetadata = await StorageManager.GetStorageMetadataAsync(ContainerName);
            }
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        await using var projectContext = await _dbFactoryProject.CreateDbContextAsync();

        _userId = await _userInformationService.GetUserIdString();

        _uploadingFiles = new List<FileMetaData>();
    }

    private bool OwnsFile(FileMetaData file) => (file?.Ownedby ?? "").Equals(_userId, StringComparison.InvariantCulture);

    private Guid _metadataSignature = Guid.NewGuid();

    private void HandleMetadataChanged()
    {
        _metadataSignature = Guid.NewGuid();
    }

    public async ValueTask DisposeAsync()
    {
        try
        {
            if (_module != null)
            {
                await _module.DisposeAsync();
            }
        }
        catch (Exception)
        {
            // ignored
        }
    }
}