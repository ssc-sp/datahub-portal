@* FileExplorerPage.razor *@

@using Datahub.Core.Storage;
@using Datahub.Portal.Components.PageAlerts
@using Datahub.Core.Model.CloudStorage;
@using Datahub.Infrastructure.Services.Storage;
@using Datahub.Portal.Components.Dialogs;
@using Datahub.Portal.Pages.Workspace.Storage.Container
@using Datahub.Portal.Pages.Workspace.Storage.ResourcePages;
@using Microsoft.Graph.Models
@using Datahub.Application.Services
@using Datahub.Core.Model.Projects
@using Datahub.Application.Services.Security
@using Microsoft.Identity.Web;

@inject Microsoft.Identity.Web.MicrosoftIdentityConsentAndConditionalAccessHandler _consentHandler
@inject IDbContextFactory<DatahubProjectDBContext> _dbFactoryProject
@inject IUserInformationService _userInformationService
@inject IProjectStorageConfigurationService _projectStorageConfigService
@inject DatahubPortalConfiguration _datahubPortalConfiguration
@inject IDialogService _dialogService
@inject ILogger<FileExplorerPage> _logger
@inject CloudStorageManagerFactory _cloudStorageManagerFactory
@inject IKeyVaultUserService keyVaultUserService

@* @page "/w/{ProjectAcronymParam}/storage" *@

<!--suppress CssUnresolvedCustomProperty -->
<DHPageTitle PageTitleKey="@_projectName"/>

@if (!containersLoaded)
{
    <DHLoadingInitializer/>
    return;
}

<MudStack>
    <MudStack Row Justify="Justify.SpaceBetween">
        <MudText Typo="Typo.h1">@Localizer["{0} Storage Explorer", WorkspaceAcronym]</MudText>
    </MudStack>
    <CascadingValue Value="@WorkspaceAcronym" Name="ProjectAcronym">
        <CascadingValue Value="@_project" Name="Project">
            <CascadingValue Value="_user" Name="GraphUser">
                @if (ShouldShowContainerDropdown)
                {
                    <MudStack Style="border-bottom: 1px solid var(--mud-palette-lines-default);" Class="my-6">
                        <MudStack Row Justify=@Justify.FlexStart AlignItems=@AlignItems.Center>
                            <MudText Typo="Typo.h2">@Localizer["Current Container"]</MudText>
                            <StorageContainerSelector
                                @bind-SelectedContainer=@SelectedContainer
                                CloudContainers=_cloudContainers
                                OnAddProviderClicked=@AddCloudStorageAccount
                                OnEditProviderClicked=@EditCloudStorageAccount
                                OnRemoveProviderClicked=@RemoveCloudStorageAccount/>
                        </MudStack>
                    </MudStack>
                }
                <MudPaper Elevation="0" Class="file-explorer-layout-wrapper py-4 px-6">
                    @if (SelectedContainer != null)
                    {
                        <MudTabs Elevation="0" @key="@SelectedContainer.Name">
                            <MudTabPanel Text="@(!MultiContainer ? SelectedContainer.Name : Localizer["File Explorer"])" Icon="fas fa-hdd">
                                <FileExplorer ProjectId=@_projectId Container="@_selectedContainer"/>
                            </MudTabPanel>
                            <DatahubAuthView AuthLevel="DatahubAuthView.AuthLevels.WorkspaceCollaborator" ProjectAcronym="@WorkspaceAcronym">
                                @if (SelectedContainer.StorageManager.AzCopyEnabled)
                                {
                                    <MudTabPanel Text="@Localizer["AzCopy"]" Icon="fas fa-info-circle">
                                        <MudStack Class="py-6 px-2">
                                            <AzCopy Container=@SelectedContainer/>
                                        </MudStack>
                                    </MudTabPanel>
                                }
                                @if (SelectedContainer.StorageManager.DatabrickEnabled)
                                {
                                    <MudTabPanel Text="@Localizer["Databricks Access"]" Icon="fas fa-info-circle">
                                        <MudStack Class="py-6 px-2">
                                            <Databricks Container="@SelectedContainer"/>
                                        </MudStack>
                                    </MudTabPanel>
                                }
                                @if (SelectedContainer.StorageManager.AzCopyEnabled)
                                {
                                    <MudTabPanel Text="@Localizer["DataHub Uploader"]" Icon="fas fa-info-circle">
                                        <MudStack Class="py-6 px-2">
                                            <UploaderCode Container=@SelectedContainer/>
                                        </MudStack>
                                    </MudTabPanel>
                                }
                            </DatahubAuthView>
                        </MudTabs>
                    }
                </MudPaper>
            </CascadingValue>
        </CascadingValue>
    </CascadingValue>
</MudStack>

@code {

    [Parameter] public string WorkspaceAcronym { get; set; }

    private Datahub_Project _project;
    private int? _projectId;
    private string _projectName;

    private List<CloudStorageContainer> _cloudContainers = new();
    private CloudStorageContainer _selectedContainer;

    private List<(string Icon, string LabelText, RenderFragment Content)> _tabs = new();
    private User _user;

    protected override async Task OnInitializedAsync()
    {
        await using var projectContext = await _dbFactoryProject.CreateDbContextAsync();

        _user = await _userInformationService.GetCurrentGraphUserAsync();
        _isUserProjectAdmin = await _userInformationService.IsUserProjectAdmin(WorkspaceAcronym) ||
                              await _userInformationService.IsUserProjectWorkspaceLead(WorkspaceAcronym);

        _project = await projectContext.Projects
            .Include(p => p.Users)
            .AsSingleQuery()
            .Where(p => p.Project_Acronym_CD == WorkspaceAcronym)
            .FirstOrDefaultAsync();

        _projectName = _project?.ProjectName;
        _projectId = _project?.Project_ID;
        containersLoaded = false;
        try
        {
            await keyVaultUserService.Authenticate();
            await LoadContainersAsync();
            containersLoaded = true;
            StateHasChanged();
        }
        catch (MicrosoftIdentityWebChallengeUserException e)
        {
            _consentHandler.HandleException(e);
        }
        catch (Exception e)
        {
            _logger.LogError(e, "Error loading cloud storage connection");
        }
    }

    private async Task LoadContainersAsync()
    {
        _cloudContainers = new();

        // pick the project storage containers
        var accountName = _projectStorageConfigService.GetProjectStorageAccountName(WorkspaceAcronym);
        var accountKey = await _projectStorageConfigService.GetProjectStorageAccountKey(WorkspaceAcronym);

        var projectStorageManager = new AzureCloudStorageManager(accountName, accountKey);
        var containerNames = await projectStorageManager.GetContainersAsync();

        _cloudContainers.AddRange(containerNames.Select(c => new CloudStorageContainer(accountName, c, CloudStorageProviderType.Azure, projectStorageManager)));
        var dbStorage = await GetCloudStorages();
        foreach (var stg in dbStorage.Where(s => s.Enabled || _isUserProjectAdmin))
        {
            try
            {
                var storageManager = await _cloudStorageManagerFactory.CreateCloudStorageManager(WorkspaceAcronym, stg);
                if (storageManager is null)
                {
                    continue;
                }

                containerNames = await storageManager.GetContainersAsync();
                _cloudContainers.AddRange(containerNames.Select(c => new CloudStorageContainer(storageManager, c, stg.Id, stg.Enabled)));
            }
            catch (Exception ex)
            {
                _logger.LogCritical(ex, $"cannot access containers from {stg.Name} (ID:{stg.Id})");
                try
                {
                    await using var ctx = await _dbFactoryProject.CreateDbContextAsync();
                    ctx.Attach(stg);
                    stg.Enabled = false;
                    await ctx.SaveChangesAsync();
                }
                catch (Exception ex2)
                {
                    _logger.LogCritical(ex2, $"error disabling containers from {stg.Name} (ID:{stg.Id})");
                }
            }
        }

        _selectedContainer = _cloudContainers.FirstOrDefault();
    }

    public CloudStorageContainer SelectedContainer
    {
        get { return _selectedContainer; }
        set { _selectedContainer = value; }
    }

    private bool MultiContainer => _cloudContainers?.Count > 1;
    private bool _isUserProjectAdmin = false;
    private bool containersLoaded = false;
    private bool ShouldShowContainerDropdown => containersLoaded && (MultiContainer || _isUserProjectAdmin);

    private async Task<List<ProjectCloudStorage>> GetCloudStorages()
    {
        await using var ctx = await _dbFactoryProject.CreateDbContextAsync();
        return await ctx.ProjectCloudStorages.AsNoTracking().Where(e => e.ProjectId == _project.Project_ID).ToListAsync();
    }

    private async Task<DialogResult> ShowCloudStorageDialog(CloudStorageProviderType cloudStorageProvider, ProjectCloudStorage settings)
    {
        var dialogOptions = new DialogOptions() { MaxWidth = MaxWidth.Medium, FullWidth = true };

        var dialogParams = new DialogParameters();
        dialogParams.Add(nameof(StorageConfigurationDialog.CloudProvider), cloudStorageProvider);
        dialogParams.Add(nameof(StorageConfigurationDialog.ProjectCloudStorage), settings);
        dialogParams.Add(nameof(StorageConfigurationDialog.WorkspaceAcronym), WorkspaceAcronym);

        var dialogTitle = cloudStorageProvider switch
        {
            CloudStorageProviderType.Azure => Localizer["Configure Azure Storage"],
            CloudStorageProviderType.AWS => Localizer["Configure AWS Storage"],
            CloudStorageProviderType.GCP => Localizer["Configure GCP Storage"],
            _ => Localizer["Configure Storage"]
        };

        var dialog = await _dialogService.ShowAsync<StorageConfigurationDialog>(dialogTitle, dialogParams, dialogOptions);
        return await dialog.Result;
    }

    private async Task AddCloudStorageAccount(CloudStorageProviderType cloudStorageProvider)
    {
        var result = await ShowCloudStorageDialog(cloudStorageProvider, new ProjectCloudStorage() { Enabled = true, Name = $"{WorkspaceAcronym} Storage {cloudStorageProvider.ToString()}" });

        if (!result.Canceled)
        {
            if (result.Data is (ProjectCloudStorage storageSettings, IDictionary<string, string> ConnectionData))
            {
                await using var ctx = await _dbFactoryProject.CreateDbContextAsync();

                storageSettings.ProjectId = _projectId.Value;
                storageSettings.Provider = cloudStorageProvider.ToString();

                ctx.ProjectCloudStorages.Add(storageSettings);

                await ctx.SaveChangesAsync();
                await keyVaultUserService.StoreAllSecrets(storageSettings, WorkspaceAcronym, ConnectionData);
                await LoadContainersAsync();
                await InvokeAsync(StateHasChanged);
            }
        }
    }

    private async Task EditCloudStorageAccount(int id)
    {
        var pageCloudProvider = _cloudContainers.FirstOrDefault(c => c.Id == id);
        if (pageCloudProvider is null)
        {
            return;
        }

        await using var ctx = await _dbFactoryProject.CreateDbContextAsync();
        var cloudProvider = await ctx.ProjectCloudStorages.FirstOrDefaultAsync(c => c.Id == id);
        if (cloudProvider is null)
        {
            return;
        }

        var result = await ShowCloudStorageDialog(pageCloudProvider.CloudStorageProvider, cloudProvider);

        if (!result.Canceled)
        {
            if (result.Data is (ProjectCloudStorage storageSettings, IDictionary<string, string> ConnectionData))
            {
                await keyVaultUserService.StoreAllSecrets(storageSettings, WorkspaceAcronym, ConnectionData);
                await ctx.SaveChangesAsync();
                await LoadContainersAsync();
                await InvokeAsync(StateHasChanged);
            }
        }
    }

    private async Task RemoveCloudStorageAccount(int id)
    {
        var pageCloudProvider = _cloudContainers.FirstOrDefault(c => c.Id == id);
        if (pageCloudProvider is null)
        {
            return;
        }

        await using var ctx = await _dbFactoryProject.CreateDbContextAsync();
        var cloudProvider = await ctx.ProjectCloudStorages.FirstOrDefaultAsync(c => c.Id == id);
        if (cloudProvider is null)
        {
            return;
        }

        var dialogTitle = Localizer["Remove Storage Account"];
        var promptText = Localizer["RemoveStorageNamePrompt", pageCloudProvider.AccountName];

        var dialogOptions = new DialogOptions() { MaxWidth = MaxWidth.Medium, FullWidth = true };

        var dialogParams = new DialogParameters();
        dialogParams.Add(nameof(SimpleChoiceDialog.PromptText), promptText.ToString());
        dialogParams.Add(nameof(SimpleChoiceDialog.ConfirmColour), Color.Error);

        var dialog = await _dialogService.ShowAsync<SimpleChoiceDialog>(dialogTitle, dialogParams, dialogOptions);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            var confirmDelete = result.Data as bool?;
            if (confirmDelete.HasValue && confirmDelete.Value)
            {
                await keyVaultUserService.DeleteAllSecrets(cloudProvider, WorkspaceAcronym);

                ctx.ProjectCloudStorages.Remove(cloudProvider);
                await ctx.SaveChangesAsync();
                await LoadContainersAsync();
                await InvokeAsync(StateHasChanged);
            }
        }
    }

}