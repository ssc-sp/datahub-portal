@using Datahub.Core.Services.Projects
@using System.Text.Json
@using System.Text.Json.Nodes
@using Datahub.Application.Services
@using Datahub.Core.Model.Projects
@using Datahub.ProjectTools.Utils

@inject IResourceMessagingService _resourceMessagingService
@inject IProjectCreationService _projectCreationService
@inject IUserInformationService _userInformationService
@inject IDbContextFactory<DatahubProjectDBContext> _dbContextFactory

@* @page "/w/{ProjectAcronymParam}/sudo" *@

@if (_project is null)
{
    <DHLoadingInitializer />
    return;
}

<DatahubAuthView AuthLevel="DatahubAuthView.AuthLevels.DatahubAdmin">
    <Authorized>
        <MudStack>
            <MudText Typo="Typo.h1">
                @Localizer["Super User Page"]
            </MudText>
            <MudStack>
                <MudText Typo="Typo.h2">
                    @Localizer["Workspace Version"]
                </MudText>
                <MudText Typo="Typo.body2" Style="font-size: 0.7rem; font-family: Consolas,sans-serif;">
                    Project ID: @_project.Project_ID [@(_project.Version ?? Localizer["v0.0.0"])]
                </MudText>
            </MudStack>
            <MudStack>
                <MudText Typo="Typo.h2">
                    @Localizer["Workspace Definition"]
                </MudText>
                <DHMarkdown Content="@_workspaceDefinitionMarkdown" LinkRewriter="RewriteLink"/>
            </MudStack>

            <MudStack>
                <MudText Typo="Typo.h2">
                    @Localizer["Expected Terraform Output"]
                </MudText>
                <DHMarkdown Content="@_expectedTerraformOutput" LinkRewriter="RewriteLink"/>
            </MudStack>
        </MudStack>
    </Authorized>
    <NotAuthorized>
        <MudStack AlignItems="AlignItems.Center">
            <MudText Typo="Typo.h1">
                @Localizer["Not Authorized"]
            </MudText>
            <MudText Typo="Typo.body1">
                @Localizer["You are not authorized to view this page."]
            </MudText>
        </MudStack>
    </NotAuthorized>
</DatahubAuthView>


@code {
    private string _workspaceDefinitionMarkdown;
    private string _expectedTerraformOutput;

    [Parameter]
    public string WorkspaceAcronym { get; set; }

    private Datahub_Project _project;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        await _projectCreationService.CreateNewTemplateProjectResourceAsync(WorkspaceAcronym);

        var currentUser = await _userInformationService.GetCurrentPortalUserAsync();
        var workspaceDefinition = await _resourceMessagingService.GetWorkspaceDefinition(WorkspaceAcronym, currentUser.Email);

        var workspaceDefinitionJsonString = JsonSerializer.Serialize(workspaceDefinition,
            new JsonSerializerOptions
            {
                WriteIndented = true,
            });

        _workspaceDefinitionMarkdown = $"```json\n{workspaceDefinitionJsonString}\n```";

        var context = await _dbContextFactory.CreateDbContextAsync();
        _project = await context.Projects
            .Include(p => p.Resources)
            .FirstOrDefaultAsync(p => p.Project_Acronym_CD == WorkspaceAcronym);

        _expectedTerraformOutput = GetExpectedTerraformOutput();
    }

    private static string RewriteLink(string link)
    {
        return link;
    }

    private string GetExpectedTerraformOutput()
    {
        var expectedTerraformOutput = GetExpectedTerraformOutputResourceGroupString();
        var workspaceId = "";
        var workspaceUrl = "";

        if (_project.Resources.Any(r => r.ResourceType.Equals("terraform:azure-storage-blob")))
        {
            expectedTerraformOutput = string.Join(",", expectedTerraformOutput, GetExpectedTerraformOutputAzureStorageString());
        }
        if (_project.Resources.Any(r => r.ResourceType.Equals("terraform:azure-databricks")))
        {
            expectedTerraformOutput = string.Join(",", expectedTerraformOutput, GetExpectedTerraformOutputAzureDatabricksString());
            workspaceId = TerraformVariableExtraction.ExtractDatabricksWorkspaceId(_project);
            workspaceUrl = TerraformVariableExtraction.ExtractDatabricksUrl(_project);
        }
        if (string.IsNullOrWhiteSpace(_project.WebApp_URL))
        {
            expectedTerraformOutput = string.Join(",", expectedTerraformOutput, GetExpectedTerraformOutputAzureWebAppString());
        }

        var content = expectedTerraformOutput
            .Replace("{{project_cd}}", WorkspaceAcronym)
            .Replace("{{project_cd_lower}}", WorkspaceAcronym.ToLower())
            .Replace("{{workspace_version}}", _project.Version)
            .Replace("{{workspace_id}}", workspaceId)
            .Replace("{{workspace_url}}", workspaceUrl);

        return $"```json\n{{\n{content}\n}}\n```";
    }

    private string GetExpectedTerraformOutputAzureWebAppString()
    {
        return @"  ""azure_app_service_hostname"": {
    ""sensitive"": false,
    ""type"": ""string"",
    ""value"": ""fsdh-proj-{{project_cd_lower}}-webapp-poc.azurewebsites.net""
  },
  ""azure_app_service_id"": {
    ""sensitive"": false,
    ""type"": ""string"",
    ""value"": ""/subscriptions/bc4bcb08-d617-49f4-b6af-69d6f10c240b/resourceGroups/fsdh_proj_{{project_cd_lower}}_poc_rg/providers/Microsoft.Web/sites/fsdh-proj-{{project_cd_lower}}-webapp-poc""
  },
  ""azure_app_service_module_status"": {
    ""sensitive"": false,
    ""type"": ""string"",
    ""value"": ""completed""
  }";
    }

    private string GetExpectedTerraformOutputAzureDatabricksString()
    {
        return @"  ""azure_databricks_module_status"": {
    ""sensitive"": false,
    ""type"": ""string"",
    ""value"": ""completed""
  },
  ""azure_databricks_workspace_id"": {
    ""sensitive"": false,
    ""type"": ""string"",
    ""value"": ""{{workspace_id}}""
  },
  ""azure_databricks_workspace_name"": {
    ""sensitive"": false,
    ""type"": ""string"",
    ""value"": ""fsdh-dbk-{{project_cd_lower}}-poc""
  },
  ""azure_databricks_workspace_url"": {
    ""sensitive"": false,
    ""type"": ""string"",
    ""value"": ""{{workspace_url}}""
  }";
    }

    private string GetExpectedTerraformOutputAzureStorageString()
    {
        return @"  ""azure_storage_account_name"": {
    ""sensitive"": false,
    ""type"": ""string"",
    ""value"": ""fsdhproj{{project_cd_lower}}poc""
  },
  ""azure_storage_blob_status"": {
    ""sensitive"": false,
    ""type"": ""string"",
    ""value"": ""completed""
  },
  ""azure_storage_container_name"": {
    ""sensitive"": false,
    ""type"": ""string"",
    ""value"": ""datahub""
  }";
    }

    private string GetExpectedTerraformOutputResourceGroupString()
    {
        return @"""  new_project_template"": {
    ""sensitive"": false,
    ""type"": ""string"",
    ""value"": ""completed""
  },
  ""azure_resource_group_name"": {
    ""sensitive"": false,
    ""type"": ""string"",
    ""value"": ""fsdh_proj_{{project_cd_lower}}_poc_rg""
  },
  ""project_cd"": {
    ""sensitive"": false,
    ""type"": ""string"",
    ""value"": ""{{project_cd}}""
  },
  ""workspace_version"": {
    ""sensitive"": false,
    ""type"": ""string"",
    ""value"": ""{{workspace_version}}""
  }";
    }

}