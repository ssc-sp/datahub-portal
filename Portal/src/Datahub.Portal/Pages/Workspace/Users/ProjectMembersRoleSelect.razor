@using Datahub.Core.Model.Projects
@using MudBlazor.Utilities

@inject IJSRuntime _jsRuntime;

<!--suppress CssUnresolvedCustomProperty -->
<MudMenu AnchorOrigin="Origin.BottomLeft" TransformOrigin="Origin.TopLeft">
    <ActivatorContent>
        <MudStack Row AlignItems="AlignItems.Center" Style="@_outlineStyle" Class="py-2 px-4">
            <MudText Typo="Typo.body1">@Localizer[_currentRole?.Name ?? string.Empty]</MudText>
            <MudIcon Icon="@Icons.Material.Filled.ArrowDropDown"/>
        </MudStack>
    </ActivatorContent>
    <ChildContent>
        @foreach (var role in _projectRoles.Where(r => r.Id != (int)ProjectRole.RoleNames.Remove))
        {
            <MudMenuItem OnClick="@(() => RoleChanged(role.Id))" Style="max-width: 400px;">
                <MudText Typo="Typo.h6">@Localizer[role.Name]</MudText>
                <MudText>@Localizer[role.Description]</MudText>
            </MudMenuItem>
        }
        <MudDivider/>
        <MudMenuItem OnClick="@(() => RoleChanged(_removeRole.Id))" Style="max-width: 400px;">
            <MudText Color="Color.Error" Typo="Typo.h6">@Localizer[_removeRole.Name]</MudText>
            <MudText Color="Color.Error">@Localizer[_removeRole.Description]</MudText>
        </MudMenuItem>
    </ChildContent>
</MudMenu>

@code {

    [Parameter]
    public int InitialValue { get; set; }

    [Parameter]
    public EventCallback<int> OnRoleChanged { get; set; }

    private ProjectRole _currentRole;
    private IEnumerable<ProjectRole> _projectRoles;
    private ProjectRole _removeRole;

    private string _outlineStyle = new StyleBuilder()
        .AddStyle("border", "1px solid var(--mud-palette-table-lines)")
        .AddStyle("border-radius", "var(--mud-default-borderradius)")
        .Build();

    protected override void OnParametersSet()
    {
        _projectRoles = ProjectRole.GetAll().ToList();
        _removeRole = _projectRoles.First(r => r.Id == (int)ProjectRole.RoleNames.Remove);
        // _projectRoles = _projectRoles.Where(r => r.Id != (int)Project_Role.RoleNames.Remove);

        _currentRole = _projectRoles.FirstOrDefault(r => r.Id == InitialValue);
    }

    private async Task RoleChanged(int newRoleId)
    {
        if(newRoleId == (int)ProjectRole.RoleNames.Remove)
        {
            var message = Localizer["Are you sure you want to remove this user from the workspace?"].Value;
            var confirmed = await _jsRuntime.InvokeAsync<bool>("confirm", message);
            if (!confirmed)
            {
                return;
            }
        }
        
        await OnRoleChanged.InvokeAsync(newRoleId);
    }

}