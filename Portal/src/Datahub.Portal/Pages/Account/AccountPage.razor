@using Datahub.Portal.Components.User
@using Datahub.Core.Model.Achievements
@using Datahub.Portal.Pages.Account.Achievements
@using Datahub.Portal.Pages.Account.Appearance
@using Datahub.Portal.Pages.Account.Notifications
@using Datahub.Portal.Pages.Account.PublicProfile
@using Datahub.Portal.Pages.Home
@using Datahub.Portal.Components.Sidebar

@inherits ViewUserBase<AccountPage>

@inject ISnackbar _snackbar

@attribute [Route(PageRoutes.AccountDefault)]
@attribute [Route(PageRoutes.AccountDefault_FR)]
@attribute [Route(PageRoutes.Account)]
@attribute [Route(PageRoutes.Account_FR)]

<PageTitle>
    @Localizer["{0} - Federal Science DataHub", _title]
</PageTitle>

<DHSidebarDrawer>
    <PersonalSidebar/>
</DHSidebarDrawer>

@if (_viewedPortalUser is null)
{
    return;
}


@* <DatahubAuthView AuthLevel="DatahubAuthView.AuthLevels.Personal" UserGraphId="@_viewedPortalUser.GraphGuid"> *@
@* <Authorized> *@

@if (_viewedPortalUser is null)
{
    <DHLoadingInitializer Message="@Localizer["Loading Settings"]"/>
}
else
{
    var containsKey = !string.IsNullOrWhiteSpace(Section)
                      && _sectionComponents.ContainsKey(Section);
    var parameters = new Dictionary<string, object>
    {
        { "OnViewedUserChanged", EventCallback.Factory.Create<PortalUser>(this, HandleViewedUserChanged) },
        { "ViewedUser", _viewedPortalUser }
    };

    var sectionKey = containsKey ? Section : PersonalSidebar.SectionViews.Profile;
    <MudGrid Justify="Justify.Center">
        <MudItem xs="8" sm="12">
            <UserCard ViewedUserGraphId="@_viewedPortalUser.GraphGuid"/>
        </MudItem>
        <MudItem xs="8" sm="12">
            <DynamicComponent Type="@_sectionComponents[sectionKey]" Parameters="@parameters"/>
        </MudItem>
    </MudGrid>
}

@code {

    [Parameter] public string Section { get; set; }

    private PortalUser _viewedPortalUser;

    private string _title => _viewedPortalUser?.DisplayName != null
        ? $"{_viewedPortalUser.DisplayName}"
        : Localizer["Home"];


    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();

        _viewedPortalUser = await GetViewedPortalUserWithAchievementsAsync();
        StateHasChanged();
    }

    private readonly Dictionary<string, Type> _sectionComponents = new()
    {
        { PersonalSidebar.SectionViews.Profile, typeof(AccountPublicProfile) },
        { PersonalSidebar.SectionViews.Customization, typeof(AccountPublicProfileSettings) },
        { PersonalSidebar.SectionViews.Appearance, typeof(AccountAppearanceSettings) },
        { PersonalSidebar.SectionViews.Notifications, typeof(AccountNotificationSettings) },
        { PersonalSidebar.SectionViews.Achievements, typeof(AchievementsPage) },
        { PersonalSidebar.SectionViews.Appearance_FR, typeof(AccountAppearanceSettings) },
        // Notifications is the same in English and French - Including it causes a duplicate key error
        { PersonalSidebar.SectionViews.Achievements_FR, typeof(AchievementsPage) },
    };

    private async Task HandleViewedUserChanged(PortalUser updatedUser)
    {
        _viewedPortalUser = updatedUser;
        var success = await _userInformationService.UpdatePortalUserAsync(updatedUser);
        if (success)
        {
            _snackbar.Add(Localizer["User information updated"], Severity.Success);
        }
        else
        {
            _snackbar.Add(Localizer["Failed to update user information"], Severity.Error);
        }

        await InvokeAsync(StateHasChanged);
    }

}