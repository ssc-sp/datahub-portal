@using Datahub.Portal.Components.User
@using Datahub.Core.Model.Achievements
@using Datahub.Portal.Pages.Account.Achievements
@using Datahub.Portal.Pages.Account.Appearance
@using Datahub.Portal.Pages.Account.Notifications
@using Datahub.Portal.Pages.Account.PublicProfile
@using Datahub.Portal.Pages.Home

@inherits ViewUserBase<AccountPage>

@inject ISnackbar _snackbar

@attribute [Route(PageRoutes.Home)]
@attribute [Route(PageRoutes.AccountDefault)]
@attribute [Route(PageRoutes.Account)]

<PageTitle>
    @Localizer["SSC Datahub - Account"]
</PageTitle>

<SectionContent SectionName="side-bar">
    <PersonalSidebar/>
</SectionContent>

@if (_viewedPortalUser is null)
{
    return;
}


@* <DatahubAuthView AuthLevel="DatahubAuthView.AuthLevels.Personal" UserGraphId="@_viewedPortalUser.GraphGuid"> *@
@* <Authorized> *@
<MudGrid>

    @if (_viewedPortalUser is null)
    {
        <DHLoadingInitializer Message="@Localizer["Loading Settings"]"/>
    }
    else
    {
        var containsKey = !string.IsNullOrWhiteSpace(Section)
                          && _sectionComponents.ContainsKey(Section);
        var parameters = new Dictionary<string, object>
        {
            { "OnViewedUserChanged", EventCallback.Factory.Create<PortalUser>(this, HandleViewedUserChanged) },
            { "ViewedUser", _viewedPortalUser }
        };

        if (containsKey)
        {
            <MudItem xs="12">
                <UserCard ViewedUserGraphId="@_viewedPortalUser.GraphGuid"/>
            </MudItem>
            <MudItem xs="12" sm="8">
                <DynamicComponent Type="@_sectionComponents[Section]" Parameters="@parameters"/>
            </MudItem>
        }
        else
        {
            _logger.LogWarning("The section {Section} is not a valid section for the workspace page", Section);
            <HomePage/>
        }
    }
</MudGrid>

@code {

    [Parameter]
    public string Section { get; set; }

    private PortalUser _viewedPortalUser;


    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();

        _viewedPortalUser = await GetViewedPortalUserWithAchievementsAsync();
        StateHasChanged();
    }

    private readonly Dictionary<string, Type> _sectionComponents = new()
    {
        { PersonalSidebar.SectionViews.Customization, typeof(AccountPublicProfileSettings) },
        { PersonalSidebar.SectionViews.Appearance, typeof(AccountAppearanceSettings) },
        { PersonalSidebar.SectionViews.Notifications, typeof(AccountNotificationSettings) },
        { PersonalSidebar.SectionViews.Achievements, typeof(AchievementsPage) },
    };

    private async Task HandleViewedUserChanged(PortalUser updatedUser)
    {
        _viewedPortalUser = updatedUser;
        var success = await _userInformationService.UpdatePortalUserAsync(updatedUser);
        if (success)
        {
            _snackbar.Add(Localizer["User information updated"], Severity.Success);
        }
        else
        {
            _snackbar.Add(Localizer["Failed to update user information"], Severity.Error);
        }

        await InvokeAsync(StateHasChanged);
    }

}