@using Datahub.Application.Validators
@using Datahub.Portal.Components.User
@using FluentValidation.Results
@using Microsoft.Identity.Web
@using Datahub.Core.Model.Achievements

@inject DatahubPortalConfiguration _datahubPortalConfiguration
@inject IDialogService _dialogService
@inject IUserSettingsService _userSettingsService
@inject IUserInformationService _userInformationService
@inject ITokenAcquisition _tokenAcquisition

<MudStack Spacing="8" Class="mb-16">
    <MudStack>
        <MudText Typo="Typo.h4">@Localizer["Public Profile"]</MudText>
        <MudDivider/>
    </MudStack>
    <SettingsField Label="@Localizer["Display Name"]" Description="@Localizer["Your display name will be shown around DataHub as your username."]">
        <MudTextField T="string" Disabled Variant="Variant.Outlined" Margin="Margin.Dense" Value="@ViewedUser.DisplayName"/>
    </SettingsField>
    <SettingsField Label="@Localizer["Email Address"]" Description="@Localizer["Your email address will be used to send you notifications."]">
        <MudTextField T="string" Disabled Variant="Variant.Outlined" Margin="Margin.Dense" Value="@ViewedUser.Email"/>
    </SettingsField>
    <SettingsField Label="@Localizer["First and last name"]" Description="@Localizer["Your first name and last name are not used within the DataHub but are often required to setup external connections."]">
        <MudStack Row>
            <MudTextField T="string" Variant="Variant.Outlined" Margin="Margin.Dense" Value="@FirstName" Label="@Localizer["First name"]" Immediate="true" ValueChanged="HandleFirstNameChanged"/>
            <MudTextField T="string" Variant="Variant.Outlined" Margin="Margin.Dense" Value="@LastName" Label="@Localizer["Last name"]" Immediate="true" ValueChanged="HandleLastNameChanged"/>
        </MudStack>
        @if (!_nameValidationResult.IsValid)
        {
            <MudAlert Severity="Severity.Error" Variant="Variant.Text" Class="mt-4">
                @Localizer[_nameValidationResult.ToString()]
            </MudAlert>
        }
        <MudButton Variant="Variant.Filled" Disabled="@(!canSubmitNameChange)" Color="Color.Primary" Class="mt-4" OnClick="SubmitNameChange">
            @Localizer["Save name change"]
        </MudButton>
    </SettingsField>
    <SettingsField Label="@Localizer["Profile Picture"]" Description="@Localizer["Your profile picture will be displayed beside your name around DataHub. You can it at any time and unlock more variations from completing achievements."]">
        <ImageSelectionView
            ViewedUser="@ViewedUser"
            IsProfilePictureDialog="@true"
            OnImageSelected="@(code => HandleImageSelected(code, true))"/>
    </SettingsField>
    <SettingsField Label="@Localizer["Profile Background"]" Description="@Localizer["Your profile background will be displayed on your profile page. You can unlock more variations from completing achievements and change it at any time."]">
        <ImageSelectionView
            ViewedUser="@ViewedUser"
            IsProfilePictureDialog="@false"
            OnImageSelected="@(code => HandleImageSelected(code, false))"/>
    </SettingsField>
    <MudDivider/>
    <SettingsField Label="@Localizer["Display Achievements"]" Description="@Localizer["You can choose whether to hide or display your achievements in the DataHub. This will also prevent the achievement notifications from displaying on your screen. You can change it at any time."]">
        <MudSwitch T="bool" Label="@Localizer["Show Achievements"]" Checked="@(!ViewedUser.UserSettings.HideAchievements)" Color="Color.Primary" UnCheckedColor="Color.Dark" CheckedChanged="HandleHideAchievementsChanged"/>
    </SettingsField>
    <SettingsField Label="@Localizer["Display page alerts and tutorials"]" Description="@Localizer["Choose whether or not to display alert and tutorial dialogs in Datahub."]">
        <MudSwitch T="bool" Label="@Localizer["Show alerts and tutorials"]" Checked="@(!ViewedUser.UserSettings.HideAlerts)" Color="Color.Primary" UnCheckedColor="Color.Dark" CheckedChanged="HandleHideAlertsChanged"/>
        <MudButton OnClick="@ClearAlerts">@Localizer["Reset alert settings"]</MudButton>
    </SettingsField>
</MudStack>

@code {

    [Parameter] public PortalUser ViewedUser { get; set; }

    [Parameter] public EventCallback<PortalUser> OnViewedUserChanged { get; set; }
    
    public string FirstName { get; set; }
    public string LastName { get; set; }
    private string _userFirstName { get; set; }
    private string _userLastName { get; set; }
    private NameValidator _nameValidator = new NameValidator();
    private ValidationResult _nameValidationResult = new ValidationResult();
    private string token;
    
    private bool canSubmitNameChange => _nameValidationResult.IsValid && (FirstName != _userFirstName || LastName != _userLastName);

    protected override async Task OnInitializedAsync()
    {
        (_userFirstName, _userLastName) = await _userInformationService.GetFullName();
        (FirstName, LastName) = (_userFirstName, _userLastName);
    }

    private string ValidateName(string placeholder)
    {
        _nameValidationResult = _nameValidator.Validate((FirstName, LastName));
        return Localizer[_nameValidationResult.ToString()];
    }
    
    private void HandleFirstNameChanged(string value)
    {
        FirstName = value;
        ValidateName(value);
    }
    
    private void HandleLastNameChanged(string value)
    {
        LastName = value;
        ValidateName(value);
    }

    private async Task SubmitNameChange()
    {
        if (!canSubmitNameChange)
        {
            return;
        }

        await _userInformationService.SetFullName(FirstName, LastName);
        (_userFirstName, _userLastName) = (FirstName, LastName);
        _nameValidationResult = new ValidationResult();
        await OnViewedUserChanged.InvokeAsync(ViewedUser);
    }

    private async Task HandleImageSelected(string code, bool isProfilePicture)
    {
        ViewedUser.ProfilePictureUrl = isProfilePicture ? code : ViewedUser.ProfilePictureUrl;
        ViewedUser.BannerPictureUrl = isProfilePicture ? ViewedUser.BannerPictureUrl : code;

        await OnViewedUserChanged.InvokeAsync(ViewedUser);
    }

    private async Task HandleHideAchievementsChanged()
    {
        ViewedUser.UserSettings.HideAchievements = !ViewedUser.UserSettings.HideAchievements;
        await OnViewedUserChanged.InvokeAsync(ViewedUser);
    }

    private async Task HandleHideAlertsChanged()
    {
        ViewedUser.UserSettings.HideAlerts = !ViewedUser.UserSettings.HideAlerts;
        await OnViewedUserChanged.InvokeAsync(ViewedUser);
    }

    private async Task ClearAlerts()
    {
        ViewedUser.UserSettings.HiddenAlerts = null;
        await OnViewedUserChanged.InvokeAsync(ViewedUser);
    }

}