@using Datahub.Application.Services.UserManagement
@using Datahub.Portal.Components.User
@using Datahub.Core.Model.Achievements
@using Datahub.Portal.Layout

@inject DatahubPortalConfiguration _datahubPortalConfiguration
@inject IDialogService _dialogService
@inject IUserSettingsService _userSettingsService
@inject IUserInformationService _userInformationService
@inject ILocalStorageService _localStorage
@inject IPortalUserTelemetryService _telemetryService
@inject ISnackbar _snackbar
@inject NavigationManager _navigationManager

@attribute [Route(PageRoutes.Settings)]
@attribute [Route(PageRoutes.Settings_FR)]

@if (ViewedUser is null)
{
    <DHLoadingInitializer />
    return;
}
<DHMainContentTitle Title="@Localizer["Settings"]" />

<MudStack Spacing="8" Class="mb-16">
    <MudText Typo="Typo.h2" Class="mt-4">
        @Localizer["Public Profile"]
    </MudText>
    <SettingsField Label="@Localizer["Display Name"]" Description="@Localizer["Your display name will be shown around DataHub as your username."]">
        <MudTextField T="string" Disabled Variant="Variant.Outlined" Margin="Margin.Dense" Value="@ViewedUser.DisplayName" Label="@Localizer["Display name"]"/>
    </SettingsField>
    <SettingsField Label="@Localizer["Email Address"]" Description="@Localizer["Your email address will be used to send you notifications."]">
        <MudTextField T="string" Disabled Variant="Variant.Outlined" Margin="Margin.Dense" Value="@ViewedUser.Email" Label="@Localizer["Email"]"/>
    </SettingsField>
    <SettingsField Label="@Localizer["Profile Picture"]" Description="@Localizer["Your profile picture will be displayed beside your name around DataHub. You can it at any time and unlock more variations from completing achievements."]">
        <ImageSelectionView
            ViewedUser="@ViewedUser"
            IsProfilePictureDialog="@true"
            OnImageSelected="@(code => HandleImageSelected(code, true))"/>
    </SettingsField>
    <SettingsField Label="@Localizer["Profile Background"]" Description="@Localizer["Your profile background will be displayed on your profile page. You can unlock more variations from completing achievements and change it at any time."]">
        <ImageSelectionView
            ViewedUser="@ViewedUser"
            IsProfilePictureDialog="@false"
            OnImageSelected="@(code => HandleImageSelected(code, false))"/>
    </SettingsField>
    <MudDivider/>
    <SettingsField Label="@Localizer["Display Achievements"]" Description="@Localizer["You can choose whether to hide or display your achievements in the DataHub. This will also prevent the achievement notifications from displaying on your screen. You can change it at any time."]">
        <MudSwitch T="bool" Label="@Localizer["Show Achievements"]" Value="@(!ViewedUser.UserSettings.HideAchievements)" Color="Color.Primary" UnCheckedColor="@Color.Dark" ValueChanged="HandleHideAchievementsChanged"/>
    </SettingsField>
    <SettingsField Label="@Localizer["Display page alerts and tutorials"]" Description="@Localizer["Choose whether or not to display alert and tutorial dialogs in Datahub."]">
        <MudSwitch T="bool" Label="@Localizer["Show alerts and tutorials"]" Value="@(!ViewedUser.UserSettings.HideAlerts)" Color="Color.Primary" UnCheckedColor="@Color.Dark" ValueChanged="HandleHideAlertsChanged"/>
        <DHButton OnClick="@ClearAlerts">@Localizer["Reset alert settings"]</DHButton>
    </SettingsField>

    <MudDivider />
    
    <MudText Typo="Typo.h2">
        @Localizer["Portal Appearance"]
    </MudText>
    <SettingsField Label="@Localizer["Theme Preferences"]" Description="@Localizer["Choose how DataHub looks to you. Select a single theme, or sync with your operating system automatically."]">
        <MudSelect T="string" Label="@Localizer["Current Theme"]" Variant="Variant.Outlined" AnchorOrigin="Origin.BottomCenter" Value="@("DataHub Light")">
            <MudSelectItem T="string" Value="@("DataHub Light")" />
            <MudSelectItem Disabled T="string" Value="@("DataHub Dark")" />
            <MudSelectItem Disabled T="string" Value="@("Space Light")" />
            <MudSelectItem Disabled T="string" Value="@("Space Dark")" />
        </MudSelect>
    </SettingsField>
    <SettingsField Label="@Localizer["Language Selection"]" Description="@Localizer["Choose your preferred language for DataHub."]">
        <MudSelect T="string" Label="@Localizer["Current Language"]" Variant="Variant.Outlined" AnchorOrigin="Origin.BottomCenter" Value="@ViewedUser.UserSettings.Language" ValueChanged="HandleLanguageChanged">
            <MudSelectItem T="string" Value="@("en-CA")">English</MudSelectItem>
            <MudSelectItem T="string" Value="@("fr-CA")">Français</MudSelectItem>
        </MudSelect>
    </SettingsField>

    <MudDivider />

    <MudText Typo="Typo.h2">
        @Localizer["Notifications"]
    </MudText>
    <SettingsField Label="@Localizer["Email preferences"]" Description="@Localizer["Choose your preferred frequency of communications from the DataHub team"]">
        <MudRadioGroup T="int" Value="1">
            <MudStack Spacing="0">
                <MudRadio Value="1" Color="Color.Primary">
                    @Localizer["I want to receive all notifications"]
                </MudRadio>
                <MudRadio Value="2" Disabled>
                    @Localizer["I want to receive only important notifications"]
                </MudRadio>
                <MudRadio Value="3" Disabled>
                    @Localizer["I want to receive only critical notifications"]
                </MudRadio>
            </MudStack>
        </MudRadioGroup>
    </SettingsField>

    <DatahubAuthView AuthLevel="DatahubAuthView.AuthLevels.DatahubAdminGuestView">
        <MudDivider />
        <MudText Typo="Typo.h2">
            @Localizer["Admin Settings"]
        </MudText>
        @if (!_isViewAsAdmin)
        {
            <MudText Typo="Typo.body1">@Localizer["To access admin tools, you must enable Admin Access."]</MudText>
        }
        <MudSwitch T="bool"
                   Color="Color.Primary"
                   Value="@_isViewAsAdmin"
                   ValueChanged="@ToggleAdminMode"
                   Label="@Localizer["Admin Access Enabled"]" />
    </DatahubAuthView>
    <DatahubAuthView AuthLevel="DatahubAuthView.AuthLevels.DatahubAdmin">
        <MudText Typo="Typo.h3">@Localizer["Admin Tools"]</MudText>
        <span>
        @foreach (var tool in _adminTools)
        {
            <DHButton Href="@($"{PageRoutes.ToolPrefix}/{tool}")" Size="Size.Small" Color="Color.Primary" Variant="Variant.Filled" Class="mr-4">@Localizer[tool]</DHButton>
        }
        </span>
    </DatahubAuthView>
</MudStack>

@code {

    //[Parameter]
    //public PortalUser ViewedUser { get; set; }

    //[Parameter]
    //public EventCallback<PortalUser> OnViewedUserChanged { get; set; }

    private PortalUser ViewedUser;
    private EventCallback<PortalUser> OnViewedUserChanged;
    private bool _isViewAsAdmin;
    private List<String> _adminTools;

    protected override async Task OnInitializedAsync()
    {
        ViewedUser = await _userInformationService.GetCurrentPortalUserAsync();
        OnViewedUserChanged = EventCallback.Factory.Create<PortalUser>(this, HandleViewedUserChanged);
        _isViewAsAdmin = !(await _userInformationService.IsViewingAsGuest());
        _adminTools = new List<String> { 
            PersonalSidebar.SectionViews.Diagnostics, PersonalSidebar.SectionViews.Statistics, 
            PersonalSidebar.SectionViews.HealthCheck, PersonalSidebar.SectionViews.Users,
            PersonalSidebar.SectionViews.Email, PersonalSidebar.SectionViews.SupportRequests,
            PersonalSidebar.SectionViews.AzureSubscriptions
        };
    }

    private async Task HandleImageSelected(string code, bool isProfilePicture)
    {
        ViewedUser.ProfilePictureUrl = isProfilePicture ? code : ViewedUser.ProfilePictureUrl;
        ViewedUser.BannerPictureUrl = isProfilePicture ? ViewedUser.BannerPictureUrl : code;

        await OnViewedUserChanged.InvokeAsync(ViewedUser);
    }

    private async Task HandleHideAchievementsChanged()
    {
        ViewedUser.UserSettings.HideAchievements = !ViewedUser.UserSettings.HideAchievements;
        await OnViewedUserChanged.InvokeAsync(ViewedUser);
    }
    
    private async Task HandleHideAlertsChanged()
    {
        ViewedUser.UserSettings.HideAlerts = !ViewedUser.UserSettings.HideAlerts;
        await OnViewedUserChanged.InvokeAsync(ViewedUser);
    }

    private async Task ClearAlerts()
    {
        ViewedUser.UserSettings.HiddenAlerts = null;
        await OnViewedUserChanged.InvokeAsync(ViewedUser);
    }

    private async Task HandleViewedUserChanged(PortalUser updatedUser)
    {
        ViewedUser = updatedUser;
        var success = await _userInformationService.UpdatePortalUserAsync(updatedUser);
        if (success)
        {
            _snackbar.Add(Localizer["User information updated"], Severity.Success);
        }
        else
        {
            _snackbar.Add(Localizer["Failed to update user information"], Severity.Error);
        }

        await InvokeAsync(StateHasChanged);
    }

    private async Task HandleLanguageChanged(string language)
    {
        await _localStorage.SetItemAsStringAsync("language", language);
        await _userSettingsService.RegisterUserLanguage(language);
        await _telemetryService.LogTelemetryEvent(TelemetryEvents.UserToggleCulture);
        await _userSettingsService.SetLanguage(language);

        ViewedUser.UserSettings.Language = language;

        await OnViewedUserChanged.InvokeAsync(ViewedUser);
    }

    private async Task ToggleAdminMode()
    {
        _isViewAsAdmin = !_isViewAsAdmin;
        await _userInformationService.SetViewingAsGuest(!_isViewAsAdmin);
        _navigationManager.NavigateTo(_navigationManager.Uri, true);
    }
}