@page "/share/opendata/{FileId}"
@using Datahub.Core.Services.Api;
@using Datahub.Core.Services.Notification;
@using Datahub.Metadata.DTO
@inject CustomNavigation NavManager
@inject IPublicDataFileService PublicFileService
@inject IDbContextFactory<DatahubProjectDBContext> dbContextFactory
@inject IMSGraphService GraphService
@inject UIControlsService UI
@inject IUserInformationService UserInformationService
@inject IMetadataBrokerService MetadataBrokerService
@inject IOpenDataService OpenDataService
@inject IEmailNotificationService EmailNotificationService
@inject IJSRuntime jsRuntime

<MudText Typo="Typo.h4">
    @Localizer["OPENDATA-WIZARD.Page_Title"]
</MudText>

<MudGrid Spacing="2" Justify="Justify.SpaceBetween">
    <MudItem xs="6">
        <MudStack>
            @*metadata*@
            <MudCard>
                <MudCardHeader>
                    <MudStack>
                        <MudText Typo="Typo.h5">
                            @GetStepTitle(OpenDataSharingStatus.EnterMetadata)
                        </MudText>
                        @if (!string.IsNullOrEmpty(_requestFilename))
                        {
                            <MudText Typo="Typo.caption"><b>@Localizer["Filename"]:</b>&nbsp;@_requestFilename</MudText>
                        }
                    </MudStack>
                </MudCardHeader>
                <MudCardContent>
                    @if (ShowMetadataEditor && _isOwnRequest)
                    {
                        <ObjectMetadataEditor @ref=@_metadataEditor
                                          ObjectId=@FileId
                                          SaveButtonLabel=@Localizer["OPENDATA-WIZARD.Save_button"]
                                          OnDiscard=@(_editSavedMetadata ? HandleDiscardMetadata : null)
                                          OnNewMetadataCreated=@HandleMetadataCreated
                                          OnExistingMetadataLoaded=@HandleMetadataCreated
                                          OnSave=@HandleSaveMetadata />
                    }
                    else if (_isOwnRequest)
                    {
                        <MudButton OnClick=@ManuallyShowMetadataEditor Disabled=@_savingData Variant="Variant.Outlined" Color="Color.Primary">
                            <MudText>@Localizer["OPENDATA-WIZARD.Edit_button"]</MudText>
                        </MudButton>
                    }
                    else
                    {
                        @if (_requestingUser != null)
                        {
                            <MudText>@Localizer["Requesting User"]: @_requestingUser.DisplayName</MudText>
                        }
                    }
                </MudCardContent>
            </MudCard>

            @if (ShowApprovalCards)
            {
                @if (ShowApprovalForm)
                {
                    @*approvalForm form*@
                    <MudCard>
                        <MudCardHeader>
                            <MudText Typo="Typo.h5">
                                @GetStepTitle(OpenDataSharingStatus.OpenGovApprovalForm)
                            </MudText>
                        </MudCardHeader>
                        <MudCardContent>
                            <Datahub.Portal.Pages.Forms.ShareWorkflow.ApprovalForm 
                                ApprovalFormId=@_approvalFormId
                                OnSubmitForm=@UpdateApprovalFormId
                                DatasetTitle=@_datasetTitle
                                User=@_requestingUser 
                            />
                        </MudCardContent>
                    </MudCard>
                }
                else if (ApprovalFormSubmitted)
                {
                    @*approval form submitted*@
                    <MudCard>
                        <MudCardHeader>
                            <MudText Typo="Typo.h5">
                                @GetStepTitle(OpenDataSharingStatus.OpenGovApprovalForm)
                            </MudText>
                        </MudCardHeader>
                        <MudCardContent>
                            <MudStack Spacing="3">
                                <MudStack>
                                    <MudText>
                                        @Localizer["OPENDATA-WIZARD.Approval_Filled_out_1"]
                                    </MudText>
                                    <MudText>
                                        @Localizer["OPENDATA-WIZARD.Approval_Filled_out_2"]
                                    </MudText>
                                    <MudText>
                                        @Localizer["OPENDATA-WIZARD.Approval_Filled_out_3"]
                                    </MudText>
                                </MudStack>
                                <MudStack Row>
                                    <MudButton OnClick=@GenerateApprovalDocument Variant="Variant.Outlined" Color="Color.Primary">
                                        @Localizer["OPENDATA-WIZARD.GenerateDOCX_button"]
                                    </MudButton>
                                    <MudButton OnClick=@ManuallyShowApprovalForm Variant="Variant.Outlined" Color="Color.Primary">
                                        @Localizer["OPENDATA-WIZARD.AmendApprovalForm_button"]
                                    </MudButton>
                                </MudStack>
                            </MudStack>
                        </MudCardContent>
                    </MudCard>

                    @if (ShowSignedPdfPanel)
                    {
                        @*show signed pdf panel*@
                        <MudCard>
                            <MudCardHeader>
                                <MudText Typo="Typo.h5">@GetStepTitle(OpenDataSharingStatus.SubmitSignedPDF)</MudText>
                            </MudCardHeader>
                            <MudCardContent>
                                <MudStack>
                                    <MudStack Row>
                                        <MudTextField @bind-Value="_signedApprovalFormUrl"
                                          DebounceInterval="250"
                                          Label=@Localizer["OPENDATA-WIZARD.EnterGcDocsUrl"]
                                          Clearable="true"
                                          Variant="Variant.Outlined"
                                          Margin="Margin.Dense" />

                                        <MudButton Variant="Variant.Outlined"
                                                   Color="Color.Primary" 
                                                   OnClick=@UploadSignedDocument 
                                                   Disabled=@UploadSignedDocumentDisabled()>
                                            @if (_savingData)
                                            {
                                                <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                                                <MudText Class="ms-2">@Localizer["BUTTONS.Submit"]</MudText>
                                            }
                                            else
                                            {
                                                <MudText>@Localizer["BUTTONS.Submit"]</MudText>
                                            }
                                        </MudButton>
                                    </MudStack>
                                </MudStack>
                            </MudCardContent>
                        </MudCard>
                    }
                }
            }

            @if (ShowUploadCard)
            {
                @*open data sharing status*@
                <MudCard>
                    <MudCardHeader>
                        <MudText Typo="Typo.h5">
                            @GetStepTitle(OpenDataSharingStatus.PendingUpload)
                        </MudText>
                    </MudCardHeader>
                    <MudCardContent>
                        @if (!OpenDataFileUploading)
                        {
                            <MudStack Class="mb-2">
                                <MudText>
                                    @(new MarkupString(Localizer["OPENDATA-WIZARD.Publish_As_URL_Desc1"]))
                                </MudText>
                                <MudText>
                                    @(new MarkupString(Localizer["OPENDATA-WIZARD.Publish_As_URL_Desc2"]))
                                </MudText>

                                <MudItem>
                                    <MudButton Variant="Variant.Outlined" OnClick=@PublishAsUrl Disabled=@_savingData Color="Color.Primary">
                                        @if (_savingData)
                                        {
                                            <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                                            <MudText Class="ms-2">@Localizer["OPENDATA-WIZARD.Publish_As_URL"]</MudText>
                                        }
                                        else
                                        {
                                            <MudText>@Localizer["OPENDATA-WIZARD.Publish_As_URL"]</MudText>
                                        }
                                    </MudButton>
                                </MudItem>

                                @if (!string.IsNullOrEmpty(_urlPublishError))
                                {
                                    @* url publication error*@
                                    <MudStack>
                                        <MudAlert Severity="Severity.Error">
                                            @Localizer["OPENDATA-WIZARD.Upload_Last_Error"]&nbsp;@_urlPublishError
                                        </MudAlert>
                                        <MudButton Variant="Variant.Outlined" OnClick=@EmailShareURLErrorToDatahub Disabled=@_emailSent Color="Color.Primary">
                                            <MudText>@Localizer["Email Datahub"]</MudText>
                                        </MudButton>
                                    </MudStack>
                                }
                            </MudStack>

                            @if (string.IsNullOrEmpty(_fileUrl))
                            {
                                <MudSpacer></MudSpacer>
                                <MudText><b>@Localizer["Or"]</b></MudText>
                                <MudSpacer></MudSpacer>
                                <MudStack>
                                    <MudText>
                                        @(new MarkupString(Localizer["OPENDATA-WIZARD.Upload_And_Publish_Desc"]))
                                    </MudText>

                                    <MudItem>
                                        <MudButton Variant="Variant.Outlined" OnClick=@UploadAndPublish Disabled=@_savingData Color="Color.Primary">
                                            @if (_savingData)
                                            {
                                                <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                                                <MudText Class="ms-2">@Localizer["OPENDATA-WIZARD.Upload_And_Publish"]</MudText>
                                            }
                                            else
                                            {
                                                <MudText>@Localizer["OPENDATA-WIZARD.Upload_And_Publish"]</MudText>
                                            }
                                        </MudButton>
                                    </MudItem>

                                    @if (_uploadStatus == OpenDataUploadStatus.Failed)
                                    {
                                        <MudStack>
                                            <MudAlert Severity="Severity.Error">
                                                @Localizer["OPENDATA-WIZARD.Upload_Last_Error"] @_uploadFileErrorMessage
                                            </MudAlert>
                                            <MudItem>
                                                <MudButton Variant="Variant.Outlined" OnClick=@EmailUploadFileErrorToDatahub Disabled=@_emailSent Color="Color.Primary">
                                                    <MudText>@Localizer["Email Datahub"]</MudText>
                                                </MudButton>
                                            </MudItem>                                            
                                        </MudStack>
                                    }
                                </MudStack>
                            }
                        }
                        else
                        {
                            <MudText>@Localizer["OPENDATA-WIZARD.Uploading_file_in_progress"]</MudText>
                        }
                    </MudCardContent>
                </MudCard>
            }

            @if (ShowPublicationDatePanel)
            {
                @*show publication date panel*@
                <MudCard>
                    <MudCardHeader>
                        <MudText Typo="Typo.h5">@Localizer["OPENDATA-WIZARD.PublicationDate"]</MudText>
                    </MudCardHeader>
                    <MudCardContent>
                        @_publicationDateText
                    </MudCardContent>
                </MudCard>
            }

            @if (ShowCancelPanel)
            {
                @*show cancel panel*@
                <MudCard>
                    <MudCardHeader>
                        <MudText Typo="Typo.h5">@Localizer["OPENDATA-WIZARD.CancelSharing"]</MudText>
                    </MudCardHeader>
                    <MudCardContent>
                        <MudText Class="mb-4">
                            @Localizer["OPENDATA-WIZARD.CancelSharingDescription"]
                        </MudText>
                        <MudButton Variant="Variant.Outlined" 
                                   Color="Color.Primary" 
                                   OnClick=@ShowCancelRequestDialog>
                            <MudText>@Localizer["BUTTONS.Cancel"]</MudText>                            
                        </MudButton>
                    </MudCardContent>
                </MudCard>
            }

            @*return to initiative link*@
            <MudItem>
                <MudLink Href=@($"/w/{_projectCode}") Underline="Underline.None">
                    @Localizer[$"{LOCALIZATION_PREFIX}.ReturnToProject"]
                </MudLink>
            </MudItem>
        </MudStack>
    </MudItem>

    @*right side steps*@
    <MudItem xs="6">
        <div id="stepsDiv">
            <AeSteps T=@OpenDataSharingStatus
                     CurrentStepState=@GetState
                     StepItems=@_steps
                     StepTitle=@StepTitle
                     StepMessage=@StepMessage
                     PassedIcon=@_checkIcon />

            @if (ShowPublicUrl)
            {
                var publicUrl = GetOpenDataFileUrl();
                <MudCard>
                    <MudCardHeader>
                        <MudText Typo="Typo.h5">@Localizer["OPENDATA-WIZARD.PublicUrl"]</MudText>
                    </MudCardHeader>
                    <MudCardContent>
                        @if (!_unpublishedDate.HasValue)
                        {
                            <MudLink Href=@publicUrl Underline="Underline.None">@publicUrl</MudLink>
                            @if (_isOwnRequest)
                            {
                                <MudItem Class="mt-2">
                                    <MudButton Variant="Variant.Outlined" OnClick=@ShowCancelSharingFileDialog Disabled=@_savingData>
                                        <MudText>@Localizer["OPENDATA-WIZARD.UnpublishFile"]</MudText>
                                    </MudButton>
                                </MudItem>
                            }
                        }
                        else
                        {
                            <MudText>@Localizer["OPENDATA-WIZARD.UnpublishFileLabel"]</MudText>
                        }

                    </MudCardContent>
                </MudCard>
            }
        </div>
    </MudItem>
</MudGrid>

@code {
    private static readonly string LOCALIZATION_PREFIX = "OPENDATA-WIZARD";

    [Parameter]
    public string FileId { get; set; }

    private Guid _fileIdGuid;

    private ObjectMetadataEditor _metadataEditor;

    private bool _savingData = false;

    private List<OpenDataSharingStatus> _steps = Enum.GetValues<OpenDataSharingStatus>().ToList();
    private OpenDataSharingStatus _currentStep = OpenDataSharingStatus.EnterMetadata;
    private RenderFragment _checkIcon = @<i class="fa fa-check"></i>
        ;

    private Dictionary<OpenDataSharingStatus, (string, string)?> _stepInfo = new();
    private Dictionary<OpenDataSharingStatus, AeSteps<OpenDataSharingStatus>.StepState> _stepStates = new();

    private string StepTitle(OpenDataSharingStatus i) => _stepInfo.GetValueOrDefault(i)?.Item1;
    private string StepMessage(OpenDataSharingStatus i) => _stepInfo.GetValueOrDefault(i)?.Item2;
    private AeSteps<OpenDataSharingStatus>.StepState GetState(OpenDataSharingStatus i) => _stepStates[i];

    private bool ShowMetadataEditor => _currentStep == OpenDataSharingStatus.EnterMetadata || _editSavedMetadata;
    private bool ShowSkipMetadata => _currentStep == OpenDataSharingStatus.EnterMetadata;
    private bool ShowApprovalCards => _isOwnRequest && _currentStep < OpenDataSharingStatus.PendingApproval && !_editSavedMetadata;
    private bool ShowApprovalForm => _currentStep == OpenDataSharingStatus.OpenGovApprovalForm || _editSubmittedApproval;
    private bool ApprovalFormSubmitted => _stepStates[OpenDataSharingStatus.OpenGovApprovalForm] == AeSteps<OpenDataSharingStatus>.StepState.Passed;
    private bool ShowSignedPdfPanel => _currentStep == OpenDataSharingStatus.SubmitSignedPDF;
    private bool ShowPublicationDatePanel => _currentStep == OpenDataSharingStatus.PendingPublication;
    private bool ShowPublicUrl => _currentStep == OpenDataSharingStatus.AccessOpenData;
    private bool ShowCancelPanel => _currentStep <= OpenDataSharingStatus.PendingApproval && _isOwnRequest && !_editSavedMetadata;
    private bool ShowUploadCard => _currentStep == OpenDataSharingStatus.PendingUpload && _isOwnRequest && !_editSavedMetadata;

    private string GenerateApprovalDocumentUrl => $"/api/OpenDataApproval?id={_approvalFormId}";

    private bool _isOwnRequest = false;
    private DateTime? _unpublishedDate;

    private bool _editSavedMetadata = false;
    private bool _editSubmittedApproval = false;

    private string _publicationDateText = string.Empty;
    private string _urlPublishError;

    private long _sharedDataFileId;
    private OpenDataUploadStatus _uploadStatus = OpenDataUploadStatus.NotStarted;
    private string _uploadFileErrorMessage;

    private bool _emailSent;

    private int _approvalFormId = 0;
    private int _approvalFormSectorId = 0;
    private int _approvalFormBranchId = 0;

    private string _signedApprovalFormUrl;

    private GraphUser _requestingUser;
    private string _requestFilename;
    private string _projectCode;
    private string _fileUrl;
    private bool IsExternalShare => !string.IsNullOrEmpty(_fileUrl);

    private string _datasetTitle;

    private string GetOpenDataFileUrl()
    {
        var language = Thread.CurrentThread.CurrentCulture.Name.ToLower().Contains("fr") ? "fr" : "en";
        var subdomain = OpenDataService.IsStaging() ? "registry-staging" : "registry";
        return $"https://{subdomain}.open.canada.ca/{language}/dataset/{FileId}";
    }

    private void UpdateCurrentStatus(OpenDataSharingStatus step, bool passed = false)
    {
        _editSavedMetadata = false;
        _editSubmittedApproval = false;

        _currentStep = step;
        _stepStates[step] = passed ? AeSteps<OpenDataSharingStatus>.StepState.Passed : AeSteps<OpenDataSharingStatus>.StepState.Running;

        foreach (var stepv in Enum.GetValues<OpenDataSharingStatus>())
        {
            if (stepv < step)
            {
                _stepStates[stepv] = AeSteps<OpenDataSharingStatus>.StepState.Passed;
            }
            else if (stepv > step)
            {
                _stepStates[stepv] = AeSteps<OpenDataSharingStatus>.StepState.Queued;
            }
        }
    }

    private void ManuallyShowMetadataEditor()
    {
        _editSavedMetadata = true;
    }

    private void ManuallyShowApprovalForm()
    {
        _editSubmittedApproval = true;
    }

    private async void GenerateApprovalDocument()
    {
        try
        {
            await jsRuntime.InvokeVoidAsync("open", GenerateApprovalDocumentUrl, "_blank");
        }
        catch (Exception)
        {
        }
    }

    private async Task UpdateApprovalFormId(Forms.ShareWorkflow.ApprovalFormSubmitArgs args)
    {
        _savingData = true;
        try
        {
            _approvalFormId = args.FormId;
            _approvalFormSectorId = args.SectorId;
            _approvalFormBranchId = args.BranchId;
            await PublicFileService.UpdateOpenDataApprovalFormId(_fileIdGuid, _approvalFormId);
        }
        finally
        {
            _savingData = false;
        }
        if (_currentStep == OpenDataSharingStatus.OpenGovApprovalForm)
        {
            UpdateCurrentStatus(OpenDataSharingStatus.SubmitSignedPDF);
        }
        else
        {
            _editSubmittedApproval = false;
        }
    }

    private async Task UploadSignedDocument()
    {
        if (IsDocumentUrlValid())
        {
            _savingData = true;

            await PublicFileService.UpdateOpenDataSignedApprovalFormUrl(_fileIdGuid, _signedApprovalFormUrl);
            await PublicFileService.NotifySignedDocumentUploaded();

            _savingData = false;
            UpdateCurrentStatus(OpenDataSharingStatus.PendingApproval);
        }
    }

    private async Task PublishAsUrl()
    {
        _savingData = true;
        try
        {
            _urlPublishError = string.Empty;

            var fieldValues = await MetadataBrokerService.GetObjectMetadataValues(FileId);

            // get the file url (use the saved file url or build the url if none given)
            var url = !string.IsNullOrEmpty(_fileUrl) ? _fileUrl : PublicFileService.GetPublicSharedFileUrl(FileId);

            // publish to open data
            var result = await OpenDataService.PublishFileAsUrl(fieldValues, IsExternalShare, url);

            if (result.Succeeded)
            {
                var updatedFile = await PublicFileService.UpdateOpenDataPublication(_fileIdGuid, true);
                UpdateShareFileStatus(updatedFile);

                // catalog the shared object
                //await CatalogSharedObject(fieldValues);

                await InvokeAsync(StateHasChanged);
            }
            else
            {
                _urlPublishError = result.ErrorMessage;
            }
        }
        finally
        {
            _savingData = false;
        }
    }

    private async Task UploadAndPublish()
    {
        try
        {
            _savingData = true;

            var fieldValues = await MetadataBrokerService.GetObjectMetadataValues(FileId);
            var fileUri = await PublicFileService.DownloadPublicUrlSharedFile(_fileIdGuid);

            _ = OpenDataService.PublishFile(fieldValues, _sharedDataFileId, FileId, _requestFilename, fileUri.ToString());

            _uploadStatus = OpenDataUploadStatus.UploadingFile;
            StartOpenDataUploadTimer();

            //await CatalogSharedObject(fieldValues);

            await InvokeAsync(StateHasChanged);
        }
        finally
        {
            _savingData = false;
        }
    }

    private async Task EmailUploadFileErrorToDatahub()
    {
        await EmailErrorToDatahub(Localizer["OpenData Share file upload error"], _uploadFileErrorMessage);
    }

    private async Task EmailShareURLErrorToDatahub()
    {
        await EmailErrorToDatahub(Localizer["OpenData Share file as URL error"], _urlPublishError);
    }

    private async Task EmailErrorToDatahub(string subject, string message)
    {
        try
        {
            _emailSent = true;
            await InvokeAsync(StateHasChanged);
            var currentUser = await UserInformationService.GetCurrentGraphUserAsync();
            await EmailNotificationService.EmailErrorToDatahub(subject, currentUser?.Mail, message, "", "");
        }
        catch (Exception)
        {
            _emailSent = false;
            await InvokeAsync(StateHasChanged);
        }
    }

    private async Task UnpublishFile(bool confirmed)
    {
        if (confirmed)
        {
            try
            {
                _savingData = true;
                var result = await OpenDataService.UnpublishFile(FileId);
                if (result.Succeeded)
                {
                    _unpublishedDate = DateTime.UtcNow;
                }
                await InvokeAsync(StateHasChanged);
            }
            finally
            {
                _savingData = false;
            }
        }
        await UI.ToggleModal();
    }

    private bool OpenDataFileUploading => _uploadStatus == OpenDataUploadStatus.UploadingFile;

    private System.Timers.Timer _openDataUploadTimer;

    private void StartOpenDataUploadTimer()
    {
        if (_openDataUploadTimer is null)
        {
            _openDataUploadTimer = new(5000);
            _openDataUploadTimer.Elapsed += CheckOpenDataUploadStatus;
        }
        _openDataUploadTimer.Enabled = true;
    }

    private async void CheckOpenDataUploadStatus(object source, System.Timers.ElapsedEventArgs e)
    {
        using (var ctx = dbContextFactory.CreateDbContext())
        {
            var mustRefresh = false;
            var sharedFile = ctx.OpenDataSharedFiles.FirstOrDefault(e => e.SharedDataFile_ID == _sharedDataFileId);

            if (sharedFile.UploadStatus_CD != _uploadStatus)
            {
                _uploadStatus = sharedFile.UploadStatus_CD;
                _uploadFileErrorMessage = sharedFile.UploadError_TXT;
                mustRefresh = true;
            }

            if (_uploadStatus == OpenDataUploadStatus.UploadCompleted)
            {
                _openDataUploadTimer.Enabled = false;
                UpdateShareFileStatus(sharedFile);
                mustRefresh = true;
            }

            if (mustRefresh)
            {
                await InvokeAsync(StateHasChanged);
            }
        }
    }

    private void HandleMetadataCreated()
    {
        var datePublished = _metadataEditor.GetValue("date_published");
        if (string.IsNullOrEmpty(datePublished))
        {
            _metadataEditor.SetValue("date_published", DateTime.Now.ToShortDateString());            
        }
    }

    private async Task HandleSaveMetadata(FieldValueContainer fieldValues)
    {
        _datasetTitle = _metadataEditor.GetTitle();

        await PublicFileService.MarkMetadataComplete(_fileIdGuid);

        var uri = GetBaseUrl(NavManager.Uri);
        await NavManager.NavigateTo($"{uri}#stepsDiv", true);

        if (_currentStep == OpenDataSharingStatus.EnterMetadata)
        {
            UpdateCurrentStatus(OpenDataSharingStatus.OpenGovApprovalForm);
        }
        else
        {
            _editSavedMetadata = false;
        }
    }

    private void HandleDiscardMetadata()
    {
        _editSavedMetadata = false;
    }

    static string GetBaseUrl(string url)
    {
        var hashIndex = url.IndexOf('#');
        return hashIndex > 0 ? url.Substring(0, hashIndex) : url;
    }

    private async Task AcceptMetadata()
    {
        await PublicFileService.MarkMetadataComplete(_fileIdGuid);
        UpdateCurrentStatus(OpenDataSharingStatus.OpenGovApprovalForm);
    }

    private async Task ShowCancelRequestDialog()
    {
        var promptText = new List<string>() { Localizer["OPENDATA-WIZARD.CancelSharingPrompt"] };
        RenderFragment cancelDialog =
            @<UserChoiceModal HeaderText=@Localizer["OPENDATA-WIZARD.CancelSharing"]
                 ChoiceTextList=@promptText
                 OnDecision="HandleCancel"
                 ConfirmText=@Localizer["COMMON.Yes"]
                 CancelText=@Localizer["COMMON.No"] />
        ;
        await UI.ToggleModal(cancelDialog);
    }

    private async Task ShowCancelSharingFileDialog()
    {
        var promptText = new List<string>() { Localizer["OPENDATA-WIZARD.UnpublishOpenDataSharingPrompt"] };
        RenderFragment modalDialog =
            @<UserChoiceModal HeaderText=@Localizer["OPENDATA-WIZARD.UnpublishOpenDataSharing"]
                 ChoiceTextList=@promptText
                 OnDecision="UnpublishFile"
                 ConfirmText=@Localizer["COMMON.Yes"]
                 CancelText=@Localizer["COMMON.No"] />
    ;
        await UI.ToggleModal(modalDialog);
    }

    private async void HandleCancel(bool isCancelled)
    {
        if (isCancelled)
        {
            _savingData = true;
            await PublicFileService.CancelPublicDataShare(_fileIdGuid);
            _savingData = false;
            await NavManager.NavigateTo("/", true);
        }
        await UI.ToggleModal();
    }

    protected override async Task OnInitializedAsync()
    {
        if (Guid.TryParse(FileId, out _fileIdGuid))
        {
            var loadTask = PublicFileService.LoadOpenDataSharedFileInfo(_fileIdGuid);
            var currentUser = await UserInformationService.GetCurrentGraphUserAsync();

            _stepInfo = _steps.ToDictionary(s => s, s => GetStepPair(s));
            _stepStates = _steps.ToDictionary(s => s, s => AeSteps<OpenDataSharingStatus>.StepState.Queued);

            var sharedFileInfo = await loadTask;
            if (sharedFileInfo is null)
            {
                await NavManager.NavigateTo("/", true);
                return;
            }

            _sharedDataFileId = sharedFileInfo.SharedDataFile_ID;
            _uploadStatus = sharedFileInfo.UploadStatus_CD;
            _uploadFileErrorMessage = sharedFileInfo.UploadError_TXT;

            _approvalFormId = sharedFileInfo.ApprovalForm_ID ?? 0;
            await ReadSectorAndBranch();

            _signedApprovalFormUrl = sharedFileInfo.SignedApprovalForm_URL;
            _requestFilename = sharedFileInfo.Filename_TXT;
            _publicationDateText = sharedFileInfo.PublicationDate_DT?.ToShortDateString();

            _requestingUser = await GetRequestUser(sharedFileInfo.RequestingUser_ID);

            _isOwnRequest = currentUser.Id == _requestingUser.Id;
            _projectCode = sharedFileInfo.ProjectCode_CD;
            _fileUrl = sharedFileInfo.FileUrl_TXT;
            _editSubmittedApproval = !string.IsNullOrEmpty(_fileUrl) && sharedFileInfo.GetOpenDataSharingStatus() == OpenDataSharingStatus.SubmitSignedPDF;

            _unpublishedDate = sharedFileInfo.UnpublishDate_DT;

            UpdateShareFileStatus(sharedFileInfo);
        }
        else
        {
            await NavManager.NavigateTo("/", true);
        }
    }

    private Task<GraphUser> GetRequestUser(string requestingUserId)
    {
        if ((requestingUserId ?? "").Contains('@'))
            return GraphService.GetUserFromEmailAsync(requestingUserId, CancellationToken.None);
        return GraphService.GetUserAsync(requestingUserId, CancellationToken.None);
    }

    private (string, string)? GetStepPair(OpenDataSharingStatus status)
    {
        var prefix = SharedDataFile.OPEN_DATA_SHARING_STATUS_LOCALIZATION_PREFIX;
        var title = $"{prefix}.{status}.Title";
        var desc = $"{prefix}.{status}.Description";
        return (Localizer[title], Localizer[desc]);
    }

    private string GetStepTitle(OpenDataSharingStatus status) => GetStepPair(status).Value.Item1;

    private void UpdateShareFileStatus(OpenDataSharedFile file)
    {
        var status = file.GetOpenDataSharingStatus();
        UpdateCurrentStatus(status, status == OpenDataSharingStatus.AccessOpenData);
        UpdateOpenDataUploadStatus(status);
    }

    private void UpdateOpenDataUploadStatus(OpenDataSharingStatus status)
    {
        if (status == OpenDataSharingStatus.PendingUpload && _uploadStatus == OpenDataUploadStatus.UploadingFile)
        {
            StartOpenDataUploadTimer();
        }
    }

    private bool IsDocumentUrlValid()
    {
        return (_signedApprovalFormUrl ?? string.Empty).StartsWith(GcDocs.BaseUrl, StringComparison.InvariantCultureIgnoreCase);
    }

    private bool UploadSignedDocumentDisabled() => _savingData || !IsDocumentUrlValid();

    private async Task ReadSectorAndBranch()
    {
        if (_approvalFormId != 0)
        {
            var approvalForm = await MetadataBrokerService.GetApprovalForm(_approvalFormId);
            if (approvalForm != null)
            {
                _approvalFormSectorId = approvalForm.Sector_ID;
                _approvalFormBranchId = approvalForm.Branch_ID;
            }
        }
    }
}

