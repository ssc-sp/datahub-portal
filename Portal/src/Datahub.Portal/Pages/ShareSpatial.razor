@page "/share/spatial/{ObjectId}"
@using Datahub.Portal.Model
@using System.Text.Json
@using Datahub.Core.Services.Api
@inject IUserInformationService UserInformationService
@inject CustomNavigation NavManager
@inject IDbContextFactory<DatahubProjectDBContext> dbContextFactory
@inject IMSGraphService GraphService
@inject IPublicDataFileService PublicFileService
@inject UIControlsService UI
@inject IGeoCoreServiceFactory GeoCoreServiceFactory
@inject IJSRuntime jsRuntime

<AeTypography style="margin-left: 2rem;" Variant="h2">@Localizer["FGP-WIZARD.Page_Title"]</AeTypography>

@if (_sharedObject is not null)
{
    <AeFlex>
        <AeFlex Vertical style="margin-left: 2rem; width: 50%;">
            @* title *@
            @if (_requestSummary is not null)
            {
                <AeCard>
                    <AeTypography Variant="h3">@Localizer["FGP-WIZARD.Title"]</AeTypography>
                    <AeTypography Variant="p">@Title</AeTypography>
                </AeCard>
            }

            @* 1- fill the approval form *@
            @if (ShowApprovalForm)
            {
                <AeCard>
                    <AeTypography Variant="h3">@StepTitle(SpatialObjectShareStatus.FillApprovalForm)</AeTypography>
                    <Datahub.Portal.Pages.Forms.ShareWorkflow.ApprovalForm 
                    ApprovalFormId=@ApprovalFormId 
                    OnSubmitForm=@UpdateApprovalFormId 
                    User=@_requestingUser/>
                    <div>&nbsp;</div>
                </AeCard>
            }

            @* 2- show submit approval form *@
            @if (ShowSubmitApprovalForm)
            {
                <AeCard>
                    <AeTypography Variant="h3">@StepTitle(SpatialObjectShareStatus.SubmitApprovalForm)</AeTypography>
                    <AeFlex Vertical="true" style="margin: 1rem 1rem 1rem 0rem;">
                        <AeTypography Variant="p">@Localizer["FGP-WIZARD.Approval_Filled_out_1"]</AeTypography>
                        <AeTypography Variant="p">@Localizer["FGP-WIZARD.Approval_Filled_out_2"]</AeTypography> 
                        <AeTypography Variant="p">@Localizer["FGP-WIZARD.Approval_Filled_out_3"]</AeTypography>
                    </AeFlex>

                    <AeFlex>
                        <AeButton OnClickEvent=@GenerateApprovalDocument>@Localizer["FGP-WIZARD.GenerateDOCX_button"]</AeButton>
                        <div>&nbsp;</div>
                        <AeButton OnClickEvent=@ManuallyShowApprovalForm>@Localizer["FGP-WIZARD.AmendApprovalForm_button"]</AeButton>
                    </AeFlex>

                    <AeFlex Vertical="true" style="margin: 1rem 1rem 1rem 0rem;">
                        <AeTypography>@Localizer["FGP-WIZARD.EnterGcDocsUrl"]:</AeTypography>
                        <input @bind=@_signedApprovalFormUrl class="ae input" style="width: 100%" @bind:event="oninput"/>
                    </AeFlex>

                    <AeFlex>
                        <AeButton OnClickEvent=@UploadSignedDocument Disabled=@UploadSignedDocumentDisabled()>@Localizer["BUTTONS.Submit"]</AeButton>
                        <div>
                            @if (_savingData)
                            {
                                <Spinner Small=@true/>
                            }
                        </div>
                    </AeFlex>
                </AeCard>
            }

            @*3- waiting for approval*@
            @if (ShowWaitingForApproval)
            {
                <AeCard style="margin-top: 1rem;">
                    <AeTypography Variant="h3">@StepTitle(SpatialObjectShareStatus.WaitingForApproval)</AeTypography>
                    <p>@StepMessage(SpatialObjectShareStatus.WaitingForApproval)</p>
                </AeCard>
            }

            @*4- Publish dataset*@
            @if (ShowPublishPanel)
            {
                <AeCard style="margin-top: 1rem;">
                    <AeTypography Variant="h3">@StepTitle(SpatialObjectShareStatus.PublishDataset)</AeTypography>
                    <p>@StepMessage(SpatialObjectShareStatus.PublishDataset)</p>
                    <AeButton OnClickEvent=@HandlePublishDatset>@Localizer["FGP-WIZARD.PublishDataset_button"]</AeButton>
                    @if (string.IsNullOrEmpty(_publicationError))
                    {
                        <AeTypography Variant="p" style="font-size: 0.8em">
                            @_publicationError
                        </AeTypography>
                    }
                </AeCard>
            }

            @*5- Show Dataset URL*@
            @if (ShowPublicUrl)
            {
                <AeCard style="margin-top: 1rem;">
                    <AeTypography Variant="h3">@Localizer["FGP-WIZARD.PublicUrl"]</AeTypography>
                    <p><a href=@PublicationURL target="_blank">@PublicationURL</a></p>                        
                </AeCard>
            }

            @*cancel card*@
            @if (ShowCancelPanel)
            {
                <AeCard style="margin-top: 1rem;">
                    <Typography Variant="h3">@Localizer["FGP-WIZARD.CancelSharing"]</Typography>
                    <p>@Localizer["FGP-WIZARD.CancelSharingDescription"]</p>
                    <AeButton OnClickEvent=@ShowCancelRequestDialog>@Localizer["BUTTONS.Cancel"]</AeButton>
                </AeCard>
            }

        </AeFlex>

        <div>
            <AeSteps T=@SpatialObjectShareStatus
            CurrentStepState=@GetState
            StepItems=@_steps
            StepTitle=@StepTitle
            StepMessage=@StepMessage
            PassedIcon=@CheckIcon
        />
        </div>
    </AeFlex>
}

@code {

    [Parameter]
    public string ObjectId { get; set; }

    private SpatialObjectShare _sharedObject;
    private GeoDataShareRequest _requestSummary;

    private List<SpatialObjectShareStatus> _steps = Enum.GetValues<SpatialObjectShareStatus>().ToList();
    private GraphUser _requestingUser;
    private bool _editSubmittedApproval;
    private string _signedApprovalFormUrl;
    private bool _savingData;
    private bool _isOwnRequest;
    private string _publicationError;

    private IGeoCoreService _geoCoreService;

    protected override async Task OnInitializedAsync()
    {
        if (!IsValidObjectId(ObjectId))
            await NavManager.NavigateTo($"/", true);

        // read shared record
        using var ctx = dbContextFactory.CreateDbContext();

        _sharedObject = await ctx.GeoObjectShares.FirstOrDefaultAsync(e => e.GeoObjectShare_ID == ObjectId);

        // object not found, share has been unpublished or abandoned
        if (_sharedObject is null || _sharedObject.ShareStatus > SpatialObjectShareStatus.DatasetPublished)
            await NavManager.NavigateTo($"/", true);

        _requestingUser = await GraphService.GetUserFromEmailAsync(_sharedObject.Email_Contact_TXT, CancellationToken.None);

        var currentUser = await UserInformationService.GetCurrentGraphUserAsync();
        _isOwnRequest = currentUser.Id == _requestingUser.Id;

        _requestSummary = JsonSerializer.Deserialize<GeoDataShareRequest>(_sharedObject.Json_TXT);

        _geoCoreService = GeoCoreServiceFactory.CreateService();
    }

    private SpatialObjectShareStatus CurrentStatus => _sharedObject.ShareStatus;
    private int ApprovalFormId => _sharedObject.ApprovalForm_ID;

    private bool ShowApprovalForm => _isOwnRequest && (CurrentStatus == SpatialObjectShareStatus.FillApprovalForm || _editSubmittedApproval) && (ApprovalFormId != 0);
    private bool ShowSubmitApprovalForm => _isOwnRequest && CurrentStatus == SpatialObjectShareStatus.SubmitApprovalForm && !_editSubmittedApproval;
    private bool ShowWaitingForApproval => _isOwnRequest && CurrentStatus == SpatialObjectShareStatus.WaitingForApproval;    
    private bool ShowPublishPanel => _isOwnRequest && CurrentStatus == SpatialObjectShareStatus.PublishDataset;    
    private bool ShowCancelPanel => _isOwnRequest && CurrentStatus < SpatialObjectShareStatus.DatasetPublished;
    private bool ShowPublicUrl => CurrentStatus == SpatialObjectShareStatus.DatasetPublished;

    private string Title => CultureInfo.CurrentUICulture.TwoLetterISOLanguageName.ToLowerInvariant() == "fr" ? _requestSummary.title_fr : _requestSummary.title_en;

    private string GenerateApprovalDocumentUrl => $"/api/OpenDataApproval?id={ApprovalFormId}";

    private string PublicationURL => _geoCoreService.GetDatasetUrl(_sharedObject.Publication_ID, "en");

    private string StepTitle(SpatialObjectShareStatus status) => Localizer[$"{PREFIX}.{status}.Title"];
    private string StepMessage(SpatialObjectShareStatus status) => Localizer[$"{PREFIX}.{status}.Description"];
    private RenderFragment CheckIcon => @<i class="fa fa-check"></i>;

    private void ManuallyShowApprovalForm()
    {
        _editSubmittedApproval = true;
    }

    private async Task GenerateApprovalDocument()
    {
        try
        {
            await jsRuntime.InvokeVoidAsync("open", GenerateApprovalDocumentUrl, "_blank");
        }
        catch (Exception)
        {
        }
    }

    private AeSteps<SpatialObjectShareStatus>.StepState GetState(SpatialObjectShareStatus step)
    {
        if (step < CurrentStatus) 
            return AeSteps<SpatialObjectShareStatus>.StepState.Passed;

        if (step == CurrentStatus) 
            return AeSteps<SpatialObjectShareStatus>.StepState.Running;

        return AeSteps<SpatialObjectShareStatus>.StepState.Queued;
    }

    const string PREFIX = "SHARING-STATUS.FGP";

    static bool IsValidObjectId(string id) => Guid.TryParse(id, out Guid ignore);

    private async Task UpdateApprovalFormId(Forms.ShareWorkflow.ApprovalFormSubmitArgs args)
    {
        await UpdateCurrentStatus(SpatialObjectShareStatus.SubmitApprovalForm);
        _editSubmittedApproval = false;
    }

    private bool IsDocumentUrlValid()
    {
        return (_signedApprovalFormUrl ?? string.Empty).StartsWith(GcDocs.BaseUrl, StringComparison.InvariantCultureIgnoreCase);
    }

    private bool UploadSignedDocumentDisabled() => _savingData || !IsDocumentUrlValid();

    private async Task UploadSignedDocument()
    {
        if (IsDocumentUrlValid())
        {
            _savingData = true;
            await InvokeAsync(StateHasChanged);

            _sharedObject.Approval_Document_URL = _signedApprovalFormUrl;
            _sharedObject.ShareStatus = SpatialObjectShareStatus.WaitingForApproval;
            await UpdateSharedObject();

            await PublicFileService.NotifySignedDocumentUploaded();

            _savingData = false;
            await InvokeAsync(StateHasChanged);
        }
    }

    private async Task HandlePublishDatset()
    {
        try
        {
            _publicationError = string.Empty;
            _savingData = true;
            await InvokeAsync(StateHasChanged);

            var result = await _geoCoreService.PublishDataset(_sharedObject.Json_TXT);

            if (result.Suceeded)
            {
                _sharedObject.ShareStatus = SpatialObjectShareStatus.DatasetPublished;
                _sharedObject.Publication_ID = result.DatasetId;
                await UpdateSharedObject();
            }
            else
            {
                _publicationError = result.ErrorMessage;
            }
        }
        catch (Exception)
        {
            _publicationError = "Unknown error publishing the spatial dataset!";
        }
        finally
        {
            _savingData = false;
            await InvokeAsync(StateHasChanged);
        }
    }

    private async Task ShowCancelRequestDialog()
    {
        var promptText = new List<string>() { Localizer["OPENDATA-WIZARD.CancelSharingPrompt"] };
        RenderFragment cancelDialog = 
            @<UserChoiceModal HeaderText=@Localizer["OPENDATA-WIZARD.CancelSharing"]
                              ChoiceTextList=@promptText
                              OnDecision=@HandleCancel
                              ConfirmText=@Localizer["COMMON.Yes"]
                              CancelText=@Localizer["COMMON.No"]/>
    ;
        await UI.ToggleModal(cancelDialog);
    }

    private async Task HandleCancel(bool isCancelled)
    {
        if (isCancelled)
        {
            _sharedObject.Deleted = true;
            await UpdateSharedObject();

            await NavManager.NavigateTo($"/", true);
        }
        await UI.ToggleModal();
    }

    private async Task UpdateCurrentStatus(SpatialObjectShareStatus status)
    {
        _sharedObject.ShareStatus = status;
        await UpdateSharedObject();
    }

    private async Task UpdateSharedObject()
    {
        using var ctx = dbContextFactory.CreateDbContext();
        ctx.GeoObjectShares.Update(_sharedObject);
        await ctx.SaveChangesAsync();
    }
}
