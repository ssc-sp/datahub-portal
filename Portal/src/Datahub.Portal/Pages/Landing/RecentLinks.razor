@using Datahub.Core.Components.Skeleton
@using Datahub.Core.Model.Datahub
@using Datahub.Core.Model.UserTracking
@using MudBlazor.Utilities

@inject UserLocationManagerService _userLocationManagerService
@inject IDbContextFactory<DatahubProjectDBContext> _dbContextFactory

<MudText Typo="Typo.h1">@Localizer["Recent Places"]</MudText>
<MudGrid Class="recent-card-grid">
    @if (_recentLinks is null)
    {
        @for (var i = 0; i < 6; i++)
        {
            <MudItem xs="2">
                <MudSkeleton Height="100px" />
            </MudItem>
        }
    }
    else
    {
        @foreach (var (link, project) in _recentLinks)
        {
            <MudItem xs="2">
                <DHLink UserRecentLink="link" Underline="Underline.None">
                    <MudPaper Class="@($"pa-4 recent-card {GetIcon(link).Color}")" Outlined Elevation="0" Style="background-color: white">
                        <MudGrid Spacing="1">
                            <MudItem xs="12" Class="">
                                <MudStack Row Spacing="3" AlignItems="AlignItems.Center">
                                    <MudIcon Class="recent-icon" Icon="@GetIconName(link, project)" Style="@GetIconStyle()"/>
                                    <MudText Typo="Typo.h6" Style="@GetTextStyle()">@GetLinkDescription(link, project)</MudText>
                                </MudStack>
                            </MudItem>
                            <MudItem xs="12" Style="@GetTextStyle()">
                                <MudText Typo="Typo.caption">@GetDescription(link, project)</MudText>
                            </MudItem>
                        </MudGrid>
                    </MudPaper>
                </DHLink>
            </MudItem>
        }
    }
</MudGrid>
@code {

    [CascadingParameter(Name = "GraphUser")]
    public Microsoft.Graph.User User { get; set; }

    private List<(UserRecentLink, Datahub_Project)> _recentLinks;
    private ushort _maxRecentLinks = 6;

    protected override async Task OnInitializedAsync()
    {
        await using var dbContext = await _dbContextFactory.CreateDbContextAsync();
        var userRecent = await _userLocationManagerService.ReadRecentNavigations(User.Id);

        _recentLinks = userRecent?.UserRecentActions?
            .Where(l => l.DataProject != null)
            .OrderByDescending(l => l.accessedTime)
            .Take(_maxRecentLinks)
            .Select(l => (l, project:GetProject(dbContext, l)))
            .ToList() ?? new List<(UserRecentLink l, Datahub_Project project)>();
    }

    private Datahub_Project GetProject(DatahubProjectDBContext dbContext, UserRecentLink link)
    {
        return dbContext.Projects
            .FirstOrDefault(p => p.Project_Acronym_CD == link.DataProject.Trim());
    }
    
    private string GetTextStyle()
    {
        return new StyleBuilder()
            .AddStyle("white-space", "nowrap")
            .AddStyle("overflow", "hidden")
            .AddStyle("text-overflow", "ellipsis")
            .Build();
    }
    
    private string GetIconStyle()
    {
        return new StyleBuilder()
            .AddStyle("font-size", "2rem")
            .Build();
    }

}

