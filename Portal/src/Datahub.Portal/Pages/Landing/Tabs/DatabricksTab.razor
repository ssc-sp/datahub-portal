@using Microsoft.EntityFrameworkCore.Query
@using Microsoft.EntityFrameworkCore;
@using Datahub.Core
@using Datahub.Core.Model.Datahub
@using Datahub.Core.Services.Projects
@using Datahub.ProjectTools.Utils
@inject IStringLocalizer<DataLabels> DataLocalizer
@inject NavigationManager NavigationManager
@inject IJSRuntime JsInterop
@implements IDisposable
@inject IDbContextFactory<DatahubProjectDBContext> _dbContextFactory
@inject IUserInformationService UserInformationService

<div class="ae table-container">

        <AePaginatedTable Accessors="accessorFunctions"     
        Renderers="renderFunctions"
        T="Datahub_Project"
        Dataset="_projects"
        Headers="headers"
        class="custom light"
        style="Width:100%"
        GridTemplateColumns="0.5fr 2fr 3fr"    
        Page="@_lastClicked"
        PageSize="4"
        @ref=_myTable
        />

        <AePagination 
            Pageable="@_myTable" 
            OnPageClick="OnPageClick"> 
            <LeftIcon><i class='fad fa-chevron-double-left'></i></LeftIcon> 
            <RightIcon><i class='fad fa-chevron-double-right'></i></RightIcon>
            </AePagination>                 
</div>



@code {

    private List<Func<Datahub_Project, string>> accessorFunctions;
    private List<Func<Datahub_Project, RenderFragment>> renderFunctions;    

    private IPageableComponent _myTable;

    private List<Datahub_Project> _projects;
    DatahubProjectDBContext Context;

    private int _lastClicked = 0;


    private void OnPageClick(int pageIndex)
    {
    _lastClicked = pageIndex;
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
            StateHasChanged();
    }

    protected override async Task OnInitializedAsync()
    {
        var currentUserId = await UserInformationService.GetUserIdString();
        await using var context = await _dbContextFactory.CreateDbContextAsync();
        
        var databricksTemplateName = RequestManagementService.GetTerraformServiceType(IRequestManagementService.DATABRICKS); 
        
        _projects = Context.Project_Users
            .Where(u => u.User_ID == currentUserId)
            .Select(u => u.Project)
            .Include(p => p.Resources
                .Where(r => r.ResourceType == databricksTemplateName))            
            .Distinct()
            .ToList();

        FillAccessorFunctions();
        
        renderFunctions = new List<Func<Datahub_Project, RenderFragment>>() {            
            new Func<Datahub_Project, RenderFragment>(Datahub_Project => 
                @<AeFlex class="table-icon"><i class="@($"fad fa-{Datahub_Project.Project_Icon}")"></i></AeFlex>),
            new Func<Datahub_Project, RenderFragment>(Datahub_Project => @<AeFlex style="padding-top: 1rem"><AeTypography><NavLink href="@($"/w/{Datahub_Project?.Project_Acronym_CD}")">@Datahub_Project?.ProjectName</NavLink></AeTypography></AeFlex> ),
            new Func<Datahub_Project, RenderFragment>(Datahub_Project => @<AeMarkdown Content="@($"{Datahub_Project.ProjectDescription}")"></AeMarkdown> ),
        };
        
        renderFunctions = new List<Func<Datahub_Project, RenderFragment>>() {            
            Datahub_Project => @<AeFlex class="table-icon"><i class="@($"fad fa-{Datahub_Project.Project_Icon}")"></i></AeFlex>,
            Datahub_Project => @<AeFlex style="padding-top: 1rem"><AeTypography><DHLink DataProject="@(Datahub_Project.Project_Acronym_CD)" DatabricksURL="@(GetProjectsDatabricksUrl(Datahub_Project))" Name="Databricks Workspace">Databricks Workspace</DHLink></AeTypography></AeFlex>, 
            Datahub_Project => @<AeFlex style="padding-top: 1rem"><AeTypography><DHLink DataProject="@(Datahub_Project.Project_Acronym_CD)">@Datahub_Project.ProjectName</DHLink></AeTypography></AeFlex>             
        };

        //await FillRenderFunctions();
    }

    private List<string> headers = new List<string>();

    private string GetProjectsDatabricksUrl(Datahub_Project project)
    {
        return TerraformVariableExtraction.ExtractDatabricksUrl(project);
    }
    
    private void FillAccessorFunctions()
    {
        accessorFunctions = new List<Func<Datahub_Project, string>>() {
            new Func<Datahub_Project, string>(Datahub_Project => { return Datahub_Project?.Project_Icon; }),
            new Func<Datahub_Project, string>(Datahub_Project => { return Datahub_Project?.ProjectName; }),
            new Func<Datahub_Project, string>(Datahub_Project => { return Datahub_Project?.ProjectDescription; }),
        };
    }
    
    public void Dispose() 
    { 
        Context.Dispose();         
    }
}