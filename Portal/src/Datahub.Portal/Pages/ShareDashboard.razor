@page "/share/dashboard"
@using Datahub.Metadata.DTO
@using Datahub.Portal.Model
@using System.Text.Json
@using Datahub.Core.Services.Api
@inject IPublicDataFileService PublicFileService
@inject IMSGraphService GraphService
@inject IMetadataBrokerService MetadataBrokerService
@inject IDatahubAuditingService AuditingService
@inject IDbContextFactory<DatahubProjectDBContext> dbContextFactory

<div style="padding-left: 2rem; padding-right: 2rem">
    <AeTypography Variant="h2">Open Data Pending Approvals</AeTypography>

    <AeTypography>Validation of Open Data (open.canada.ca) submission by the Data Approver on behalf of the CIO.</AeTypography>

    <AeCard style="margin-top: 2rem;">
        <ChildContent>
            @if (_shares is not null)
            {
                <AePaginatedTable 
                    T=@ShareApproval
                    Accessors=@accessorFunctions
                    Renderers=@GetRenderers()
                    Dataset=@_shares
                    Headers=@Headers
                    @ref=@_myTable
                    Page=@_lastClicked
                    PageSize=@_pageSize 
                    GridTemplateColumns="5fr 1fr 1fr 1fr"
                />
                
                @if (_shares.Count > _pageSize)
                {
                    <AePagination Pageable="@_myTable" OnPageClick="OnPageClick"> 
                        <LeftIcon><i class='fad fa-chevron-double-left'></i></LeftIcon> 
                        <RightIcon><i class='fad fa-chevron-double-right'></i></RightIcon>
                    </AePagination>    
                }
            }
            else
            {
                <Spinner Small=@true/>
            }
        </ChildContent>
    </AeCard>    

</div>

@code {

    private List<ShareApproval> _shares { get; set; } = new();

    private List<Func<ShareApproval, string>> accessorFunctions = new() { GetFileName, GetType, null, null };
    private List<Func<ShareApproval, RenderFragment>> GetRenderers() => new() { GetFileLink, null, GetDocumentLink, GetApproveLink };
    private List<string> Headers => new() { GetLabel("FileName"), GetLabel("Type"), GetLabel("Read"), GetLabel("Approve") };

    private readonly int _pageSize = 10;
    private IPageableComponent _myTable;
    private int _lastClicked = 0;

    static string GetFileName(ShareApproval entry) => entry.Name;
    static string GetType(ShareApproval entry) => entry.RequestObject is SpatialObjectShare ? "Spatial" : "File";
    private RenderFragment GetFileLink(ShareApproval entry) => @<a href="@entry.ShareUrl">@entry.Name</a>;
    private RenderFragment GetDocumentLink(ShareApproval entry) => @<SharedObjectApprovalLink Object=@entry OnRead=@HandleRead><i class="far fa-file-pdf"></i></SharedObjectApprovalLink>;
    private RenderFragment GetApproveLink(ShareApproval entry) => @<SharedObjectApprovalButton Object=@entry OnApprove=@HandleApproveShare />;

    protected override async Task OnInitializedAsync()
    {
        var isFrench = CultureInfo.CurrentUICulture.TwoLetterISOLanguageName.ToLowerInvariant() == "fr";

        var sharedFiles = await PublicFileService.GetPendingApprovalOpenDataFiles();
        _shares.AddRange(GetDashboardShareRequest(sharedFiles));

        var sharedGeoObjects = await GetGeoObjectShares();
        _shares.AddRange(GetDashboardShareRequest(sharedGeoObjects, !isFrench));
    }

    protected override void OnAfterRender(bool firstRender)
    {
        // You must re-render after the components are initialized in order for the
        // component reference to not be null
        if (firstRender) 
        {   
            StateHasChanged();
        }
    }

    private async Task<List<SpatialObjectShare>> GetGeoObjectShares()
    {
        using var ctx = dbContextFactory.CreateDbContext();
        return await ctx.GeoObjectShares.Where(e => e.ShareStatus == SpatialObjectShareStatus.WaitingForApproval && !e.Deleted).ToListAsync();
    }

    static List<ShareApproval> GetDashboardShareRequest(IEnumerable<OpenDataSharedFile> files)
    {
        return files.Select(f => new ShareApproval() 
        { 
            Name = f.Filename_TXT, 
            ShareUrl = $@"/share/opendata/{f.File_ID}",
            DocumentUrl = f.SignedApprovalForm_URL, 
            Read = f.ApprovalFormRead_FLAG, 
            RequestObject = f 
        }).ToList();
    }

    static List<ShareApproval> GetDashboardShareRequest(IEnumerable<SpatialObjectShare> geoObjects, bool english)
    {
        return geoObjects.Select(f => Convert(f, english)).ToList();
    }

    static ShareApproval Convert(SpatialObjectShare geoObject, bool english)
    {
        var requestSummary = JsonSerializer.Deserialize<GeoDataShareRequest>(geoObject.Json_TXT);
        return new()
        {
            Name = english ? requestSummary.title_en : requestSummary.title_fr,
            ShareUrl = $@"/share/spatial/{geoObject.GeoObjectShare_ID}",
            DocumentUrl = geoObject.Approval_Document_URL,
            RequestObject = geoObject
        };
    }

    private void OnPageClick(int pageIndex)
    {
        _lastClicked = pageIndex;
    }    

    private string GetLabel(string label) => Localizer[$"OPENDATA-DASHBOARD.{label}"];

    private async Task HandleApproveShare(ShareApproval shareApproval)
    {
        if (shareApproval.RequestObject is OpenDataSharedFile)
            await OnApproveFile(shareApproval.RequestObject as OpenDataSharedFile);

        if (shareApproval.RequestObject is SpatialObjectShare)
            await OnApproveGeoShare(shareApproval);
    }

    private async Task OnApproveFile(OpenDataSharedFile file)
    {
        try
        {
            var fileId = file.File_ID.ToString();

            var status = file.GetOpenDataSharingStatus();
            if (status == OpenDataSharingStatus.PendingApproval)
            {
                // get the metadata
                var fieldValues = await MetadataBrokerService.GetObjectMetadataValues(fileId);
                await PublicFileService.ApproveOpenDataShare(file.File_ID, GetPublicationDate(fieldValues));

                var requestingUser = await GraphService.GetUserAsync(file.RequestingUser_ID, default);
                await NotifyWorkflowOwner(requestingUser.DisplayName, requestingUser.Mail, file.Filename_TXT, $"/share/opendata/{file.File_ID}");
            }
        }
        catch (Exception ex)
        {
            await AuditingService.TrackException(ex);
        }
    }

    private async Task OnApproveGeoShare(ShareApproval shareApproval)
    {
        try
        {
            var geoObject = shareApproval.RequestObject as SpatialObjectShare;
            if (geoObject.ShareStatus == SpatialObjectShareStatus.WaitingForApproval)
            {
                using var ctx = dbContextFactory.CreateDbContext();

                geoObject.ShareStatus = SpatialObjectShareStatus.PublishDataset;
                ctx.GeoObjectShares.Update(geoObject);
                await ctx.TrackSaveChangesAsync(AuditingService);

                var requestingUser = await GraphService.GetUserFromEmailAsync(geoObject.Email_Contact_TXT, default);
                var url = $@"/share/spatial/{geoObject.GeoObjectShare_ID}";

                await NotifyWorkflowOwner(requestingUser.DisplayName, requestingUser.Mail, shareApproval.Name, url);
            }
        }
        catch (Exception ex)
        {
            await AuditingService.TrackException(ex);
        }
    }

    private async Task NotifyWorkflowOwner(string userName, string emailAddress, string requestTitle, string url)
    {
        await PublicFileService.NotifySignedDocumentApproved(userName, emailAddress, requestTitle, url);
    }

    private DateTime GetPublicationDate(FieldValueContainer fields)
    {
        var date = DateTime.UtcNow;
        var definition = fields.Definitions.Get("date_published");
        if (definition is not null)
        {
            var fieldValue = fields.FirstOrDefault(fv => fv.FieldDefinitionId == definition.FieldDefinitionId);
            if (fieldValue != null)
            {
                DateTime.TryParse(fieldValue.Value_TXT, out date);
            }
        }
        return date;
    }

    private async Task HandleRead(ShareApproval shareApproval)
    {
        if (shareApproval.RequestObject is OpenDataSharedFile)
        {
            await PublicFileService.SetPendingApprovalOpenDataAsRead(shareApproval.RequestObject as OpenDataSharedFile);    
        }        
    }
}
    