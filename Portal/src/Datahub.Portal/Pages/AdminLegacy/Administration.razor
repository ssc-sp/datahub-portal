@using Datahub.Portal.Pages.Admin.Requests
@using Datahub.PowerBI.Pages.Admin

@inject IUserInformationService _userInformationService
@inject ServiceAuthManager _serviceAuthManager
@page "/legacy/administration"
@page "/legacy/admin"

<DHPageTitle PageTitleKey="@Localizer["Admin"]"/>

<AeTypography Variant="h1">@Localizer["DataHub Administration"]</AeTypography>

<AuthorizeView Roles="@string.Join(',', _authorizedRoles)">
    <Authorized>
        <CascadingValue Value="CurrentUserId" Name="UserId">
            <CascadingValue Value="IsDataHubAdmin" Name="IsDatahubAdmin">
                <CascadingValue Value="CurrentUserEmail" Name="CurrentUserEmail">
                    <div class="file-explorer-layout-wrapper">
                        <TabControl TabIndex="@_tabIndex" OnChangeTab="@OnChangeTab">
                            @foreach (var (control, content) in GetTabs())
                            {
                                <TabPage>
                                    <Control>
                                        <AeTypography>@control</AeTypography>
                                    </Control>
                                    <ChildContent>
                                        @content
                                    </ChildContent>
                                </TabPage>
                            }
                        </TabControl>
                    </div>
                </CascadingValue>
            </CascadingValue>
        </CascadingValue>
    </Authorized>
    <NotAuthorized>
        <AeTypography Variant="h1">@Localizer["This page is limited for DataHub administrators"]</AeTypography>
    </NotAuthorized>
</AuthorizeView>

@code {

    private System.Security.Claims.ClaimsPrincipal _user;

    private string CurrentUserId { get; set; }
    private string CurrentUserName { get; set; }
    private string CurrentUserEmail { get; set; }
    private bool IsDataHubAdmin { get; set; }
    private int _tabIndex;
    private List<string> _authorizedRoles;

    protected override void OnAfterRender(bool firstRender)
    {
        // You must re-render after the components are initialized in order for the 
        // component reference to not be null
        if (firstRender)
        {
            StateHasChanged();
        }
    }

    protected override async Task OnInitializedAsync()
    {

        var user = await _userInformationService.GetCurrentGraphUserAsync();
        _authorizedRoles = _serviceAuthManager.GetAdminProjectRoles(user.Id);
        _user = await _userInformationService.GetAuthenticatedUser();

        CurrentUserId = await _userInformationService.GetUserIdString();
        CurrentUserEmail = _user.Identity?.Name;
        CurrentUserName = _user.Claims.FirstOrDefault(c => c.Type == "name")?.Value;
        IsDataHubAdmin = _user.IsInRole(RoleConstants.DATAHUB_ROLE_ADMIN);
    }

    private void OnChangeTab(int tabIndex)
    {
        _tabIndex = tabIndex;
    }

    private List<(string, RenderFragment)> GetTabs()
    {
        var result = new List<(string, RenderFragment)>
        {
            (Localizer["Project Requests"], @<ProjectAccessRequestTable/>),
            (Localizer["Service Requests"], @<ServiceCreationRequestTable/>),
        };

        if (_user != null)
        {
            result.Add((Localizer["Notification Test Panel"], @<NotificationTestPanel DefaultEmailName="@CurrentUserName"/>));
        }

        if (IsDataHubAdmin)
        {
            result.Add((Localizer["External PowerBi Requests"], @<ExternalPowerBiRequests /> ));
            result.Add((Localizer["DataHub Tools"], @<DatahubTools />));
            result.Add((Localizer["Fetch Projects Monthly Cost"], @<FetchProjectsMonthlyCost />));
            result.Add((Localizer["Profiler"], @<MiniProfilerView />));
        }
        return result;
    }

}