@page "/news"
@using Datahub.Core.Model.Announcements


<MudStack Spacing="6">
    <MudText Typo="Typo.h1">@Localizer["DataHub News"]</MudText>
    
    @foreach (var announcement in _announcements)
    {
        <MudPaper Elevation="0" Class="px-6 py-4">
            <MudStack>
                <MudText Typo="Typo.caption">@Localizer["Posted at {0} by DataHub", announcement.StartDateTime.ToString("yyyy-MM-dd")]</MudText>
                <MudText Typo="Typo.h5">@announcement.TitleEn</MudText>
                <MudText Typo="Typo.body2">@announcement.BodyEn</MudText>
            </MudStack>
        </MudPaper>
    }
</MudStack>


@code {



    private IEnumerable<Announcement> _announcements;
    
    protected override async Task OnInitializedAsync()
    {
        // _announcements = await _announcementService.GetAnnouncementsAsync();
        _announcements = await GetAnnouncementsAsync();
    }

    private async Task<IEnumerable<Announcement>> GetAnnouncementsAsync()
    {
        var results = Enumerable.Range(15, Random.Shared.Next(25))
            .Select((_, i) => new Announcement
            {
                Id = i,
                TitleEn = LoremNET.Lorem.Words(3, 5),
                TitleFr = LoremNET.Lorem.Words(3, 5),
                PreviewEn = LoremNET.Lorem.Sentence(5, 10),
                PreviewFr = LoremNET.Lorem.Sentence(5, 10),
                BodyEn = LoremNET.Lorem.Paragraph(5, 8, 4, 10),
                BodyFr = LoremNET.Lorem.Paragraph(5, 8, 4, 10),
                StartDateTime = DateTime.Now.AddDays(Random.Shared.Next(10)),
                EndDateTime = DateTime.Now.AddDays(Random.Shared.Next(10, 20)),
                ForceHidden = Random.Shared.Next(10) > 8,
                IsDeleted = Random.Shared.Next(10) > 8,
                
                CreatedAt = DateTime.Now.AddDays(Random.Shared.Next(10, 20) * -1),
                CreatedById = Random.Shared.Next(1, 10),
                UpdatedAt = DateTime.Now.AddDays(Random.Shared.Next(0, 10) * -1),
                UpdatedById = Random.Shared.Next(1, 10),
            });

        return await Task.FromResult(results);
    }
}
