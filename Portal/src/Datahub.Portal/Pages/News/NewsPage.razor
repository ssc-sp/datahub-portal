@using Datahub.Core.Model.Announcements
@using Datahub.Application.Services.Announcements

@page "/news"

@inject IAnnouncementService _announcementService

<DatahubAuthView AuthLevel="DatahubAuthView.AuthLevels.Authenticated">
    <MudStack Spacing="6">
        <MudStack Row>
            <MudText Typo="Typo.h1">@Localizer["DataHub News"]</MudText>
            <MudSpacer/>
            <DatahubAuthView AuthLevel="DatahubAuthView.AuthLevels.DatahubAdmin">
                <MudButton Variant="Variant.Filled" Color="Color.Primary" Href="/news/edit/new">@Localizer["Create a new Announcement"]</MudButton>
            </DatahubAuthView>
        </MudStack>

        @if (_announcements.Any())
        {
            @foreach (var announcement in _announcements)
            {
                var authLevel = announcement.IsDeleted ? DatahubAuthView.AuthLevels.DatahubAdmin : DatahubAuthView.AuthLevels.Authenticated;
                <DatahubAuthView AuthLevel="authLevel">
                    <AnnouncementItem Announcement="@announcement" IsHidden="@(announcement.IsDeleted || announcement.IsScheduled())"/>

                </DatahubAuthView>
            }
        }
        else
        {
            <MudStack Justify="Justify.Center" AlignItems="AlignItems.Center">
                <MudIcon Size="Size.Large" Class="mt-16 mb-4" Icon="@Icons.Material.Outlined.Deck"/>
                <MudText Typo="Typo.h3">@Localizer["No announcements yet!"]</MudText>
            </MudStack>
        }
    </MudStack>
</DatahubAuthView>

@code {

    private List<Announcement> _announcements = new();

    protected override async Task OnInitializedAsync()
    {
        _announcements = await _announcementService.GetAnnouncementsAsync();
    }

}