@using Datahub.Core.Model.Announcements

@inject IUserInformationService _userInformationService

<MudPaper Elevation="0" Outlined Class="px-6 py-4">
    <MudGrid>
        <MudItem xs="12" sm="8">
            <MudStack>
                <MudText Typo="Typo.caption">@Localizer["Posted at {0} by {1}", Announcement.StartDateTime.ToString("yyyy-MM-dd"), Announcement.CreatedBy.DisplayName]</MudText>
                @if (Announcement.UpdatedAt.HasValue)
                {
                    <MudText Typo="Typo.caption">@Localizer["Last updated at {0} by {1}", Announcement.StartDateTime.ToString("yyyy-MM-dd"), Announcement.UpdatedBy.DisplayName]</MudText>
                }
                <MudText Typo="Typo.h5">@GetTitle()</MudText>
                <MudText Typo="Typo.body2">@GetBody()</MudText>
            </MudStack>
        </MudItem>
        <DatahubAuthView AuthLevel="DatahubAuthView.AuthLevels.DatahubAdmin">
            <MudItem xs="12" sm="4">
                <AnnouncementAdminControl Announcement="@Announcement" />
            </MudItem>
        </DatahubAuthView>
    </MudGrid>
</MudPaper>

@code {

    [Parameter]
    public Announcement Announcement { get; set; }

    private bool _isFrench;

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();

        _isFrench = await _userInformationService.IsFrench();
    }

    private string GetTitle()
    {
        return _isFrench ? Announcement.TitleFr : Announcement.TitleEn;
    }

    private string GetBody()
    {
        return _isFrench ? Announcement.BodyFr : Announcement.BodyEn;
    }

}