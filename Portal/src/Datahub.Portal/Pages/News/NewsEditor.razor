@*Announcements.razor*@

@page "/news/edit/{Id:int}"
@page "/news/edit/new"

@using Datahub.Core.Model.Announcements;
@using Datahub.Application.Services.Announcements

@inject IAnnouncementService _announcementService
@inject ISnackbar _snackbar
@inject NavigationManager _navigationManager

@if (_announcement is null)
{
    <DHLoadingInitializer/>
    return;
}

<DatahubAuthView AuthLevel="DatahubAuthView.AuthLevels.DatahubAdmin">
    <MudGrid>
        <MudItem xs="4">
            <MudPaper Elevation="0" Outlined Class="px-6 py-4 sticky" Style="">
                <MudStack Spacing="4">
                    <MudText Typo="Typo.h3">@Localizer["Announcement Schedule"]</MudText>
                    <MudCheckBox @bind-Checked="_announcement.ForceHidden" Label="@(Localizer["Always hide this announcement"])" Color="Color.Primary"/>
                    <MudSwitch @bind-Checked="_announcementHasEndDate"
                               Label="@(Localizer["Schedule an end date"])"
                               Disabled="@_announcement.ForceHidden"
                               Color="Color.Primary"/>
                    @if (_announcementHasEndDate)
                    {
                        <MudDatePicker @bind-Date="@_announcement.EndDateTime"
                                       Label="@(Localizer["Stop showing announcement on"])"
                                       Variant="Variant.Outlined"
                                       DateFormat="yyyy-MM-dd"
                                       Disabled="@_announcement.ForceHidden"
                                       Margin="Margin.Dense"/>
                    }
                    else
                    {
                        <MudDatePicker @bind-Date="@_announcement.StartDateTime"
                                       Label="@(Localizer["Start showing announcement on"])"
                                       Required
                                       Variant="Variant.Outlined"
                                       DateFormat="yyyy-MM-dd"
                                       Disabled="@_announcement.ForceHidden"
                                       Margin="Margin.Dense"/>
                    }

                    <MudStack Row Justify="Justify.Center">
                        <MudButton Variant="Variant.Filled"
                                   Class="mt-4 mb-2"
                                   Color="Color.Primary"
                                   OnClick="HandleSave">
                            @Localizer["Save Changes"]
                        </MudButton>
                    </MudStack>
                </MudStack>
            </MudPaper>
        </MudItem>
        <MudItem xs="8">
            <MudPaper Elevation="0" Outlined Class="px-6 py-4">
                <MudStack Row AlignItems="AlignItems.Center" Class="mb-6">
                    <MudIcon Icon="@Icons.Material.Outlined.Newspaper" Color="Color.Default"/>
                    <MudText Typo="Typo.h2">@Localizer[_announcement.IsNew() ? "Create a new Announcement" : "Edit Announcement"]</MudText>
                </MudStack>

                <MudDivider Class="my-4"/>

                <MudStack>
                    <MudText Typo="Typo.h4">English</MudText>
                    <MudTextField @bind-Value="@_announcement.TitleEn" Label="Title" Variant="Variant.Outlined"></MudTextField>
                    <MudTextField @bind-Value="@_announcement.PreviewEn" T="string" Label="Preview" Lines="3" Variant="Variant.Outlined"/>
                    <MarkdownEditor InitialValue="@_announcement.BodyEn" ValueChanged="HandleEnglishValueChanged"/>
                </MudStack>

                <MudDivider Class="my-4"/>

                <MudStack>
                    <MudText Typo="Typo.h4" Class="mt-2">Français</MudText>
                    <MudTextField @bind-Value="@_announcement.TitleFr" Label="Titre" Variant="Variant.Outlined"></MudTextField>
                    <MudTextField @bind-Value="@_announcement.PreviewFr" T="string" Label="Aperçu" Lines="3" Variant="Variant.Outlined"/>
                    <MarkdownEditor InitialValue="@_announcement.BodyFr" ValueChanged="HandleFrenchValueChanged"/>
                </MudStack>
            </MudPaper>
        </MudItem>
    </MudGrid>
</DatahubAuthView>


@code {

    [Parameter]
    public string Id { get; set; }

    private Announcement _announcement;
    private bool _announcementHasEndDate;

    private int GetArticleId() => int.TryParse(Id, out var value) ? value : 0;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

    // if the path is /news/edit/new, then id will be 0
        _announcement = await _announcementService.GetAnnouncementAsync(GetArticleId());
    }

    private void HandleEnglishValueChanged(string value)
    {
        _announcement.BodyEn = value;
    }

    private void HandleFrenchValueChanged(string value)
    {
        _announcement.BodyFr = value;
    }

    private async Task HandleSave()
    {
        var success = await _announcementService.SaveAnnouncementAsync(_announcement);

        if (success)
        {
            _snackbar.Add(Localizer["Article saved"], Severity.Success);
            _navigationManager.NavigateTo("/news");
        }
        else
        {
            _snackbar.Add(Localizer["Failed to save article"], Severity.Error);
        }
    }

}