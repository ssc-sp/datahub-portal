@inject DatahubPortalConfiguration _portalConfiguration
@inject IKeyVaultService _keyVaultService

@using System.Net.Http;
@using System.Net.Http.Headers;
@using Newtonsoft.Json;
@using Newtonsoft.Json.Linq;
@using Datahub.Portal.Pages.Help;

<MudStack Spacing="6">
    <MudText Typo="Typo.h1">@Localizer["Support Requests"]</MudText>
    <MudText Typo="Typo.body1">@Localizer["This page displays all the support requests submitted by the user."]</MudText>

    <MudText Typo="Typo.h2">@Localizer["Open Requests"]</MudText>
    <MudText Typo="Typo.body1">@Localizer["These are all open support requests. New requests may take up to 15 minutes to appear here."]</MudText>
    <MudTable Items="@_openIssues" Loading="@_loading" Hover Dense>
        <HeaderContent>
            <MudTh>@Localizer["Link to DevOps"]</MudTh>
            <MudTh>@Localizer["ID"]</MudTh>
			<MudTh>@Localizer["Title"]</MudTh>
			<MudTh>@Localizer["Description"]</MudTh>
            <MudTh>@Localizer["Status"]</MudTh>
            <MudTh>@Localizer["Submitted_DT"]</MudTh>
            <MudTh>@Localizer["Last Update"]</MudTh>
		</HeaderContent>
		<RowTemplate>
            <MudTd>
                <MudIconButton Icon="@Icons.Material.Outlined.Link" aria-label="share" Href="@GetIssueUrl(context.Id)"></MudIconButton>
            </MudTd>
            <MudTd>@context.Id</MudTd>
			<MudTd>@context.Title</MudTd>
            <MudTd>@context.Description</MudTd>
            <MudTd><MudChip Color="@GetColor(context.State)">@Localizer[context.Message]</MudChip></MudTd>
            <MudTd>@context.SubmittedDate</MudTd>
            <MudTd>@context.ChangedDate</MudTd>
		</RowTemplate>
        <PagerContent>
            <MudTablePager RowsPerPageString="@Localizer["Rows per page:"]" InfoFormat="@("{first_item}-{last_item} " + Localizer["of"] + " {all_items}")"/>
        </PagerContent>
    </MudTable>

    <MudText Typo="Typo.h2">@Localizer["Closed Requests"]</MudText>
    <MudText Typo="Typo.body1">@Localizer["These are all closed support requests."]</MudText>
	<MudTable Items="@_closedIssues" Loading="@_loading" Hover Dense>
		<HeaderContent>
			<MudTh>@Localizer["Link to DevOps"]</MudTh>
			<MudTh>@Localizer["ID"]</MudTh>
			<MudTh>@Localizer["Title"]</MudTh>
			<MudTh>@Localizer["Description"]</MudTh>
			<MudTh>@Localizer["Status"]</MudTh>
			<MudTh>@Localizer["Submitted_DT"]</MudTh>
			<MudTh>@Localizer["Last Update"]</MudTh>
		</HeaderContent>
		<RowTemplate>
			<MudTd>
				<MudIconButton Icon="@Icons.Material.Outlined.Link" aria-label="share" Href="@GetIssueUrl(context.Id)"></MudIconButton>
			</MudTd>
			<MudTd>@context.Id</MudTd>
			<MudTd>@context.Title</MudTd>
            <MudTd>@context.Description)</MudTd>
			<MudTd><MudChip Color="@GetColor(context.State)">@Localizer[context.Message]</MudChip></MudTd>
			<MudTd>@context.SubmittedDate</MudTd>
			<MudTd>@context.ChangedDate</MudTd>
		</RowTemplate>
		<PagerContent>
			<MudTablePager RowsPerPageString="@Localizer["Rows per page:"]" InfoFormat="@("{first_item}-{last_item} " + Localizer["of"] + " {all_items}")"/>
		</PagerContent>
	</MudTable>
</MudStack>

@code {
    private List<IssueForDisplaying> _openIssues = new();
    private List<IssueForDisplaying> _closedIssues = new();
    private bool _loading = true;

    protected override async Task OnInitializedAsync()
    {
        await GetIssues();
        StateHasChanged();
    }

    /**
     * Retrieves a list of issues created by a specific user.
     *
     * @param userName The username of the user.
     * @return A list of IssueForDisplaying objects representing the issues created by the user.
     */
    public async Task GetIssues()
    {
        _loading = true; // Show the loading bar in the table.
        _openIssues = new();
        _closedIssues = new();
        var query = $"SELECT [System.Id], [System.Title], [System.CreatedBy], [System.CreatedDate], [System.ChangedDate], [System.Tags] FROM WorkItems WHERE [System.Tags] CONTAINS 'UserSubmitted'";
        var apiUrl = $"https://dev.azure.com/{_portalConfiguration.AdoOrg.OrgName}/{_portalConfiguration.AdoOrg.ProjectName}/_apis/wit/wiql?api-version=7.0";

        using (var client = new HttpClient())
        {
            var credentials = await _keyVaultService.GetSecret(_portalConfiguration.AdoServiceUser.PatSecretName);
            client.DefaultRequestHeaders.Accept.Add(new MediaTypeWithQualityHeaderValue("application/json"));
            client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Basic", Convert.ToBase64String(System.Text.Encoding.ASCII.GetBytes($":{credentials}")));

            // Create request body and send the POST request to Azure DevOps API
            var body = new JObject { ["query"] = query };
            var response = await client.PostAsync(apiUrl, new StringContent(body.ToString(), System.Text.Encoding.UTF8, "application/json"));
            response.EnsureSuccessStatusCode();

            // Parse the response and extract the work item titles
            var jsonResponse = await response.Content.ReadAsStringAsync();
            var result = JObject.Parse(jsonResponse);

            // Collect all the titles
            var workItems = (JArray)result["workItems"];

            foreach (var workItem in workItems)
            {
                // Get the WorkItem ID
                var workItemId = (int)workItem["id"];
                // Get the WorkItem details with ID
                var itemApiUrl = $"https://dev.azure.com/{_portalConfiguration.AdoOrg.OrgName}/{_portalConfiguration.AdoOrg.ProjectName}/_apis/wit/workItems/{workItemId}?api-version=7.0";
                var workItemResponse = await client.GetAsync(itemApiUrl);
                workItemResponse.EnsureSuccessStatusCode();

                var workItemJsonResponse = await workItemResponse.Content.ReadAsStringAsync();
                var workItemDetails = JObject.Parse(workItemJsonResponse);
                var issue = new IssueForDisplaying(workItemDetails, false);

                if (issue.State == "Closed"){
                    _closedIssues.Add(issue);
                }
                else {
                    _openIssues.Add(issue);
                }
            }
        }
        _loading = false; // Stop showing the loading bar in the table.

        // Reverse the issues list so that the most recent issues are displayed first
        _openIssues.Reverse();
    }

    /**
     * Generates the URL for a specific issue in Azure DevOps.
     *
     * @param issueId The ID of the issue.
     * @return The URL for the issue in Azure DevOps.
     */
    private string GetIssueUrl(string issueId)
    {
        return $"https://dev.azure.com/{_portalConfiguration.AdoOrg.OrgName}/{_portalConfiguration.AdoOrg.ProjectName}/_workitems/edit/{issueId}";
    }

    /**
     * Retrieves the color based on the status of an issue.
     *
     * @param status - The status of the issue.
     * @returns The color associated with the status.
     */
    private static Color GetColor(string status)
    {
        return status switch
        {
            "Closed" => Color.Success,
            "Active" => Color.Warning,
            "Waiting" => Color.Info,
            "New" => Color.Error,
            _ => Color.Default
        };
    }
}
