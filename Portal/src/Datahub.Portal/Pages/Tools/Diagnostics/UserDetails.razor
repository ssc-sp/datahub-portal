@using System.Security.Claims;
@using Datahub.Application.Services.UserManagement
@using Datahub.Core.Model.Projects
@inject IUserInformationService _userInformationService

@if (_loading)
{
    <DHLoadingInitializer Message="Loading user information..."/>
}
else
{
    <MudGrid>
        <MudItem xs="4">
            <MudText Typo="Typo.h2" Class="mb-6">
                User Information
            </MudText>
            <MudSimpleTable Dense Hover Bordered>
                <tbody>
                <tr>
                    <td>User ID</td>
                    <td>@_userId</td>
                </tr>
                <tr>
                    <td>Object ID</td>
                    <td>@_oid</td>
                </tr>
                <tr>
                    <td>User Name</td>
                    <td>@_userName</td>
                </tr>
                </tbody>
            </MudSimpleTable>
        </MudItem>
        <MudItem xs="8">
            <MudText Typo="Typo.h2" Class="mb-6">
                List of roles
            </MudText>
            <MudSimpleTable Dense Hover Bordered>
                <thead>
                <tr>
                    <th>
                        Project Acronym
                    </th>
                    @foreach(var role in _projectRoles)
                    {
                        <th>@role.Name (id: @role.Id)</th>
                    }
                </tr>
                </thead>
                <tbody>
                @foreach (var userRole in _groupedRoles)
                {
                    <tr>
                        <td>@userRole.Key</td>
                        @foreach (var role in _projectRoles)
                        {
                            <td>@(userRole.Value.FirstOrDefault(r => r.Value.Contains(RoleConstants.GetRoleConstants(role)))?.Value ?? "-")</td>
                        }
                    </tr>
                }
                </tbody>
            </MudSimpleTable>
        </MudItem>
    </MudGrid>
}

@code
{
    private bool _loading = true;

    private string _userId;
    private string _oid;
    private string _userName;
    private List<Claim> _roles;
    private Dictionary<string, List<Claim>> _groupedRoles;

    private IEnumerable<Project_Role> _projectRoles = Project_Role
        .GetAll()
        .Where(r => r.Id != (int) Project_Role.RoleNames.Remove);

    protected override async Task OnInitializedAsync()
    {
        var user = await _userInformationService.GetAuthenticatedUser(true);
        _userName = user.Identity?.Name;
        _userId = user.Claims.FirstOrDefault(c => c.Type == "uid")?.Value;
        _oid = await _userInformationService.GetUserIdString();
        var userIdentity = (ClaimsIdentity)user.Identity;
        var claims = userIdentity?.Claims;
        var roleClaimType = userIdentity?.RoleClaimType;
        _roles = claims?.Where(c => c.Type == roleClaimType).ToList() ?? new List<Claim>();
        
        _groupedRoles = _roles
            .GroupBy(r => r.Value.Split("-")[0])
            .ToDictionary(g => g.Key, g => g.ToList());

        _loading = false;
    }
}