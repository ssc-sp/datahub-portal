@using Datahub.Core.Model.Health
@using System.Text.Json
@using Datahub.Infrastructure.Queues.Messages
@using MediatR
@inject IDialogService DialogService
@inject IMediator _mediator

<MudStack Spacing="6">
    <MudStack>
        <MudText Typo="Typo.h1">@Localizer["Infrastructure Health"]</MudText>
        <MudText Typo="Typo.body1">
            @Localizer["View the health of the infrastructure that supports the application and the workspaces."]
        </MudText>
    </MudStack>
    <MudStack>
        <MudText Typo="Typo.h2">@Localizer["Core Health"]</MudText>
        <MudText Typo="Typo.body1">
            @Localizer["View the health of the infrastructure that supports the application."]
        </MudText>

        <MudTable Items="_coreInfrastructureHealth" Hover Dense>
            <HeaderContent>
                <MudTh>Resource</MudTh>
                <MudTh>Status</MudTh>
                <MudTh>Updated</MudTh>
                <MudTh>Run Check</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd>@context.Name</MudTd>
                <MudTd>
                    <MudChip Color="@GetColor(context.Status)" Size="Size.Small">
                        @context.Status
                    </MudChip>
                </MudTd>
                <MudTd>@context.HealthCheckTimeUtc</MudTd>
                <MudTd>
                        <MudButton Variant="Variant.Filled" Color="Color.Primary" Size="Size.Small" OnClick="@(() => CallFunction(context.ResourceType, context.Group, context.Name))">
						Run
					</MudButton>
                </MudTd>
            </RowTemplate>
        </MudTable>
    </MudStack>

    <MudStack>
        <MudText Typo="Typo.h2">@Localizer["Queue Health"]</MudText>
        <MudText Typo="Typo.body1">
            @Localizer["View the health of the infrastructure queue that supports the communication between the application and the workspaces."]
        </MudText>

        <MudTable Items="_queueInfrastructureHealth" Hover Dense>
            <HeaderContent>
                <MudTh>Resource</MudTh>
                <MudTh>Status</MudTh>
                <MudTh>Updated</MudTh>
                <MudTh>Run Check</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd>@context.Name</MudTd>
                <MudTd>
                    <MudChip Color="@GetColor(context.Status)" Size="Size.Small">
                        @context.Status
                    </MudChip>
                </MudTd>
                <MudTd>@context.HealthCheckTimeUtc</MudTd>
                    <MudTd>
                        <MudButton Variant="Variant.Filled" Color="Color.Primary" Size="Size.Small">
                            Run
                        </MudButton>
                    </MudTd>
            </RowTemplate>
        </MudTable>
    </MudStack>

    <MudStack>

        <MudText Typo="Typo.h2">@Localizer["Workspace Health"]</MudText>
        <MudText Typo="Typo.body1">
            @Localizer["View the health of the infrastructure that supports the workspaces."]
        </MudText>
        <MudTable Items="_infrastructureHealth" Hover Dense>
            <HeaderContent>
                <MudTh>Workspace</MudTh>
                @foreach (var resourceType in Enum.GetValues(typeof(InfrastructureHealthResourceType)))
                {
                    <MudTh>@resourceType</MudTh>
                }
            </HeaderContent>
            <RowTemplate>
                <MudTd>@context.Key</MudTd>
                @foreach (var resourceType in Enum.GetValues(typeof(InfrastructureHealthResourceType)))
                {
                    var health = context.Value.FirstOrDefault(h => h.ResourceType == (InfrastructureHealthResourceType)resourceType);
                    <MudTd>
                        @if (health is not null)
                        {
                            <MudMenu Dense AnchorOrigin="Origin.TopRight" TransformOrigin="Origin.TopLeft">
                                <ActivatorContent>
                                    <MudChip Color="@GetColor(health.Status)" Size="Size.Small">
                                        @health.Status
                                    </MudChip>
                                </ActivatorContent>
                                <ChildContent>
                                    @if (health.Status != InfrastructureHealthStatus.Create)
                                    {
                                        <MudMenuItem>Refresh Health Check</MudMenuItem>
                                        @if (!string.IsNullOrWhiteSpace(health.Url))
                                        {
                                            <MudMenuItem Href="@health.Url">View Resource</MudMenuItem>
                                        }
                                        <MudDivider Class="my-2"/>
                                        <MudMenuItem>Refresh request on queue</MudMenuItem>
                                    }
                                    else
                                    {
                                        <MudMenuItem>Add request to queue</MudMenuItem>
                                    }
                                </ChildContent>
                            </MudMenu>
                        }
                    </MudTd>
                }
            </RowTemplate>
        </MudTable>
    </MudStack>
</MudStack>

@code {


    private Dictionary<string, List<InfrastructureHealthCheck>> _infrastructureHealth = new ();
    private List<InfrastructureHealthCheck> _coreInfrastructureHealth = new ();
    private List<InfrastructureHealthCheck> _queueInfrastructureHealth = new ();


    protected override void OnInitialized()
    {
        base.OnInitialized();

        // create some random infrastructure health data
        _infrastructureHealth = CreateRandomWorkspaceAcronyms()
            .Select(acronym => (
                from object resourceType in Enum.GetValues(typeof(InfrastructureHealthResourceType))
                select CreateInfrastructureHealth(acronym, (InfrastructureHealthResourceType)resourceType))
                .ToList())
            .ToDictionary(item => item.First().Group, item => item);

        // create some random core infrastructure health data
        _coreInfrastructureHealth = new()
        {
            new InfrastructureHealthCheck()
            {
                Name = "Portal Database",
                ResourceType = InfrastructureHealthResourceType.AzureSqlDatabase,
                Status = InfrastructureHealthStatus.Healthy,
                HealthCheckTimeUtc = DateTime.UtcNow
            },
            new InfrastructureHealthCheck()
            {
                Name = "Portal Storage",
                ResourceType = InfrastructureHealthResourceType.AzureStorageAccount,
                Status = InfrastructureHealthStatus.Healthy,
                HealthCheckTimeUtc = DateTime.UtcNow
            },
            new InfrastructureHealthCheck()
            {
                Name = "Portal Key Vault",
                ResourceType = InfrastructureHealthResourceType.AzureKeyVault,
                Status = InfrastructureHealthStatus.Healthy,
                HealthCheckTimeUtc = DateTime.UtcNow
            },
            new InfrastructureHealthCheck()
            {
                Name = "Portal Storage Queue",
                ResourceType = InfrastructureHealthResourceType.AzureStorageQueue,
                Status = InfrastructureHealthStatus.Healthy,
                HealthCheckTimeUtc = DateTime.UtcNow
            }
        };

        _queueInfrastructureHealth = new()
        {
            new InfrastructureHealthCheck()
            {
                Name = "Email notification",
                ResourceType = InfrastructureHealthResourceType.AzureStorageQueue,
                Status = InfrastructureHealthStatus.Healthy,
                HealthCheckTimeUtc = DateTime.UtcNow
            },
            new InfrastructureHealthCheck()
            {
                Name = "Pong",
                ResourceType = InfrastructureHealthResourceType.AzureStorageQueue,
                Status = InfrastructureHealthStatus.Healthy,
                HealthCheckTimeUtc = DateTime.UtcNow
            },
            new InfrastructureHealthCheck()
            {
                Name = "Project Capacity",
                ResourceType = InfrastructureHealthResourceType.AzureStorageQueue,
                Status = InfrastructureHealthStatus.Healthy,
                HealthCheckTimeUtc = DateTime.UtcNow
            },
            new InfrastructureHealthCheck()
            {
                Name = "Project Usage Notification",
                ResourceType = InfrastructureHealthResourceType.AzureStorageQueue,
                Status = InfrastructureHealthStatus.Healthy,
                HealthCheckTimeUtc = DateTime.UtcNow
            },
            new InfrastructureHealthCheck()
            {
                Name = "Project Usage Notification",
                ResourceType = InfrastructureHealthResourceType.AzureStorageQueue,
                Status = InfrastructureHealthStatus.Healthy,
                HealthCheckTimeUtc = DateTime.UtcNow
            },
            new InfrastructureHealthCheck()
            {
                Name = "Project Usage Update",
                ResourceType = InfrastructureHealthResourceType.AzureStorageQueue,
                Status = InfrastructureHealthStatus.Healthy,
                HealthCheckTimeUtc = DateTime.UtcNow
            },
            new InfrastructureHealthCheck()
            {
                Name = "Resource Run Request",
                ResourceType = InfrastructureHealthResourceType.AzureStorageQueue,
                Status = InfrastructureHealthStatus.Healthy,
                HealthCheckTimeUtc = DateTime.UtcNow
            },
            new InfrastructureHealthCheck()
            {
                Name = "Storage Capacity",
                ResourceType = InfrastructureHealthResourceType.AzureStorageQueue,
                Status = InfrastructureHealthStatus.Healthy,
                HealthCheckTimeUtc = DateTime.UtcNow
            },
            new InfrastructureHealthCheck()
            {
                Name = "User Run Request",
                ResourceType = InfrastructureHealthResourceType.AzureStorageQueue,
                Status = InfrastructureHealthStatus.Healthy,
                HealthCheckTimeUtc = DateTime.UtcNow
            },
        };
    }

    private async Task CallFunction(InfrastructureHealthResourceType type, string name, string group)
    {
        var request = new InfrastructureHealthCheckMessage(
            type,
			name,
			group
        );

        await _mediator.Send(request);
        await DialogService.ShowMessageBox("Health Check", "Health check request sent to queue.");
    }

    private static Color GetColor(InfrastructureHealthStatus status)
    {
        return status switch
        {
            InfrastructureHealthStatus.Healthy => Color.Success,
            InfrastructureHealthStatus.Degraded => Color.Warning,
            InfrastructureHealthStatus.Unhealthy => Color.Error,
            _ => Color.Default
            };
    }

    private HashSet<string> CreateRandomWorkspaceAcronyms()
    {
    // return between 20 and 100 random four letter acronyms
        var acronyms = new HashSet<string>();
        var random = new Random();
        var count = random.Next(20, 100);
        for (var i = 0; i < count; i++)
        {
            acronyms.Add(CreateRandomAcronym());
        }

        return acronyms;
    }

    private static string CreateRandomAcronym()
    {
    // return a random four letter acronym
        var random = new Random();
        var acronym = "";
        for (var i = 0; i < 4; i++)
        {
            acronym += (char)random.Next(65, 90);
        }
        return acronym;
    }

    private InfrastructureHealthCheck CreateInfrastructureHealth(string group, InfrastructureHealthResourceType resourceType)
    {
        var exists = Random.Shared.Next(0, 2) == 1;
        return new InfrastructureHealthCheck()
        {
            Group = group,
            Name = $"{group}-{resourceType}",
            Url = $"https://{group}-{resourceType}.azurewebsites.net",
            ResourceType = resourceType,
            Status = exists ? (InfrastructureHealthStatus)new Random().Next(1, 5) : InfrastructureHealthStatus.Create,
            HealthCheckTimeUtc = DateTime.UtcNow
        };
    }

}