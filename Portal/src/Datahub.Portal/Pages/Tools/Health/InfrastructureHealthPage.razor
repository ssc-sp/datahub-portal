@using Datahub.Core.Model.Health
@using System.Text.Json
@using Datahub.Core.Services.Api
@using Datahub.Infrastructure.Queues.Messages
@using Datahub.Core.Model.Projects;
@using Datahub.Shared.Configuration
@using Datahub.Infrastructure.Extensions;
@using MassTransit
@inject IDbContextFactory<DatahubProjectDBContext> DbFactory
@inject IDialogService DialogService
@inject ISendEndpointProvider _sendEndpointProvider;

@if (isLoading)
    {
        <Spinner />
    }
else
{
<MudStack Spacing="6">
    <MudStack>
        <MudText Typo="Typo.h2">@Localizer["Infrastructure Health"]</MudText>
        <MudText Typo="Typo.body1">
            @Localizer["View the health of the infrastructure that supports the application and the workspaces."]
            </MudText>
    </MudStack>
    <MudButton Variant="Variant.Filled" Color="Color.Primary" Size="Size.Medium" OnClick="@(() => CallFunction(0, "", "all"))" Style="width: fit-content;">
        @Localizer["Run all checks"]
    </MudButton>
    <MudStack>
        <MudText Typo="Typo.h2">@Localizer["Core Health"]</MudText>
        <MudText Typo="Typo.body1">
            @Localizer["View the health of the infrastructure that supports the application."]
        </MudText>
               <MudTable Items="_coreInfrastructureHealth" Hover Dense>
            <HeaderContent>
                <MudTh>@Localizer["Resource"]</MudTh>
                <MudTh>@Localizer["Status"]</MudTh>
                <MudTh>@Localizer["Updated"]</MudTh>
                <MudTh>@Localizer["Run Check"]</MudTh>
            </HeaderContent>
            <RowTemplate Context="context">
                    <MudTd>@context.ResourceType</MudTd>
                    <MudTd>
                        <MudChip Color="@GetColor(context)" Size="Size.Small">
                            @Localizer[GetStatusText(context)]
                        </MudChip>
                    </MudTd>
                    <MudTd>@context.HealthCheckTimeUtc</MudTd>
                    <MudTd>
                        <MudButton Variant="Variant.Filled" Color="Color.Primary" Size="Size.Small" OnClick="@(() => CallFunction(context.ResourceType, context.Name, context.Group))">
                            @Localizer["Run"]
                        </MudButton>
                    </MudTd>                    
            </RowTemplate>
        </MudTable>
       
    </MudStack>
    <MudStack>
        <MudText Typo="Typo.h2">@Localizer["Queue Health"]</MudText>
        <MudText Typo="Typo.body1">
            @Localizer["View the health of the infrastructure queue that supports the communication between the application and the workspaces."]
        </MudText>

        <MudTable Items="_queueInfrastructureHealth" Hover Dense>
            <HeaderContent>
                <MudTh>@Localizer["Resource"]</MudTh>
                <MudTh>@Localizer["Queue Status"]</MudTh>
                <MudTh>@Localizer["Poison Queue Status"]</MudTh>
                <MudTh>@Localizer["Updated"]</MudTh>
                <MudTh>@Localizer["Run Check"]</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd>@context.Name</MudTd>
                <MudTd>
                    <MudChip Color="@GetColor(context)" Size="Size.Small">
                        @Localizer[GetStatusText(context)]
                    </MudChip>
                </MudTd>
                <MudTd>
                    <MudChip Color="@GetColor(GetPoison(context))" Size="Size.Small">
                        @Localizer[GetStatusText(GetPoison(context))]
					</MudChip>
                </MudTd>
                <MudTd>@context.HealthCheckTimeUtc</MudTd>
                    <MudTd>
                        <MudButton Variant="Variant.Filled" Color="Color.Primary" Size="Size.Small" OnClick="@(() => CallFunction(context.ResourceType, context.Name, context.Group))">
                            @Localizer["Run"]
                        </MudButton>
                    </MudTd>
            </RowTemplate>
        </MudTable>
    </MudStack>

    <MudStack>
        <MudText Typo="Typo.h2">@Localizer["Workspace Health"]</MudText>
        <MudText Typo="Typo.body1">
            @Localizer["View the health of the infrastructure that supports the workspaces."]
        </MudText>
        <MudTable Items="_infrastructureHealth" Hover Dense>
            <HeaderContent>
                <MudTh>Workspace</MudTh>
                @foreach (var resourceType in _workspaceChecks)
                {
                    <MudTh>@resourceType</MudTh>
                }
            </HeaderContent>
            <RowTemplate>
                <MudTd>@context.Key</MudTd>
                @foreach (var resourceType in _workspaceChecks)
                {
                    var health = context.Value.FirstOrDefault(h => h.ResourceType == (InfrastructureHealthResourceType)resourceType);
                    if (health == null)
                    {
                        <MudTd>
							<MudChip Color="@GetColor(InfrastructureHealthStatus.Undefined)" Size="Size.Small" OnClick="@(() => CallFunction((InfrastructureHealthResourceType)resourceType, context.Key, "workspace"))">
								@Localizer[InfrastructureHealthStatus.Undefined.ToString()]
							</MudChip/>
                        </MudTd>
                    }
                    else
                    {
                        var realStatus = GetRealStatus(health);
                        <MudTd>
                            <MudTooltip Delay="600" Text="@health.HealthCheckTimeUtc.ToString()">
							<MudChip Color="@GetColor(realStatus)" 
                                Size="Size.Small" OnClick="@(() => CallFunction((InfrastructureHealthResourceType)resourceType, context.Key, "workspace"))">
								@Localizer[realStatus.ToString()]
							</MudChip>
                            </MudTooltip>
						</MudTd>
                    }
                }
            </RowTemplate>
        </MudTable>
    </MudStack>
</MudStack>
}

@code {

    private Dictionary<string, List<InfrastructureHealthCheck>> _infrastructureHealth = new ();
    private List<InfrastructureHealthCheck> _coreInfrastructureHealth = new ();
    private List<InfrastructureHealthCheck> _queueInfrastructureHealth = new();
    private List<InfrastructureHealthCheck> _poisonQueueInfrastructureHealth = new();
    private DatahubProjectDBContext _projectDbContext;
    private List<InfrastructureHealthResourceType> _coreChecks = new List<InfrastructureHealthResourceType>
	{
		InfrastructureHealthResourceType.AzureSqlDatabase,
		InfrastructureHealthResourceType.AzureKeyVault,
		InfrastructureHealthResourceType.AzureStorageQueue,
		InfrastructureHealthResourceType.AzureFunction,
	};
    private List<InfrastructureHealthResourceType> _workspaceChecks = new List<InfrastructureHealthResourceType>
    {
        InfrastructureHealthResourceType.AzureSqlDatabase,
        InfrastructureHealthResourceType.AzureDatabricks,
        InfrastructureHealthResourceType.AzureStorageAccount,
        InfrastructureHealthResourceType.AzureWebApp,
    };

    public bool isLoading { get; set; } = false;

    private int? expandedRowId;
    private InfrastructureHealthCheck selectedContext = new InfrastructureHealthCheck();

    protected override async Task OnInitializedAsync()
    {
        base.OnInitialized();

        isLoading = true;

        await Task.Delay(1);

        _projectDbContext = DbFactory.CreateDbContext();

        var projects = _projectDbContext.Projects.AsNoTracking().Include(p => p.Resources).Select(p => p.Project_Acronym_CD).ToList();
        _infrastructureHealth = new Dictionary<string, List<InfrastructureHealthCheck>>();

        foreach (var acronym in projects)
        {
            var list = new List<InfrastructureHealthCheck>();
            var res = _projectDbContext.InfrastructureHealthChecks
                .Where(h => (_workspaceChecks.Contains(h.ResourceType)))
                .Where(h => (h.Name.Contains(acronym)))
                .GroupBy(h => h.ResourceType)
                .Select(g => g.OrderByDescending(h => h.HealthCheckTimeUtc).FirstOrDefault())
                .ToList();

            foreach (var output in res)
            {
                list.Add(output);
            }
            _infrastructureHealth.Add(acronym, list);
        }

        // Select the most recent core infrastructure health checks for each resource type
        _coreInfrastructureHealth = _projectDbContext.InfrastructureHealthChecks
                .Where(h => (_coreChecks.Contains(h.ResourceType)))
                .Where(h => h.Group == "core")
                .GroupBy(h => h.ResourceType)
                .Select(g => g.OrderByDescending(h => h.HealthCheckTimeUtc).FirstOrDefault())
                .ToList();

        string[] queues = new string[]
        {
            "delete-run-request", "email-notification", "pong-queue", "project-capacity-update", "project-inactivity-notification", "project-usage-notification",
            "project-usage-update", "resource-run-request", "storage-capacity", "terraform-output", "user-inactivity-notification", "user-run-request",
        };
        _queueInfrastructureHealth = _projectDbContext.InfrastructureHealthChecks
                .Where(h => (h.ResourceType == InfrastructureHealthResourceType.AzureStorageQueue))
                .Where(h => (queues.Contains(h.Name)))
                .GroupBy(h => h.Name)
                .Select(g => g.OrderByDescending(h => h.HealthCheckTimeUtc).FirstOrDefault())
                .ToList();

        string[] poison_queues = new string[]
        {
            "delete-run-request-poison", "email-notification-poison", "pong-queue-poison", "project-capacity-update-poison", "project-inactivity-notification-poison",
            "project-usage-notification-poison", "project-usage-update-poison", "resource-run-request-poison", "storage-capacity-poison", "terraform-output-poison",
            "user-inactivity-notification-poison", "user-run-request-poison"
        };
        _poisonQueueInfrastructureHealth = _projectDbContext.InfrastructureHealthChecks
                .Where(h => (h.ResourceType == InfrastructureHealthResourceType.AzureStorageQueue))
                .Where(h => (poison_queues.Contains(h.Name)))
                .GroupBy(h => h.Name)
                .Select(g => g.OrderByDescending(h => h.HealthCheckTimeUtc).FirstOrDefault())
                .ToList();

        isLoading = false;
    }

    private List<InfrastructureHealthCheck> GetHealthCheckHistory(InfrastructureHealthResourceType resourceType, string Name, string Group )
    {
        var list = new List<InfrastructureHealthCheck>();
        var res = _projectDbContext.InfrastructureHealthCheckRuns
            .Where(h => (_workspaceChecks.Contains(h.ResourceType)))
            .Where(h => h.Group == Group)
            .Where(h => (h.ResourceType == resourceType && h.Name.Contains(Name)))
            .OrderByDescending(h => h.HealthCheckTimeUtc)
            .ToList();

        foreach (var output in res)
        {
            list.Add(output);
        }
        return list;
    } 
 
    private async Task CallFunction(InfrastructureHealthResourceType type, string name, string group)
    {
        if (group == "all")
        {
            bool? result = await DialogService.ShowMessageBox(
                Localizer["Warning"],
                Localizer["You are re-running all health checks. This may take a while."],
                yesText: Localizer["Run all checks"], cancelText: Localizer["Cancel"]);

            if (result == false || result == null)
            {
                return;
            }
        }

        var request = new InfrastructureHealthCheckMessage(
            type,
            group,
            name
        );

        try
        {
            await _sendEndpointProvider.SendDatahubServiceBusMessage(
                QueueConstants.InfrastructureHealthCheckQueueName, request);
        }
        catch (Exception ex)
        {
            await DialogService.ShowMessageBox("Health Check", "Health check request failed. Type: " + type.ToString() + " Name: " + name + "Group: " + group + " Error: " + ex.Message);
        }
    }

    private InfrastructureHealthCheck GetPoison(InfrastructureHealthCheck context)
    {
        var poison = _poisonQueueInfrastructureHealth.FirstOrDefault(h => h.Name == context.Name + "-poison");
        if (poison == null)
        {
            return new InfrastructureHealthCheck
			{
				Name = context.Name,
                ResourceType = InfrastructureHealthResourceType.AzureStorageQueue,
				Status = InfrastructureHealthStatus.Create,
				HealthCheckTimeUtc = DateTime.UtcNow
			};
        }
        return poison;
    }

    private static InfrastructureHealthStatus GetRealStatus(InfrastructureHealthCheck health)
    {
        var realStatus = health.Status; 
        var timestamp = health.HealthCheckTimeUtc;
        var now = DateTime.UtcNow;
        if (health.Status == InfrastructureHealthStatus.Healthy)  
        {
            if (timestamp >= now.AddHours(-72) && timestamp < now.AddHours(-24)) 
            {
                realStatus = InfrastructureHealthStatus.Degraded; 
            }
            if (timestamp < now.AddHours(-72)) 
            {
                realStatus = InfrastructureHealthStatus.Unhealthy; 
            }
        }
        if (health.Status == InfrastructureHealthStatus.Create)
        {
            realStatus = InfrastructureHealthStatus.NeedHealthCheckRun;
        }
        return realStatus;
    }

    private static string GetStatusText(InfrastructureHealthCheck health)
    {
        var realStatus = GetRealStatus(health);
        return realStatus.ToString();
    }

    private static Color GetColor(InfrastructureHealthCheck health)
    {
        var realStatus = GetRealStatus(health);
        return GetColor(realStatus);
    }

    private static Color GetColor(InfrastructureHealthStatus status)
    {
        return status switch
        {
            InfrastructureHealthStatus.Healthy => Color.Success,
            InfrastructureHealthStatus.Degraded => Color.Warning,
            InfrastructureHealthStatus.Unhealthy => Color.Error,
            _ => Color.Default
        };
    }
}