@using Datahub.Shared.Entities
@using System.Text.Json
@using Datahub.Application.Services.Budget
@using Datahub.Application.Services.Cost
@using Datahub.Core.Model.Projects

@inject IDbContextFactory<DatahubProjectDBContext> _dbContextFactory

<MudStack>
    <MudText Typo="Typo.h2">DataHub Statistics</MudText>
    <MudText>This page shows statistics about the DataHub.</MudText>

    <MudTable Items="@_statsRows" Hover="true" Loading="_isLoading" LoadingProgressColor="Color.Info">
        <HeaderContent>
            <MudTh>
                <MudTableSortLabel SortBy="@(new Func<DatahubProjectStatsRow, object>(x => x.Name))">Workspace</MudTableSortLabel>
            </MudTh>
            <MudTh>
                <MudTableSortLabel SortBy="@(new Func<DatahubProjectStatsRow, object>(x => x.UniqueDepartments.Count))">Departments</MudTableSortLabel>
            </MudTh>
            <MudTh>
                <MudTableSortLabel SortBy="@(new Func<DatahubProjectStatsRow, object>(x => x.Leads?.Count))">Leads</MudTableSortLabel>
            </MudTh>
            <MudTh>
                <MudTableSortLabel SortBy="@(new Func<DatahubProjectStatsRow, object>(x => x.Admins?.Count))">Admins</MudTableSortLabel>
            </MudTh>
            <MudTh>
                <MudTableSortLabel SortBy="@(new Func<DatahubProjectStatsRow, object>(x => x.Collaborators?.Count))">Collaborators</MudTableSortLabel>
            </MudTh>
            <MudTh>
            </MudTh>
            <MudTh>
                <MudTableSortLabel SortBy="@(new Func<DatahubProjectStatsRow, object>(x => x.BudgetRemaining))">Budget Remaining</MudTableSortLabel>
            </MudTh>
            <MudTh>
                <MudTableSortLabel SortBy="@(new Func<DatahubProjectStatsRow, object>(x => x.CostOfLastXDays))">Cost of last 7 days</MudTableSortLabel>
            </MudTh>
            <MudTh>
                <MudTableSortLabel SortBy="@(new Func<DatahubProjectStatsRow, object>(x => x.MetadataComplete))">Metadata</MudTableSortLabel>
            </MudTh>
            <MudTh>
                <MudTableSortLabel SortBy="@(new Func<DatahubProjectStatsRow, object>(x => x.StorageStatus))">Storage</MudTableSortLabel>
            </MudTh>
            <MudTh>
                <MudTableSortLabel SortBy="@(new Func<DatahubProjectStatsRow, object>(x => x.DatabricksStatus))">Databricks</MudTableSortLabel>
            </MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Workspace">
                <MudTooltip Text="@($"Project ID {context.ProjectId}")" Arrow="true">
                    <strong>@context.Acronym</strong> @context.Name
                </MudTooltip>
            </MudTd>
            <MudTd DataLabel="Departments">
                @foreach (var department in context.UniqueDepartments)
                {
                    <span>@department</span>
                    <br/>
                }
            </MudTd>
            <MudTd DataLabel="Leads">
                @context.Leads?.Count
            </MudTd>
            <MudTd DataLabel="Admins">
                @context.Admins?.Count
            </MudTd>
            <MudTd DataLabel="Collaborators">
                @context.Collaborators?.Count
            </MudTd>
            <MudTd>
                <DHButton Variant="Variant.Outlined" Size="Size.Small" OnClick="@(() => ShowUsersPressed(context.ProjectId))">
                    @(context.ShowUserDetails ? "Hide" : "Show") User details
                </DHButton>
            </MudTd>
            <MudTd DataLabel="Budget">
                <MudTooltip Text="@($"{context.BudgetSpent.ToString("C", CultureInfo.CurrentCulture)} / {context.BudgetLimit.ToString("C", CultureInfo.CurrentCulture)}")">
                    @context.BudgetRemaining.ToString("C", CultureInfo.CurrentCulture)
                </MudTooltip>
            </MudTd>
            <MudTd DataLabel="CostXDays">
                @context.CostOfLastXDays.ToString("C", CultureInfo.CurrentCulture)
            </MudTd>
            <MudTd DataLabel="Metadata">
                @if (context.MetadataComplete)
                {
                    <DHIcon Icon="@Icons.Material.Filled.Check" Color="Color.Success" />
                }
                else
                {
                    <DHIcon Icon="@Icons.Material.Filled.WatchLater" Color="Color.Warning" />
                }
            </MudTd>
            <MudTd DataLabel="Storage">
                @switch (context.StorageStatus)
                {
                    case DatahubProjectStatsRow.ResourceStatus.Complete:
                        <DHIcon Icon="@Icons.Material.Filled.Check" Color="@Color.Success" />
                        break;
                    case DatahubProjectStatsRow.ResourceStatus.Requested:
                        <DHIcon Icon="@Icons.Material.Filled.WatchLater" Color="@Color.Warning" />
                        break;
                    case DatahubProjectStatsRow.ResourceStatus.None:
                        break;
                    default:
                        throw new ArgumentOutOfRangeException();
                }
            </MudTd>
            <MudTd DataLabel="Databricks">
                @switch (context.DatabricksStatus)
                {
                    case DatahubProjectStatsRow.ResourceStatus.Complete:
                        <DHIcon Icon="@Icons.Material.Filled.Check" Color="@Color.Success" />
                        break;
                    case DatahubProjectStatsRow.ResourceStatus.Requested:
                        <DHIcon Icon="@Icons.Material.Filled.WatchLater" Color="@Color.Warning" />
                        break;
                    case DatahubProjectStatsRow.ResourceStatus.None:
                        break;
                    default:
                        throw new ArgumentOutOfRangeException();
                }
            </MudTd>
        </RowTemplate>

        <ChildRowContent>
            @if (context.ShowUserDetails)
            {
                <MudTr>
                    <td colspan="7">
                        <MudCard Elevation="0">
                            <MudCardHeader>
                                <CardHeaderContent>
                                    <MudText Typo="Typo.body1">User details for <strong>@context.Name</strong></MudText>
                                </CardHeaderContent>
                            </MudCardHeader>
                            <MudCardContent class="pl-6 py-0 pr-0">
                                <MudTable Items="@context.Leads" Context="LeadContext" Elevation="0" Dense>
                                    <HeaderContent>
                                        <MudTh>
                                            <MudTableSortLabel SortBy="@(new Func<string, object>(x => x))">
                                                <strong>Leads</strong>
                                            </MudTableSortLabel>
                                        </MudTh>
                                    </HeaderContent>
                                    <RowTemplate>
                                        <MudTd DataLabel="Leads">
                                            @LeadContext
                                        </MudTd>
                                    </RowTemplate>
                                </MudTable>
                                <MudTable Items="@context.Admins" Context="AdminContext" Elevation="0" Dense>
                                    <HeaderContent>
                                        <MudTh>
                                            <MudTableSortLabel SortBy="@(new Func<string, object>(x => x))">
                                                <strong>Admins</strong>
                                            </MudTableSortLabel>
                                        </MudTh>
                                    </HeaderContent>
                                    <RowTemplate>
                                        <MudTd DataLabel="Admins">
                                            @AdminContext
                                        </MudTd>
                                    </RowTemplate>
                                </MudTable>
                                <MudTable Items="@context.Collaborators" Context="CollaboratorContext" Elevation="0" Dense>
                                    <HeaderContent>
                                        <MudTh>
                                            <MudTableSortLabel SortBy="@(new Func<string, object>(x => x))">
                                                <strong>Collaborators</strong>
                                            </MudTableSortLabel>
                                        </MudTh>
                                    </HeaderContent>
                                    <RowTemplate>
                                        <MudTd DataLabel="Collaborators">
                                            @CollaboratorContext
                                        </MudTd>
                                    </RowTemplate>
                                </MudTable>
                            </MudCardContent>
                        </MudCard>
                    </td>
                </MudTr>
            }
        </ChildRowContent>

    </MudTable>
</MudStack>

@code {

    private bool _isLoading = true;

    private List<DatahubProjectStatsRow> _statsRows = new();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);

        if (firstRender)
        {
            await using var context = await _dbContextFactory.CreateDbContextAsync();
            const int numberOfDays = 7;


            _statsRows = context.Projects
                .Include(p => p.Credits)
                .Include(p => p.Users)
                // .Include(p => p.ProjectRequestAudits)
                .AsEnumerable()
                .Select(p => new DatahubProjectStatsRow()
                {
                    ProjectId = p.Project_ID,
                    Name = p.Project_Name,
                    Acronym = p.Project_Acronym_CD,
                    MetadataComplete = p.MetadataAdded ?? false,
                    BudgetLimit = p.Project_Budget ?? 0,
                    BudgetSpent = p.Credits?.Current ?? 0,
                    CostOfLastXDays = GetLastXDaysOfCosts(p.Credits, numberOfDays),
                    Leads = p.Users?.Where(u => u.RoleId == (int) Project_Role.RoleNames.WorkspaceLead).Select(u => u.User_Name).ToList(),
                    Admins = p.Users?.Where(u => u.RoleId == (int) Project_Role.RoleNames.Admin).Select(u => u.User_Name).ToList(),
                    Collaborators = p.Users?.Where(u => u.RoleId == (int) Project_Role.RoleNames.Collaborator).Select(u => u.User_Name).ToList(),
                    StorageStatus = p.Resources?
                        .Where(sr => sr.ResourceType.Contains(TerraformTemplate.AzureStorageBlob))
                        .Select(sr => sr.CreatedAt.HasValue ? DatahubProjectStatsRow.ResourceStatus.Complete : DatahubProjectStatsRow.ResourceStatus.Requested)
                        .FirstOrDefault() ?? DatahubProjectStatsRow.ResourceStatus.None,
                    DatabricksStatus = p.Resources?
                        .Where(sr => sr.ResourceType.Contains(TerraformTemplate.AzureDatabricks))
                        .Select(sr => sr.CreatedAt.HasValue ? DatahubProjectStatsRow.ResourceStatus.Complete : DatahubProjectStatsRow.ResourceStatus.Requested)
                        .FirstOrDefault() ?? DatahubProjectStatsRow.ResourceStatus.None
                })
                .ToList();


            _isLoading = false;
            StateHasChanged();
        }
    }

    private static decimal GetLastXDaysOfCosts(Project_Credits projectCredits, int days)
    {
        if (projectCredits == null || projectCredits.CurrentPerDay == null)
        {
            return 0;
        }
        
        var currentPerDay = JsonSerializer.Deserialize(projectCredits.CurrentPerDay, typeof(List<DailyServiceCost>)) as List<DailyServiceCost>;
        var cost = currentPerDay?.Where(c => c.Date > DateTime.Now.AddDays(-days)).Sum(c => c.Amount) ?? 0;
        
        return cost;
    }


    private void ShowUsersPressed(int projectId)
    {
        var row = _statsRows.First(r => r.ProjectId == projectId);
        row.ShowUserDetails = !row.ShowUserDetails;
    }

}