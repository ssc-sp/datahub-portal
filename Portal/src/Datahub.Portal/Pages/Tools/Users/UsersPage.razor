@page "/tools/users"
@using Microsoft.IdentityModel.Tokens
@using Datahub.Core.Model.Achievements

@inject IDbContextFactory<DatahubProjectDBContext> _dbContextFactory
@inject IJSRuntime _jsRuntime

<DatahubAuthView AuthLevel="DatahubAuthView.AuthLevels.DatahubAdmin">
    <MudText Typo="Typo.h1" Class="mb-12">
        @Localizer["Users"]
    </MudText>
    @if (_hasLoaded)
    {   
        <MudTooltip Text="Copy the emails of all users in the current environment. Excludes gmail, ssc-spc and apption emails.">
            <MudButton Color="Color.Primary" OnClick="@CopyAllUsersToClipboard">
                @_allButton
            </MudButton>
        </MudTooltip>
        <MudTooltip Text="Copy the emails of locked users in the tenant.">
            <MudButton Color="Color.Primary" OnClick="@CopyLockedUsersToClipboard">
                @_lockedButton
            </MudButton>
        </MudTooltip>
    }
    else
    {
        <MudProgressCircular Indeterminate="true" Color="Color.Primary"/>
    }
    @if (_userWorkspaces == null)
    {
      <MudSkeleton Height="600px" Width="100%"/>
    }
    else
    {
      <UsersTable UserWorkspaces="_userWorkspaces" @ref="_usersTable"/>
    }
</DatahubAuthView>



@code {
    private UsersTable _usersTable;
    private bool _hasLoaded = false;
    private string _lockedButton = null;
    private string _allButton = null;

    private List<UserWorkspaces> _userWorkspaces;
    private List<PortalUser> _portalUsers;
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender && !_hasLoaded)
        {
            _hasLoaded = _usersTable.loadStatus;
            _lockedButton = "Copy locked users to clipboard";
            _allButton = "Copy all users to clipboard";
        };
        
        await using var context = await _dbContextFactory.CreateDbContextAsync();
        _portalUsers = await context.PortalUsers.ToListAsync();
        
        _userWorkspaces = _portalUsers.Select(u => new UserWorkspaces
        {
            User = u,
            Workspaces = context.Project_Users.Include(pu => pu.Project)
                .Where(pu => pu.User_ID == u.GraphGuid)
                .Select(pu => pu.Project).ToList(),
        }).ToList();
        StateHasChanged();

    }

    private async Task CopyAllUsersToClipboard()
    {
        var allEmails = new List<string>();
        foreach (var user in _portalUsers)
        {
            var email = user.Email;
            if (!email.Contains("@gmail") && !email.Contains("@apption") && !email.Contains("@ssc-spc"))
            {
                allEmails.Add(email);
            }
        }
        var result = await CopyToClipboard(allEmails, _allButton);
        _allButton = result ? "Copied!" : "Failed to copy";
    }

    private async Task CopyLockedUsersToClipboard()
    {
        var result = await CopyToClipboard(_usersTable.lockedUsers, _lockedButton);
        _lockedButton = result ? "Copied!" : "Failed to copy";
    }
    
    [JSInvokable]
    private async Task<bool> CopyToClipboard(List<string> emailList, string buttonText)
    {
        var result = false;
        if (!emailList.IsNullOrEmpty())
        {
            var tempstr = "";
            string lastEmail = emailList.Last();
            foreach (var email in emailList)
            {
                if (email.Equals(lastEmail))
                {
                    tempstr += email;
                }
                else
                {
                    tempstr += email;
                    tempstr += ",\n";
                }
            }
            await _jsRuntime.InvokeVoidAsync("navigator.clipboard.writeText", tempstr);
            result = true;
        }
        return result;
    }

    
}