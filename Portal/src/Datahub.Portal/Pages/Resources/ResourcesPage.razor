@    using Datahub.Core.Services.Docs
@    using MudBlazor.Utilities
@    using System.Text.RegularExpressions
@inject DocumentationService _docService
@inject IDbContextFactory<DatahubProjectDBContext> _dbContextFactory
@inject CultureService _cultureService
@inject NavigationManager _navManager
@inject DocumentationService documentationService
@inject ILocalStorageService localStorage
@inject ILogger<ResourcesPage> logger 

@page "/resources/"
@page "/resources/{PageName}"

<!--suppress CssUnresolvedCustomProperty -->
@if (PageIsLoading)
{
    <MudContainer MaxWidth="MaxWidth.Small">
        <DHLoadingInitializer Message="@Localizer["Initializing Resources..."]" />
    </MudContainer>
}
else
{
    <MudStack>
        <MudStack Class="my-6">
            <MudText Typo="Typo.h1">@Localizer["Federal Science DataHub Resources"]</MudText>
            <MudText Typo="Typo.body2">
                @Localizer["Welcome to the Federal Science Datahub resources and documentation section. Below you will find a short list of some recommended resources to help you get started with the Datahub. If you are looking for something specific, you can also browse the full list of resources on the navigation sidebar."]
            </MudText>
            <MudGrid Class="my-3">
                <MudItem xs="4">
                    <ResourcesPreviewCard ShortVersion DocumentItem="@_userGuideDoc" />
                 </MudItem>
                 <MudItem xs="4">
                     <ResourcesPreviewCard ShortVersion DocumentItem="@_faqGuideDoc" />
                 </MudItem>
                 <MudItem xs="4">
                     <ResourcesPreviewCard ShortVersion DocumentItem="@_supportGuideDoc" />
                 </MudItem>
             </MudGrid>
         </MudStack>
         <MudGrid>
             <MudItem xs="3">
                 <MudNavMenu Dense Color=@Color.Primary Style="position: sticky; top: calc(var(--mud-appbar-height) + 1rem); max-height:  calc(95vh - (var(--mud-appbar-height) + 1rem)); overflow: auto;">
                     <MudNavLink Href="@BaseUrl" Match="NavLinkMatch.All">
                         @Localizer["Overview"]
                     </MudNavLink>
                     <MudDivider Class="my-3" />
                     @foreach (var cat in _resourceRoot.Children.Where(d => !_hiddenNavGroups.Contains(d.Id)))
                    {
                        var isDoc = cat.Children.Count == 0;

                        if (isDoc)
                        {
                            <MudNavLink Match="NavLinkMatch.All" Href=@BuildResourceLink(cat)>
                                @cat.Title
                            </MudNavLink>
                        }
                        else
                        {
                            <MudNavGroup Title="@cat.Title" ExpandedChanged=@(isExpanding => UpdateCategory(cat, isExpanding))>
                                @foreach (var article in cat.Children)
                                {
                                    <MudNavLink Match="NavLinkMatch.All" Href=@BuildResourceLink(article)>
                                        @article.Title
                                    </MudNavLink>
                                }
                            </MudNavGroup>
                        }
                    }
                </MudNavMenu>
            </MudItem>
            <MudItem xs="9">
                @if (ShowPreviewCards)
                {
                    @if (_docIsLoading || _currentDoc is null)
                    {
                        <MudContainer MaxWidth="MaxWidth.Small">
                            <DHLoadingInitializer Message="@Localizer["Initializing documentation..."]" />
                        </MudContainer>
                    }
                    else if (_currentDoc.IsRoot)
                    {
                        <MudStack Class="mb-6">
                            <MudText Typo="Typo.h2">@Localizer["Most Popular Resources"]</MudText>
                            <MudText Typo="Typo.body2">
                                @Localizer["Below you will find a comprehensive list of the most popular resources on the Datahub. If you are looking for something specific, you can also browse the full list of resources on the navigation sidebar."]
                            </MudText>
                        </MudStack>
                        <ResourcesListView DocumentItems="@_mostPopularDocs" />
                    }
                    else
                    {
                        <MudText Typo="Typo.h2" Class="mb-3">@_currentDoc.Title</MudText>
                        <ResourcesListView DocumentItems="@_currentDoc.Children" />
                    }
                }
                else
                {
                    <ResourcesMarkdown DocumentItem="@_currentDoc" />
                }
            </MudItem>
        </MudGrid>
    </MudStack>

    <ResourcesAdminView />
}

@code {

    [Parameter]
    public string PageName { get; set; }

    [Parameter]
    public List<(string, string)> Substitutions { get; set; }

    const string MostPopularId = "6B9B9B8D-B071-44F7-B264-A7670192F446";
    const string UserGuideId = "b594e16c-56e9-aae5-880f-487afca9aa38";
    const string FaqGuideId = "ff5ba5b8-08cb-326a-5761-9f54e6401e8f";
    const string SupportGuideId = "28c2b9f2-0ce7-b902-7708-aa6ec404c406";
    const string ReleaseNotesId = "753af81a-d8e2-3e29-e017-80e87b7f4fc0";

    private readonly List<string> _hiddenNavGroups = new() { MostPopularId, UserGuideId, FaqGuideId, SupportGuideId, ReleaseNotesId };

    private DocItem _resourceRoot;
    private DocItem _currentMarkdownCategory;
    private DocItem _currentDoc;
    private DocItem _userGuideDoc => _resourceRoot?.Children.FirstOrDefault(c => c.Id!.Equals(UserGuideId, StringComparison.InvariantCultureIgnoreCase));
    private DocItem _faqGuideDoc => _resourceRoot?.Children.FirstOrDefault(c => c.Id!.Equals(FaqGuideId, StringComparison.InvariantCultureIgnoreCase));
    private DocItem _supportGuideDoc => _resourceRoot?.Children.FirstOrDefault(c => c.Id!.Equals(SupportGuideId, StringComparison.InvariantCultureIgnoreCase));
    private List<DocItem> _mostPopularDocs => _resourceRoot?.Children.FirstOrDefault(c => c.Id!.Equals(MostPopularId, StringComparison.InvariantCultureIgnoreCase))?.Children ?? new List<DocItem>();

    private bool PageIsLoading => _resourceRoot is null;
    private bool ShowPreviewCards => _currentDoc?.MarkdownPage is null;
    private bool _docIsLoading;

    public const string BaseUrl = "/resources";

    public static string BuildResourceLink(DocItem res) => $"{BaseUrl}/{res?.Id}";

    private void UpdateCategory(DocItem cat, bool isExpanding)
    {
        if (!isExpanding || cat == _currentMarkdownCategory) return;

        _currentMarkdownCategory = cat;
        _navManager.NavigateTo(BuildResourceLink(cat));
    }

    protected override async Task OnInitializedAsync()
    {
        _resourceRoot = await _docService.GetLanguageRoot(DocumentationGuideRootSection.UserGuide, _cultureService.Culture);
        await ClearResourcesBadge();
        await CreateMostPopularFolder();
    }

    private async Task ClearResourcesBadge()
    {
        try
        {
            var lastCommitGit = await documentationService.GetLastRepoCommitTS();
            await localStorage.SetItemAsync(DocumentationService.COMMIT_API_URL, lastCommitGit);
        }
        catch (Exception ex)
        {
            logger.LogWarning($"Error checking resource badge", ex);
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        _docIsLoading = true;
        _currentDoc = string.IsNullOrEmpty(PageName) ? _resourceRoot : _docService.LoadPage(PageName, _cultureService.IsFrench);

        if (_currentDoc is not null)
        {
            await _docService.BuildDocAndPreviews(_currentDoc);
        }

        _docIsLoading = false;
        _currentMarkdownCategory = null;

        if (_currentDoc is null)
        {
            _docService.LogNotFoundError(PageName, _resourceRoot.Title);
        }
        else if (_currentDoc.MarkdownPage is null)
        {
            _currentMarkdownCategory = _currentDoc;
        }
        else if (!string.IsNullOrEmpty(_currentDoc.MarkdownPage))
        {
            _currentMarkdownCategory = _docService.GetParent(_currentDoc);
        }
    }

    const int MaxPopularDocuments = 10;

    private async Task CreateMostPopularFolder()
    {
        if (_resourceRoot.LocateID(MostPopularId) is not null)
            return;

        var ids = await GetPopularDocumentIds();

        var popularDocs = ids
            .Select(id => _resourceRoot.LocateID(id)?.Clone())
            .Where(doc => doc != null)
            .ToList();

        if (popularDocs.Count == 0)
            popularDocs = GetFakePopularDocumentIds();

        var item = DocItem.GetFolderItem(DocumentationGuideRootSection.UserGuide, MostPopularId, 1, Localizer["Most Popular"], popularDocs.Take(MaxPopularDocuments));

        _resourceRoot.AddFirstChild(item);
    }

    private async Task<List<string>> GetPopularDocumentIds()
    {
        await using var ctx = await _dbContextFactory.CreateDbContextAsync();
        return await ctx.DocumentationResources
            .OrderByDescending(e => e.Hits)
            .Select(e => e.Id.ToString())
            .ToListAsync();
    }

    private List<DocItem> GetFakePopularDocumentIds()
    {
        // pick random ids from the root's grandchildren that have no children
        return _resourceRoot.Children
            .SelectMany(c => c.Children)
            .Where(c => !c.Children.Any())
            .Take(MaxPopularDocuments)
            .ToList();
    }

}