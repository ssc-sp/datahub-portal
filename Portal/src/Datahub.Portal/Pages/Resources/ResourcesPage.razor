@using Datahub.Core.Services.Docs
@using MudBlazor.Utilities
@using System.Text.RegularExpressions
@inject DocumentationService _docService
@inject IDbContextFactory<DatahubProjectDBContext> _dbContextFactory
@inject CultureService _cultureService
@inject NavigationManager _navManager

@page "/resources/"
@page "/resources/{PageName}"

@if (PageIsLoading)
{
    <MudContainer MaxWidth="MaxWidth.Small">
        <DHLoadingInitializer Message="@Localizer["Initializing Resources..."]"/>
    </MudContainer>
}
else
{
    <MudGrid>
        <MudItem xs="3">
            <MudNavMenu Rounded Color=@Color.Primary Dense>
                <MudNavLink Href="@BaseUrl" Match="NavLinkMatch.All" Icon="@Icons.Material.Filled.Home">
                    <MudText Inline Typo=@Typo.h5 Style="@GetNavTextStyle()">@Localizer["Overview"]</MudText>
                </MudNavLink>
                @foreach (var cat in _resourceRoot.Children)
                {
                    var isCurrentCat = (_currentMarkdownCategory == cat);
                    var isDoc = cat.Children.Count == 0;

                    if (isDoc)
                    {
                        <MudNavLink Match="NavLinkMatch.All" Href=@BuildResourceLink(cat)>
                            <MudText Typo=@Typo.h5 Style="@GetNavTextStyle()">@cat.Title</MudText>
                        </MudNavLink>
                    }
                    else
                    {
                        <MudNavGroup Expanded="@isCurrentCat" Title="@cat.Title" ExpandedChanged=@((v) => UpdateCategory(cat, v)) Style="@GetNavTextStyle(isNavGroup: true)">
                            <div style="@NavGroupStyle" class="resources-nav-group-wrapper">
                                
                                @foreach (var article in cat.Children)
                                {
                                    <MudNavLink Match="NavLinkMatch.All" Href=@BuildResourceLink(article) Style="@InnerNavLinkStyle">
                                        <MudText Typo=@Typo.h6>@article.Title</MudText>
                                    </MudNavLink>
                                }
                            
                            </div>
                        </MudNavGroup>
                    }
                }
            </MudNavMenu>
        </MudItem>
        <MudItem xs="9">
            @if (ShowPreviewCards)
            {
                @if (_docIsLoading || _currentDoc is null)
                {
                    <MudContainer MaxWidth="MaxWidth.Small">
                        <DHLoadingInitializer Message="@Localizer["Initializing documentation..."]"/>
                    </MudContainer>
                }
                else
                {
                    <ResourcesListView DocumentItems="@_currentDoc.Children"/>
                }
            }
            else
            {
                <ResourcesMarkdown DocumentItem="@_currentDoc"/>
            }
        </MudItem>
    </MudGrid>
    
    <ResourcesAdminView />
}

@code {

    [Parameter]
    public string PageName { get; set; }

    [Parameter]
    public List<(string, string)> Substitutions { get; set; }

    const string MostPopularId = "6B9B9B8D-B071-44F7-B264-A7670192F446";

    private DocItem _resourceRoot;
    private DocItem _currentMarkdownCategory;
    private DocItem _currentDoc;
    private List<(bool isChild, string heading)> _headings;

    private bool PageIsLoading => _resourceRoot is null;
    private bool ShowPreviewCards => _currentDoc?.MarkdownPage is null;
    private bool _docIsLoading;

    public const string BaseUrl = "/resources";

    public static string BuildResourceLink(DocItem res) => $"{BaseUrl}/{res.Id}";

    private bool UpdateCategory(DocItem cat, bool value)
    {
        if (value && cat != _currentMarkdownCategory)
        {
            _currentMarkdownCategory = cat;
            _navManager.NavigateTo(BuildResourceLink(cat));
        }
        else if (!value && cat == _currentMarkdownCategory)
        {
            _navManager.NavigateTo(BuildResourceLink(cat));
        }

        return value;
    }

    protected override async Task OnInitializedAsync()
    {
        _resourceRoot = await _docService.GetLanguageRoot(DocumentationGuide.UserGuide, _cultureService.Culture);
        await CreateMostPopularFolder();
    }

    protected override async Task OnParametersSetAsync()
    {
        _docIsLoading = true;
        _currentDoc = string.IsNullOrEmpty(PageName) ? _resourceRoot     : _docService.LoadPage(PageName, _cultureService.IsFrench);

        if (_currentDoc is not null)
        {
            await _docService.BuildDocAndPreviews(_currentDoc);
        }

        _docIsLoading = false;
        _currentMarkdownCategory = null;

        if (_currentDoc is null)
        {
            _docService.LogNotFoundError(PageName, _resourceRoot.Title);
        }
        else if (_currentDoc.MarkdownPage is null)
        {
            _currentMarkdownCategory = _currentDoc;
        }
        else if (!string.IsNullOrEmpty(_currentDoc.MarkdownPage))
        {
            _currentMarkdownCategory = _docService.GetParent(_currentDoc);
        }
        _headings = GetHeadings(_currentDoc?.Content ?? "");
    }

    private static string GetNavTextStyle(bool isNavGroup = false) => new StyleBuilder()
        .AddStyle("font-size", "var(--mud-typography-h5-size)", when: isNavGroup)
        .AddStyle("font-family", "var(--mud-typography-h5-family)", when: isNavGroup)
        .AddStyle("font-weight", "600")
        .AddStyle("line-height", "var(--mud-typography-h5-lineheight)", when: isNavGroup)
        .AddStyle("letter-spacing", "var(--mud-typography-h5-letterspacing)", when: isNavGroup)
        .AddStyle("text-transform", "var(--mud-typography-h5-text-transform)", when: isNavGroup)
        .Build();

    private static readonly string NavGroupStyle = new StyleBuilder()
        .AddStyle("border-left", "1px solid var(--mud-palette-divider)")
        // spacing on the margin above this div is 12px margin + 16px padding = 28px
        .AddStyle("margin-left", "28px")
        .Build();

    private static readonly string InnerNavLinkStyle = new StyleBuilder()
        .AddStyle("padding-left", "8px")
        .Build();

    public static List<(bool isChild, string heading)> GetHeadings(string markdown)
    {
        // Pattern for second (##) and third (###) headings only.
        const string pattern = @"(^(#{2,3}).*?$)";

        var matches = Regex.Matches(markdown, pattern, RegexOptions.Multiline);

        var headings = new List<(bool,string)>();
        foreach (Match match in matches)
        {
            // Remove the leading hash characters and whitespace to only keep the text of the heading.
            var headingText = match.Value.TrimStart('#').TrimStart();
            var numberOfHashes = match.Groups[2].Value.Length;
            headings.Add((numberOfHashes>2,headingText));
        }

        return headings;
    }

    const int MaxPopularDocuments = 10;

    private async Task CreateMostPopularFolder()
    {
        if (_resourceRoot.LocateID(MostPopularId) is not null)
            return;

        var ids = await GetPopularDocumentIds();

        var popularDocs = ids
            .Select(id => _resourceRoot.LocateID(id)?.Clone())
            .Where(doc => doc != null)
            .ToList();

        if (popularDocs.Count == 0)
            return;

        var item = DocItem.GetFolderItem(DocumentationGuide.UserGuide, MostPopularId, 1, Localizer["Most Popular"], popularDocs.Take(MaxPopularDocuments));

        _resourceRoot.AddFirstChild(item);
    }

    private async Task<List<string>> GetPopularDocumentIds()
    {
        using var ctx = await _dbContextFactory.CreateDbContextAsync();
        return await ctx.DocumentationResources
            .OrderByDescending(e => e.Hits)
            .Select(e => e.Id.ToString())
            .ToListAsync();
    }
}