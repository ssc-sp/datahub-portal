@using Datahub.Core.Services.Docs
@using Datahub.Markdown.Model
@using Datahub.Portal.Components.Resources

@inject DocumentationService _docService
@inject IDbContextFactory<DatahubProjectDBContext> _dbContextFactory
@inject CultureService _cultureService
@inject NavigationManager _navManager
@inject DocumentationService _documentationService
@inject ILocalStorageService _localStorage
@inject ILogger<ResourcesPage> _logger

@attribute [Route(PageRoutes.ResourceDefault)]
@attribute [Route(PageRoutes.Resource)]


<!--suppress CssUnresolvedCustomProperty -->
<PageTitle>
    @Localizer["SSC Datahub - Resources"]
</PageTitle>

<SectionContent SectionName="side-bar">
    <PersonalSidebar/>
</SectionContent>

@if (PageIsLoading)
{
    <DHLoadingInitializer Message="@Localizer["Initializing Resources..."]"/>
}
else
{
    <MudStack>
        @*         <MudStack Class="my-6">
            <MudText Typo="Typo.h1">@Localizer["Federal Science DataHub Resources"]</MudText>
                <MudText Typo="Typo.body2">
                    @Localizer["Welcome to the Federal Science Datahub resources and documentation section. Below you will find a short list of some recommended resources to help you get started with the Datahub. If you are looking for something specific, you can also browse the full list of resources on the navigation sidebar."]
            </MudText>
            <MudGrid Class="my-3">
                <MudItem xs="4">
                    <ResourcesPreviewCard ShortVersion DocumentItem="@_userGuideDoc" />
                 </MudItem>
                 <MudItem xs="4">
                     <ResourcesPreviewCard ShortVersion DocumentItem="@_faqGuideDoc" />
                 </MudItem>
                 <MudItem xs="4">
                     <ResourcesPreviewCard ShortVersion DocumentItem="@_supportGuideDoc" />
                 </MudItem>
             </MudGrid>
         </MudStack> *@
        <MudTabs @bind-ActivePanelIndex="_tabIndex"
                 Elevation="2" Rounded="true" Centered="false" ApplyEffectsToContainer="true" PanelClass="pa-6">
            @foreach (var cat in _tabList)
            {
                var isDoc = cat.Children.Count == 0;

                if (!isDoc)
                {
                    <MudTabPanel Text="@cat.Title" OnClick="() => ActivateCategory(cat)" Icon="@(cat.GetMudblazorMaterialIcon("Outlined"))">
                        <MudGrid>
                            <MudItem xs="3">
                                <MudNavMenu Dense Color=@Color.Primary Style="position: sticky; top: calc(var(--mud-appbar-height) + 1rem); max-height:  calc(95vh - (var(--mud-appbar-height) + 1rem)); overflow: auto;">
                                    <MudNavLink Href="@BaseUrl" Match="NavLinkMatch.All">
                                        @Localizer["Frequent Documents"]
                                    </MudNavLink>
                                    <MudDivider Class="my-3"/>
                                    @foreach (var cat in _currentCategory.Children.Where(d => !_hiddenNavGroups.Contains(d.Id)))
                                    {
                                        var isDoc = cat.Children.Count == 0;

                                        if (isDoc)
                                        {
                                            <MudNavLink Match="NavLinkMatch.All" Href=@BuildResourceLink(cat) Icon="@(cat.GetSidebarIcon())">
                                                @cat.Title
                                            </MudNavLink>
                                        }
                                        else
                                        {
                                            <MudNavGroup Title="@cat.Title" ExpandedChanged=@(isExpanding => UpdateCategory(cat, isExpanding)) Icon="@(cat.GetSidebarIcon())">
                                                @foreach (var article in cat.Children)
                                                {
                                                    if (article.DocType == DocItemType.External)
                                                    {
                                                        <MudNavLink Match="NavLinkMatch.All" Target="_blank" Href=@BuildResourceLink(article) Icon="@(article.GetSidebarIcon())">
                                                            @article.Title
                                                        </MudNavLink>
                                                    }
                                                    else
                                                    {
                                                        <MudNavLink Match="NavLinkMatch.All" Href=@BuildResourceLink(article) Icon="@(article.GetSidebarIcon())">
                                                            @article.Title
                                                        </MudNavLink>
                                                    }
                                                }
                                            </MudNavGroup>
                                        }
                                    }
                                </MudNavMenu>
                            </MudItem>
                            <MudItem xs="9">
                                @if (ShowPreviewCards)
                                {
                                    @if (_docIsLoading || _currentDoc is null)
                                    {
                                        <DHLoadingInitializer Message="@Localizer["Initializing documentation..."]"/>
                                    }
                                    else if (_currentDoc.IsRoot)
                                    {
                                        <MudStack Class="mb-6">
                                            <MudText Typo="Typo.h2">@Localizer["Most Popular Resources"]</MudText>
                                            <MudText Typo="Typo.body2">
                                                @Localizer["Below you will find a comprehensive list of the most popular resources on the Datahub. If you are looking for something specific, you can also browse the full list of resources on the navigation sidebar."]
                                            </MudText>
                                        </MudStack>
                                        <ResourcesListView DocumentItems="@_mostPopularDocs"/>
                                    }
                                    else
                                    {
                                        <MudText Typo="Typo.h2" Class="mb-3">@_currentDoc.Title</MudText>
                                        <ResourcesListView DocumentItems="@_currentDoc.Children"/>
                                    }
                                }
                                else
                                {
                                    <ResourcesMarkdown DocumentItem="@_currentDoc"/>
                                }
                            </MudItem>
                        </MudGrid>
                    </MudTabPanel>
                }
            }
        </MudTabs>
    </MudStack>

    <ResourcesAdminView/>
}

@code {

    [Parameter]
    public string PageName { get; set; }

    [Parameter]
    public List<(string, string)> Substitutions { get; set; }


    [Parameter]
    [SupplyParameterFromQuery(Name = "t")]
    public int? TabIndex { get; set; }

    [CascadingParameter]
    public RouteData routeData { get; set; }

        const string MostPopularId = "6B9B9B8D-B071-44F7-B264-A7670192F446";
        const string UserGuideId = "b594e16c-56e9-aae5-880f-487afca9aa38";
        const string FaqGuideId = "ff5ba5b8-08cb-326a-5761-9f54e6401e8f";
        const string SupportGuideId = "28c2b9f2-0ce7-b902-7708-aa6ec404c406";
        const string ReleaseNotesId = "753af81a-d8e2-3e29-e017-80e87b7f4fc0";

    private readonly List<string> _hiddenNavGroups = new() { MostPopularId, UserGuideId, FaqGuideId, SupportGuideId, ReleaseNotesId };

    private DocItem _currentCategory;

    private DocItem _resourceRoot;
    private DocItem _currentMarkdownCategory;
    private DocItem _currentDoc;
    private DocItem _userGuideDoc => _resourceRoot?.Children.FirstOrDefault(c => c.Id!.Equals(UserGuideId, StringComparison.InvariantCultureIgnoreCase));
    private DocItem _faqGuideDoc => _resourceRoot?.Children.FirstOrDefault(c => c.Id!.Equals(FaqGuideId, StringComparison.InvariantCultureIgnoreCase));
    private DocItem _supportGuideDoc => _resourceRoot?.Children.FirstOrDefault(c => c.Id!.Equals(SupportGuideId, StringComparison.InvariantCultureIgnoreCase));
    private List<DocItem> _mostPopularDocs => _resourceRoot?.Children.FirstOrDefault(c => c.Id!.Equals(MostPopularId, StringComparison.InvariantCultureIgnoreCase))?.Children ?? new List<DocItem>();

    private int _tabIndex;

    private bool PageIsLoading => _resourceRoot is null;
    private bool ShowPreviewCards => _currentDoc?.MarkdownPage is null;
    private bool _docIsLoading;
    private List<DocItem> _tabList;

        public const string BaseUrl = "/resources";

    public static string BuildResourceLink(DocItem res)
    {
        if (res?.DocType == DocItemType.External)
            return res.MarkdownPage;
        return $"{BaseUrl}/{res?.Id}";
    }

    public async Task ActivateCategory(DocItem docItem)
    {
        _currentCategory = docItem;
        var idx = _tabList.IndexOf(docItem);
        await CreateMostPopularFolder();
        var uriBuilder = new UriBuilder(_navManager.Uri);
        var q = System.Web.HttpUtility.ParseQueryString(uriBuilder.Query);
    //var page = routeData.
    //_navManager.NavigateTo("");
    }

    private void UpdateCategory(DocItem cat, bool isExpanding)
    {
        if (!isExpanding || cat == _currentMarkdownCategory) return;

        _currentMarkdownCategory = cat;
        _navManager.NavigateTo(BuildResourceLink(cat));
    }

    protected override async Task OnInitializedAsync()
    {
        _resourceRoot = await _docService.LoadResourceTree(DocumentationGuideRootSection.UserGuide, _cultureService.Culture);
        _currentCategory = _resourceRoot.Children.Where(d => !_hiddenNavGroups.Contains(d.Id)).First();
        _tabList = _resourceRoot.Children.Where(d => !_hiddenNavGroups.Contains(d.Id)).ToList();
        _tabIndex = Math.Min(_tabList.Count, TabIndex ?? 0);
        await ActivateCategory(_tabList[_tabIndex]);
        await ClearResourcesBadge();
    }

    private async Task ClearResourcesBadge()
    {
        try
        {
            var lastCommitGit = await _documentationService.GetLastRepoCommitTS();
            await _localStorage.SetItemAsync(DocumentationService.COMMIT_API_URL, lastCommitGit);
        }
        catch (Exception ex)
        {
            _logger.LogWarning($"Error checking resource badge", ex);
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        _docIsLoading = true;
        _currentDoc = string.IsNullOrEmpty(PageName) ? _resourceRoot : _docService.LoadPage(PageName, _cultureService.IsFrench);

        if (_currentDoc is not null)
        {
            await _docService.BuildDocAndPreviews(_currentDoc);
        }

        _docIsLoading = false;
        _currentMarkdownCategory = null;

        if (_currentDoc is null)
        {
            _docService.LogNotFoundError(PageName, _resourceRoot.Title);
        }
        else if (_currentDoc.MarkdownPage is null)
        {
            _currentMarkdownCategory = _currentDoc;
        }
        else if (!string.IsNullOrEmpty(_currentDoc.MarkdownPage))
        {
            _currentMarkdownCategory = _docService.GetParent(_currentDoc);
        }
    }

        const int MaxPopularDocuments = 10;

    private DocItem popularItem;

    private async Task CreateMostPopularFolder()
    {
        if (_resourceRoot.LocateID(MostPopularId) is not null)
        {
            _resourceRoot.Children.Remove(popularItem);
        }

        var ids = await GetPopularDocumentIds();

        var popularDocs = ids
            .Select(id => _resourceRoot.LocateID(id)?.Clone())
            .Where(doc => doc != null)
            .ToList();

        var currentCategoryDocs = _currentCategory.Children
            .SelectMany(c => c.Children)
            .Where(c => !c.Children.Any())
            .ToList();

        popularDocs = popularDocs.Intersect(currentCategoryDocs).ToList();

        if (popularDocs.Count == 0)
            popularDocs = GetFakePopularDocumentIds();

        popularItem = DocItem.GetFolderItem(DocumentationGuideRootSection.UserGuide, MostPopularId, 1, Localizer["Most Popular"], popularDocs.Take(MaxPopularDocuments));
        _resourceRoot.AddFirstChild(popularItem);
    }

    private async Task<List<string>> GetPopularDocumentIds()
    {
        await using var ctx = await _dbContextFactory.CreateDbContextAsync();
        return await ctx.DocumentationResources
            .OrderByDescending(e => e.Hits)
            .Select(e => e.Id.ToString())
            .ToListAsync();
    }

    private List<DocItem> GetFakePopularDocumentIds()
    {
    // pick random ids from the root's grandchildren that have no children
        return _currentCategory.Children
            .SelectMany(c => c.Children)
            .Where(c => !c.Children.Any())
            .Take(MaxPopularDocuments)
            .ToList();
    }

}