@*ResourcesMarkdown.razor*@

@using Datahub.Core.Services.Docs
@using Datahub.Core.Model.UserTracking
@inject DocumentationService _docService
@inject UserLocationManagerService UserLocationManagerService

<MudPaper Class="px-8 py-6">
    <AuthorizeView Roles="@RoleConstants.DATAHUB_ROLE_ADMIN">
        <MudButton Style="@_editButtonStyle" Href="@_docService.GetEditUrl(DocumentItem)"
                   OnClick="@HandleRemoveFromCache"
                   Color="@Color.Primary"
                   Variant="@Variant.Filled"
                   StartIcon="@Icons.Material.Filled.Launch"
                   Target="_blank">
            @Localizer["BUTTONS.Edit"]
        </MudButton>
    </AuthorizeView>
    
    <DHMarkdown Content="@_markdownContent"
                LinkRewriter="@RewriteLink" 
                Substitutions="@Substitutions" />

</MudPaper>

@code {

    [Parameter]
    public DocItem DocumentItem { get; set; }

    [Parameter]
    public List<(string, string)> Substitutions { get; set; }

    private string _markdownContent;
    private string _editButtonStyle = "float: right;";

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();
        _markdownContent = await _docService.LoadResourcePage(DocumentItem);
        var userRecentLink = new UserRecentLink()
        {
            LinkType = DatahubLinkType.ResourceArticle,
            ResourceArticleId = DocumentItem.Id,
            ResourceArticleTitle = DocumentItem.Title,
            accessedTime = DateTimeOffset.Now,

        };
        await UserLocationManagerService.RegisterNavigation(userRecentLink);
    }

    public string RewriteLink(string link)
    {
        if (link.StartsWith("http") || link.StartsWith("/api"))
            return link;
        //if link has an image extension
        var linkLc = link.ToLower();
        if (linkLc.EndsWith(".png") || linkLc.EndsWith(".jpg") || linkLc.EndsWith(".jpeg") || linkLc.EndsWith(".gif"))
        {
            if (link.StartsWith("/"))
                return _docService.BuildAbsoluteURL(link);
            var baseAddress = new Uri(_docService.BuildAbsoluteURL(DocumentItem.MarkdownPage));
            Uri directory = new Uri(baseAddress, "."); // "." == current dir, like MS-DOS
            var imgLink = new Uri(directory,link).AbsoluteUri;
            return imgLink;
        }
        return ResourcesPage.BaseUrl + "/" + System.Web.HttpUtility.UrlEncode(link);
    }

    private void HandleRemoveFromCache()
    {
        _docService.RemoveFromCache(DocumentItem);
    }
}