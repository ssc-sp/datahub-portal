@using System.Linq
@using Forms = MudBlazor.Forms


<MudItem Class="ma-2">
    <MudBlazor.Forms.MudModelForm Model="_approvalForm"
                 T="Data.Forms.ShareWorkflow.ApprovalForm"
                 OnValidSubmit="HandleValidSubmit"
                 OnCancel="ClearForm"
                 OnConfigure="OnConfigure"
                 CancelLabel="@CancelLabel"
                 SubmitLabel="@SubmitLabel"
                 LabelForPropertyFunc="@GetDataLabel"
                 LabelsOnTop />
    
    @if (!_validMandatoryCheckboxes)
    {
        <MudAlert Severity="Severity.Warning">
            @(new MarkupString(Localizer["OPENDATA-WIZARD.MustAcknowledgeMandatoryReleaseCriteria"]))
        </MudAlert>
    }    
</MudItem>

@code {

    [Inject]
    public IMetadataBrokerService MetadataBrokerService { get; set; }

    [Inject]
    public IOrganizationLevelsService DHOrganizationLevelsService { get; set; }

    [Parameter]
    public int ApprovalFormId { get; set; } = 0;

    [Parameter]
    public string DatasetTitle { get; set; }

    [Parameter]
    public EventCallback<ApprovalFormSubmitArgs> OnSubmitForm { get; set; }

    [Parameter]
    public GraphUser User { get; set; }

    private List<DHOrganizationLevel> _sectors = new(); 
    private List<DHOrganizationLevel> _branches = new(); 
    private List<DHOrganizationLevel> _divisions = new();
    private List<DHOrganizationLevel> _sections = new();

    private int _sectorId = -1;
    private int _branchId = -1;
    private int _divisionId = -1;
    private int _sectionId = -1; 

    private bool _isFrench;

    private List<string> Sectors => LocalizeChoices(_sectors);
    private List<string> Branches => LocalizeChoices(_branches.Where(b => b.ParentId == _sectorId));
    private List<string> Divisions => LocalizeChoices(_divisions.Where(d => d.ParentId == _branchId));
    private List<string> Sections => LocalizeChoices(_sections.Where(d => d.ParentId == _divisionId));

    private List<string> LocalizeChoices(IEnumerable<DHOrganizationLevel> levels) 
        => levels.Select(s => !_isFrench ? s.EnglishLabel : s.FrenchLabel).OrderBy(s => s).ToList();

    public string SubmitLabel => Localizer[MakeLabel("Submit")];

    public string CancelLabel => Localizer[MakeLabel("Cancel")];

    public Data.Forms.ShareWorkflow.ApprovalForm _approvalForm { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var dbForm = await MetadataBrokerService.GetApprovalForm(ApprovalFormId);
        if (dbForm is null)
        {
            // create a new form
            _approvalForm = new()
            {
                DepartmentNAME = "Natural Resources Canada / Ressources Naturelles Canada",
                TypeOfDataTXT = "Data",
                NameNAME = User?.DisplayName,
                EmailEMAIL = User?.Mail,
                DatasetTitleTXT = DatasetTitle ?? string.Empty
            };
        }
        else
        {
            _approvalForm = new();
            dbForm.CopyPublicPropertiesTo(_approvalForm);
        }

        _isFrench = CultureInfo.CurrentCulture.Name.StartsWith("fr", StringComparison.InvariantCulture);

        _sectors = await DHOrganizationLevelsService.GetSectors();
        _branches = await DHOrganizationLevelsService.GetBranches();
        _divisions = await DHOrganizationLevelsService.GetDivisions();
        _sections = await DHOrganizationLevelsService.GetSections();

        _sectorId = GetChoiceId(_sectors, _approvalForm.SectorNAME);
        _branchId = GetChoiceId(_branches, _approvalForm.BranchNAME, _sectorId);
        _divisionId = GetChoiceId(_divisions, _approvalForm.DivisionNAME, _branchId);
        _sectionId = GetChoiceId(_sections, _approvalForm.SectionNAME, _sectionId);
    }

    private bool _validMandatoryCheckboxes = true;

    private bool ValidMandatoryReleaseCriteria()
    {
        return _approvalForm.CopyrightRestrictionsFLAG &&
               _approvalForm.AuthorityToReleaseFLAG &&
               _approvalForm.PrivatePersonalInformationFLAG &&
               _approvalForm.NotClasifiedOrProtectedFLAG &&
               _approvalForm.CanBeReleasedForFreeFLAG &&
               _approvalForm.MachineReadableFLAG &&
               _approvalForm.NonPropietaryFormatFLAG &&
               _approvalForm.LocalizedMetadataFLAG;
    }

    private int GetChoiceId(List<DHOrganizationLevel> choices, string value, int? parentId = null)
    {
        return choices.FirstOrDefault(c => (!parentId.HasValue || c.ParentId == parentId.Value) && (c.EnglishLabel.Equals(value) || c.FrenchLabel.Equals(value)))?.Id ?? -1;
    }

    private async Task HandleValidSubmit()
    {
        _validMandatoryCheckboxes = ValidMandatoryReleaseCriteria();
        if (_validMandatoryCheckboxes)
        {
            var dbForm = new Datahub.Metadata.Model.ApprovalForm();
            _approvalForm.CopyPublicPropertiesTo(dbForm);

            _approvalForm.ApprovalFormId = await MetadataBrokerService.SaveApprovalForm(dbForm);

            await OnSubmitForm.InvokeAsync(new(_approvalForm.ApprovalFormId, _approvalForm.SectorID, _approvalForm.BranchID));    
        }
    }

    private async Task<Data.Forms.ShareWorkflow.ApprovalForm> ClearForm()
    {
        _approvalForm = new Data.Forms.ShareWorkflow.ApprovalForm()
        {
            ApprovalFormId = _approvalForm.ApprovalFormId
        };
        return await Task.FromResult(_approvalForm);
    }

    private void OnConfigure(Forms.IModelFormContext context)
    {
        context.RegisterOptionValueProperty<Data.Forms.ShareWorkflow.ApprovalForm>(p => p.TypeOfDataTXT, () => new string[] { "Data", "Info" });

        context.RegisterOptionValueProperty<Data.Forms.ShareWorkflow.ApprovalForm>(p => p.SectorNAME, () => Sectors, s => 
        {
            var id = GetChoiceId(_sectors, s);
            if (_sectorId != id)
            {
                _sectorId = id;
                _approvalForm.SectorID = id;
                RefreshBranches(context);
            }
        });

        context.RegisterOptionValueProperty<Data.Forms.ShareWorkflow.ApprovalForm>(p => p.BranchNAME, () => Branches, b =>
        {
            var id = GetChoiceId(_branches, b, _sectorId);
            if (_branchId != id)
            {
                _branchId = id;
                _approvalForm.BranchID = id;
                RefreshDivisions(context);
            }
        });

        context.RegisterOptionValueProperty<Data.Forms.ShareWorkflow.ApprovalForm>(p => p.DivisionNAME, () => Divisions, d =>
        {
            var id = GetChoiceId(_divisions, d, _branchId);
            if (_divisionId != id)
            {
                _divisionId = id;
                RefreshSections(context);
            }
        });

        context.RegisterOptionValueProperty<Data.Forms.ShareWorkflow.ApprovalForm>(p => p.SectionNAME, () => Sections, s =>
        {
            _sectionId = GetChoiceId(_sections, s, _divisionId);
        });
    }

    private void RefreshBranches(Forms.IModelFormContext context)
    {
        _branchId = -1;
        _approvalForm.BranchNAME = string.Empty;
        context.RefreshOptions<Data.Forms.ShareWorkflow.ApprovalForm>(p => p.BranchNAME);
        RefreshDivisions(context);
    }

    private void RefreshDivisions(Forms.IModelFormContext context)
    {
        _divisionId = -1;
        _approvalForm.DivisionNAME = string.Empty;
        context.RefreshOptions<Data.Forms.ShareWorkflow.ApprovalForm>(p => p.DivisionNAME);
        RefreshSections(context);
    }

    private void RefreshSections(Forms.IModelFormContext context)
    {
        _sectionId = -1;
        _approvalForm.SectionNAME = string.Empty;
        context.RefreshOptions<Data.Forms.ShareWorkflow.ApprovalForm>(p => p.SectionNAME);
    }

    private string GetDataLabel(string propName)
    {
        return Localizer[MakeLabel(propName)];
    }

    static string MakeLabel(string label) => $"APPROVAL-FORM.{label}";
}