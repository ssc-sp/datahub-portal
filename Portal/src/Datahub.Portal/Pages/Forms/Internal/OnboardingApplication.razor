@page "/onboarding/applications"
@page "/onboarding/applications/{AppId}"
@inject PortalEmailService EmailService
@implements IDisposable
@inject ServiceAuthManager ServiceAuthManager
@inject IDbContextFactory<DatahubProjectDBContext> DbFactory
@inject IUserInformationService UserInformationService
@inject IJSRuntime JsInterop
@inject UIControlsService UI
@inject IDatahubAuditingService AuditingService
@inject NavigationManager NavigationManager
@inject OrganizationLevelsService DHOrganizationLevelsService

@using Datahub.Core.Model.Onboarding
@using System.Text
@using Datahub.Core.Model.Projects
@using Datahub.Core.Services.Notification;
@using Datahub.Portal.Services.Notification;

@if (_isLoaded)
{
    <Datahub.Core.Components.FormTemplate T="OnboardingApp"
                                      U="DatahubProjectDBContext"
                                      Context="Context"
                                      Metadata="@_formMetadata"
                                      HandleSubmit="HandleValidSubmit"
                                      OnChangeForms="OnChange"
                                      OnConfigureForms="OnConfigure"
                                      CreateNewRecord="CreateNewApplication"
                                      SelectedRecord="@_onboardingApplication"
                                      SetFormEditRecord="SetFormEdit"
                                      FormFilterBarOptions="@_filterBarOptions"
                                      FilterBarCheckChange="HandleFilterBarCheckChange" />

    @if (_isUserAdmin && _onboardingApplication != null)
    {
        <AeCard class="facardForms" CardPosition="AeCard.CardStyle.Horizontal">
            <AeTypography Variant="h2">@Localizer["Create Initiative"]</AeTypography>
            <AeTypography Variant="p"><b>@Localizer["Initiative Acronym"]</b></AeTypography>
            <AeInput class="formuserinput" @onchange="@SetProjectAcronym"></AeInput>
            <AeFlex id="buttonBar">
                <div class="icon-container" style="margin-top: 5px;">
                    <FAButton Text="@_addButton" Icon="far fa-plus-square" onclick="CreateNewProject" />
                    <SuccessIndicator @bind-IsLoading=@_submittingApproval @ref=@_submitApprovalInd />
                </div>
            </AeFlex>
        </AeCard>
    }

}

@code {

    [Parameter]
    [SupplyParameterFromQuery]
    public bool New { get; set; }
    [Parameter]
    public string AppId { get; set; }

    private FormMetadata<OnboardingApp> _formMetadata;
    private bool _onchange;
    private List<OnboardingApp> _onboardingApplications;
    private OnboardingApp _onboardingApplication;
    private DatahubProjectDBContext Context;
    private List<string> MarkDownContent = new();
    private Microsoft.Graph.Models.User _user;
    private List<Func<OnboardingApp, string>> AccessorFunctions = new List<Func<OnboardingApp, string>>();
    private bool _isLoaded;
    private string _addButton = "Create";

    private List<DHOrganizationLevel> _sectors = new();
    private List<DHOrganizationLevel> _branches = new();
    private List<DHOrganizationLevel> _divisions = new();

    private int _sectorId = -1;
    private int _branchId = -1;
    private int _divisionId = -1;

    private bool _isUserAdmin;
    private bool _isFrench;
    private string _newProjectAcronym;
    private SuccessIndicator _submitApprovalInd;
    private bool _submittingApproval = false;

    private List<string> Sectors => LocalizeChoices(_sectors);
    private List<string> Branches => LocalizeChoices(_branches.Where(b => b.ParentId == _sectorId));
    private List<string> Divisions => LocalizeChoices(_divisions.Where(d => d.ParentId == _branchId));

    private FilterBarOptions _filterBarOptions = new();


    private string Localize(string input) => input == null ? null : Localizer[input];

    protected override async Task OnInitializedAsync()
    {
        // load projects
        Context = DbFactory.CreateDbContext();
        _user = await UserInformationService.GetCurrentGraphUserAsync();
        _formMetadata = new();
        _isUserAdmin = await ServiceAuthManager.IsProjectAdmin(_user.Id, RoleConstants.DATAHUBADMINPROJECT);
        _isFrench = CultureInfo.CurrentCulture.Name.StartsWith("fr", StringComparison.InvariantCulture);

        _sectors = await DHOrganizationLevelsService.GetSectors();
        _branches = await DHOrganizationLevelsService.GetBranches();
        _divisions = await DHOrganizationLevelsService.GetDivisions();

        if (_isUserAdmin)
        {
            _filterBarOptions = new();
            _filterBarOptions.ShowCheckBox = true;
            _filterBarOptions.CheckBoxText = Localize("Hide Created Products");
            _filterBarOptions.IsChecked = true;
        }
        AccessorFunctions = new List<Func<OnboardingApp, string>>
        {
            p => { return Localizer[p.ClientSector]; },
            p => { return Localizer[p.ClientBranch ?? string.Empty]; },
            p => { return Localizer[p.ClientDivision ?? string.Empty]; },
            p => { return p.ClientContactName; },
            p => { return p.ProjectCreatedDate.ToString() ?? string.Empty; },
        };

        LoadApps();
        _formMetadata.Header = Localizer["DataHub Project Onboarding Form"];
        _formMetadata.TableRoles = RoleConstants.DATAHUBROLEADMIN;
        _formMetadata.DataSet = _onboardingApplications;
        _formMetadata.AccessorFunctions = AccessorFunctions;
        _formMetadata.Headers = headers;
        _formMetadata.GridTemplateColumns = "4fr 4fr 4fr 4fr 2fr";
        _formMetadata.IsSubmitEnabled = true;
        _formMetadata.MarkDownContent = new List<string>();
        _formMetadata.MarkDownContentFooter = new List<string>();

        if (New)
            CreateNewApplication();

        _isLoaded = true;
        StateHasChanged();
    }

    private void SetProjectAcronym(ChangeEventArgs args) => _newProjectAcronym = (string)args.Value;

    private void HandleFilterBarCheckChange(bool isChecked)
    {
        _filterBarOptions.IsChecked = isChecked;
        LoadApps();
    }

    private async Task CreateNewProject()
    {
        var exists = Context.Projects.Where(a => a.ProjectAcronymCD.ToLower() == _newProjectAcronym.ToLower()).Any();
        if (exists)
        {
            var textList = new List<string>()
            {
                Localizer[$"The program acronym already exists, enter a different one."]
            };
            await UI.ToggleModal(@<WarningModal OnDecision="HandleWarningDecision" WarningTextString=@textList />);
        }
        else
        {
            _submittingApproval = true;

            // pick the sector acronym
            var orgAcronym = Context.OrganizationLevels
                .Where(s => s.OrgNameE == _onboardingApplication.ClientSector || s.OrgNameF == _onboardingApplication.ClientSector)
                .Select(a => a.OrgAcronymE)
                .FirstOrDefault();

            var sector = Context.OrganizationLevels.Where(s => s.OrgNameE == _onboardingApplication.ClientSector || s.OrgNameF == _onboardingApplication.ClientSector).SingleOrDefault();
            var branch = Context.OrganizationLevels.Where(s => (s.OrgNameE == _onboardingApplication.ClientBranch || s.OrgNameF == _onboardingApplication.ClientBranch) && s.SuperiorOrgId == sector.OrganizationID).SingleOrDefault();
            var project = new DatahubProject();
            project.ProjectAcronymCD = _newProjectAcronym;
            project.Sector = sector;
            project.Branch = branch;
            if (branch != null)
                project.Division = Context.OrganizationLevels.Where(s => (s.OrgNameE == _onboardingApplication.ClientDivision || s.OrgNameF == _onboardingApplication.ClientDivision) && s.SuperiorOrgId == branch.OrganizationID).SingleOrDefault();
            project.SectorName = orgAcronym ?? _onboardingApplication.ClientSector;
            project.BranchName = _onboardingApplication.ClientBranch;
            project.DivisionName = _onboardingApplication.ClientDivision;
            project.ContactList = CreateContactList();
            project.ProjectGoal = _onboardingApplication.ProjectGoal;
            project.Project_Name = _onboardingApplication.ProductName;
            project.ProjectNameFr = _onboardingApplication.ProductName;
            project.ProjectSummaryDesc = _onboardingApplication.ProjectSummaryDescription;
            project.ProjectSummaryDescFr = _onboardingApplication.ProjectSummaryDescription;
            project.ProjectCategory = _onboardingApplication.ProjectEngagementCategory;
            project.OnboardingApplicationId = _onboardingApplication.ApplicationID;
            project.DataSensitivity = _onboardingApplication.DataSecurityLevel ?? "Unclassified";
            project.ProjectStatusDesc = string.Empty;
            project.ProjectStatus = 1;
            project.InitialMeetingDT = DateTime.Now;
            project.LastContactDT = DateTime.Now;

            Context.Projects.Add(project);

            _onboardingApplication.ProjectCreatedDate = DateTime.Now.Date;

            var result = await Context.TrackSaveChangesAsync(AuditingService);
            if (result < 1)
            {
                await _submitApprovalInd.SignalFailure();
            }
            else
            {
                await _submitApprovalInd.SignalSuccess();

                OnboardingParameters onboardingParameters = new()
                    {
                        AppUrl = $"/initiatives/validate/{_newProjectAcronym}",
                        App = _onboardingApplication,
                        AdminEmailAddresses = ServiceAuthManager.GetProjectMailboxEmails(RoleConstants.DATAHUBADMINPROJECT)
                    };

                await EmailService.SendOnboardingMetadataEditRequest(onboardingParameters);

                NavigationManager.NavigateTo("/onboarding/confirmation");
            }
        }
    }

    private string CreateContactList()
    {
        StringBuilder stringbuilder = new();
        stringbuilder.Append(_onboardingApplication.ClientContactName);
        stringbuilder.Append(" ");
        stringbuilder.Append($"<{_onboardingApplication.ClientEmail}>; ");

        if (!string.IsNullOrWhiteSpace(_onboardingApplication.AdditionalContactEmailEMAIL))
        {
            stringbuilder.Append(_onboardingApplication.AdditionalContactName ?? string.Empty);
            stringbuilder.Append(" ");
            stringbuilder.Append($"<{_onboardingApplication.AdditionalContactEmailEMAIL}>");
        }

        return stringbuilder.ToString();
    }


    private async void HandleWarningDecision(bool IsContinue)
    {
        await UI.ToggleModal();
        StateHasChanged();
    }

    private List<string> LocalizeChoices(IEnumerable<DHOrganizationLevel> levels)
    {
        return levels.Select(s => !_isFrench ? s.EnglishLabel : s.FrenchLabel)
                     .OrderBy(s => s)
                     .ToList();
    }

    private int GetChoiceId(List<DHOrganizationLevel> choices, string value, int? parentId = null)
    {
        return choices.FirstOrDefault(c => (!parentId.HasValue || c.ParentId == parentId.Value) && (c.EnglishLabel.Equals(value) || c.FrenchLabel.Equals(value)))?.Id ?? -1;
    }

    private List<string> headers => new List<string>
    {
        Localizer["Sector"], Localizer["Branch"], Localizer["Division"], Localizer["Contact"], Localizer["Created Date"]
    };

    private async Task HandleValidSubmit()
    {
        if (_onboardingApplication != null)
        {
            if (_onboardingApplication.ApplicationID == 0)
            {
                _onboardingApplication = Context.OnboardingApps.Add(_onboardingApplication).Entity;
            }
            _onboardingApplication.LastUpdatedDT = DateTime.Now;

            await Context.TrackSaveChangesAsync(AuditingService);

            OnboardingParameters onboardingParameters = new()
                {
                    AppUrl = $"/onboarding/applications/{_onboardingApplication.ApplicationID}",
                    App = _onboardingApplication,
                    AdminEmailAddresses = ServiceAuthManager.GetProjectMailboxEmails(RoleConstants.DATAHUBADMINPROJECT)
                };

            await EmailService.SendOnboardingConfirmations(onboardingParameters, _onboardingApplication.NotificationsSent);

            _onboardingApplication.NotificationsSent = true;
            await Context.TrackSaveChangesAsync(AuditingService);

            NavigationManager.NavigateTo("/onboarding/confirmation");
        }
    }

    private void LoadApps()
    {
        _onboardingApplications = Context.OnboardingApps.ToList();

        if (_filterBarOptions.IsChecked)
        {
            _onboardingApplications = _onboardingApplications.Where(d => d.ProjectCreatedDate == null).ToList();
        }

        _formMetadata.DataSet = _onboardingApplications;

        if (!string.IsNullOrEmpty(AppId))
        {
            _onboardingApplication = Context.OnboardingApps.Where(a => a.ApplicationID == Convert.ToInt32(AppId)).FirstOrDefault();
            if (_onboardingApplication != null && !_isUserAdmin)
            {
                _onboardingApplication = null;
            }
        }
    }

    private void OnConfigure(IModelFormContext context)
    {
        if (!_onchange)
        {
            context.RegisterOptionValueProperty<OnboardingApp>(p => p.ClientSector, () => Sectors, s =>
            {
                var id = GetChoiceId(_sectors, s);
                if (_sectorId != id)
                {
                    _sectorId = id;
                    RefreshBranches(context);
                }
            });

            context.RegisterOptionValueProperty<OnboardingApp>(p => p.ClientBranch, () => Branches, s =>
            {
                var id = GetChoiceId(_branches, s, _sectorId);
                if (_branchId != id)
                {
                    _branchId = id;
                    RefreshDivisions(context);
                }
            });

            context.RegisterOptionValueProperty<OnboardingApp>(p => p.ClientDivision, () => Divisions, s =>
            {
                _divisionId = GetChoiceId(_divisions, s, _branchId);
            });

            context.RegisterOptionValueProperty<OnboardingApp>(p => p.ProjectEngagementCategory, () => OnboardingConstants.CATEGORY);
            context.RegisterOptionValueProperty<OnboardingApp>(p => p.DataSecurityLevel, () => OnboardingConstants.SECURITYLEVEL);
        }

        ToggleVisibility(context);
    }

    private void RefreshBranches(IModelFormContext context)
    {
        _branchId = -1;
        _onboardingApplication.ClientBranch = string.Empty;
        context.RefreshOptions<OnboardingApp>(p => p.ClientBranch);
        RefreshDivisions(context);
    }

    private void RefreshDivisions(IModelFormContext context)
    {
        _divisionId = -1;
        _onboardingApplication.ClientDivision = string.Empty;
        context.RefreshOptions<OnboardingApp>(p => p.ClientDivision);
    }

    private void ToggleVisibility(IModelFormContext context)
    {
        context.SetVisible<OnboardingApp>(p => p.ProjectEngagementCategoryOther, _onboardingApplication.ProjectEngagementCategory == "Other");
        _onchange = false;
    }

    private void OnChange(ModelFormChangeArgs args)
    {
        _onchange = true;
        OnConfigure(args.Context);
    }

    private void CreateNewApplication()
    {
        _onboardingApplication = new OnboardingApp() { LastUpdatedDT = DateTime.Now };
        _onboardingApplication.ClientEmail = _user.Mail;
        _onboardingApplication.ClientContactName = _user.DisplayName;
        _formMetadata.IsSubmitEnabled = true;
        StateHasChanged();
    }

    private void SetFormEdit(OnboardingApp application)
    {
        _onboardingApplication = application;

        _sectorId = GetChoiceId(_sectors, _onboardingApplication.ClientSector);
        _branchId = GetChoiceId(_branches, _onboardingApplication.ClientBranch, _sectorId);
        _divisionId = GetChoiceId(_divisions, _onboardingApplication.ClientDivision, _branchId);

        StateHasChanged();
    }

    public void Dispose() { Context.Dispose(); }
}