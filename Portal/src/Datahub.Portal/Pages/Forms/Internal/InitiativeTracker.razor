@*InitiativeTracker.razor*@

@inject IStringLocalizer DataLocalizer
@inject IDbContextFactory<DatahubProjectDBContext> DbFactory
@inject ServiceAuthManager ServiceAuthManager
@inject IUserInformationService UserInformationService
@inject NavigationManager NavigationManager
@inject Elemental.Services.UIControlsService UIControlService
@inject IJSRuntime JsInterop
@inject TranslationService TranslationService
@inject IDatahubAuditingService AuditingService
@inject IOrganizationLevelsService OrganizationLevelsService
@inject PortalEmailService EmailService
@inject IDialogService DialogService
@using System.Security.Claims
@using Datahub.Core.Model.Onboarding
@using Datahub.Core.Model.Projects
@using Datahub.Core.Services.Notification;
@using Datahub.Portal.Components.Dialogs
@using Datahub.Portal.Services.Notification;
@using MudBlazor.Forms;
@page "/datahub/initiatives"

<Datahub.Core.Components.Form.MudFormTemplate T="DatahubProject"
                                              U="DatahubProjectDBContext"
                                              Metadata="@_formMetadata"
                                              HandleSubmit="HandleValidSubmit"
                                              OnConfigureForms="OnConfigure"
                                              OnChangeForms="OnChange"
                                              CreateNewRecord="CreateNewProject"
                                              SelectedRecord="@_project"
                                              SetFormEditRecord="SetFormEdit"
                                              HandleFilterChange="HandleFilterChange"
                                              SortAccessors="@_sortAccessors"
                                              Context=@Context />


@code {

    private FormMetadata<DatahubProject> _formMetadata = new();

    private List<DatahubProject> _projects;
    private Dictionary<string, List<DatahubProject>> _tabbedProjects;

    private DatahubProject _project;// = new Datahub_Project();
    private DatahubProjectDBContext Context;
    private string _searchFilter = string.Empty;
    private Dictionary<string, Func<DatahubProject, string>> _sortAccessors = new();
    private List<Core.Model.Datahub.OrganizationLevel> _sectors = new();
    private List<Core.Model.Datahub.OrganizationLevel> _branches = new();
    private List<Core.Model.Datahub.OrganizationLevel> _divisions = new();
    private List<string> _headers = new();
    private bool _isFrench;


    protected override void OnInitialized()
    {
        _isFrench = CultureInfo.CurrentCulture.Name.StartsWith("fr", StringComparison.InvariantCulture);


        // load projects
        Context = DbFactory.CreateDbContext();
        LoadSortExpressions();
        _headers = new List<string>
        {
            DataLocalizer["Status"],
            DataLocalizer["Sector"],
            DataLocalizer["Project"],
            DataLocalizer["Name"],
            DataLocalizer["Last Contact"],
            DataLocalizer["Contacts"],
            DataLocalizer["Last Comment Date"],
            DataLocalizer["Metadata"],
            DataLocalizer["Comments"],
        };

        LoadData(_searchFilter);

    }

    private void SetFormEdit(DatahubProject project)
    {
        _project = project;
        StateHasChanged();
    }

    private void LoadData(string searchfilter)
    {
        _projects = Context.Projects.Include(f => f.Sector).Include(f => f.Branch).Include(f => f.Division).Include(r => r.Comments).ToList();

        //SET Non-db Dropdowns
        _projects.ForEach(c => { if (c.ProjectStatus != null) { c.ProjectStatusValues = ProjectConstants.Project_Status.Where(p => p.Id == c.ProjectStatus.GetValueOrDefault()).SingleOrDefault(); } });


        var projects = _projects;
        if (!string.IsNullOrWhiteSpace(searchfilter))
        {
            projects = _projects.Where(project =>
            {
                if (string.IsNullOrWhiteSpace(searchfilter))
                    return true;
                if (!string.IsNullOrWhiteSpace(project.ProjectName) && project.ProjectName.Contains(searchfilter, StringComparison.OrdinalIgnoreCase))
                    return true;
                if (!string.IsNullOrWhiteSpace(project.ProjectAcronymCD) && project.ProjectAcronymCD.Contains(searchfilter, StringComparison.OrdinalIgnoreCase))
                    return true;
                if (!string.IsNullOrWhiteSpace(project.ContactList) && project.ContactList.Contains(searchfilter, StringComparison.OrdinalIgnoreCase))
                    return true;
                if (project.Sector is not null && project.Sector.OrgNameE.Contains(searchfilter, StringComparison.OrdinalIgnoreCase))
                    return true;
                if (project.Sector is not null && project.Sector.OrgNameF.Contains(searchfilter, StringComparison.OrdinalIgnoreCase))
                    return true;
                return false;
            }).ToList();
        }

        _tabbedProjects = new();
        _tabbedProjects.Add("All", projects);
        _tabbedProjects.Add("In Progress", projects.Where(p => p.GetProjectStatus() == "In Progress").ToList());
        _tabbedProjects.Add("Support", projects.Where(p => p.GetProjectStatus() == "Support").ToList());
        _tabbedProjects.Add("On Hold", projects.Where(p => p.GetProjectStatus() == "On Hold").ToList());
        _tabbedProjects.Add("Closed", projects.Where(p => p.GetProjectStatus() == "Closed").ToList());

        _formMetadata.Header = DataLocalizer["Initiatives"];
        _formMetadata.HeaderSubText = DataLocalizer[@""];
        _formMetadata.SubHeader = DataLocalizer[""];
        _formMetadata.DataSet = new();
        _formMetadata.TabbedDataSets = _tabbedProjects;
        _formMetadata.AccessorFunctions = accessorFunctions;
        _formMetadata.RenderFunctions = renderFunctions;
        _formMetadata.Headers = _headers; ;
        _formMetadata.AllowSearch = true;
        _formMetadata.IsSubmitEnabled = true;
        _formMetadata.IsAddEnabled = true;
        _formMetadata.FormButtons = GetFormButtons();
    }


    private void LoadSortExpressions()
    {
        _sortAccessors.Add("status", t => t.GetProjectStatus());
        _sortAccessors.Add("sector", t => t.Sector?.FullAcronymE ?? "");
        _sortAccessors.Add("initiative", t => t.ProjectAcronymCD);
        _sortAccessors.Add("name", t => t.ProjectName);
        _sortAccessors.Add("lastcontact", t => t?.LastContactDT?.ToShortDateString());
    }



    private List<Func<DatahubProject, string>> accessorFunctions = new List<Func<DatahubProject, string>>
    {
        new Func<DatahubProject, string>(p => { return p.GetProjectStatus() ?? "N/A"; }),
        new Func<DatahubProject, string>(p => { return p.Sector?.FullAcronymE ?? "N/A"; }),
        new Func<DatahubProject, string>(p => { return p.ProjectAcronymCD ?? "N/A"; }),
        new Func<DatahubProject, string>(p => { return p.ProjectName ?? "N/A"; }),
        new Func<DatahubProject, string>(p => { return p?.LastContactDT?.ToShortDateString(); }),
        new Func<DatahubProject, string>(p => { return ShortenContactList(p?.ContactList); }),
        new Func<DatahubProject, string>(p => { return p.Comments.OrderByDescending(d => d.CommentDateDT).FirstOrDefault()?.CommentDateDT.ToShortDateString() ?? string.Empty; }),
        null,
        null
    };

    private List<Func<DatahubProject, RenderFragment>> renderFunctions => new()
    {
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        GetMetadataFragment,
        GetCommentIcon
    };

    private List<RenderFragment> GetFormButtons()
    {
        var buttons = new List<RenderFragment>();
        buttons.Add(@<MudButton style="margin-right: 0.2rem" Variant="Variant.Filled" Color="Color.Primary" @onclick=@SuggestTranslation Disabled=@DisabledSuggestTranslation>@DataLocalizer["Suggest French Translation"]</MudButton>);
        return buttons;
    }




    private RenderFragment GetCommentIcon(DatahubProject p)
    {
        return @<MudIconButton @onclick="() => OpenComments(p)" Icon="@Icons.Material.Filled.InsertComment" Color="Color.Default" />;
    }
    private RenderFragment GetMetadataFragment(DatahubProject p)
    {
        if (p != null && !p.MetadataAdded.HasValue)
            return@<a @onclick="() => RequestEnterMetadata(p)" style="cursor: pointer;">@DataLocalizer["Request"]</a>;
        return @<span>&nbsp;</span>;
    }

    private async Task OpenComments(DatahubProject p)
    {
        var parameters = new DialogParameters();
        parameters.Add("Project", p);
        parameters.Add("Context", Context);
        DialogOptions fullScreen = new DialogOptions() { FullScreen = true, CloseButton = true };
        var dialog = DialogService.Show<TrackerComments>("Confirm", parameters, fullScreen);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            LoadData(_searchFilter);
        }
    }

    private bool DisabledSuggestTranslation => string.IsNullOrEmpty(_project?.Project_Name) || string.IsNullOrEmpty(_project?.ProjectSummaryDesc);

    public async Task SuggestTranslation()
    {
        if (!string.IsNullOrEmpty(_project.Project_Name))
        {
            _project.ProjectNameFr = await TranslationService.GetFrenchTranslation(_project.Project_Name);
        }
        if (!string.IsNullOrEmpty(_project.ProjectSummaryDesc))
        {
            _project.ProjectSummaryDescFr = await TranslationService.GetFrenchTranslation(_project.ProjectSummaryDesc);
        }
    }

    private async Task RequestEnterMetadata(DatahubProject p)
    {
        var ctx = await DbFactory.CreateDbContextAsync();

        var appForm = await ctx.OnboardingApps.FirstOrDefaultAsync(e => e.ApplicationID == p.OnboardingApplicationId);
        appForm ??= GetOnboardingApplicationFromProject(p);

        if (appForm is not null)
        {
            OnboardingParameters onboardingParameters = new()
                {
                    AppUrl = $"/w/{p.ProjectAcronymCD}/metadata",
                    App = appForm,
                    AdminEmailAddresses = ServiceAuthManager.GetProjectMailboxEmails(RoleConstants.DATAHUBADMINPROJECT)
                };

            await EmailService.SendOnboardingMetadataEditRequest(onboardingParameters);

            p.MetadataAdded = false;
            await InvokeAsync(StateHasChanged);
        }
    }

    private OnboardingApp GetOnboardingApplicationFromProject(DatahubProject p)
    {
        // cannot contact the admin
        if (string.IsNullOrEmpty(p.ProjectAdmin))
            return null;

        // return a temp app form
        return new()
            {
                ProductName = p.ProjectName,
                ClientEmail = p.ProjectAdmin,
                ClientContactName = "{p.Project_Acronym_CD} Admin"
            };
    }

    private async Task HandleValidSubmit()
    {

        if (_project != null)
        {
            if (_project.ProjectID == 0)
            {
                _project = Context.Projects.Add(_project).Entity;
            }
            _project.LastUpdatedDT = DateTime.Now;
            _project.ProjectStatus = _project.ProjectStatusValues?.Id ?? null;
            await Context.SaveChangesAsync();
            LoadData(_searchFilter);
            _project = null;
        }

        StateHasChanged();
    }

    private void OnConfigure(MudBlazor.Forms.IModelFormContext context)
    {

        //context.RegisterOptionValueProperty<FundCenter, FiscalYear>(l => l.FiscalYear, p => p?.Year ?? "N/A", () => _fiscalYears);
        //ntext.RegisterOptionValueProperty<FundCenter, HierarchyLevel>(l => l.Sector, p => p?.FundCenterNameEnglish ?? "N/A", () => GetSectors(), s => RefreshBranches(s, context));
        context.RegisterOptionValueProperty<DatahubProject, Core.Model.Datahub.OrganizationLevel>(l => l.Sector, p => p?.OrgNameE ?? "N/A", () => GetSectors(), s => RefreshBranches(s, context));
        context.RegisterOptionValueProperty<DatahubProject, Core.Model.Datahub.OrganizationLevel>(l => l.Branch, p => p?.OrgNameE ?? "N/A", () => GetBranches(), s => RefreshDivisions(s, context));
        context.RegisterOptionValueProperty<DatahubProject, Core.Model.Datahub.OrganizationLevel>(l => l.Division, p => p?.OrgNameE ?? "N/A", () => GetDivisions());
        context.RegisterOptionValueProperty<DatahubProject, DropDownContainer>(l => l.ProjectStatusValues, p => p?.EnglishText ?? "-", () => ProjectConstants.Project_Status);
        //context.RegisterFieldNotes<FundCenter>(f => f.AttritionRate, @"Identify the attrition % for your division. This % will be applied to all forecasted salaries on the SFT Forecast page. Attrition represents an estimated percentage of salary costs currently forecasted that will likely not materialize due to unplanned vacancies (the gap between unplanned departure and replacement of an employee).");
    }

    private void CreateNewProject()
    {
        //var defaultBranch = _sectorLookup.Where(s => s.SectorId == 1).First().Branches.Where(b => b.BranchId == 1).First();
        _project = new DatahubProject() { LastUpdatedDT = DateTime.Now };
        RefreshBranches(null, null);
        RefreshDivisions(null, null);
        StateHasChanged();
    }

    private List<Core.Model.Datahub.OrganizationLevel> GetSectors()
    {
        if (!_sectors.Any())
            _sectors = Context.OrganizationLevels.Where(l => l.OrgLevel == "3").ToList();
        return _sectors;
    }

    private List<Core.Model.Datahub.OrganizationLevel> GetBranches()
    {
        RefreshBranches(_project.Sector, null);
        return _branches;
    }

    private List<Core.Model.Datahub.OrganizationLevel> GetDivisions()
    {
        RefreshDivisions(_project.Branch, null);
        return _divisions;
    }


    private void RefreshDivisions(Core.Model.Datahub.OrganizationLevel branch, MudBlazor.Forms.IModelFormContext context)
    {
        if (branch is not null)
        {
            _divisions.Clear();
            _divisions = Context.OrganizationLevels.Where(b => b.SuperiorOrgId == branch.OrganizationID).ToList();
            //_divisions.Insert(0, null);
        }
        else
        {
            _divisions = new();
        }

        if (context is not null)
        {
            context.RefreshOptions<DatahubProject>(f => f.Division);
        }
    }

    private void RefreshBranches(Core.Model.Datahub.OrganizationLevel sector, MudBlazor.Forms.IModelFormContext context)
    {
        if (sector is not null)
        {
            _branches.Clear();
            _branches = Context.OrganizationLevels.Where(b => b.SuperiorOrgId == sector.OrganizationID).ToList();
            //_branches.Insert(0, null);
        }
        else
        {
            _branches = new();
        }

        if (context is not null)
        {
            context.RefreshOptions<DatahubProject>(f => f.Branch);
        }
    }

    private void OnChange(MudBlazor.Forms.ModelFormChangeArgs args)
    {
        OnConfigure(args.Context);
    }

    private async void HandleFilterChange(string selection)
    {
        _searchFilter = selection;
        LoadData(_searchFilter);
        await InvokeAsync(StateHasChanged);
    }

    public void Dispose()
    {
        Context.Dispose();
    }

    private static string ShortenEntry(string entry)
    {
        var leqPos = entry.IndexOf('<');
        if (leqPos == -1) return entry;
        return entry.Substring(0, leqPos - 1).Trim();
    }

    public static string ShortenContactList(string contacts)
    {
        if (contacts is null) return null;
        var list = contacts.Split(";", StringSplitOptions.RemoveEmptyEntries);
        return string.Join(", ", list.Select(el => ShortenEntry(el)).ToList());
    }

}