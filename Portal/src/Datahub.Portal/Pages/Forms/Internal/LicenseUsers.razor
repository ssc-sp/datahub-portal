@implements IDisposable
@inject IDbContextFactory<DatahubProjectDBContext> DbFactory

@page "/licenseusers/{RequestIDParam}"

<AeFlex Vertical id="indexFlex">
<AeTable Accessors="accessorFunctions"
       Dataset="_userRequests"
       Renderers="GetRenderers()"
       Headers="headers" />
</AeFlex>
@if(_userRequest.ID > 0)
{
    <h3>Editing user @_userRequest.ID</h3>
}
else
{
    <h3>Add new user</h3>
}

<EditForm Model="_userRequest" OnValidSubmit="@HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <p>
        <label>
            User Email:
        </label>
            <InputText @bind-Value="_userRequest.UserEmail" />

    </p>
    <p>
        <label>
            License Type:
        </label>
            <InputSelect @bind-Value="_userRequest.LicenseType">
                <option value="">Select license type ...</option>
                <option value="FreeUser">Free</option>
                <option value="ProUser">Pro</option>
            </InputSelect>
    </p>

    <button type="submit">@SubmitLabel</button>

</EditForm>


@code {
    [Parameter]
    public string RequestIDParam {get;set;}
    private int RequestID;
    private PBIUserLicenseRequest _userRequest;
    private List<PBIUserLicenseRequest> _userRequests = new List<PBIUserLicenseRequest>();
    private string SubmitLabel = "Add new";
    private DatahubProjectDBContext Context;

    // Define the headers at the top of the table
    private List<string> headers = new List<string>
    {
        "Email", "License Type", "Actions"
    };

    // Typeparam class to hold row data, can be anything


    // Accessor functions to retrieve cell value
    private List<Func<PBIUserLicenseRequest, string>> accessorFunctions = new List<Func<PBIUserLicenseRequest, string>>
    {
        new Func<PBIUserLicenseRequest, string>(p => { return p.UserEmail; }),
        new Func<PBIUserLicenseRequest, string>(p => { return p.LicenseType.ToString(); }),
        new Func<PBIUserLicenseRequest, string>(p => { return p.ID.ToString(); })
    };

    private async Task Delete(PBIUserLicenseRequest project)
    {
        Context.PowerBILicenseUserRequests.Remove(project);
        await Context.SaveChangesAsync();
        _userRequests = Context.PowerBILicenseUserRequests.ToList();
    }

    private void SetFormEdit(PBIUserLicenseRequest project)
    {
        _userRequest = project;
        SubmitLabel = "Save Changes";
    }

    private List<Func<PBIUserLicenseRequest, RenderFragment>> GetRenderers()
    {
        return new List<Func<PBIUserLicenseRequest, RenderFragment>>
        {
            null, null, null, 
            new Func<PBIUserLicenseRequest, RenderFragment>(q =>
            {
                return 
                @<div class="icon-container">
                    <i class="fad fa-edit" @onclick="() => SetFormEdit(q)"></i>
                    <i class="fad fa-trash-alt" @onclick="async () => await Delete(q)"></i>
                </div>;
            })
        };
    }

    protected override void OnInitialized()
    {
        // load projects        
        Context = DbFactory.CreateDbContext();
        RequestID= Int32.Parse(RequestIDParam);
        _userRequests = Context.PowerBILicenseUserRequests.ToList();
        _userRequest = new PBIUserLicenseRequest() { ID = 0, RequestID = RequestID } ;
    }

     private async Task HandleValidSubmit()
    {
        if(_userRequest.ID == 0)
        {
            Context.PowerBILicenseUserRequests.Add(_userRequest);
        }
        await Context.SaveChangesAsync();
        _userRequest = new PBIUserLicenseRequest() { ID = 0, RequestID = RequestID } ;
        _userRequests = Context.PowerBILicenseUserRequests.ToList();
        SubmitLabel = "Add New";
    }

    public void Dispose() { Context.Dispose(); }
}
