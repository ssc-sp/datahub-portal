@using Datahub.Core.Model.Projects
@implements IDisposable
@inject IDbContextFactory<DatahubProjectDBContext> DbFactory
@inject NavigationManager NavigationManager
@page "/licenses/{ProjectIDParam}"



<AeFlex Vertical id="indexFlex">

<h1>Power BI License Request Form for @_project.ProjectName (@_project.ProjectAcronymCD)</h1>

<p>
Power BI is a part of Microsoft office 365 suite. It is mainly used for creating dashboards and reports, and provides platform to collaborate with team members. 
</p>

<p>
There are three ways to access Power BI
<ol>
  <li>Power BI services (Web portal)</li>
  <li>Power BI desktop (free; available on NRCan Portal manager, see Appendix I for instructions)</li>
  <li>Power BI mobile app</li>
</ol>
</p>

<p>
NOTE: if you have PROTECTED B security level for your data, please contact CIOSB DataHub mailbox
</p>
</AeFlex>
@if(_request.RequestID > 0)
{
    <h2>Editing request @_request.RequestID</h2>
}
else
{
    <h2>Create new request</h2>
}

<EditForm Model="@_request" OnValidSubmit="@HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <p>
        <label>
            Power BI desktop will be used to develop models**** and reports
            <InputCheckbox @bind-Value="_request.DesktopUsageFlag" />
        </label>

    </p>
    <p>
        <label>
            Contact Email:
            <InputText @bind-Value="_request.ContactEmail" />
        </label>
    </p>
    <p>
        <label>
            Contact Name:
            <InputText @bind-Value="_request.ContactName" />
        </label>
    </p>

    <button type="submit">Save and Edit Users</button>

</EditForm>

@code {
    [Parameter]
    public string ProjectIDParam { get; set; }

    public int ProjectID { get; set; }

    private DatahubProject _project;

    private PBILicenseRequest _request;
    private const string EMAIL = "offline@nrcan-cnrcan.gc.ca";
    private DatahubProjectDBContext Context;
 
    private void SetFormEdit(PBILicenseRequest project)
    {
        _request = project;
    }

    protected override void OnInitialized()
    {
        Context = DbFactory.CreateDbContext();
        ProjectID = Convert.ToInt32(ProjectIDParam);
        // load projects        
        _project = Context.Projects.Find(ProjectID);
        _request = Context.PowerBILicenseRequests.SingleOrDefault(r => r.Project == _project);
        if(_request == null)
		{
            _request = new PBILicenseRequest() { RequestID = 0, UserID = EMAIL, Project = _project } ;
        }
    }

     private async Task HandleValidSubmit()
    {
        if(_request.RequestID == 0)
        {
            _request.UserID = EMAIL;
            Context.PowerBILicenseRequests.Add(_request);
        }
        await Context.SaveChangesAsync();
        NavigationManager.NavigateTo("LicenseUsers/" + _request.RequestID);
    }

    public void Dispose() { Context.Dispose(); }

}
