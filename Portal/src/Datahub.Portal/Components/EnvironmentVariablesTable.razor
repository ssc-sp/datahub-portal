@using Datahub.Core.Model.Projects
@using Datahub.Portal.Pages.Workspace.Database
@using Datahub.Core.Model.Achievements
@using Datahub.Infrastructure.Services.Security
@using Datahub.Application.Services.Security
@using Datahub.Application.Services.UserManagement
@using Microsoft.Identity.Web

@inject IKeyVaultUserService keyVaultUserService
@inject IDbContextFactory<DatahubProjectDBContext> _dbContextFactory
@inject ILogger<EnvironmentVariablesTable> _logger
@inject ISnackbar _snackbar
@inject IJSRuntime _jsRuntime
@inject IUserInformationService _userInformationService
@inject MicrosoftIdentityConsentAndConditionalAccessHandler _consentHandler

@if (((projectUser?.Role?.IsAtLeastAdmin ?? false) && loading) || projectUser is null)
{
    <MudProgressCircular Color="Color.Default" Indeterminate="true"/>
}
else if (envError)
{
    <MudText>@Localizer["Error accessing the environment variables"]</MudText>
}
else if (!projectUser.Role.IsAtLeastAdmin)
{
    <MudText>@Localizer["Environment variables are only visible to project administrators"]</MudText>
}
else if (isEditable)
{
    <MudTable @ref="editTable"
              Items="@envVars"
              Dense="true"
              Hover="true"
              Outlined="true"
              Class="mt-6"
              CanCancelEdit="true"
              Filter="@(new Func<KeyValuePair, bool>(FilterFunc))"
              @bind-SelectedItem="@_selectedItem"
              SortLabel="@Localizer["Sort by"]"
              CommitEditTooltip="@Localizer["Commit edit"]"
              CancelEditTooltip="@Localizer["Cancel edit"]"
              IsEditRowSwitchingBlocked="true"
              EditTrigger="TableEditTrigger.EditButton"
              EditButtonPosition="TableEditButtonPosition.Start"
              OnCommitEditClick="@HandleCommitEditClicked"
              ApplyButtonPosition="TableApplyButtonPosition.Start"
              RowEditPreview="@BackupItem"
              RowEditCancel="@HandleRowEditCancel"
              RowEditCommit="@HandleRowEditCommit"
              FooterClass="pa-8">

        <ToolBarContent>
            <MudText Typo="Typo.h2" Class="mt-4">
                @Localizer["Environment variables"]
            </MudText>

            <MudToggleIconButton @bind-Toggled="@_show" Icon="@SidebarIcons.Show" ToggledIcon="@SidebarIcons.Hide" Class="align-self-end" Title="@Localizer["Show environment variable values"]" ToggledTitle="@Localizer["Hide environment variable values"]"/>
            <MudSpacer/>
            <MudTextField @bind-Value="@_filterString"
                          Label="@Localizer["Filter"]"
                          Adornment="Adornment.End"
                          AdornmentIcon="@SidebarIcons.Search"
                          IconSize="Size.Small"
                          Class="mt-0"/>
        </ToolBarContent>


        <ColGroup>
            <col/>
            <col/>
        </ColGroup>

        <HeaderContent>
            <MudTh>
                <MudTableSortLabel SortBy="@(new Func<KeyValuePair, string>(x => x.Key))">@Localizer["Key"]</MudTableSortLabel>
            </MudTh>
            <MudTh>
                <MudTableSortLabel SortBy="@(new Func<KeyValuePair, string>(x => x.Value))">@Localizer["Value"]</MudTableSortLabel>
            </MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="@Localizer["Key"]">@context.Key</MudTd>
            @if (!string.IsNullOrEmpty(context.Value))
            {
                <MudTd DataLabel="@Localizer["Value"]">
                    <code>@(_show ? context.Value : GetHiddenValue(context.Value))</code>
                </MudTd>
            }
            else
            {
                <MudTd DataLabel="@Localizer["Value"]">
                    <MudAlert Dense Variant="Variant.Outlined" Severity="Severity.Error" Style="color: #000">@Localizer["Could not find value"]</MudAlert>
                </MudTd>
            }
        </RowTemplate>
        <RowEditingTemplate>
            <MudTd DataLabel="@Localizer["Key"]">
                @context.Key
            </MudTd>
            <MudTd DataLabel="@Localizer["Value"]">
                <MudTextField @bind-Value="@context.Value" Required/>
            </MudTd>
        </RowEditingTemplate>
        <EditButtonContent Context="button">
            <MudIconButton Size="@Size.Small" Icon="@SidebarIcons.Edit" Class="pa-0" OnClick="@button.ButtonAction" Disabled="@button.ButtonDisabled"/>
        </EditButtonContent>
        <FooterContent>
            <MudTd >
                <DHButton Variant="Variant.Filled" OnClick="@AddNewEnvironmentVariable" StartIcon="@SidebarIcons.Plus">
                    @Localizer["Add environment variable"]
                </DHButton>
            </MudTd>
            @if (needsRestart)
            {
                <MudTd>
                    <MudAlert Variant="Variant.Outlined" Severity="Severity.Warning" Style="color: #000000">@Localizer["You must restart your web application to apply the latest changes."]</MudAlert>
                </MudTd>
            }
        </FooterContent>
    </MudTable>
    <MudText Align="Align.Start" Class="mb-6">
        <MudMarkdown Value="@Localizer["_Environment variables are stored in [Azure Keyvault](https://azure.microsoft.com/en-us/products/key-vault). Use a [client SDK](https://learn.microsoft.com/en-us/azure/key-vault/general/developers-guide) of your choice to fetch environment variables from your web application's runtime. Subject to change._"]"></MudMarkdown>
    </MudText>
}
else
{
    <MudTable Items="@envVars"
              Dense="false"
              Hover="false"
              Outlined="true"
              Class="mt-6 mb-12"
              Filter="@(new Func<KeyValuePair, bool>(FilterFunc))"
              SortLabel="@Localizer["Sort by"]">

        <ToolBarContent>
            <MudText Typo="Typo.h2" Class="mt-6">
                @Localizer["Environment variables"]
            </MudText>
            <MudSpacer/>
            <MudTextField @bind-Value="@_filterString"
                          Label="@Localizer["Filter"]"
                          Adornment="Adornment.End"
                          AdornmentIcon="@SidebarIcons.Search"
                          IconSize="Size.Small"
                          Class="mt-0"/>
            <MudSpacer/>
            <MudToggleIconButton @bind-Toggled="@_show" Icon="@SidebarIcons.Show" ToggledIcon="@SidebarIcons.Hide" Title="@Localizer["Show environment variable values"]" ToggledTitle="@Localizer["Hide environment variable values"]"/>
        </ToolBarContent>

        <HeaderContent>
            <MudTh>
                <MudTableSortLabel SortBy="@(new Func<(string Key, string Value), string>(x => x.Key))">@Localizer["Key"]</MudTableSortLabel>
            </MudTh>
            <MudTh>
                <MudTableSortLabel SortBy="@(new Func<(string Key, string Value), string>(x => x.Value))">@Localizer["Value"]</MudTableSortLabel>
            </MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="@Localizer["Key"]">
                @context.Key
            </MudTd>
            <MudTd DataLabel="@Localizer["Value"]">
                <code>@(_show ? context.Value : GetHiddenValue(context.Value))</code>
            </MudTd>
        </RowTemplate>
    </MudTable>
}

@code {
    [Parameter] public Project_Resources2 resource { get; set; }
    [Parameter] public string projectAcronym { get; set; }
    [Parameter] public bool isEditable { get; set; }

    private string _filterString = default;
    private KeyValuePair _selectedItem = default;
    private string _editKey = default;
    private string _editValue = default;
    private KeyValuePair _elementBeforeEdit = default;
    public List<KeyValuePair> envVars = null;
    private MudTable<KeyValuePair>? editTable;
    private bool _show = false;
    private bool envError = false;
    private bool loading = true;
    public bool needsRestart = false;
    private Datahub_Project_User? projectUser;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var ctx = await _dbContextFactory.CreateDbContextAsync();
            var currentUser = await _userInformationService.GetCurrentPortalUserAsync();
            projectUser = ctx.Project_Users.Include(datahubProjectUser => datahubProjectUser.Role)
                .FirstOrDefault(u => u.PortalUser.Id == currentUser.Id);
            var role = projectUser.Role;
            envVars = await GetEnvironmentVariables();
            loading = false;
            StateHasChanged();
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Failed to get environment variables");
            envError = true;
        }
    }

}