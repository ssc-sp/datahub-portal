@using MudBlazor.Utilities
@using Microsoft.Graph.Models
@using Datahub.Core.Model.Datahub
@using Datahub.Application.Configuration
@using Datahub.Application.Services.UserManagement
@using Datahub.Core.Model.Projects
@using Datahub.Portal.Pages.Project
@using Datahub.Portal.Pages.Explore

@inject IUserInformationService _userInformationService
@inject IConfiguration _configuration
@inject IDbContextFactory<DatahubProjectDBContext> _dbContextFactory
@inject IDialogService DialogService
@inject NavigationManager NavigationManager
@inject DatahubPortalConfiguration _datahubPortalConfiguration

@if (_userRoles is null)
{
    <DHLoadingInitializer/>
    return;
}

<MudStack>
    @if (ShowTitle)
    {
        <MudText Typo="Typo.h1" Class="mb-4">@Localizer["My Workspaces"]</MudText>
    }
    <MudGrid>
        @foreach (var project in _userRoles.Select(userRole => userRole.Project))
        {
            <MudItem xs="6" sm="@SmSize">
                <ProjectPreviewCard Project="@project"/>
            </MudItem>
        }
        @if (_isCurrentUser)
        {
            <DatahubAuthView AuthLevel="DatahubAuthView.AuthLevels.DatahubAdmin">
                <Authorized>
                    <MudItem xs="6" sm="@SmSize">
                        <ProjectPreviewCard OnCreateWorkspace="ShowProjectDialog" NumberOfRemainingWorkspaces="999"/>
                    </MudItem>

                </Authorized>
                <NotAuthorized>
                    @if (_numberOfRemainingWorkspaces > 0)
                    {
                        <MudItem xs="6" sm="@SmSize">
                            <ProjectPreviewCard OnCreateWorkspace="ShowProjectDialog" NumberOfRemainingWorkspaces="@_numberOfRemainingWorkspaces"/>
                        </MudItem>
                    }
                </NotAuthorized>
            </DatahubAuthView>
        }
    </MudGrid>
</MudStack>

@code {

    [Parameter] public bool ShowTitle { get; set; } = true;

    [Parameter] public int SmSize { get; set; } = 4;

    [Parameter] public string UserId { get; set; }

    private bool _isCurrentUser;

    private const int MaxWorkspaceCount = 3;

    private List<Datahub_Project_User> _userRoles;
    private int _numberOfRemainingWorkspaces;

    private string _chipStyle = new StyleBuilder()
        .AddStyle("margin-left", "0")
        .AddStyle("margin-bottom", "0")
        .Build();

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();

        var portalUser = await _userInformationService.GetCurrentPortalUserAsync();
        var userId = UserId ?? portalUser.GraphGuid;
        _isCurrentUser = userId == portalUser.GraphGuid;

        await using var dbContext = await _dbContextFactory.CreateDbContextAsync();
        _userRoles = await dbContext.Project_Users
            .Include(u => u.Role)
            .Include(u => u.Project)
            .ThenInclude(p => p.Users)
            .Include(u => u.PortalUser)
            .Where(u => u.PortalUser.GraphGuid == userId)
            .ToListAsync();

        _numberOfRemainingWorkspaces = MaxWorkspaceCount - _userRoles.Count(u => u.RoleId == (int)Project_Role.RoleNames.WorkspaceLead);
    }

    private async Task ShowProjectDialog()
    {
        var options = new DialogOptions { CloseOnEscapeKey = true };
        var dialog = await DialogService.ShowAsync<CreateProjectDialog>(Localizer["Create a new Workspace"], options);
        var dialogResult = await dialog.Result;
        if (!dialogResult.Canceled)
        {
            NavigationManager.NavigateTo($"{_datahubPortalConfiguration.ProjectUrlSegment}/{dialogResult.Data}", true);
        }
    }

}