@using MudBlazor.Utilities
@using Microsoft.Graph
@using Datahub.Core.Model.Datahub
@using Datahub.Application.Configuration
@inject IUserInformationService _userInformationService
@inject IConfiguration _configuration
@inject IDbContextFactory<DatahubProjectDBContext> _dbContextFactory
@inject IDialogService DialogService
@inject NavigationManager NavigationManager
@inject DatahubPortalConfiguration _datahubPortalConfiguration

@if (_userRoles is null)
{
    <MudStack>
        @if (ShowTitle)
        {
            <MudText Typo="Typo.h3">@Localizer["Workspaces"]</MudText>
        }
        <MudGrid>
            <MudItem xs="6">
                <MudCard Outlined Class="pa-2">
                    <MudCardContent>
                        <Skeleton Width="120px" Height="32px"/>
                        <Skeleton Width="250px" Height="42px"/>
                    </MudCardContent>
                    <MudCardActions>
                        <Skeleton style="margin-left: 8px" Width="200px" Height="48px"/>
                    </MudCardActions>
                </MudCard>
            </MudItem>
        </MudGrid>
    </MudStack>

    return;
}

<MudStack>
    @if (ShowTitle)
    {
        <MudText Typo="Typo.h1">@Localizer["Workspaces"]</MudText>
    }
    <MudGrid>
        @foreach (var userRole in _userRoles)
        {
            var project = userRole.Project;
            <MudItem xs="6" md="4">
                <MudCard Outlined Class="pa-2">
                    <MudCardContent>
                        <MudChip Style="@_chipStyle" Label Size="Size.Small" Color="@RoleColor(userRole)">@Localizer[RoleLabel(userRole)]</MudChip>
                        <MudText>@project.Project_Name</MudText>
                    </MudCardContent>
                    <MudCardActions>
                        <MudButton EndIcon="@UserWorkspaceOpenIcon" Variant="Variant.Text" Color="Color.Primary"
                                   Href="@($"/{_datahubPortalConfiguration.ProjectUrlSegment}/{project.Project_Acronym_CD}")">
                            @Localizer["Open Workspace"]
                        </MudButton>
                    </MudCardActions>
                </MudCard>
            </MudItem>
        }
        <DHAdminActions>            
            <MudItem xs="6" md="4">
                <MudCard Outlined Class="pa-2">
                    <MudCardContent>
                        <MudChip Style="@_chipStyle" Label Size="Size.Small" Color="Color.Default">@Localizer["Create"]</MudChip>
                        <MudText>@Localizer["Create Workspace"]</MudText>
                    </MudCardContent>
                    <MudCardActions>
                        <MudButton EndIcon="@UserWorkspaceCreateIcon" Variant="Variant.Text" Color="Color.Primary" OnClick="ShowProjectDialog">
                            @Localizer["Create Workspace"]
                        </MudButton>
                    </MudCardActions>
                </MudCard>
            </MudItem>
        </DHAdminActions>
    </MudGrid>
</MudStack>

@code {

    [Parameter]
    public bool ShowTitle { get; set; } = true;

    private const string UserWorkspaceOpenIcon = Icons.Material.Filled.KeyboardDoubleArrowRight;
    private const string UserWorkspaceCreateIcon = "fa-duotone fa-layer-plus";
    private User _user;
    private List<Datahub_Project_User> _userRoles;
    private string _chipStyle;
    private const string WORKSPACE_CREATION_DIALOG_TITLE = "Create a Workspace";

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        _chipStyle = new StyleBuilder()
            .AddStyle("margin-left", "0")
            .AddStyle("margin-bottom", "0")
            .Build();

        _user = await _userInformationService.GetCurrentGraphUserAsync();

        await using var dbContext = await _dbContextFactory.CreateDbContextAsync();
        _userRoles = await dbContext.Project_Users
            .Where(u => u.User_ID == _user.Id)
            .Include(u => u.Project)
            .ToListAsync();
    }

    private Color RoleColor(Datahub_Project_User userRole)
    {
        if (userRole.IsAdmin)
        {
            return Color.Primary;
        }

        return userRole.IsDataApprover ? Color.Secondary : Color.Default;
    }

    private string RoleLabel(Datahub_Project_User userRole)
    {
        if (userRole.IsAdmin)
        {
            return "Admin";
        }

        return userRole.IsDataApprover ? "Data Approver" : "Member";
    }

    private async Task ShowProjectDialog()
    {
        var options = new DialogOptions { CloseOnEscapeKey = true };
        var dialog = await DialogService.ShowAsync<CreateProjectDialog>(Localizer[WORKSPACE_CREATION_DIALOG_TITLE], options);
        var dialogResult = await dialog.Result;
        if (!dialogResult.Canceled)
        {
            NavigationManager.NavigateTo($"{_datahubPortalConfiguration.ProjectUrlSegment}/{dialogResult.Data}",true);
        }
    }

}