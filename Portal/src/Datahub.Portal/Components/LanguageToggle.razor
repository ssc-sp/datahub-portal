@using Datahub.Application.Services.UserManagement
@using Datahub.Core.Model.Achievements;

@inject IUserSettingsService _userSettingsService
@inject ILocalStorageService _localStorage
@inject IPortalUserTelemetryService _telemetryService
@inject NavigationManager NavManager
@inject IJSRuntime _jsRuntime

<DHButton OnClick="() => ChangeLanguage(Language)" Size="@Size" @attributes="@InputAttributes">
    <MudText>
        @LanguageDisplay
    </MudText>
</DHButton>

@code {
    [Parameter]
    public Size Size { get; set; } = Size.Medium;
    
    [Parameter(CaptureUnmatchedValues = true)]
    public Dictionary<string, object> InputAttributes { get; set; }
    
    private static string Language => Thread.CurrentThread.CurrentCulture.Name.ToLower().Contains("fr") ? "en-CA" : "fr-CA";
    private static string LanguageDisplay => Thread.CurrentThread.CurrentCulture.Name.ToLower().Contains("fr") ? "English" : "Fran√ßais";

    private static List<string> TranslatedPageRoutes = new() { 
        PageRoutes.Home, PageRoutes.Home_FR,
        PageRoutes.News, PageRoutes.News_FR,
        PageRoutes.Explore, PageRoutes.Explore_FR,
        PageRoutes.Help, PageRoutes.Help_FR,
        PageRoutes.TermsAndConditions, PageRoutes.TermsAndConditions_FR,
        PageRoutes.AccountDefault, PageRoutes.AccountDefault_FR,
        "/login", "/connexion", "/register", "/inscription"
    };
    private static List<string> UnauthenticatedPages = new() { "/login", "/register", "/terms-and-conditions", "account-setup" };
    private static List<string> UnauthenticatedPages_Fr = new() { "/connexion", "/inscription", "/conditions-generales", "configuration-de-compte" };

    private async Task ChangeLanguage(string language)
    {
        // if in an unauthenticated page, user still needs to be able to translate languages
        var currentPage = NavManager.Uri;
        if (UnauthenticatedPages.Any(x => currentPage.Contains(x)) || UnauthenticatedPages_Fr.Any(x => currentPage.Contains(x)))
        {
            await _localStorage.SetItemAsStringAsync("language", language);
        }
        else
        {
            await _localStorage.SetItemAsStringAsync("language", language);
            await _userSettingsService.RegisterUserLanguage(language);
            await _telemetryService.LogTelemetryEvent(TelemetryEvents.UserToggleCulture);
        }

        foreach (string route in TranslatedPageRoutes)
        {
            if (currentPage.Contains(route))
            {
                await _userSettingsService.SetLanguage(language, Localizer[route + "-lt"]);
                return;
            }
        }

        await _userSettingsService.SetLanguage(language);
    }

    public async Task ToggleLanguage()
    {
        await ChangeLanguage(Language);
    }

}