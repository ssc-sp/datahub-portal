@using Datahub.Core.Model.Projects
@inject IDbContextFactory<DatahubProjectDBContext> DbFactory
@inject IUserInformationService UserInformationService
@inject IDatahubAuditingService AuditingService

<MudDialog Style="overflow-y: scroll">
    <TitleContent>
        <MudText Typo="Typo.h6">
            <MudIcon Icon="@Icons.Material.Filled.CommentBank" Class="mr-3 mb-n1" />
           @Project.ProjectName - @Project.ProjectAcronymCD
        </MudText>
    </TitleContent>
    <DialogContent>
            <Datahub.Core.Components.Form.MudFormTemplate T="DatahubProjectComment"
                                                     U="DatahubProjectDBContext"
                                                     Metadata="@_formMetadata"
                                                     HandleSubmit="HandleValidSubmit"
                                                     CreateNewRecord="CreateNewComment"
                                                     SelectedRecord="@_comment"
                                                     SetFormEditRecord="SetFormEdit"
                                                     HandleFilterChange="HandleFilterChange"
                                                     SortAccessors="@_sortAccessors"
                                                     Context=@Context
                                                     @key="@_formMetadata" />        
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Close</MudButton>
        @*<MudButton Color="Color.Error" OnClick="DeleteServer">Delete Server</MudButton>*@
    </DialogActions>
</MudDialog>

@code {

    [CascadingParameter] MudDialogInstance MudDialog { get; set; }
    [Parameter] public DatahubProject Project { get; set; }
    [Parameter] public DatahubProjectDBContext Context { get; set; }
    //private DatahubProjectDBContext Context;
    private Microsoft.Graph.Models.User _user = null!;

    private List<string> _headers = new();
    private FormMetadata<DatahubProjectComment> _formMetadata = new();
    private DatahubProjectComment _comment;
    private List<DatahubProjectComment> _comments;
    private string _searchFilter = string.Empty;
    private Dictionary<string, Func<DatahubProjectComment, string>> _sortAccessors = new();
    private bool refreshTracker;

    protected override async Task OnInitializedAsync()
    {
        // load projects
        //LoadSortExpressions();
        _user = await UserInformationService.GetCurrentGraphUserAsync();

        _headers = new List<string>
        {
            Localizer["Comment Date"],
            Localizer["Comment"],
        };

        LoadData(_searchFilter);
    }

    private void LoadData(string searchfilter)
    {
        _comments = Project.Comments.OrderByDescending(d => d.CommentDateDT).ToList();

        _formMetadata.Header = string.Empty;
        _formMetadata.SubHeader = Localizer["Comments"];
        _formMetadata.DataSet = _comments; 
        _formMetadata.AccessorFunctions = accessorFunctions;
        _formMetadata.Headers = _headers;
        _formMetadata.AllowDelete = false;
        _formMetadata.IsSubmitEnabled = true;
    }
    private List<Func<DatahubProjectComment, string>> accessorFunctions = new List<Func<DatahubProjectComment, string>>
    {
        new Func<DatahubProjectComment, string>(p => { return p.CommentDateDT.ToShortDateString();}),
        new Func<DatahubProjectComment, string>(p => { return p.CommentNT ?? ""; }),
    };

    private async Task HandleValidSubmit()
    {

        if (_comment != null)
        {            
            _comment.LastUpdatedDT = DateTime.Now;
            _comment.LastUpdatedUserId = _user.Mail;
            if (_comment.CommentID == 0)
            {
                _comment.CommentDateDT = DateTime.Now;
                Project.Comments.Add(_comment);
                refreshTracker = true;
            }
            await Context.TrackSaveChangesAsync(AuditingService);

            LoadData(_searchFilter); ;
            _comment = null;
        }


        StateHasChanged();
    }

    private void CreateNewComment()
    {
        _comment = new DatahubProjectComment() { CommentDateDT = DateTime.Now, CreatedDT = DateTime.Now, CreatedUserId = _user.Mail, Project = Project };
        StateHasChanged();
    }

    private void SetFormEdit(DatahubProjectComment comment)
    {
        _comment = comment;
        StateHasChanged();
    }

    private async void HandleFilterChange(string selection)
    {
        _searchFilter = selection;
        LoadData(_searchFilter);
        await InvokeAsync(StateHasChanged);
    }

    private void Cancel()
    {
        if (refreshTracker)
        {
            MudDialog.Close(DialogResult.Ok(Project.ProjectID));
        }
        else
        {
            MudDialog.Cancel();
        }
    }

    
}
