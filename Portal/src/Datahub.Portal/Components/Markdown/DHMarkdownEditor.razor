@*Markdown.razor*@

    <span id="@ElementId">
        <MarkdownEditor Value="@MarkdownValue" ValueChanged="@OnMarkdownValueChanged" ValueHTML="@MarkdownHtml" ValueHTMLChanged="@OnMarkdownValueHTMLChanged" @ref="_elementRef"/>
    </span>

@code {
    /*
    [Inject]
    public ILogger<DHMarkdownEditor> Logger { get; set; }
    
    
    [Inject]
    public IJSRuntime jsRuntime { get; set; }
*/
    [Parameter]
    public string InitialValue { get; set; }
    
    [Parameter]
    public string MarkdownValue { get; set; }

    [Parameter]
    public string MarkdownHtml { get; set; }
    
    [Parameter]
    public EventCallback<string> ValueChanged { get; set; }
    
    [Parameter]
    public EventCallback<string> HtmlChanged { get; set; }


    private string ElementId { get; set; }
    private MarkdownEditor _elementRef;
    private DotNetObjectReference<DHMarkdownEditor> _dotNetObjectRef;
    
    
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        MarkdownValue = InitialValue;
        ElementId = $"md-span-wrapper-{Guid.NewGuid()}";
        MarkdownHtml = Markdig.Markdown.ToHtml(MarkdownValue ?? string.Empty);
    }
    
    /*
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await _elementRef.FocusAsync();
    }
    */
    public async Task OnMarkdownValueChanged(string value)
    {
        MarkdownValue = value;
        await HtmlChanged.InvokeAsync(value);
    }
 
    public Task OnMarkdownValueHTMLChanged(string value)
    {
        MarkdownHtml = value;
        return Task.CompletedTask;
    }

    //public async ValueTask SetValue(string value)
    //{
    //    await _markdownModule.InvokeVoidAsync("setValue", ElementId, value);
    //}
    /*
    [JSInvokable]
    public async Task UpdateInternalValue(string value)
    {
        Console.Write("changed");
        await ValueChanged.InvokeAsync(value);
    }
    
    
    public void Dispose()
    {
        if (_markdownModule is not null)
        {
            InvokeAsync(async () => await _markdownModule.InvokeVoidAsync("destroyMarkdown", ElementId));
            InvokeAsync(async () => await _markdownModule.DisposeAsync());
        }
        _dotNetObjectRef?.Dispose();
    }
    */
}