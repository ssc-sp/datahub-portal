@*Markdown.razor*@

@implements IDisposable

<CascadingValue Value="@this" IsFixed="true">
    <span id="@ElementId">
        <MarkdownEditor Value="@MarkdownValue" ValueChanged="OnMarkdownValueChanged" ValueHTML="@MarkdownHtml" ValueHTMLChanged="OnMarkdownValueHTMLChanged" @ref="_elementRef"/>
    </span>
</CascadingValue>

@code {
    [Inject]
    public ILogger<DHMarkdownEditor> Logger { get; set; }

    [Inject]
    public IJSRuntime _jsRuntime { get; set; }

    [Parameter]
    public string InitialValue { get; set; }

    [Parameter]
    public string MarkdownValue { get; set; }

    [Parameter]
    public string MarkdownHtml { get; set; }

    [Parameter]
    public EventCallback<string> ValueChanged { get; set; }

    [Parameter]
    public EventCallback<string> HtmlChanged { get; set; }

    private MarkdownEditor _elementRef;
    private string ElementId { get; set; }
    private DotNetObjectReference<DHMarkdownEditor> _dotNetObjectRef;


    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        MarkdownValue = InitialValue;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        if (firstRender)
        {
            _dotNetObjectRef ??= DotNetObjectReference.Create(this);
            ElementId = $"md-{Guid.NewGuid()}";
        }
    }

    public async Task OnMarkdownValueChanged(string value)
    {
        MarkdownValue = value;
        await ValueChanged.InvokeAsync(value);
    }

    public async Task OnMarkdownValueHTMLChanged(string value)
    {
        MarkdownHtml = value;
        await HtmlChanged.InvokeAsync(value);
    }

    public async void Dispose()
    {
        _elementRef?.Dispose();
        _dotNetObjectRef?.Dispose();
    }
    
}