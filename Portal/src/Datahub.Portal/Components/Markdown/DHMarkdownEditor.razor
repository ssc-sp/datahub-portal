@*Markdown.razor*@


    <span id="@_wrapperId">
        <MardownEditor Value="@MarkdownValue" ValueChanged="@OnMarkdownValueChanged" ValueHTMLChanged="@OnMarkdownValueHTMLChanged" ElementId="@ElementId" @ref="_elementRef"/>
    </span>

@code {
    /*
    [Inject]
    public ILogger<DHMarkdownEditor> Logger { get; set; }
    
    
    [Inject]
    public IJSRuntime jsRuntime { get; set; }
*/
    [Parameter]
    public string InitialValue { get; set; }
    
    [Parameter]
    public string MarkdownValue { get; set; }

    [Parameter]
    public string markdownHtml { get; set; }
    
    [Parameter]
    public EventCallback<string> ValueChanged { get; set; }

    
    private string ElementId { get; set; }
    private string _wrapperId => $"{ElementId}-wrapper";
    private ElementReference _elementRef;
    private DotNetObjectReference<DHMarkdownEditor> _dotNetObjectRef;
    
    
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        MarkdownValue = InitialValue;
        ElementId = $"md-textarea-{Guid.NewGuid()}";
        markdownHtml = Markdig.Markdown.ToHtml(MarkdownValue ?? string.Empty);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await _elementRef.FocusAsync();
    }
    
    public Task OnMarkdownValueChanged(string value)
    {
        return Task.CompletedTask;
    }
 
    public Task OnMarkdownValueHTMLChanged(string value)
    {
        markdownHtml = value;
        return Task.CompletedTask;
    }

    //public async ValueTask SetValue(string value)
    //{
    //    await _markdownModule.InvokeVoidAsync("setValue", ElementId, value);
    //}
    
    [JSInvokable]
    public async Task UpdateInternalValue(string value)
    {
        await ValueChanged.InvokeAsync(value);
    }
    
    /*
    public void Dispose()
    {
        if (_markdownModule is not null)
        {
            InvokeAsync(async () => await _markdownModule.InvokeVoidAsync("destroyMarkdown", ElementId));
            InvokeAsync(async () => await _markdownModule.DisposeAsync());
        }
        _dotNetObjectRef?.Dispose();
    }
    */
}