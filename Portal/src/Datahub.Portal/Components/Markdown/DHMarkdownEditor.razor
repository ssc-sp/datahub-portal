@using Datahub.Infrastructure.Services.Azure
@using Microsoft.AspNetCore.Authentication
@using Microsoft.Identity.Web
@inject IHttpContextAccessor _HttpContext
@*Markdown.razor*@


<MarkdownEditor Value="@MarkdownValue"
                ValueChanged="OnMarkdownValueChanged"
                ValueHTML="@MarkdownHtml"
                ValueHTMLChanged="OnMarkdownValueHTMLChanged"
                ImageUploadEndpoint="https://localhost:5001/api/media/upload"
                UploadImage="true"
                ImageUploadAuthenticationSchema="Bearer"
                ImageUploadChanged="@OnImageUploadChanged"
                ImageUploadStarted="@OnImageUploadStarted"
                ImageUploadProgressed="@OnImageUploadProgressed"
                ImageUploadEnded="@OnImageUploadEnded"
                @ref="_elementRef"/>

@code {

    [Parameter]
    public string InitialValue { get; set; }

    [Parameter]
    public EventCallback<string> ValueChanged { get; set; }

    private MarkdownEditor _elementRef;
    private DotNetObjectReference<DHMarkdownEditor> _dotNetObjectRef;
    public string MarkdownValue { get; set; }
    public string MarkdownHtml { get; set; }
    private bool _isInitialized = false;

    // Sets the initial value of what the markdown editor should contain
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        MarkdownValue = InitialValue;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender && !_isInitialized)
        {
            _elementRef.ImageUploadAuthenticationToken = await GetAccessToken();
            _isInitialized = true;
        }
    }

    private async Task<string> GetAccessToken()
    {
        Console.WriteLine(_HttpContext.HttpContext.Request.Headers["authorization"]);
        var token = "";
        return token;
    }


    // Whenever the markdown text is updated, we update our internal value and call the provided method
    public async Task OnMarkdownValueChanged(string value)
    {
        MarkdownValue = value;
        await ValueChanged.InvokeAsync(value);
    }

    // Whenever the markdown html is changed, we update our internal value
    public Task OnMarkdownValueHTMLChanged(string value)
    {
        MarkdownHtml = value;
        return Task.CompletedTask;
    }

    async Task OnImageUploadChanged(FileChangedEventArgs e)
    {
        this.StateHasChanged();
    }

    Task OnImageUploadStarted(FileStartedEventArgs e)
    {
        Console.WriteLine($"Started Image: {e.File.Name}");
        return Task.CompletedTask;
    }

    Task OnImageUploadProgressed(FileProgressedEventArgs e)
    {
        Console.WriteLine($"Image: {e.File.Name} Progress: {(int)e.Percentage}");
        return Task.CompletedTask;
    }

    Task OnImageUploadEnded(FileEndedEventArgs e)
    {
        Console.WriteLine($"Finished Image: {e.File.Name}, Success: {e.Success}");
        return Task.CompletedTask;
    }

    public async void Dispose()
    {
        _elementRef?.Dispose();
        _dotNetObjectRef?.Dispose();
    }

}