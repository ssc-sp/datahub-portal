@switch (Type)
{
    case DHInputType.Select:
        @ChildContent
        break;
    case DHInputType.TextButton:
        <div class="input-group">
            @ChildContent
            <span class="input-group-btn">
                <button type="button" class="btn btn-default" onclick="@EndButtonAction">@EndButton</button>
            </span>
        </div>
        break;
    case DHInputType.Text:
        @ChildContent
        break;
}
@if (!string.IsNullOrEmpty(Hint))
{
    <small id="@_hintId" class="form-text text-muted">
        @Hint
    </small>
}


@code {
    [CascadingParameter] public string Id { get; set; }
    [Parameter] public string Hint { get; set; }
    [Parameter] public DHInputType Type { get; set; }
    [CascadingParameter] public bool Required { get; set; }
    [Parameter] public RenderFragment? ChildContent { get; set; }
    [Parameter] public string? EndButton { get; set; }
    [Parameter] public Action? EndButtonAction { get; set; }
    private string _hintId => $"{Id}-hint";
    private string _helpId => $"{Id}-help";
}

