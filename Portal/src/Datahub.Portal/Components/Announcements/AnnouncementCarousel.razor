@using Datahub.Application.Services.Announcements
@using MudBlazor.Utilities

@inject NavigationManager _navigationManager

<div class="sr-only"><h2>@Localizer["Announcements"]</h2></div>

<MudGrid>
    @foreach (var preview in Previews)
    {
        @if (!preview.Preview.StartsWith("!["))
        {
            <MudItem xs="@_previewCount">
                <MudPaper Elevation="0" Outlined Class="py-2 px-3">
                    <MudStack Justify="Justify.SpaceBetween" Style="height: 208px;" Spacing="1">
                        <MudElement>
                            <DHMarkdown Content="@preview.Preview" Style="@_descriptionTextStyle" />
                        </MudElement>
                        <MudElement>
                            <DHButton   OnClick="() => HandleReadMore(preview.Id)"
                                        Color="@Color.Primary"
                                        Variant="@Variant.Text"
                                        EndIcon="@Icons.Material.Filled.KeyboardDoubleArrowRight">
                                <span>
                                    @Localizer["Read more"]
                                    <span class="sr-only">@preview.Preview</span>
                                </span>
                            </DHButton>
                        </MudElement>
                    </MudStack>
                </MudPaper>
            </MudItem>
        }
    }
</MudGrid>

@code {
    public const int CarouselHeight = 320;

    [Parameter]
    public List<AnnouncementPreview> Previews { get; set; } = new();

    [Parameter]
    public string BackgroundUrl { get; set; }


    // private string _glassStyle;
    // private string _carouselStyle;
    // private string _backgroundImageStyle;
    private string _descriptionTextStyle;

    private int _previewCount;

    // get the style so it's always at the bottom of the carousel
    // private string _readMoreStyle => "position: absolute; bottom: 1rem; left: 2rem;";

    protected override void OnInitialized()
    {
        base.OnInitialized();

        var hasBackgroundUrl = !string.IsNullOrEmpty(BackgroundUrl);

        // _carouselStyle = new StyleBuilder()
        //     .AddStyle("height", $"{CarouselHeight}px")
        //     .Build();

        // _backgroundImageStyle = new StyleBuilder()
        //     .AddStyle("height", $"{CarouselHeight}px")
        //     .AddStyle("background", $"linear-gradient(180deg, rgba(0, 0, 0, 0) 0%, black 100%), url('{BackgroundUrl}') no-repeat", when: hasBackgroundUrl)
        //     .AddStyle("background-size", "cover", when: hasBackgroundUrl)
        //     .AddStyle("margin-bottom", "1rem")
        //     .Build();

        // _glassStyle = new StyleBuilder()
        //     .AddStyle("height", $"{CarouselHeight}px")
        //     .AddStyle("background", "rgba(0, 0, 0, 0.5)", when: hasBackgroundUrl)
        //     .AddStyle("color", "white", when: hasBackgroundUrl)
        //     .AddStyle("backdrop-filter", "blur(5px)", when: hasBackgroundUrl)
        //     .AddStyle("--mud-palette-text-primary", "white", when: hasBackgroundUrl)
        //     .AddStyle("--mud-palette-primary", Colors.Purple.Accent2, when: hasBackgroundUrl)
        //     .Build();

        _descriptionTextStyle = new StyleBuilder()
           .AddStyle("overflow", "hidden")
           .AddStyle("-webkit-line-clamp", "6")
           .AddStyle("-webkit-box-orient", "vertical")
           .AddStyle("display", "-webkit-box")
           .Build();

        int count = 0;
        foreach (var preview in Previews)
        {
            // only allowing text-based announcements
            if (!preview.Preview.StartsWith("!["))
            {
                count++;
            }
        }

        // There should really only be 1, 2, or 3 announcements at a time
        // The # of columns for the announcements is displayed accordingly
        _previewCount = (count % 3 == 0) ? 4 : 6;
        if (count == 1)
        {
            _previewCount = 12;
        }
    }

    private void HandleReadMore(int newId)
    {
        _navigationManager.NavigateTo("/news"); // $"/news/{newId}"
    }

}