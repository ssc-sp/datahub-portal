@using Datahub.Core.Services.Docs
@using Datahub.Markdown.Model
@using MudBlazor.Utilities
@using Datahub.Portal.Pages.Resources

<MudPaper Elevation="0" Outlined Class="py-2 px-3" Style="@_cardStyle">
    <MudStack Justify="Justify.SpaceBetween" Style="height: 100%;">
        <MudStack>
            <MudStack Row AlignItems="AlignItems.Center">
                <span>
                    <MudIcon role="img" aria-labelledby="decimg01" Icon="@(DocumentItem.GetSidebarIcon())" Title="@GetDocType()"/>
                    <p class="sr-only" id="decimg01">
                        @GetDocType()
                    </p>
                </span>
                <MudText Typo="Typo.body1" Style="@_titleTextStyle">
                    @DocumentItem?.Title
                </MudText>
            </MudStack>
            @if (!ShortVersion)
            {
                <MudText Typo="@Typo.body2" Style="@_previewTextStyle">@DocumentItem?.Preview</MudText>
            }
        </MudStack>
        <MudElement>
            @if (DocumentItem?.DocType == DocItemType.External)
            {
                <DHButton Href="@ResourcesPage.BuildResourceLink(DocumentItem)"
                          Color="@Color.Primary"
                          Variant="@Variant.Text"
                          Target="_blank"
                          EndIcon="@Icons.Material.Filled.KeyboardDoubleArrowRight">

                    <span>
                        @Localizer["Open link"]
                        <span class="sr-only">@DocumentItem?.Title</span>
                    </span>
                </DHButton>
            }
            else
            {
                <DHButton Href="@ResourcesPage.BuildResourceLink(DocumentItem)"
                          Color="@Color.Primary"
                          Variant="@Variant.Text"
                          Style="text-decoration: underline"
                          EndIcon="@Icons.Material.Filled.KeyboardDoubleArrowRight">
                    <span>
                        @Localizer["Read more"]
                        <span class="sr-only">@DocumentItem?.Title</span>
                    </span>
                </DHButton>
            }
        </MudElement>
    </MudStack>
</MudPaper>

@code {

    [Parameter] public DocItem DocumentItem { get; set; }

    [Parameter] public bool ShortVersion { get; set; } = false;

    private string _previewTextStyle;
    private string _titleTextStyle;
    private string _cardStyle;

    protected override void OnInitialized()
    {
        base.OnInitialized();

        // this is the recommended way to get an ellipsis on multi-line text:
        // https://developer.mozilla.org/en-US/docs/Web/CSS/-webkit-line-clamp
        _previewTextStyle = new StyleBuilder()
            .AddStyle("overflow", "hidden")
            .AddStyle("-webkit-line-clamp", "2")
            .AddStyle("-webkit-box-orient", "vertical")
            .AddStyle("display", "-webkit-box")
            .Build();

        _titleTextStyle = new StyleBuilder()
            .AddStyle("overflow", "hidden")
            .AddStyle("-webkit-line-clamp", "1")
            .AddStyle("-webkit-box-orient", "vertical")
            .AddStyle("display", "-webkit-box")
            .Build();

        _cardStyle = new StyleBuilder()
            .AddStyle("height", "150px", when: !ShortVersion)
            .AddStyle("height", "90px", when: ShortVersion)
            .Build();
    }

    /// <summary>
    /// Function to get the type of the document
    /// </summary>
    /// <returns> The type of the document (external, video, document) </returns>
    private string GetDocType()
    {
        if (DocumentItem.DocType == DocItemType.External)
        {
            return @Localizer["External"];
        }
        else if (DocumentItem.DocType == DocItemType.Tutorial)
        {
            return @Localizer["Video"];
        }
        else
        {
            return @Localizer["Document"];
        }
    }

}