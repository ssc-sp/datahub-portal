@using Datahub.Core.Services.Docs
@inject TimeZoneService _timezoneService;
@inject DocumentationService _docService

<DatahubAuthView AuthLevel="DatahubAuthView.AuthLevels.DatahubAdmin">

    <MudContainer Class="ma-8">
        <MudCard>
            <MudCardHeader>
                <CardHeaderAvatar>
                    <MudIcon aria-hidden="true" focusable="false" Icon="@Icons.Material.Filled.AdminPanelSettings"/>
                </CardHeaderAvatar>
                <CardHeaderContent>
                    @Localizer["Administration"]
                </CardHeaderContent>
            </MudCardHeader>
            <MudCardContent>
                <MudStack>
                    <MudStack Row AlignItems="@AlignItems.Center">
                        @if (_cacheIsRefreshing)
                        {
                            <MudProgressCircular Indeterminate Color="@Color.Secondary"/>
                        }
                        else
                        {
                            <DHButton OnClick="@RefreshCache"
                                       StartIcon="@Icons.Material.Filled.Refresh"
                                       Variant="@Variant.Filled"
                                       Color="@Color.Secondary">
                                @Localizer["Refresh"]
                            </DHButton>
                        }

                        <MudText>
                            Refresh the cache. Please note, it can take Github a few minutes to update its resources, so this may not work right away after editing the wiki.
                        </MudText>
                    </MudStack>

                    <MudContainer>
                        <MudText Typo="@Typo.h5">@Localizer["Error(s)"]</MudText>
                        @if (_formattedErrorList?.Count > 0)
                        {
                            <MudList>
                                @foreach (var e in _formattedErrorList)
                                {
                                    <MudListItem>@e</MudListItem>
                                }
                            </MudList>
                        }
                        else
                        {
                            <MudText>None</MudText>
                        }
                    </MudContainer>

                </MudStack>
            </MudCardContent>
        </MudCard>
    </MudContainer>
</DatahubAuthView>


@code {

    private IReadOnlyList<string> _formattedErrorList;
    private bool _cacheIsRefreshing;

    private async Task RefreshCache()
    {
        _cacheIsRefreshing = true;
        StateHasChanged();

        await _docService.InvalidateCache();

        _cacheIsRefreshing = false;
        StateHasChanged();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await RefreshErrorList();
    }

    private async Task RefreshErrorList()
    {
        var errors = _docService.GetErrorList();

        _formattedErrorList = await Task.WhenAll(errors.Select(async e => await FormatErrorMessage(e)));

        await InvokeAsync(StateHasChanged);
    }

    private async Task<string> FormatErrorMessage(Core.Services.Wiki.TimeStampedStatus error)
    {
        var timestampUtc = DateTime.SpecifyKind(error.Timestamp, DateTimeKind.Utc);
        var localDatetime = await _timezoneService.GetLocalDateTime(timestampUtc);
        return $"{localDatetime.ToString("yyyy-MM-dd HH:mm:ss")} - {error.Message}";
    }

}