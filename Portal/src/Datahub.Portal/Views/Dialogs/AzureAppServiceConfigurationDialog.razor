@using Datahub.Shared.Entities
@using Datahub.Application.Validators
@using Datahub.Core.Model.Projects


<MudDialog ClassContent="pa-6" ClassActions="pa-6">
    <DialogContent>
        <MudForm @bind-IsValid="@_success">
            <MudText>
                @Localizer["Select a framework from the list, which will be used to generate a template app service configuration. If you want to deploy a custom web application, select 'Docker compose' and provide the git repo URL and the path to the docker compose file."]
            </MudText>
            <MudLink Href="@PageRoutes.ResourceDefault">
                @Localizer["Learn more about configuring a web application"]
            </MudLink>
            <MudSelect Class="mt-6" Label=@Localizer["Select a web framework"]   @bind-Value="_selectedFramework">
                @foreach (string framework in AppServiceTemplates.TEMPLATES)
                {
                    <MudSelectItem Value="@framework" Label="@framework"/>
                }
            </MudSelect>
            @if (_selectedFramework == AppServiceTemplates.CUSTOM)
            {
                <MudGrid Justify="Justify.FlexStart">
                    <MudItem xs="9">
                        <MudTextField Class="mt-2" Label=@Localizer["Enter git repo URL"] Value="_gitRepoUrl" TextChanged="@((string s) => CheckForPrivateRepo(s))" HelperText="@Localizer["Must be a valid URL, i.e. https://*.git"]" Placeholder="https://gitprovider.com/me/myrepo.git" Validation="@GitRepoValidator()" Required="true" RequiredError=@Localizer["Git repository is necessary"]/>
                    </MudItem>
                    <MudItem xs="3">
                        <MudSelect Label="@Localizer["Repo visibility"]" @bind-Value="@_repoVisibility" Placeholder="@RepoVisibilities.Public.ToString()">
                            <MudSelectItem Label=@Localizer["Public"] Value=@RepoVisibilities.Public.ToString()/>
                            <MudSelectItem Label=@Localizer["Private"] Value=@RepoVisibilities.Private.ToString()/>
                        </MudSelect>
                    </MudItem>
                </MudGrid>
                @if (_repoVisibility == RepoVisibilities.Private.ToString())
                {
                    <MudTextField Label=@Localizer["Enter access token"]   @bind-Value="_accessToken" HelperText="@Localizer["Access token for the private repository"]" Placeholder="********" Required="true" RequiredError=@Localizer["Access tokens are required for private repos"]/>
                }

                <MudTextField Label=@Localizer["Enter Docker compose file path"]   @bind-Value="_dockerComposeFilePath" HelperText="@Localizer["Path from the base of your repo to the desired compose file, including the compose file"]" Placeholder="path/to/compose.yaml" Required="true" RequiredError=@Localizer["Path to docker compose is necessary, file name must be included"]/>
            }
            <MudExpansionPanels Elevation="1" Class="mt-4">
                <MudExpansionPanel IsInitiallyExpanded="false">
                    <TitleContent>
                        <MudStack Row="true">
                            <MudIcon Icon=@SidebarIcons.Brackets/>
                            <MudText>
                                @Localizer["Environment variables"]
                            </MudText>
                        </MudStack>
                    </TitleContent>
                    <ChildContent>
                        <MudText>
                            @Localizer["Environment variables are key-value pairs that are used to pass configuration to your web application. They are used to store sensitive information such as database connection strings, API keys, etc. You can add environment variables to your web application by providing a key-value pair. The key is the name of the environment variable and the value is the value of the environment variable."]
                        </MudText>
                        <EnvironmentVariablesTable projectAcronym="@WorkspaceAcronym" resource="@Resource" isEditable="true" @ref="@envVarTable"/>
                    </ChildContent>
                </MudExpansionPanel>
            </MudExpansionPanels>
        </MudForm>
    </DialogContent>
    <DialogActions>
        <MudText>
            @Localizer["Saving the configuration will overwrite the current configurations and will restart your web application."]
        </MudText>
        <MudSpacer/>
        <MudButton Variant="Variant.Outlined" OnClick="() => MudDialog.Cancel()">@Localizer["Cancel"]</MudButton>
        <MudButton Color="Color.Primary" Variant="Variant.Filled" OnClick="Submit" Disabled="@(!_success)">@Localizer["Save"]</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] public MudDialogInstance MudDialog { get; set; }
    [Parameter] public AppServiceConfiguration Configuration { get; set; }
    [Parameter] public string WorkspaceAcronym { get; set; }
    [Parameter] public Project_Resources2 Resource { get; set; }
    private EnvironmentVariablesTable envVarTable { get; set; }

    private enum RepoVisibilities
    {
        Public,
        Private
    }

    private string _selectedFramework;
    private string _gitRepoUrl;
    private string _dockerComposeFilePath;
    private string _repoVisibility = RepoVisibilities.Public.ToString();
    private string _accessToken;
    private bool _success;

    private Func<string, string> GitRepoValidator() => value => Localizer["{0}", new GitRepoValidator().Validate(value).Errors.Select(e => e.ErrorMessage).FirstOrDefault()];

    protected override void OnInitialized()
    {
        _selectedFramework = Configuration.Framework ?? "";
        _gitRepoUrl = Configuration.GitRepo ?? "";
        _dockerComposeFilePath = Configuration.ComposePath ?? "";
    }

    void Submit()
    {
        var envVars = envVarTable.GetEnvironmentVariablesDictionary();
        var config = AppServiceTemplates.GetTemplateConfiguration(AppServiceTemplates.CUSTOM);
        if (_selectedFramework == AppServiceTemplates.CUSTOM)
        {
            config.Framework = _selectedFramework;
            config.GitRepo = _gitRepoUrl;
            config.ComposePath = _dockerComposeFilePath;
        }
        else
        {
            config = AppServiceTemplates.GetTemplateConfiguration(_selectedFramework);
        }

        MudDialog.Close(DialogResult.Ok((config, envVars)));
    }

    private void CheckForPrivateRepo(string value)
    {
        if (value.Contains("@"))
        {
            _repoVisibility = RepoVisibilities.Private.ToString();
            _accessToken = value.Split("@")[0].Split("https://")[1];
            _gitRepoUrl = value.Replace(_accessToken + "@", "");
        }
        else
        {
            _gitRepoUrl = value;
        }
    }

}