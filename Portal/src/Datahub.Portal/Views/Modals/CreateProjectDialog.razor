@inject IProjectCreationService ProjectCreationService

<MudDialog>
    <DialogContent>
        <MudForm Class="my-8" @bind-IsValid="@_success">
            <MudText Class="mb-4">@Localizer[Description]</MudText>
            <MudTextField T="string" @bind-Value="_projectTitle" Label="@Localizer[ProjectLabel]" Required
                          RequiredError="@Localizer[MissingTitle]" HelperText="@Localizer[ProjectHelper]"/>
            <MudTextField T="string" @bind-Value="_projectAcronym" Label="@Localizer[AcronymLabel]" AdornmentIcon="@AcronymGeneratorIcon"
                          HelperText="@Localizer[AcronymHelper]" Adornment="Adornment.End" OnAdornmentClick="GenerateAcronym"
                          RequiredError="@Localizer[MissingAcronym]" Converter="_converter" @ref="_acronymField" Required
                          Validation="new Func<string, Task<string>>(ValidateAcronym)"/>
            @if (_errorMessage is not null)
            {
                <MudAlert Severity="Severity.Error" Dense="true" Class="my-2" ShowCloseIcon CloseIconClicked="CloseAlert">
                    @_errorMessage
                </MudAlert>
            }
        </MudForm>
    </DialogContent>
    <DialogActions>
        @if (ShowCancel)
        {
            <MudButton Variant="Variant.Text" OnClick="CloseDialog">@Localizer[CancelButton]</MudButton>
        }
        <MudButton Variant="Variant.Filled" Color="Color.Primary" Disabled="!_success" OnClick="CreateProject">
            @if (_isCreating)
            {
                <MudProgressCircular Class="ms-n1 mr-2" Size="Size.Small" Indeterminate="true"/>
            }
            @Localizer[CreateButton]
        </MudButton>
    </DialogActions>
</MudDialog>
@code {

    [CascadingParameter] MudDialogInstance MudDialog { get; set; }
    [Parameter]
    public bool ShowCancel { get; set; } = true;

#nullable enable
    private const string Description = "Required information to create a collaborative project";  
    private const string ProjectLabel = "Project Title";
    private const string ProjectHelper = "A title that describes the project";
    private const string AcronymLabel = "Project Acronym";
    private const string AcronymHelper = "A unique alphanumeric acronym to identify the project";
    private const string AcronymGeneratorIcon = "fa-light fa-arrows-rotate";
    private const string AcronymGeneratorTooltip = "Generate a unique acronym";
    private const string ProjectException = "An error occurred while creating the project";
    private const string CreateButton = "Create Project";
    private const string CancelButton = "Cancel";
    
    private const string MissingTitle = "Project Title is required";
    private const string MissingAcronym = "Project Acronym is required";
    private const string AcronymExists = "Project Acronym already exists";
    private const string ProjectRequiredToGenerateAcronym = "Project Title is required to generate an acronym";
    
    private string? _errorMessage;
    private string _projectTitle = string.Empty;
    private string _projectAcronym = string.Empty;
    private MudTextField<string>? _acronymField;

    private bool _success;
    private bool _isCreating;


    private async Task GenerateAcronym()
    {
        if (string.IsNullOrWhiteSpace(_projectTitle))
        {
            _errorMessage = Localizer[ProjectRequiredToGenerateAcronym];
            return;
        }
        _projectAcronym = await ProjectCreationService.GenerateProjectAcronymAsync(_projectTitle);
        _success = true;
        _acronymField?.ResetValidation();    
    }

    private void CloseAlert()
    {
        _errorMessage = null;
    }
    
    private void CloseDialog()
    {
        MudDialog.Cancel();
    }

    private async Task<string?> ValidateAcronym(string acronym)
    {   
        if (await ProjectCreationService.AcronymExists(acronym))
            return Localizer[AcronymExists];
        return null;
    }
    
    private Converter<string> _converter = new Converter<string>
    {
        SetFunc = value => value?.ToUpperInvariant() ?? string.Empty,
        GetFunc = text => text?.ToUpperInvariant() ?? string.Empty,
    };
    
    private async Task CreateProject()
    {
        if (_success)
        {
            if (_isCreating)
                return;
            _isCreating = true;
            //update Button
            StateHasChanged();
            await Task.Delay(1);
            // TODO: Get Organization name?
            var isAdded = await ProjectCreationService.CreateProjectAsync(_projectTitle, _projectAcronym);
            _isCreating = false;
            if (isAdded)
            {
                MudDialog.Close(DialogResult.Ok(_projectAcronym));
            }
            else
            {
                _errorMessage = Localizer[ProjectException];
                StateHasChanged();
            }
        }
    }
#nullable disable
}