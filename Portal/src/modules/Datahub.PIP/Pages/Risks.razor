@inject IStringLocalizer DataLocalizer
@inject NavigationManager NavigationManager
@inject IJSRuntime JsInterop
@inject IUserInformationService UserInformationService
@inject UIControlsService UI
@inject IMSGraphService MSGraphService
@page "/pip/risks/{tombstone}"
@inject IDatahubAuditingService AuditingService
@inject ServiceAuthManager ServiceAuthManager

@using Datahub.PIP.Data
@using Datahub.Application.Services.UserManagement
@implements IDisposable
@inject IDbContextFactory<PIPDBContext> DbFactory

<AeCard class="facardForms" CardPosition="AeCard.CardStyle.Horizontal">
<h1>PIP Risk</h1>

<h2>Selected Program</h2>
<AeTable Accessors="accessorFunctionsPip"
         T="PIPTombstone"
         Dataset="_tombstones"
         Headers="pipheaders"
         GridTemplateColumns="4fr 8fr"
         MaxHeight="200" />
</AeCard>

<AeCard class="facardForms" CardPosition="AeCard.CardStyle.Horizontal">
<h2>Step 3: Enter risks associated with the program</h2>

<div>
    <AeFlex Vertical id="indexFlex">



        <AePaginatedTable Accessors="accessorFunctions"
                 T="PIPRisks"
                 Dataset="_risks"
                 Renderers="GetRenderers()"
                 ColorAccessor="getColor"
                 Headers="headers"
                 GridTemplateColumns="2fr 2fr 2fr 2fr 2fr 2fr 1fr"
                 OnRowClick="@SetFormEdit"
                 Page="@_lastClicked"
                 PageSize="10"
                 @ref=_myTable />

                 <AePagination 
            Pageable="@_myTable" 
            OnPageClick="OnPageClick"> 
            <LeftIcon><i class='fad fa-chevron-double-left'></i></LeftIcon> 
            <RightIcon><i class='fad fa-chevron-double-right'></i></RightIcon>
            </AePagination> 


    </AeFlex>
    @if (_risk == null)
    {
        <AeFlex id="buttonBar">
            <div class="icon-container" style="margin-bottom: 10px; margin-left: 5px;">

                <FAButton Text="Add New" Icon="far fa-plus-square" onclick="e => CreateNewRisk()" />
            </div>
        </AeFlex>
    }
</div>
</AeCard>

<AeCard class="facardForms" CardPosition="AeCard.CardStyle.Horizontal">
    <AeFlex id="buttonBar">
        <div class="icon-container" style="margin-bottom: 10px; margin-left: 5px;">
            <FAButton Text="Tombstone" Icon="fal fa-arrow-left" onclick="e => GoToPreviousSheet()" />
        </div>
    </AeFlex>
@if (_risk != null)
{
        @if (_risk.RisksID > 0)
        {
            <h2>Editing Risk @_risk.RiskIdTXT</h2>
        }
        else
        {
            <h2>Add New Risk</h2>
        }

        <AeModelForm Model="_risk"
                     T="PIPRisks"
                     OnValidSubmit="HandleValidSubmit"
                     OnCancel="ClearForm"
                     CancelLabel="Cancel"
                     SubmitLabel="@SubmitLabel"
                     LabelForPropertyFunc="@GetDataLabel"
                     OnConfigure="OnConfigure"
                     LabelsOnTop="true" 
                     OnChange ="OnChange"
                     Flexbox />
    <AeFlex>
        <div class="icon-container" style="margin-bottom: 10px; margin-left: 5px;">
            <SuccessIndicator @bind-IsLoading=@_submittingApproval @ref=@_submitApprovalInd />
        </div>
    </AeFlex>
    <AeFlex id="buttonBar">
        <div class="icon-container" style="margin-bottom: 10px; margin-left: 5px;">
            <FAButton Text="Tombstone" Icon="fal fa-arrow-left" onclick="e => GoToPreviousSheet()" />
        </div>
    </AeFlex>
}

</AeCard>

@code {
    [Parameter]
    public string tombstone { get; set; }
    private const string PROJECTACRONYM = "PIP";
    private List<PIPRisks> _risks;
    private PIPRisks _risk;
    private List<PIPTombstone> _tombstones;
    private PIPTombstone _tombstone;
    private string SubmitLabel = "Save";
    private Microsoft.Graph.Models.User CurrentUser;
    private string navigationUrl = string.Empty;
    private PIPDBContext Context;  
    private bool _isUserAdmin;

    private int _lastClicked = 0;
    private IPageableComponent _myTable;
    private SuccessIndicator _submitApprovalInd;
    private bool _submittingApproval = false;

    protected override void OnAfterRender(bool firstRender)
    {
        if(firstRender){
            StateHasChanged();
        }
    }
    private void OnPageClick(int pageIndex)
    {
        _lastClicked = pageIndex;
    }

    protected override async Task OnInitializedAsync()
    {
        Context = DbFactory.CreateDbContext();
        CurrentUser = await UserInformationService.GetCurrentGraphUserAsync();
        _isUserAdmin = await ServiceAuthManager.IsProjectAdmin(CurrentUser.Id, PROJECTACRONYM);
        // load projects
        _tombstones = Context.Tombstones.Where(p => p.TombstoneID == Convert.ToInt32(tombstone)).ToList();
        _tombstone = _tombstones[0];
        _risks = Context.Risks.Where(p => p.PIPTombstone.TombstoneID == _tombstone.TombstoneID && !p.IsDeleted).ToList();
    }

    
     private List<Func<PIPRisks, RenderFragment>> GetRenderers()
    {

        if (_isUserAdmin)
        {
        return new List<Func<PIPRisks, RenderFragment>>
            {
                null,
                null,
                null,
                null,
                null,
                null,
                risk => 
            @<div class="help icon-container" @onclick="() => DeleteRecord(risk.RisksID)"><i class="far fa-trash-alt"></i></div>
            };
        }
       
        return new List<Func<PIPRisks, RenderFragment>>
            {
                null,
                null,
                null,
                null,
                null,
                null,
                null
            };
    }


     private async void OnConfirmDelete(bool isConfirmed, dynamic item)
    {
        if (isConfirmed && _risk != null)
        {
            _risk.IsDeleted = true;
            _risk.UserIdWhoDeleted = CurrentUser.Id;
            await Context.TrackSaveChangesAsync(AuditingService);
        }

        _risk = null;
        _risks = Context.Risks.Where(p => p.PIPTombstone.TombstoneID == _tombstone.TombstoneID && !p.IsDeleted).ToList();
        await UI.ToggleModal();        

        StateHasChanged();
    }


    private async void DeleteRecord(int recordId)
    {
        var messages = new List<string>() { "Would you like to delete this record?" };
        await UI.ToggleModal(
        @<UserChoiceModal HeaderText="Save Data" ChoiceTextList=@messages OnDecision="(a) => OnConfirmDelete(a, recordId)" ConfirmText="Yes" CancelText="No"  />);
    }

    private async void OnConfirmSave(bool isConfirmed, dynamic item)
    {
        await UI.ToggleModal();
        _submittingApproval = true;
        if (isConfirmed && _risk != null)
        {
            _risk.LastUpdatedDT = DateTime.Now;
            _risk.DateUpdatedDT = DateTime.Now;
            _risk.LastUpdatedUserId = CurrentUser.Id;
            if (_risk.RisksID == 0)
            {
                _risk = Context.Risks.Add(_risk).Entity;
            }
            var result = await Context.TrackSaveChangesAsync(AuditingService);
            if (result < 1)
            {
                await _submitApprovalInd.SignalFailure();
            }
            else
            {
                await _submitApprovalInd.SignalSuccess();
            }
            await OnInitializedAsync();
        }
         else if (!isConfirmed && _risk != null)
        {
            var entry = Context.Entry(_risk);
            entry.CurrentValues.SetValues(entry.OriginalValues);
            entry.State = EntityState.Unchanged;
            
        }

        _risk = item;


        if (!string.IsNullOrEmpty(navigationUrl))        
            NavigationManager.NavigateTo(navigationUrl);

        StateHasChanged();
    }

    private async Task HandleValidSubmit()
    {
        var messages = new List<string>() { "Would you like to save risk data?" };
        await UI.ToggleModal(
        @<UserChoiceModal HeaderText="Save Data" ChoiceTextList=@messages OnDecision="(a) => OnConfirmSave(a, null)"  ConfirmText="Yes" CancelText="No" />);

    }

    private async Task GoToPreviousSheet()
    {
        navigationUrl = $"/pip/programs/{_tombstone.TombstoneID}";
        if (_risk == null || !Context.ChangeTracker.HasChanges())
            NavigationManager.NavigateTo(navigationUrl);
        else
            await HandleValidSubmit(); 
    }

    private async Task<PIPRisks> ClearForm()
    {
        _risk = null;
        StateHasChanged();
        return await Task.FromResult((PIPRisks)null);
    }

  

    private async Task SetFormEdit(PIPRisks risk)
    {
        if (Context.ChangeTracker.HasChanges())
        {
            var messages = new List<string>() { "Data has been edited, would you like to save?" };
            await UI.ToggleModal(@<UserChoiceModal HeaderText="Save Data" ChoiceTextList=@messages OnDecision="(a) => OnConfirmSave(a, risk)" ConfirmText="Yes" CancelText="No" />
    );
        }
        else
        {
            _risk = risk;
            _risk.LastUpdatedUserName = await MSGraphService.GetUserName(_risk.LastUpdatedUserId, CancellationToken.None);

            SubmitLabel = "Save";
            StateHasChanged();
        }
    }

    private string getColor(PIPRisks current)
    {
        if (current == _risk)
        {
            return "yellow";
        }
        return "";
    }

    private List<Func<PIPRisks, string>> accessorFunctions = new List<Func<PIPRisks, string>>
{
        new Func<PIPRisks, string>(p => { return p.RiskTitle; }),
        new Func<PIPRisks, string>(p => { return p.RiskDescriptionTXT; }),
        new Func<PIPRisks, string>(p => { return p.RiskIdTXT; }),
        new Func<PIPRisks, string>(p => { return p.InherentLevel1.ToString(); }),
        new Func<PIPRisks, string>(p => { return p.InherentLevel2.ToString(); }),
        new Func<PIPRisks, string>(p => { return p.InherentLevel3.ToString(); }),
        null,
    };

    private List<string> pipheaders = new List<string>
{
        "Title","Lead Sector"
    };

    private List<Func<PIPTombstone, string>> accessorFunctionsPip = new List<Func<PIPTombstone, string>>
{
        new Func<PIPTombstone, string>(p => { return p.ProgramTitle; }),
        new Func<PIPTombstone, string>(p => { return p.LeadSector; }),
    };

    private List<string> headers = new List<string>
    {
	    "Risk Title","Risk Description", "Risk Area", "Inherent Risk Level", "Residual Risk Level", "Target Risk Level", "Admin Tasks"
    };

    private void CreateNewRisk()
    {
        _risk = new PIPRisks() { PIPTombstone = _tombstone, LastUpdatedDT = DateTime.Now };
        StateHasChanged();
    }

    public string GetDataLabel(string propName)
    {
        return DataLocalizer[propName];
    }

    private void OnChange(ModelFormChangeArgs args)
    {
        StateHasChanged();
    }

    private void OnConfigure(IModelFormContext context)
    {
        context.RegisterOptionValueProperty<PIPRisks>(r => r.RiskCategory, () => new[] { "Strategic", "Operational" });

        context.RegisterOptionValueProperty<PIPRisks>(r => r.RiskTrendTXT, () => new[] { "↑ increasing risk",
                                                                    "→ stable, risk is being managed",
                                                                    "↓ decreasing risk",
                                                                    "N/A"
                                                                 });

        context.RegisterOptionValueProperty<PIPRisks>(r => r.RelevantCorporatePrioritiesTXT, () => new[] {"Accelerate development and adoption of clean technology and transition to a net-zero future in a post-pandemic economic recovery",
                                                                    "Improve market access and competitiveness for Canada’s resource sectors",
                                                                    "Advance reconciliation, build relationships and share economic benefits with Indigenous peoples",
                                                                    "Promote a diverse and inclusive workforce while supporting resource communities",
                                                                    "Protect Canadians from the impacts of natural and human-induced hazards and support climate action",
                                                                    "N/A"
                                                                 });

        context.RegisterOptionValueProperty<PIPRisks>(r => r.RelevantCorporateRisksTXT, () => new[] { "1. Competitiveness of Natural Resources Sectors and Trade ",
                                                                                "2. Safety and Security of Energy Infrastructure",
                                                                                "3. Innovation, Science and Clean Technology",
                                                                                "4. Climate Change Adaptation and Mitigation",
                                                                                "5. Public Confidence and Engagement",
                                                                                "6. Cybersecurity",
                                                                                "7. Hazards and Emergency Management",
                                                                                "8. Enabling Program Delivery",
                                                                                "N/A"
                                                                 });
        
        context.RegisterOptionValueProperty<PIPRisks>(p => p.Impact1, () => PIPConstants.FIVEOPTIONSMANDATORY);
        context.RegisterOptionValueProperty<PIPRisks>(p => p.Impact2, () => PIPConstants.FIVEOPTIONSMANDATORY);
        context.RegisterOptionValueProperty<PIPRisks>(p => p.Impact3, () => PIPConstants.FIVEOPTIONSMANDATORY);
        context.RegisterOptionValueProperty<PIPRisks>(p => p.Likelihood1, () => PIPConstants.FIVEOPTIONSMANDATORY);
        context.RegisterOptionValueProperty<PIPRisks>(p => p.Likelihood2, () => PIPConstants.FIVEOPTIONSMANDATORY);
        context.RegisterOptionValueProperty<PIPRisks>(p => p.Likelihood3, () => PIPConstants.FIVEOPTIONSMANDATORY);
        context.RegisterOptionValueProperty<PIPRisks>(p => p.OngoingMonitoringActivitiesTXT, () => PIPConstants.ONGOINGACTIVITIES);
        context.RegisterOptionValueProperty<PIPRisks>(p => p.OngoingMonitoringActivitiesTXT2, () => PIPConstants.ONGOINGACTIVITIES);
        context.RegisterOptionValueProperty<PIPRisks>(p => p.OngoingMonitoringActivitiesTXT3, () => PIPConstants.ONGOINGACTIVITIES);
        context.RegisterOptionValueProperty<PIPRisks>(p => p.OngoingMonitoringTimeframeTXT, () => PIPConstants.ONGOINGACTIVITIESTIMEFRAME);
        context.RegisterOptionValueProperty<PIPRisks>(p => p.OngoingMonitoringTimeframe2TXT, () => PIPConstants.ONGOINGACTIVITIESTIMEFRAME);
        context.RegisterOptionValueProperty<PIPRisks>(p => p.OngoingMonitoringTimeframe3TXT, () => PIPConstants.ONGOINGACTIVITIESTIMEFRAME);
        context.RegisterOptionValueProperty<PIPRisks>(p => p.StrategyTimeline1, () => PIPConstants.TIMELINE);
        context.RegisterOptionValueProperty<PIPRisks>(p => p.StrategyTimeline2, () => PIPConstants.TIMELINE);
        context.RegisterOptionValueProperty<PIPRisks>(p => p.StrategyTimeline3, () => PIPConstants.TIMELINE);
        context.RegisterOptionValueProperty<PIPRisks>(p => p.StrategyTimeline4, () => PIPConstants.TIMELINE);
        context.RegisterOptionValueProperty<PIPRisks>(p => p.StrategyTimeline5, () => PIPConstants.TIMELINE);
    }

    public void Dispose() { Context.Dispose(); }
}
