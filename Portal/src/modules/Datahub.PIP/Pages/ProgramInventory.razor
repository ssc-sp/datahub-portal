@using Microsoft.Extensions.Logging 
@using Datahub.PIP.Data
@using Datahub.Application.Services.UserManagement
@inject IStringLocalizer Localizer
@inject NavigationManager NavigationManager
@inject IJSRuntime JsInterop
@inject IUserInformationService UserInformationService
@inject IMSGraphService MSGraphService
@inject UIControlsService UI
@inject IConfiguration Configuration
@inject IDatahubAuditingService AuditingService
@inject ServiceAuthManager ServiceAuthManager
@inject ILogger<ProgramInventory> Logger

@implements IDisposable
@inject IDbContextFactory<PIPDBContext> DbFactory

@page "/pip/programs"
@page "/pip/programs/{tombstone}"

<AeCard class="facardForms" CardPosition="AeCard.CardStyle.Horizontal">
    <h1>Performance Information Profile (PIP) Forms</h1>

    <h2>Select your fiscal year</h2>
    @if (_fiscalYears != null && _fiscalYears.Any())
    {
        <AeDropdown Items="_fiscalYears" OnChange="HandleDropdownChange" Label="@_fiscalYear.FiscalYear" class="securityDropdown"/>    
    }

</AeCard>


@if (_projects != null)
{
    <AeCard class="facardForms" CardPosition="AeCard.CardStyle.Horizontal">

        <h2>Select Program Inventory Program</h2>
        <AeFlex id="filterBar">            
            <AeDropdown Items="validFilterValues" OnChange="HandleFilterChanges" Label="@_filterLabel" class="filterDropdown"/>                
        </AeFlex>
        <AePaginatedTable Accessors="accessorFunctions"
             Renderers="GetRenderers()"
             T="PIPTombstone"
             Dataset="_projects"
             Headers="headers"
             ColorAccessor="getColor"
             GridTemplateColumns="4fr 4fr 4fr"
             OnRowClick="@SetFormEdit"
             Page="@_lastClicked"
             PageSize="10"
             @ref=_myTable />

        <AePagination 
            Pageable="@_myTable" 
            OnPageClick="OnPageClick"> 
            <LeftIcon><i class='fad fa-chevron-double-left'></i></LeftIcon> 
            <RightIcon><i class='fad fa-chevron-double-right'></i></RightIcon>
        </AePagination>  

    </AeCard>
}

@if (_tombstone != null)
{
<AeCard class="facardForms" CardPosition="AeCard.CardStyle.Horizontal">
    @if (_tombstone.TombstoneID > 0)
    {
        <h2>Edit PIP Information for @(_tombstone.ProgramTitle)</h2>
    }
    else
    {
        <h2>Enter Program Details</h2>
    }
    <AeFlex id="buttonBar">
        <div class="icon-container" style="margin-bottom: 10px; margin-left: 5px;">
            <FAButton Text="Indicators and Results" Icon="fal fa-poll" IconLocation="left" onclick="e => GoToIndicators()" />
            <FAButton Text="Risks" Icon="fal fa-water-rise" IconLocation="left" onclick="e => GoToRisks()" />
        </div>
    </AeFlex>


    @foreach (var content in _markDownContent)
    {
        <AeMarkdown Content="@($"{content}")"></AeMarkdown>
    }
    <AeModelForm Model="_tombstone"
                 T="PIPTombstone"
                 OnValidSubmit="HandleValidSubmit"
                 OnCancel="ClearForm"
                 OnConfigure="OnConfigure"
                 CancelLabel="Cancel"
                 OnChange="OnChange"
                 SubmitLabel="@SubmitLabel"
                 LabelForPropertyFunc="@GetDataLabel"
                 LabelsOnTop="true" 
                 IsSubmitEnabled="@_enableSave"
                 IsSectionLocksVisible="@_isUserAdmin"
                 CheckedIcon="far fa-check"
                 AreFieldsNullable="true"
                 @ref="_myModelForm"
                 />
    <AeFlex>
        <div class="icon-container" style="margin-bottom: 10px; margin-left: 5px;">
            <FAButton Text="Save and Lock" onclick="e => SaveAndLock()" Disabled=@(!_enableSave) />
            <SuccessIndicator @bind-IsLoading=@_submittingApproval @ref=@_submitApprovalInd />
        </div>
    </AeFlex>
    <AeFlex>
        <div class="icon-container" style="margin-bottom: 10px; margin-left: 5px;">
            <SuccessIndicator @bind-IsLoading=@_submittingApproval @ref=@_submitApprovalInd />
        </div>
    </AeFlex>
    <AeFlex id="buttonBar">
        <div class="icon-container" style="margin-bottom: 10px; margin-left: 5px;">
            <FAButton Text="Indicators and Results" Icon="fal fa-poll" IconLocation="left" onclick="e => GoToIndicators()" />
            <FAButton Text="Risks" Icon="fal fa-water-rise" IconLocation="left" onclick="e => GoToRisks()" />
        </div>
    </AeFlex>

</AeCard>
}

@code {
    [Parameter]
    public string tombstone { get; set; }
    private const string PROJECTACRONYM = "PIP";

    private PIPFiscalYears _fiscalYear;
    private List<string> _fiscalYears;
    private AeModelForm<PIPTombstone> _myModelForm;
    private List<PIPTombstone> _projects;
    private PIPTombstone _tombstone;// = new PIP_Tombstone();
    private string SubmitLabel = "Save";
    private const string EMAIL = "offline@nrcan-cnrcan.gc.ca";
    private string navigationUrl = string.Empty;
    private bool _enableSave = true;
    private Microsoft.Graph.Models.User CurrentUser;
    private bool _isUserAdmin;
    private PIPDBContext Context;
    private List<string> headers = new List<string>
    {
	    "Title","Lead Sector", "Report"
    };
    private List<string> _markDownContent;
    private int _lastClicked = 0;
    private IPageableComponent _myTable;
    private bool _reloadOptions = true;
    private SuccessIndicator _submitApprovalInd;
    private bool _submittingApproval = false;
    private List<string> validFilterValues = new List<string>();
    private string _selectedFilter = "All";
    private string _filterLabel;
    private void OnPageClick(int pageIndex)
    {
        _lastClicked = pageIndex;
    }

    protected override async Task OnInitializedAsync()
    {        
        Context = DbFactory.CreateDbContext();
        CurrentUser = await UserInformationService.GetCurrentGraphUserAsync();
        _isUserAdmin = await ServiceAuthManager.IsProjectAdmin(CurrentUser.Id, PROJECTACRONYM);
        _fiscalYears = new();
        _fiscalYears = Context.FiscalYears.OrderByDescending(i => i.YearId).Select(i => i.FiscalYear).ToList();
        _fiscalYear = _fiscalYear == null ? Context.FiscalYears.OrderByDescending(i => i.YearId).First() : _fiscalYear;
        _markDownContent = File.ReadAllLines($@"Pages\Forms\Pip\PipFormIntro.md").ToList();
        validFilterValues = Context.Tombstones.Where(l => l.FiscalYear.FiscalYear == _fiscalYear.FiscalYear).Select(s => s.LeadSector).Distinct().ToList();
        validFilterValues.Insert(0, "All");
        _filterLabel = $"Lead Sector: {_selectedFilter}";

        if (_fiscalYear != null)
        {
            _projects = new();
            LoadProjects();

        }


        if (!string.IsNullOrEmpty(tombstone))
        {

            _tombstone = _projects.Where(p => p.TombstoneID == Convert.ToInt32(tombstone)).FirstOrDefault();
            if (_tombstone != null)
                await PrepareItemForEdit(_tombstone);
        }
    }

    private void HandleFilterChanges(string selectedValue)
    {
        _selectedFilter = selectedValue;
        _filterLabel = $"Lead Sector: {_selectedFilter}";
        LoadProjects();
    }

    private void OnChange(ModelFormChangeArgs args)
    {        
    }



    private void HandleDropdownChange(string selectedItem)
    {
        _fiscalYear = Context.FiscalYears.Where(f => f.FiscalYear == selectedItem).First();
        validFilterValues.Clear();
        validFilterValues = Context.Tombstones.Where(l => l.FiscalYear.FiscalYear == _fiscalYear.FiscalYear).Select(s => s.LeadSector).Distinct().ToList();
        validFilterValues.Insert(0, "All");

        _projects = new();
        LoadProjects();
        StateHasChanged();
    }

    private void ApplyLocks(IModelFormContext context)
    { 
        ClearContextlocks(context);
        RegisterLocks(context);
    }

    private void OnConfigure(IModelFormContext context)
    {
        if (_reloadOptions)
        {
            context.RegisterOptionValueProperty<PIPTombstone>(p => p.CoreResponsbilityDESC, () => PIPConstants.CORERESPONSIBILITIES);
            context.RegisterOptionValueProperty<PIPTombstone>(p => p.MandateLetterCommitment1DESC, () => PIPConstants.COMMITMENTS);
            context.RegisterOptionValueProperty<PIPTombstone>(p => p.MandateLetterCommitment3DESC, () => PIPConstants.COMMITMENTS);
            context.RegisterOptionValueProperty<PIPTombstone>(p => p.MandateLetterCommitment4DESC, () => PIPConstants.COMMITMENTS);
            context.RegisterOptionValueProperty<PIPTombstone>(p => p.TransferPaymentPrograms1DESC, () => PIPConstants.TRANSFERPROGRAMS);
            context.RegisterOptionValueProperty<PIPTombstone>(p => p.TransferPaymentPrograms2DESC, () => PIPConstants.TRANSFERPROGRAMS);
            context.RegisterOptionValueProperty<PIPTombstone>(p => p.TransferPaymentPrograms3DESC, () => PIPConstants.TRANSFERPROGRAMS);
            context.RegisterOptionValueProperty<PIPTombstone>(p => p.TransferPaymentPrograms4DESC, () => PIPConstants.TRANSFERPROGRAMS);
            context.RegisterOptionValueProperty<PIPTombstone>(p => p.TransferPaymentPrograms5DESC, () => PIPConstants.TRANSFERPROGRAMS);
            context.RegisterOptionValueProperty<PIPTombstone>(p => p.TransferPaymentPrograms6DESC, () => PIPConstants.TRANSFERPROGRAMS);
            context.RegisterOptionValueProperty<PIPTombstone>(p => p.TransferPaymentPrograms7DESC, () => PIPConstants.TRANSFERPROGRAMS);
            context.RegisterOptionValueProperty<PIPTombstone>(p => p.TransferPaymentPrograms8DESC, () => PIPConstants.TRANSFERPROGRAMS);
            context.RegisterOptionValueProperty<PIPTombstone>(p => p.MandateLetterCommitment2DESC, () => PIPConstants.COMMITMENTS);
            context.RegisterOptionValueProperty<PIPTombstone>(p => p.TransferPaymentProgramsLess51DESC, () => PIPConstants.TRANSFERPROGRAMSLESS5);
            context.RegisterOptionValueProperty<PIPTombstone>(p => p.TransferPaymentProgramsLess52DESC, () => PIPConstants.TRANSFERPROGRAMSLESS5);
            context.RegisterOptionValueProperty<PIPTombstone>(p => p.TransferPaymentProgramsLess53DESC, () => PIPConstants.TRANSFERPROGRAMSLESS5);
            context.RegisterOptionValueProperty<PIPTombstone>(p => p.HorizontalInitiative1DESC, () => PIPConstants.HORIZONTALINITIATIVES);
            context.RegisterOptionValueProperty<PIPTombstone>(p => p.HorizontalInitiative2DESC, () => PIPConstants.HORIZONTALINITIATIVES);
            context.RegisterOptionValueProperty<PIPTombstone>(p => p.HorizontalInitiative3DESC, () => PIPConstants.HORIZONTALINITIATIVES);
            context.RegisterOptionValueProperty<PIPTombstone>(p => p.MethodOfIntervention1DESC, () => PIPConstants.INTERVENTION);
            context.RegisterOptionValueProperty<PIPTombstone>(p => p.MethodOfIntervention2DESC, () => PIPConstants.INTERVENTION);
            context.RegisterOptionValueProperty<PIPTombstone>(p => p.TargetGroup1DESC, () => PIPConstants.TARGETGROUPS);
            context.RegisterOptionValueProperty<PIPTombstone>(p => p.TargetGroup2DESC, () => PIPConstants.TARGETGROUPS);
            context.RegisterOptionValueProperty<PIPTombstone>(p => p.TargetGroup3DESC, () => PIPConstants.TARGETGROUPS);
            context.RegisterOptionValueProperty<PIPTombstone>(p => p.TargetGroup4DESC, () => PIPConstants.TARGETGROUPS);
            context.RegisterOptionValueProperty<PIPTombstone>(p => p.TargetGroup5DESC, () => PIPConstants.TARGETGROUPS);
            context.RegisterOptionValueProperty<PIPTombstone>(p => p.GovernmentOfCanadaActivityTagsDESC, () => PIPConstants.GOCTAGS1);
            context.RegisterOptionValueProperty<PIPTombstone>(p => p.CanadianClassificationOfFunctionsOfGovernmentDESC, () => PIPConstants.GOCCLASSIFICATION);
            context.RegisterOptionValueProperty<PIPTombstone>(p => p.StrategicPriorities1DESC, () => PIPConstants.STRATEGIC);
            context.RegisterOptionValueProperty<PIPTombstone>(p => p.StrategicPriorities2DESC, () => PIPConstants.STRATEGIC);
            context.RegisterOptionValueProperty<PIPTombstone>(p => p.IsEquitySeekingGroup, () => PIPConstants.EQUITYSEEKINGGROUPS);
            context.RegisterOptionValueProperty<PIPTombstone>(p => p.IsEquitySeekingGroup2, () => PIPConstants.EQUITYSEEKINGGROUPS);
            context.RegisterOptionValueProperty<PIPTombstone>(p => p.DoesIndicatorEnableProgramMeasureEquityOption, () => PIPConstants.YESNO);

            context.RegisterOptionValueProperty<PIPTombstone>(p => p.DepartmentalResult1CD, () => PIPConstants.CORERESPONSIBILITY);
            context.RegisterOptionValueProperty<PIPTombstone>(p => p.DepartmentalResult2CD, () => PIPConstants.CORERESPONSIBILITY);
            context.RegisterOptionValueProperty<PIPTombstone>(p => p.DepartmentalResult3CD, () => PIPConstants.CORERESPONSIBILITY);                

            context.RegisterFieldNotes<PIPTombstone>(p => p.LogicModel, "Sector to include GCDocs link to their logic model");
            context.RegisterFieldNotes<PIPTombstone>(p => p.RelatedProgramOrActivities, "Sectors to capture any programs or activities that are included in the PIP that we are unable to capture elsewhere in the PIP Webform.");
            context.RegisterFieldNotes<PIPTombstone>(p => p.ProgramNotes, "Sectors to use this field to capture any notes that are relevant to the Program");
            context.RegisterCategoryNotes("Spending (in $) as per GC InfoBase (to be updated by CMSS)", "The planned and actual spending for the Program is based on the financial information submitted to TBS by CMSS as a part of the annual DP and DRR. TBS publishes this information on GCInfoBase.");
            context.RegisterCategoryNotes("Program Tags to be Updated by Sector", "This section is intended to identify connections between Programs and  elements in other structures. They must be assigned in a manner that reflects the primary purpose of the Program, rather than attempting to select all possible tags that might be approporiate. Please select the relevant Tags from the drop downs below.");
            context.RegisterCategoryNotes("Program Tags as per TBS Database and GCInfoBase", "These tags must be updated through the annual DRF amendment process. For more details on each Tag, please refer to NRCan's Performance Information Profile Guidelines and Procedures document.");
            context.RegisterCategoryNotes("Latest Update Information", "This section will be updated automatically when you save your information and will show the name of the last user and date they update the form.");

            RegisterLocks(context);
            _reloadOptions = false;
        }
        else
        {
            UpdateLocks(context);
        }
    }

    protected void ClearContextlocks(IModelFormContext context)
    {        
        context.RegisterCategoryLock("Program Information", false);
        context.RegisterCategoryLock("Spending (in $) as per GC InfoBase (to be updated by CMSS)", false);
        context.RegisterCategoryLock("Program Tags to be Updated by Sector", false);
        context.RegisterCategoryLock("Program Tags as per TBS Database and GCInfoBase", false);        
        context.RegisterCategoryLock("GBA Plus", false);        
        context.RegisterCategoryLock("Date of PIP Approval", false);        
        context.RegisterCategoryLock("Latest Update Information", false);        
        context.RegisterCategoryLock("Program Notes", false);        
    }

    protected void UpdateLocks(IModelFormContext context)
    {
        var lockedCategories = context.LockedCategories;
        _tombstone.IsProgramInformationLocked = false;
        _tombstone.IsSpendingLocked = false;
        _tombstone.IsSectorProgramTagsLocked = false;
        _tombstone.IsGCInfoBaseProgramTagsLocked = false;
        _tombstone.IsGBALocked = false;
        _tombstone.IsDateOfPipApprovalLocked = false;
        _tombstone.IsLatestUpdateInformationLocked = false;
        _tombstone.IsProgramNotesLocked = false;

        foreach (var category in lockedCategories)
        {
            if (category == "Program Information")
                _tombstone.IsProgramInformationLocked = true;
            if (category == "Spending (in $) as per GC InfoBase (to be updated by CMSS)")
                _tombstone.IsSpendingLocked = true;
            if (category == "Program Tags to be Updated by Sector")
                _tombstone.IsSectorProgramTagsLocked = true;
            if (category == "Program Tags as per TBS Database and GCInfoBase")
                _tombstone.IsGCInfoBaseProgramTagsLocked = true;
            if (category == "GBA Plus")
                _tombstone.IsGBALocked = true;
            if (category == "Date of PIP Approval")
                _tombstone.IsDateOfPipApprovalLocked = true;
            if (category == "Latest Update Information")
                _tombstone.IsLatestUpdateInformationLocked = true;
            if (category == "Program Notes")
                _tombstone.IsProgramNotesLocked = true;
        }        
    }

    protected void RegisterLocks(IModelFormContext context)
    {
        if (_tombstone.IsProgramInformationLocked)
            context.RegisterCategoryLock("Program Information", true);
        if (_tombstone.IsSpendingLocked)
            context.RegisterCategoryLock("Spending (in $) as per GC InfoBase (to be updated by CMSS)", true);
        if (_tombstone.IsSectorProgramTagsLocked)
            context.RegisterCategoryLock("Program Tags to be Updated by Sector", true);
        if (_tombstone.IsGCInfoBaseProgramTagsLocked)
            context.RegisterCategoryLock("Program Tags as per TBS Database and GCInfoBase", true);        
        if (_tombstone.IsGBALocked)
            context.RegisterCategoryLock("GBA Plus", true);        
        if (_tombstone.IsDateOfPipApprovalLocked)
            context.RegisterCategoryLock("Date of PIP Approval", true);        
        if (_tombstone.IsLatestUpdateInformationLocked)
            context.RegisterCategoryLock("Latest Update Information", true);        
        if (_tombstone.IsProgramNotesLocked)
            context.RegisterCategoryLock("Program Notes", true);        
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if(firstRender){
            StateHasChanged();
        }
    }

    private async Task SaveAndLock()
    {
        _tombstone.IsProgramInformationLocked = true;
        _tombstone.IsSpendingLocked = true;
        _tombstone.IsSectorProgramTagsLocked = true;
        _tombstone.IsGCInfoBaseProgramTagsLocked = true;
        _tombstone.IsGBALocked = true;
        _tombstone.IsDateOfPipApprovalLocked = true;
        _tombstone.IsLatestUpdateInformationLocked = true;
        _tombstone.IsProgramNotesLocked = true;

        await HandleValidSubmit();

        StateHasChanged();
    }
    private async Task<PIPTombstone> ClearForm()
    {
        //CleanEditingUser();
        ResetContextChanges();
        LoadProjects();
        _tombstone = null;
        StateHasChanged();
        return await Task.FromResult((PIPTombstone)null);
    }

    public string GetDataLabel(string propName)
    {
        return Localizer[propName];
    }

    public static string ShortenString(string input, int maxLength)
    {

        if (input is null || input.Length <= maxLength)
            return input;
        var words = input.Split(" ", StringSplitOptions.RemoveEmptyEntries | StringSplitOptions.TrimEntries);
        var final = new List<string>();
        int wPos = 0;
        while (final.Sum(l => l.Length + 1) <= maxLength)
        {
            final.Add(words[wPos++]);
        }
        return string.Join(" ", final) + "...";
    }

  // Accessor functions to retrieve cell value
    private List<Func<PIPTombstone, string>> accessorFunctions = new List<Func<PIPTombstone, string>>
{
        new Func<PIPTombstone, string>(p => { return p.ProgramTitle; }),
        new Func<PIPTombstone, string>(p => { return p.LeadSector; }),
        null,
    };

    private List<Func<PIPTombstone, RenderFragment>> GetRenderers()
    {
        var powerBiTargets = Configuration["PowerBiTargets:SPI"];
        foreach(var project in _projects)
        {
            if (!string.IsNullOrEmpty(powerBiTargets))
            {
                var powerBiUrl = $"{powerBiTargets}rp:p_program_title={project.ProgramTitle.Replace(" ", "+")}&rp:p_fiscal_year_id={project.FiscalYearId}";
                project.PowerBiUrl = 
    @<a href="@powerBiUrl" target="blank">@Localizer["Open PowerBI Report"]</a>;
            }
        }

        return new List<Func<PIPTombstone, RenderFragment>>() {
            null,
            null,
            new Func< PIPTombstone, RenderFragment>(pt => { return pt.PowerBiUrl; }),    
        };
    }


    private async Task SetFormEdit(PIPTombstone project)
    {
        if (!_enableSave)
        {
            ResetContextChanges();
        }

        if (Context.ChangeTracker.HasChanges())
        {
            var messages = new List<string>() { "Data has been edited, would you like to save?" };
            await UI.ToggleModal(
    @<UserChoiceModal HeaderText="Save Data" ChoiceTextList=@messages OnDecision="(a) => OnConfirmSave(a, project)" ConfirmText="Yes" CancelText="No" />
    );
        }
        else
        {
            //if (_tombstone != null)                
            //    CleanEditingUser();         

            _tombstone = Context.Tombstones.Where(i => i.TombstoneID == project.TombstoneID).First();
            await PrepareItemForEdit(_tombstone);
            SubmitLabel = "Save";
            StateHasChanged();
        }
    }




    private async Task PrepareItemForEdit(PIPTombstone project)
    {        
        //if (project.Tombstone_ID != _tombstone.Tombstone_ID)
        var recordId = project.TombstoneID;
        _tombstone = Context.Tombstones.Where(i => i.TombstoneID == recordId).First();

        _enableSave = true;
        //if (IsRecordLocked(_tombstone))
        //{
        //    var user = await UserInformationService.GetUserAsync(_tombstone.EditingUserId);
        //    var textList = new List<string>()
        //    {
        //        $"This Program is currently being edited by {user.DisplayName}, you will not be able to save any changes"
        //    };
        //    _enableSave = false;
        //    await UI.ToggleModal(@<WarningModal OnDecision="HandleWarningDecision" WarningTextString=@textList />);
        //}
        //else
        //{
        //    _tombstone.EditingUserId = CurrentUser.Id;
        //    await Context.TrackSaveChangesAsync(AuditingService);
        //}
        _tombstone = Context.Tombstones.Where(i => i.TombstoneID == recordId).First();
        _tombstone.LastUpdatedUserName = await MSGraphService.GetUserName(_tombstone.LastUpdatedUserId, CancellationToken.None);
        if (_myModelForm != null)
        {
            var ctx = _myModelForm.ModelFormContext;
            ApplyLocks(ctx);
        }
    }

    private async void HandleWarningDecision(bool IsContinue)
    {
        await UI.ToggleModal();
        StateHasChanged();
    }

    private bool IsRecordLocked(PIPTombstone project)
    {
        return false;
        //return project == null ? false : (!string.IsNullOrEmpty(project.EditingUserId));
    }

    private void LoadProjects()
    {
        if (string.IsNullOrEmpty(_selectedFilter) || _selectedFilter == "All")
        {
            _projects = Context.Tombstones.Where(l => l.FiscalYear.FiscalYear == _fiscalYear.FiscalYear).ToList();
        }
        else
        {
            _projects = Context.Tombstones.Where(l => l.FiscalYear.FiscalYear == _fiscalYear.FiscalYear && l.LeadSector == _selectedFilter).ToList();
        }
        StateHasChanged();
    }

 

    private Task CreateNewProject()
    {
        _tombstone = new PIPTombstone() { LastUpdatedDT = DateTime.Now, DateUpdatedDT = DateTime.Now };
        StateHasChanged();
        return Task.FromResult(0);
    }

    private string getColor(PIPTombstone current)
    {
        if (current == _tombstone)
        {
            return "yellow";
        }
        return "";
    }






    private async Task GoToIndicators()
    {
        var id = _tombstone.TombstoneID;
        navigationUrl = $"/pip/indicators/{id}/{_fiscalYear.FiscalYear}";
        if (_tombstone == null || !Context.ChangeTracker.HasChanges())
            NavigationManager.NavigateTo(navigationUrl);
        else
            await HandleValidSubmit();           
    }

   

    private async Task GoToRisks()
    {
        var id = _tombstone.TombstoneID;
        navigationUrl = $"/pip/risks/{_tombstone.TombstoneID}";
        if (_tombstone == null || !Context.ChangeTracker.HasChanges())
            NavigationManager.NavigateTo(navigationUrl);
        else
            await HandleValidSubmit();          
    }

    private void ResetContextChanges()
    {
        foreach(var entry in Context.ChangeTracker.Entries())
        {
            entry.CurrentValues.SetValues(entry.OriginalValues);
            entry.State = EntityState.Unchanged;    
        }                        
    }

    private async void OnConfirmSave(bool isConfirmed, dynamic item)
    {
        await UI.ToggleModal();
        _submittingApproval = true;
        if (isConfirmed && _tombstone != null)
        {
            var timeUtc = DateTime.UtcNow;
            TimeZoneInfo easternZone = TimeZoneInfo.FindSystemTimeZoneById("Eastern Standard Time");
            
            _tombstone.LastUpdatedDT = TimeZoneInfo.ConvertTimeFromUtc(timeUtc, easternZone);
            _tombstone.DateUpdatedDT = TimeZoneInfo.ConvertTimeFromUtc(timeUtc, easternZone);
            _tombstone.LastUpdatedUserId = CurrentUser.Id;            
            _tombstone.EditingUserId = string.Empty;

            if (_tombstone.TombstoneID == 0)
            {
                _tombstone = Context.Tombstones.Add(_tombstone).Entity;
            }
            var result = await Context.TrackSaveChangesAsync(AuditingService);
            if (result < 1)
            {
                var textList = new List<string>()
                {
                    $"The record you were trying to update has been modified by another user. Please copy your changes, refresh the page and re-enter the data."
                };                
                await UI.ToggleModal(
    @<WarningModal OnDecision="HandleWarningDecision" WarningTextString=@textList />);

                await _submitApprovalInd.SignalFailure();
            }
            else
            {
                await _submitApprovalInd.SignalSuccess();
            }

        }
        else if (!isConfirmed && _tombstone != null)
        {
            ResetContextChanges();
        }

        LoadProjects();
        if (item != null)
        {            
            await PrepareItemForEdit(item);
        }
        else
        {
            await PrepareItemForEdit(_tombstone);
        }

        
        

        if (!string.IsNullOrEmpty(navigationUrl))        
            NavigationManager.NavigateTo(navigationUrl);

        StateHasChanged();
    }


    private async Task HandleValidSubmit()
    {
        var messages = new List<string>() { "Would you like to save PIP data?" };
        await UI.ToggleModal(
    @<UserChoiceModal HeaderText="Save Data" ChoiceTextList=@messages OnDecision="(a) => OnConfirmSave(a, null)" ConfirmText="Yes" CancelText="No" />
    );
    }

    //public void CleanEditingUser()
    //{
    //    if (_tombstone != null && _enableSave && !string.IsNullOrEmpty(_tombstone.EditingUserId) && _tombstone.EditingUserId == CurrentUser.Id)
    //    {
    //        try
    //        {
    //            _tombstone.EditingUserId = null;
    //            Context.SaveChanges();
    //        }
    //        catch (Exception e)
    //        {                
    //            Logger.LogDebug(e, $"Cannot clean current user in Program Inventory");
    //        }
    //    } 
    //}

    public void Dispose()     
    {        
        try
        {
            //CleanEditingUser();
        }
        catch (Exception e)
        {
            Logger.LogDebug(e, $"Cannot clean current user in Program Inventory in Dispose");
        }
        finally
        {
            Context.Dispose();            
        }
    }
}
