@inject UIControlsService UI
@inject IStringLocalizer DataLocalizer
@inject NavigationManager NavigationManager
@inject IJSRuntime JsInterop
@inject IUserInformationService UserInformationService
@inject IMSGraphService MSGraphService
@implements IDisposable
@inject IDbContextFactory<PIPDBContext> DbFactory
@inject IDatahubAuditingService AuditingService
@inject ServiceAuthManager ServiceAuthManager
@using Microsoft.Extensions.Logging 
@using Datahub.PIP.Data
@using Datahub.Application.Services.UserManagement
@inject ILogger<ProgramInventory> Logger


@page "/pip/indicators/{tombstone}/{fiscalYear}"

<AeCard class="facardForms" CardPosition="AeCard.CardStyle.Horizontal">
    <h1>Indicator And Results</h1>

    <ProgramTable tombstone="@tombstone"></ProgramTable>
</AeCard>

<AeCard class="facardForms" CardPosition="AeCard.CardStyle.Horizontal">
    <h2>Enter/Select Indicators and Results for Selected Program</h2>
    <div>
        <AeFlex Vertical id="indexFlex">



            <AePaginatedTable Accessors="accessorFunctions"
                     T="PIPIndicatorAndResults"
                     Dataset="_indicators"
                     Renderers="GetRenderers()"
                     ColorAccessor="getColor"
                     Headers="headers"
                     GridTemplateColumns="1fr 1fr 5fr 1fr"
                     OnRowClick="@SetFormEdit" 
                     Page="@_lastClicked"
                     PageSize="10"
                     @ref=_myTable />

                     <AePagination 
                    Pageable="@_myTable" 
                    OnPageClick="OnPageClick"> 
                    <LeftIcon><i class='fad fa-chevron-double-left'></i></LeftIcon> 
                    <RightIcon><i class='fad fa-chevron-double-right'></i></RightIcon>
                    </AePagination>

        </AeFlex>
        @if (_indicator == null)
        {
            <AeFlex id="buttonBar">
                <div class="icon-container" style="margin-bottom: 10px; margin-left: 5px;">

                    <FAButton Text="Add New" Icon="far fa-plus-square" onclick="e => CreateNewIndicator()" />
                </div>
            </AeFlex>
        }
    </div>
</AeCard>

<AeCard class="facardForms" CardPosition="AeCard.CardStyle.Horizontal">
    <AeFlex id="buttonBar">
        <div class="icon-container" style="margin-bottom: 10px; margin-left: 5px;">
            <FAButton Text="Tombstone" Icon="fal fa-arrow-left" onclick="e => GoToPreviousSheet()" />
        </div>
    </AeFlex>
@if (_indicator != null)
{
    @if (_indicator.IndicatorAndResultID > 0)
    {
        <h2>Editing Indicator and Result</h2>
    }
    else
    {
        <h2>Enter Outcome and Indicator Data</h2>
    }
    @foreach (var content in _markDownContent)
    {
        <AeMarkdown Content="@($"{content}")"></AeMarkdown>
    }
    <AeModelForm Model="_indicator"
                 T="PIPIndicatorAndResults"
                 OnValidSubmit="HandleValidSubmit"
                 OnCancel="ClearForm"
                 OnChange="OnChange"
                 CancelLabel="Cancel"
                 SubmitLabel="@SubmitLabel"
                 LabelForPropertyFunc="@GetDataLabel"
                 OnConfigure="OnConfigure"
                 LabelsOnTop="true" 
                 IsSectionLocksVisible="@_isUserAdmin"
                 IsSubmitEnabled="@_enableSave"
                 CheckedIcon="far fa-check"
                 AreFieldsNullable="true"
                 @ref="_myModelForm"/>
     <AeFlex>
        <div class="icon-container" style="margin-bottom: 10px; margin-left: 5px;">
            <FAButton Text="Save and Lock" @onclick="e => SaveAndLock()" Disabled=@(!_enableSave) />
            <SuccessIndicator @bind-IsLoading=@_submittingApproval @ref=@_submitApprovalInd />
        </div>
    </AeFlex>
    <AeFlex>
        <div class="icon-container" style="margin-bottom: 10px; margin-left: 5px;">
            <SuccessIndicator @bind-IsLoading=@_submittingApproval @ref=@_submitApprovalInd />
        </div>
    </AeFlex>

    <AeFlex id="buttonBar">
        <div class="icon-container" style="margin-bottom: 10px; margin-left: 5px;">
            <FAButton Text="Tombstone" Icon="fal fa-arrow-left" onclick="e => GoToPreviousSheet()" />
        </div>
    </AeFlex>
}

</AeCard>

@code {

    [Parameter]
    public string tombstone { get; set; }
    [Parameter]
    public string fiscalYear { get; set; }

    private AeModelForm<PIPIndicatorAndResults> _myModelForm;
    private const string PROJECTACRONYM = "PIP";
    private List<PIPIndicatorAndResults> _indicators;
    private PIPIndicatorAndResults _indicator;
    private List<PIPRisks> _risks = new List<PIPRisks>();
    private PIPTombstone _tombstone;
    private PIPFiscalYears _fiscalYear;
    private PIPDBContext Context;  
    private bool _enableSave = true;
    private Microsoft.Graph.Models.User CurrentUser;
    private string navigationUrl = string.Empty;
    private string SubmitLabel = "Save";
    private bool _isUserAdmin;
    private int _lastClicked = 0;
    private IPageableComponent _myTable;
    private bool _reloadOptions = true;
    private SuccessIndicator _submitApprovalInd;
    private bool _submittingApproval = false;
    private int _indicatorFiscalYear;
    private List<string> _markDownContent;
    
    private void OnPageClick(int pageIndex)
    {
        _lastClicked = pageIndex;
    }

    protected override async Task OnInitializedAsync()
    {
        Context = DbFactory.CreateDbContext();

        _markDownContent = File.ReadAllLines($@"Pages\Forms\Pip\PipFormIntro.md").ToList();
        
        _fiscalYear = Context.FiscalYears.Where(f => f.FiscalYear == fiscalYear).First();
        CurrentUser = await UserInformationService.GetCurrentGraphUserAsync();
        _isUserAdmin = await ServiceAuthManager.IsProjectAdmin(CurrentUser.Id, PROJECTACRONYM);
        // load projects
        _tombstone = Context.Tombstones.Where(p => p.TombstoneID == Convert.ToInt32(tombstone)).FirstOrDefault();
        LoadIndicators();
    }

    private void CreateNewIndicator()
    {
        _indicator = new PIPIndicatorAndResults() { PIPTombstone = _tombstone, LastUpdatedDT = DateTime.Now, DateResultCollected = DateTime.Now, DateToAchieveTargetDT = DateTime.Now, FiscalYear = _fiscalYear };
        _reloadOptions = true;
        StateHasChanged();
    }

    private void OnChange(ModelFormChangeArgs args)
    {

    }

    private void ApplyLocks(IModelFormContext context)
    { 
        ClearContextlocks(context);
        RegisterLocks(context);
    }

    private void OnConfigure(IModelFormContext context)
    {
        if (_reloadOptions)
        {
            context.RegisterOptionValueProperty<PIPIndicatorAndResults>(s => s.OutcomeLevelDESC, () => new[] { "Immediate", "Intermediate", "Ultimate", "Output" });
            context.RegisterOptionValueProperty<PIPIndicatorAndResults>(s => s.FrequencyDESC, () => new[] { "Monthly", "Bi-Monthly", "Quarterly", "Semi-Anually", "Annually", "2 Years", "3 Years", "5 Years", "Other" });
            context.RegisterOptionValueProperty<PIPIndicatorAndResults>(s => s.SourceOfIndicatorDESC, () => new[] { "Horizontal Initiative", "DRF indicator", "GC InfoBase Indicator", "TB Sub indicator", "DSDS indicator", "SDG indicator", "TPP indicator", "Internal program indicator only" });
            context.RegisterOptionValueProperty<PIPIndicatorAndResults>(s => s.SourceOfIndicator2DESC, () => new[] { "Horizontal Initiative", "DRF indicator", "GC InfoBase Indicator", "TB Sub indicator", "DSDS indicator", "SDG indicator", "TPP indicator", "Internal program indicator only" });
            context.RegisterOptionValueProperty<PIPIndicatorAndResults>(s => s.SourceOfIndicator3DESC, () => new[] { "Horizontal Initiative", "DRF indicator", "GC InfoBase Indicator", "TB Sub indicator", "DSDS indicator", "SDG indicator", "TPP indicator", "Internal program indicator only" });
            context.RegisterOptionValueProperty<PIPIndicatorAndResults>(s => s.IndicatorCategoryDESC, () => new[] { "Quantitative", "Qualitative" });
            context.RegisterOptionValueProperty<PIPIndicatorAndResults>(s => s.IndicatorDirectionDESC, () => new[] { "Increase", "Decrease", "Maintain" });
            context.RegisterOptionValueProperty<PIPIndicatorAndResults>(s => s.DataTypeDESC, () => new[] { "Number", "Non numeric", "Dollar", "Percent" });
            context.RegisterOptionValueProperty<PIPIndicatorAndResults>(s => s.TargetTypeDESC, () => new[] { "Minimum value(at least)", "Maximum value(at most)", "Closed range", "Exact(single) value" });
            context.RegisterOptionValueProperty<PIPIndicatorAndResults>(s => s.TargetMet, () => new[] { "On Track to be achieved in the future", "Met", "Not Met", "Not on track to meet target", "Not Available – To be used where target was not set" });


            context.RegisterOptionValueProperty<PIPIndicatorAndResults>(p => p.CannotReportOnIndicator, () => PIPConstants.NOTREPORTABLEINDICATOR);
            context.RegisterOptionValueProperty<PIPIndicatorAndResults>(s => s.CanReportOnIndicator, () => PIPConstants.YESNO);

            context.RegisterFieldNotes<PIPIndicatorAndResults>(s => s.OutcomeLevelDESC, "Select the corresponding level of the logic model that the indicator supports. If the results annex outcome level happens to differ from the logic model, please use the outcome level as committed to in the TB Submission.");
            context.RegisterFieldNotes<PIPIndicatorAndResults>(s => s.ProgramOutputOrOutcomeDESC, "Enter an outcome that is a describable or measurable change that is derived from an initiative’s (program or project) outputs or lower-level outcomes.");
            context.RegisterFieldNotes<PIPIndicatorAndResults>(s => s.IndicatorDESC, "A means of measuring actual outcomes and outputs. It can be qualitative or quantitative, and is composed of a unit of measure, a unit of analysis and a context.");
            context.RegisterFieldNotes<PIPIndicatorAndResults>(s => s.SourceOfIndicatorDESC, "Select all that apply");
            context.RegisterFieldNotes<PIPIndicatorAndResults>(s => s.DRFIndicatorNo, "Optional");
            context.RegisterFieldNotes<PIPIndicatorAndResults>(s => s.BranchOptionalDESC, "Optional");
            context.RegisterFieldNotes<PIPIndicatorAndResults>(s => s.SubProgram, "Include the name of the small-p program this indicator aligns to.");
            context.RegisterFieldNotes<PIPIndicatorAndResults>(s => s.IndicatorCategoryDESC, "Select whether the indicator is quantitative (numeric) or qualitative (non-numeric)");
            context.RegisterFieldNotes<PIPIndicatorAndResults>(s => s.IndicatorDirectionDESC, "Select whether the indicator seeks to maintain or an increase/decrease");

            context.RegisterCategoryNotes("Methodology", "Explains in detail how the data would be interpreted in relationship with its targets and baseline, including the formula, its calculation method and all necessary definitions.");
            context.RegisterFieldNotes<PIPIndicatorAndResults>(s => s.IndicatorRationaleDESC, "Explain how the indicator relates to the output/outcome. How it is a strong measure of the outcome?");
            context.RegisterFieldNotes<PIPIndicatorAndResults>(s => s.IndicatorCalculationFormulaNUM, "Include the formula used to calculate the indicator result.");
            context.RegisterFieldNotes<PIPIndicatorAndResults>(s => s.MeasurementStrategy, "Explain the process to gather the data required for the formula/calculation.");
            context.RegisterFieldNotes<PIPIndicatorAndResults>(s => s.BaselineDESC, "The starting point. Past performance information used to provide perspective when establishing the target.");
            context.RegisterFieldNotes<PIPIndicatorAndResults>(s => s.DataSourceDESC, "Enter the data source for the indicator. Data sources are defined as the individuals, organizations, or documents from which data about your indicators will be obtained.");
            context.RegisterFieldNotes<PIPIndicatorAndResults>(s => s.FrequencyDESC, "Select the frequency of data collection against the indicator.");
            context.RegisterFieldNotes<PIPIndicatorAndResults>(s => s.DataTypeDESC, "Select from the drop down menu, whether this indicator has a numeric or non-numeric data type. This enables the ability to sort the numeric versus non-numeric targets and results.");
            context.RegisterFieldNotes<PIPIndicatorAndResults>(s => s.MethodologyHowWillTheIndicatorBeMeasured, "Additional defintions/information necessary to understand how the data will be collected for this indicator. Sectors may also insert a link a methodology sheet in this column.");
            context.RegisterCategoryNotes("Target", "The level of performance the Program plans to achieve within a specified time. Target must be reflective of the indicator (same unit of measure) and must include a date to achieve the target. Use the following question as a guide to the target that is ambitious yet achievable: How is success defined for the indicator?");
            context.RegisterFieldNotes<PIPIndicatorAndResults>(s => s.Explanation, "Please provide additional context for the results achieved. This is required for targets not been met, to be achieved in the future, or if the result is significantly higher than the target. There is a character limit of 1000 for this cell in order to meet GC InfoBase character limit.");

            RegisterLocks(context);
            _reloadOptions = false;
        }
        else
        {
            UpdateLocks(context);
        }
    }

    protected void ClearContextlocks(IModelFormContext context)
    {        
        context.RegisterCategoryLock("Target", false);
        context.RegisterCategoryLock("Actual Results", false);
        context.RegisterCategoryLock("Latest Update Information", false);
        context.RegisterCategoryLock("Methodology", false);
        context.RegisterCategoryLock("Indicator Details", false);
        context.RegisterCategoryLock("Indicator Status", false);
    }

    protected void UpdateLocks(IModelFormContext context)
    {
        var lockedCategories = context.LockedCategories;
        _indicator.IsActualResultsLocked = false;
        _indicator.IsLatestUpdateLocked = false;
        _indicator.IsMethodologyLocked = false;
        _indicator.IsTargetLocked = false;
        _indicator.IsIndicatorDetailsLocked = false;
        _indicator.IsIndicatorStatusLocked = false;
        _indicator.IsFiscalYearLocked = true;

        foreach (var category in lockedCategories)
        {
            if (category == "Methodology")
                _indicator.IsMethodologyLocked = true;
            if (category == "Latest Update Information")
                _indicator.IsLatestUpdateLocked = true;
            if (category == "Actual Results")
                _indicator.IsActualResultsLocked = true;
            if (category == "Target")
                _indicator.IsTargetLocked = true;
            if (category == "Indicator Details")
                _indicator.IsIndicatorDetailsLocked = true;
            if (category == "Indicator Status")
                _indicator.IsIndicatorStatusLocked = true;

        }        
    }
    protected void RegisterLocks(IModelFormContext context)
    {

        if (_indicator.IsTargetLocked)
            context.RegisterCategoryLock("Target", true);
        if (_indicator.IsActualResultsLocked)
            context.RegisterCategoryLock("Actual Results", true);
        if (_indicator.IsLatestUpdateLocked)
            context.RegisterCategoryLock("Latest Update Information", true);
        if (_indicator.IsMethodologyLocked)
            context.RegisterCategoryLock("Methodology", true);
        if (_indicator.IsIndicatorStatusLocked)
            context.RegisterCategoryLock("Indicator Status", true);        
        if (_indicator.IsIndicatorDetailsLocked)
            context.RegisterCategoryLock("Indicator Details", true);
        if (_indicator.IsFiscalYearLocked)
            context.RegisterCategoryLock("Fiscal Year", true);                    
    }


    protected override void OnAfterRender(bool firstRender)
    {
        if(firstRender){
            StateHasChanged();
        }
    }

    private async Task SaveAndLock()
    {
        _indicator.IsActualResultsLocked = true;
        _indicator.IsLatestUpdateLocked = true;
        _indicator.IsMethodologyLocked = true;
        _indicator.IsTargetLocked = true;
        _indicator.IsIndicatorDetailsLocked = true;
        _indicator.IsIndicatorStatusLocked = true;
        _indicator.IsFiscalYearLocked = true;


        await HandleValidSubmit();
        
        StateHasChanged();
    }

    private async Task<PIPIndicatorAndResults> ClearForm()
    {
        //CleanEditingUser();
        ResetContextChanges();
        LoadIndicators();
        _indicator = null;
        StateHasChanged();
        return await Task.FromResult((PIPIndicatorAndResults)null);
    }

    private List<Func<PIPIndicatorAndResults, RenderFragment>> GetRenderers()
    {
        if (_isUserAdmin)
        {
        return new List<Func<PIPIndicatorAndResults, RenderFragment>>
            {
                indicator => 
    @<div><b>@indicator.IndicatorStatus</b></div>,
                null,
                null,
                indicator => 
            @<div class="help icon-container" @onclick="() => DeleteRecord(indicator.IndicatorAndResultID)"><i class="far fa-trash-alt"></i></div>
         };
        }

        return new List<Func<PIPIndicatorAndResults, RenderFragment>>
            {
                indicator => @<div><b>@indicator.IndicatorStatus</b></div>,
                null,
                null,
                null
            };
    }


    private async void OnConfirmDelete(bool isConfirmed, dynamic item)
    {
        if (isConfirmed && _indicator != null)
        {
            _indicator.IsDeleted = true;
            _indicator.UserIdWhoDeleted = CurrentUser.Id;
            await Context.TrackSaveChangesAsync(AuditingService);
        }

        _indicator = null;
        LoadIndicators();
        await UI.ToggleModal();        

        StateHasChanged();
    }


    private async void DeleteRecord(int recordId)
    {
        var messages = new List<string>() { "Would you like to delete this record?" };
        await UI.ToggleModal(
    @<UserChoiceModal HeaderText="Save Data" ChoiceTextList=@messages OnDecision="(a) => OnConfirmDelete(a, recordId)" ConfirmText="Yes" CancelText="No"  />
    );
    }

    private List<Func<PIPIndicatorAndResults, string>> accessorFunctions = new List<Func<PIPIndicatorAndResults, string>>
{
        new Func<PIPIndicatorAndResults, string>(p => { return p.IndicatorStatus; }),
        new Func<PIPIndicatorAndResults, string>(p => { return p.OutcomeLevelDESC; }),
        new Func<PIPIndicatorAndResults, string>(p => { return p.IndicatorDESC; }),
        null
    };

    private async Task PrepareItemForEdit(PIPIndicatorAndResults indicatorAndResults)
    {
        var recordId = indicatorAndResults.IndicatorAndResultID;
        _indicator = Context.IndicatorAndResults.Where(i => i.IndicatorAndResultID == recordId).First();

        _enableSave = true;
        //    if (IsRecordLocked(_indicator))
        //    {
        //        var user = await UserInformationService.GetUserAsync(_indicator.EditingUserId);
        //        var textList = new List<string>()
        //        {
        //            $"This Program is currently being edited by {user.DisplayName}, you will not be able to save any changes"
        //        };
        //        _enableSave = false;
        //        await UI.ToggleModal(
        //@<WarningModal OnDecision="HandleWarningDecision" WarningTextString=@textList />
        //);
        //    }
        //    else
        //    {
        //        _indicator.EditingUserId = CurrentUser.Id;
        //        await Context.TrackSaveChangesAsync(AuditingService);
        //    }
        _indicator = Context.IndicatorAndResults.Where(i => i.IndicatorAndResultID == recordId).First();
        _indicator.LastUpdatedUserName = await MSGraphService.GetUserName(_indicator.LastUpdatedUserId, CancellationToken.None);
        _indicatorFiscalYear = _indicator.FiscalYearId;
        if (_myModelForm != null)
        {
            var ctx = _myModelForm.ModelFormContext;
            ApplyLocks(ctx);
        }

    }
    private async void HandleWarningDecision(bool IsContinue)
    {
        await UI.ToggleModal();
        StateHasChanged();
    }

    private void ResetContextChanges()
    {
        foreach(var entry in Context.ChangeTracker.Entries())
        {
            entry.CurrentValues.SetValues(entry.OriginalValues);
            entry.State = EntityState.Unchanged;
        }                        
    }

    
    private async void OnConfirmSave(bool isConfirmed, dynamic item)
    {
        await UI.ToggleModal();
        _submittingApproval = true;
        if (isConfirmed && _indicator != null)
        {
            var timeUtc = DateTime.UtcNow;
            TimeZoneInfo easternZone = TimeZoneInfo.FindSystemTimeZoneById("Eastern Standard Time");

            _indicator.LastUpdatedDT = TimeZoneInfo.ConvertTimeFromUtc(timeUtc, easternZone);
            _indicator.DateUpdatedDT = TimeZoneInfo.ConvertTimeFromUtc(timeUtc, easternZone);
            _indicator.LastUpdatedUserId = CurrentUser.Id;
            _indicator.EditingUserId = string.Empty;
            _indicator.IsFiscalYearLocked = true;
            _indicator.FiscalYearId = _indicatorFiscalYear;
            if (_indicator.IndicatorAndResultID == 0)
            {
                _indicator = Context.IndicatorAndResults.Add(_indicator).Entity;
            }
            var result = await Context.TrackSaveChangesAsync(AuditingService);
            if (result < 1)
            {
                var textList = new List<string>()
                {
                    $"The record you were trying to update has been modified by another user. Please copy your changes, refresh the page and re-enter the data."
                };                
                await UI.ToggleModal(
    @<WarningModal OnDecision="HandleWarningDecision" WarningTextString=@textList />);

                await _submitApprovalInd.SignalFailure();
            }
            else
            {
                await _submitApprovalInd.SignalSuccess();
            }
        }
        else if (!isConfirmed && _indicator != null)
        {
            ResetContextChanges();    
        }

        LoadIndicators();
        if (item != null)
        {
            await PrepareItemForEdit(item);
        }
        else
        {
            await PrepareItemForEdit(_indicator);
        }

        

        if (!string.IsNullOrEmpty(navigationUrl))        
            NavigationManager.NavigateTo(navigationUrl);
        

        StateHasChanged();
    }

      private void LoadIndicators()
    {            
        _indicators = Context.IndicatorAndResults.OrderBy(o => o.IndicatorDESC).Where(p => p.PIPTombstone.TombstoneID == _tombstone.TombstoneID && !p.IsDeleted && p.FiscalYear == _fiscalYear).ToList();
    }

    // public void CleanEditingUser()
    //{
    //    if (_indicator != null && _enableSave && !string.IsNullOrEmpty(_indicator.EditingUserId) && _indicator.EditingUserId == CurrentUser.Id)
    //    {                        
    //        try
    //        {
    //            _indicator.EditingUserId = null;
    //            Context.SaveChanges();
    //        }
    //        catch (Exception e)
    //        {                
    //            Logger.LogDebug(e, $"Cannot clean current user in IndicatorAndResults");
    //        }
    //    } 
    //}

    private async Task HandleValidSubmit()
    {
        var messages = new List<string>() { "Would you like to save indicator data?" };
        await UI.ToggleModal(
        @<UserChoiceModal HeaderText="Save Data" ChoiceTextList=@messages OnDecision="(a) => OnConfirmSave(a, null)" ConfirmText="Yes" CancelText="No"  />);
    }

    private async Task GoToNextSheet()
    {
        navigationUrl = $"/pip/risks/{_tombstone.TombstoneID}";
        if (_indicator == null || !Context.ChangeTracker.HasChanges())
            NavigationManager.NavigateTo(navigationUrl);
        else
            await HandleValidSubmit();
    }

    private async Task GoToPreviousSheet()
    {
        navigationUrl = $"/pip/programs/{_tombstone.TombstoneID}";
        if (_indicator == null || !Context.ChangeTracker.HasChanges())
            NavigationManager.NavigateTo(navigationUrl);
        else
            await HandleValidSubmit();        
    }


    private async Task SetFormEdit(PIPIndicatorAndResults indicator)
    {
        if (!_enableSave)
        {
            ResetContextChanges();
        }

        if (Context.ChangeTracker.HasChanges())
        {
            var messages = new List<string>() { "Data has been edited, would you like to save?" };
            await UI.ToggleModal(@<UserChoiceModal HeaderText="Save Data" ChoiceTextList=@messages OnDecision="(a) => OnConfirmSave(a, indicator)" ConfirmText="Yes" CancelText="No" />
    );
        }
        else
        {
            //if (_indicator != null)
            //    CleanEditingUser();

            _indicator = Context.IndicatorAndResults.Where(i => i.IndicatorAndResultID == indicator.IndicatorAndResultID).First();
            await PrepareItemForEdit(_indicator);

            StateHasChanged();
        }
    }



    private void UpdateRisks()
    {
        _risks.Clear();
        _risks = Context.Risks.Include(r => r.PIPIndicatorRisks).ToList();
    }

    private string getColor(PIPIndicatorAndResults current)
    {
        if (current == _indicator)
        {
            return "yellow";
        }
        return "";
    }



    public string GetDataLabel(string propName)
    {
        return DataLocalizer[propName];
    }

    private List<string> headers = new List<string>
{
        "Status", "Outcome Level", "Indicator", "Admin Actions"
    };



    private bool IsRecordLocked(PIPIndicatorAndResults indicator)
    {
        //return indicator == null ? false : (!string.IsNullOrEmpty(indicator.EditingUserId));
        return false;
    }

    public void Dispose()     
    {        
        try
        {
            //CleanEditingUser();
        }
        catch (Exception e)
        {
            Logger.LogDebug(e, $"Cannot clean current user in IndicatorAndResults in Dispose");
        }
        finally
        {
            Context.Dispose();            
        }
    }


}
