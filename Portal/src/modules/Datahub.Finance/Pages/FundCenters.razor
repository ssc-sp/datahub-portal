@inject IStringLocalizer DataLocalizer
@implements IDisposable
@inject IDbContextFactory<FinanceDBContext> DbFactory
@inject NavigationManager NavigationManager
@inject IJSRuntime JsInterop
@inject ServiceAuthManager ServiceAuthManager
@inject IUserInformationService UserInformationService
@page "/finance/fundcenters"
@using System.Security.Claims
@using Datahub.Finance.Data

<Datahub.Core.Components.Form.MudFormTemplate 
        T="FundCenter" 
        U="FinanceDBContext"
        Metadata="@_formMetadata" 
        HandleSubmit="HandleValidSubmit"
        OnConfigureForms="OnConfigure"
        OnChangeForms="OnChange"
        CreateNewRecord="CreateNewProject"
        SelectedRecord="@_fundcenter"
        SetFormEditRecord="SetFormEdit"    
        HandleFilterChange="HandleFilterChange"
        SortAccessors="@_sortAccessors"
        Context=@Context/>

@code {

    private const string PROJECTACRONYM = "FINGC";
    private FormMetadata<FundCenter> _formMetadata = new();

    private List<FundCenter> _fundcenters;
    private FundCenter _fundcenter;
    //private List<Sector> _sectorLookup;
    private Dictionary<string, Func<FundCenter, string>> _sortAccessors = new();
    private FinanceDBContext Context;
    private Microsoft.Graph.User _user = null!;
    private ClaimsPrincipal _claimsUser = null;
    private bool _isUserAdmin;
    private List<HierarchyLevel> _sectors = new();
    private List<HierarchyLevel> _branches = new();    
    private List<HierarchyLevel> _divisions = new();
    private List<FiscalYear> _fiscalYears = new();
    private List<string> _branchAccess = new();
    private string _searchFilter = string.Empty;
    private List<string> _headers = new();
    private string _next;

    private int _lastClicked = 0;


    private void OnPageClick(int pageIndex)
    {
        _lastClicked = pageIndex;
    }

    protected override async Task OnInitializedAsync()
    {
        // load projects
        _user = await UserInformationService.GetCurrentGraphUserAsync();
        _claimsUser = (await UserInformationService.GetAuthenticatedUser());
        Context = DbFactory.CreateDbContext();
        LoadSortExpressions();
        _branchAccess = Context.BranchAccess.Where(u => u.User.ToLower() == _user.Mail.ToLower()).Select(r => r.BranchFundCenter).ToList();
        _isUserAdmin = await ServiceAuthManager.IsProjectAdmin(_user.Id, PROJECTACRONYM);
        _fiscalYears = Context.FiscalYears.ToList();
        if(_fiscalYears.Any() && _fiscalYears[0] is not null)
            _fiscalYears.Insert(0, null);
        _next = DataLocalizer["Next"];
        _headers = new List<string>
        {
            DataLocalizer["FiscalYear"], DataLocalizer["Sector"], DataLocalizer["Branch"], DataLocalizer["Division"], DataLocalizer["AttritionRate"]
        };

        LoadData(_searchFilter);
    }

    private void LoadData(string searchfilter)
    {
        _fundcenters = Context.FundCenters.Include(f => f.Sector).Include(f => f.Branch).Include(f => f.Division).ToList();

        var isUserAdmin = _claimsUser.IsInRole($"{PROJECTACRONYM}-admin");
        if (!isUserAdmin)
        {
            _fundcenters = _fundcenters.Where(x => _branchAccess.Any(branchcode => branchcode == x.Branch.FCCode)).ToList();
        }
        var fundcenters = _fundcenters;
        if (!string.IsNullOrWhiteSpace(searchfilter))
        {
            fundcenters = _fundcenters.Where(fundcenter =>
            {
                if (string.IsNullOrWhiteSpace(searchfilter))
                    return true;
                if (fundcenter.Division.FundCenterModifiedEnglish.Contains(searchfilter, StringComparison.OrdinalIgnoreCase))
                    return true;
                if (fundcenter.Branch.FundCenterModifiedEnglish.Contains(searchfilter, StringComparison.OrdinalIgnoreCase))
                    return true;
                if (fundcenter.Sector.FundCenterModifiedEnglish.Contains(searchfilter, StringComparison.OrdinalIgnoreCase))
                    return true;
                return false;
            }).ToList();
        }
        _formMetadata.Header = DataLocalizer["Integrated Business Planning - Financial Information"];
        _formMetadata.HeaderSubText = DataLocalizer[@"Select your division from entries below or use the search bar to search for your division by Fund Center number of name. Use the 'Division Description' field to provide a description of the type of work your division provides"];
        _formMetadata.SubHeader = DataLocalizer["FC Details"];
        _formMetadata.DataSet = fundcenters;
        _formMetadata.AccessorFunctions = accessorFunctions;
        _formMetadata.NavigateUrls = buttonFunctions;
        _formMetadata.Headers = _headers;
        _formMetadata.AllowSearch = true;
        _formMetadata.GridTemplateColumns = "3fr 6fr 6fr 6fr 3fr";
        _formMetadata.IsSubmitEnabled = true;
        _formMetadata.IsAddEnabled = false;
    }

    private List<Func<FundCenter, (string, string)>> buttonFunctions = new List<Func<FundCenter, (string, string)>>
    {
        new Func<FundCenter, (string, string)>(p => { return ("Next" , $"/finance/forecasts/{p.FundCenter_ID.ToString()}"); }),
    };

    private async Task GoToNextSheet()
    {
        await HandleValidSubmit();
        // NavigationManager.NavigateTo($"/finance/budgets/{sector.SectorBranch_ID}");
    }

    private List<Func<FundCenter, string>> accessorFunctions = new List<Func<FundCenter, string>>
    {
        new Func<FundCenter, string>(p => { return p.FiscalYear?.Year ?? "N/A"; }),
        new Func<FundCenter, string>(p => { return p.Sector?.FundCenterModifiedEnglish ?? "N/A"; }),
        new Func<FundCenter, string>(p => { return p.Branch?.FundCenterModifiedEnglish ?? "N/A"; }),
        new Func<FundCenter, string>(p => { return p.Division?.FundCenterModifiedEnglish ?? "N/A"; }),
        new Func<FundCenter, string>(p => { return $"{p.AttritionRate.ToString()}%"; }),
    };

    private void LoadSortExpressions()
    { 
        _sortAccessors.Add("branch", t => t.Branch.FundCenterNameEnglish);
        _sortAccessors.Add("sector", t => t.Sector.FundCenterNameEnglish);
        _sortAccessors.Add("division", t => t.Division.FundCenterNameEnglish);
    }


    private string getColor(FundCenter current)
    {
        if (current == _fundcenter)
        {
            return "yellow";
        }
        return "";
    }

    private void SetFormEdit(FundCenter project)
    {
        _fundcenter = project;
        StateHasChanged();
    }

    private void CreateNewProject()
    {
        //var defaultBranch = _sectorLookup.Where(s => s.SectorId == 1).First().Branches.Where(b => b.BranchId == 1).First();
        _fundcenter = new FundCenter() { Last_Updated_DT = DateTime.Now, Created_DT = DateTime.Now, Created_UserId = _user.Mail, Last_Updated_UserId = _user.Mail, Sector = null };
        RefreshBranches(null, null);
        RefreshDivisions(null, null);
        StateHasChanged();
    }

    private async Task HandleValidSubmit()
    {

        if (_fundcenter != null)
        {
            if (_fundcenter.FundCenter_ID == 0)
            {
                _fundcenter = Context.FundCenters.Add(_fundcenter).Entity;
            }
            _fundcenter.Last_Updated_DT = DateTime.Now;
            await Context.SaveChangesAsync();
            LoadData(_searchFilter);
            _fundcenter = null;
        }


        StateHasChanged();
    }

    private async Task<FundCenter> ClearForm()
    {
        _fundcenter = null;
        StateHasChanged();
        return await Task.FromResult((FundCenter)null);
    }

    private string GetDataLabel(string propName)
    {
        return DataLocalizer[propName];
    }

    private List<HierarchyLevel> GetSectors()
    {
        if (!_sectors.Any())
            _sectors = Context.HierarchyLevels.Where(p => p.Level == 2 && p.IsActive).ToList();
        if (_sectors[0] is not null)
            _sectors.Insert(0, null);
        return _sectors;
    }

    private List<HierarchyLevel> GetBranches()
    {        
        if (!_branches.Any())
        {
            RefreshBranches(null, null);
        }
        return _branches;
    }

    private List<HierarchyLevel> GetDivisions()
    {
        if (!_divisions.Any())
        {
            RefreshDivisions(null, null);
        }
        return _divisions;
    }

    private void OnConfigure(MudBlazor.Forms.IModelFormContext context)
    {

        context.RegisterOptionValueProperty<FundCenter, FiscalYear>(l => l.FiscalYear, p => p?.Year ?? "N/A", () => _fiscalYears);
        context.RegisterOptionValueProperty<FundCenter, HierarchyLevel>(l => l.Sector, p => p?.FundCenterNameEnglish ?? "N/A", () => GetSectors(), s => RefreshBranches(s, context));
        context.RegisterOptionValueProperty<FundCenter, HierarchyLevel>(l => l.Branch, p => p?.FundCenterNameEnglish ?? "N/A", () => GetBranches(), s => RefreshDivisions(s, context));
        context.RegisterOptionValueProperty<FundCenter, HierarchyLevel>(l => l.Division, p => p?.FundCenterNameEnglish ?? "N/A", () => GetDivisions());

        context.RegisterFieldNotes<FundCenter>(f => f.AttritionRate, @"Identify the attrition % for your division. This % will be applied to all forecasted salaries on the SFT Forecast page. Attrition represents an estimated percentage of salary costs currently forecasted that will likely not materialize due to unplanned vacancies (the gap between unplanned departure and replacement of an employee).");
    }


    private void RefreshDivisions(HierarchyLevel branch, IModelFormContext context)
    {
        if (branch is not null)
        {
            _divisions.Clear();
            _divisions = Context.HierarchyLevels.Where(b => b.ParentCode == branch.FCCode).ToList();
            _divisions.Insert(0, null);
        }
        else
        {
            _divisions = new() { null };
        }

        if (context is not null)
        {
            context.RefreshOptions<FundCenter>(f => f.Division);
        }
    }

    private void RefreshBranches(HierarchyLevel sector, IModelFormContext context)
    {
        if (sector is not null)
        {
            _branches.Clear();
            _branches = Context.HierarchyLevels.Where(b => b.ParentCode == sector.FCCode).ToList();
            _branches.Insert(0, null);
        }
        else
        {
            _branches = new() { null };
        }

        if (context is not null)
        {
            context.RefreshOptions<FundCenter>(f => f.Branch);
        }
    }


    private async void HandleFilterChange(string selection)
    {
        _searchFilter = selection;
        LoadData(_searchFilter);
        await InvokeAsync(StateHasChanged);
    }

    private void OnChange(ModelFormChangeArgs args)
    {
        OnConfigure(args.Context);
    }

    public void Dispose() 
    { 
        Context.Dispose(); 
    }
}
