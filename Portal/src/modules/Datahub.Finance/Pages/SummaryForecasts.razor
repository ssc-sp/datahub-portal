@inject IStringLocalizer Localizer
@implements IDisposable
@inject IDbContextFactory<FinanceDBContext> DbFactory
@inject NavigationManager NavigationManager
@inject IJSRuntime JsInterop
@inject ServiceAuthManager ServiceAuthManager
@inject IUserInformationService UserInformationService
@inject IDialogService DialogService
@inject IDatahubAuditingService AuditingService
@page "/finance/summaryforecasts/{fundcenterId}"
@using MudBlazor
@using Datahub.Finance.Data
@if (!string.IsNullOrEmpty(_branch))
{
    <Datahub.Finance.Components.AccessControl Branch="@_branch" Email="@_user.Mail" IsValid=@AllowAccess></Datahub.Finance.Components.AccessControl>
}

@if (_isAuthorized)
{
    <MudCard>    
        <MudCardContent>
            <MudTable Items="@_fundCenters" Hover="true" Loading="@_isLoading">
                <ToolBarContent>
                    <MudText Typo="Typo.h6">FC Details</MudText>
                </ToolBarContent>
                <HeaderContent>
                    <MudTh>@Localizer["Sector"]</MudTh>
                    <MudTh>@Localizer["Branch"]</MudTh>
                    <MudTh>@Localizer["Division"]</MudTh>
                    <MudTh>@Localizer["AttritionRate"]</MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd>@context.Sector?.FundCenterModifiedEnglish</MudTd>
                    <MudTd>@context.Branch?.FundCenterModifiedEnglish</MudTd>
                    <MudTd>@context.Division?.FundCenterModifiedEnglish</MudTd>
                    <MudTd>@Localizer[($"{context.AttritionRate.ToString()}%")]</MudTd>
                </RowTemplate>
            </MudTable>
        </MudCardContent>
    </MudCard>

    <Datahub.Core.Components.Form.MudFormTemplate T="SummaryForecast"
                                         U="FinanceDBContext"
        Metadata="@_formMetadata" 
        HandleSubmit="HandleValidSubmit"
        OnConfigureForms="OnConfigure"
        OnChangeForms="OnChange"
        CreateNewRecord="CreateNewProject"
        SelectedRecord="@_summaryForecast"
        SetFormEditRecord="SetFormEdit"
        DeleteRecord="DeleteRecord"
        HandleFilterChange="HandleFilterChange"
        SortAccessors="@_sortAccessors"
        Context=@Context
        @key=_formMetadata/>


    <MudCard>
        <MudCardContent>
            <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="@(() => NavigationManager.NavigateTo($"finance/forecasts/{_fundCenters[0].FundCenterID}"))">Back</MudButton>
        </MudCardContent>
    </MudCard>
}

@code {

    [Parameter]
    public string fundcenterId { get; set; }

    private const string PROJECTACRONYM = "FINIBP";
    private bool _isAuthorized = false;
    private string _branch = string.Empty;
    private FinanceDBContext Context;
    private Microsoft.Graph.Models.User _user = null!;
    private bool _isUserAdmin;
    private bool _isLoading = true;
    private bool _isNew;
    private string _searchFilter = string.Empty;
    private int _lastClicked = 0;

    private List<FundCenter> _fundCenters;
    private List<SummaryForecast> _summaryForecasts;
    private SummaryForecast _summaryForecast;
    private Dictionary<string, Func<SummaryForecast, string>> _sortAccessors = new();
    private FormMetadata<SummaryForecast> _formMetadata = new();
    private List<string> _headers = new();

    private void OnPageClick(int pageIndex)
    {
        _lastClicked = pageIndex;
    }

    protected override async Task OnInitializedAsync()
    {
        // load projects
        Context = DbFactory.CreateDbContext();
        LoadSortExpressions();
        _user = await UserInformationService.GetCurrentGraphUserAsync();
        _isUserAdmin = await ServiceAuthManager.IsProjectAdmin(_user.Id, PROJECTACRONYM);
        _headers = new List<string>()
        {
            Localizer["Fund"],
            Localizer["Key_Activity"],
            Localizer["Budget"],
            Localizer["FTE_Sum"],
            Localizer["SFT_Forecast_Gross"],
            Localizer["SFT With Attrition"],
            Localizer["THC"],
            Localizer["Other_OnM"],
            Localizer["Personel"],
            Localizer["Non_Personel"],
            Localizer["Grants"],
            Localizer["Contribution"],
            Localizer["Total Forecast"]
        };
        LoadData(_searchFilter);
        _isLoading = false;
    }

    private void LoadData(string searchfilter)
    {
        _fundCenters = Context.FundCenters.Include(f => f.Sector).Include(f => f.Branch).Include(f => f.Division).Where(f => f.FundCenterID.ToString() == fundcenterId).ToList();
        _branch = _fundCenters[0].Branch.FCCode;
        _summaryForecasts = Context.SummaryForecasts.Where(f => f.FundCenter == _fundCenters[0] && !f.IsDeleted).ToList();
        //SET Non-db Dropdowns
        _summaryForecasts.ForEach(c => { if (c.KeyActivity != null) { c.KAValues = Finance_Constants.Key_Activities.Where(p => p.Id == c.KeyActivity.GetValueOrDefault()).SingleOrDefault(); } }); 
   
        _formMetadata.Header = string.Empty;
        _formMetadata.SubHeader = Localizer["Forecast by Vote"];
        _formMetadata.DataSet = _summaryForecasts; //change when filters added
        _formMetadata.AccessorFunctions = accessorFunctions;        
        _formMetadata.Headers = _headers;
        _formMetadata.AllowDelete = true;
        _formMetadata.NavigateUrls = new List<Func<SummaryForecast, (string, string)>>();
        _formMetadata.IsSubmitEnabled = true;
    }
    private void AllowAccess(bool isChecked)
    {
        _branch = string.Empty;
        _isAuthorized = true;
    }
    private List<Func<SummaryForecast, string>> accessorFunctions = new List<Func<SummaryForecast, string>>
    {
        new Func<SummaryForecast, string>(p => { return p.Fund ?? ""; }),
        new Func<SummaryForecast, string>(p => { return p.KAValues?.EnglishText ?? "N/A"; }),
        new Func<SummaryForecast, string>(p => { return p.Budget == null ? "$0.00" : p.Budget.Value.ToString("C"); }),
        new Func<SummaryForecast, string>(p => { return p.FTESum == null ? "0" : p.FTESum.ToString(); }),
        new Func<SummaryForecast, string>(p => { return p.SFTForecastGross == null ? "$0.00" : p.SFTForecastGross.Value.ToString("C"); }),
        new Func<SummaryForecast, string>(p => { return p.SFTForecast == null ? "$0.00" : p.SFTForecast.Value.ToString("C"); }),
        new Func<SummaryForecast, string>(p => { return p.THC == null ? "$0.00" : p.THC.Value.ToString("C"); }),
        new Func<SummaryForecast, string>(p => { return p.OtherOnM == null ? "$0.00" : p.OtherOnM.Value.ToString("C"); }),
        new Func<SummaryForecast, string>(p => { return p.Personel == null ? "$0.00" : p.Personel.Value.ToString("C"); }),
        new Func<SummaryForecast, string>(p => { return p.NonPersonel == null ? "$0.00" : p.NonPersonel.Value.ToString("C"); }),
        new Func<SummaryForecast, string>(p => { return p.Grants == null ? "$0.00" : p.Grants.Value.ToString("C"); }),
        new Func<SummaryForecast, string>(p => { return p.Contribution == null ? "$0.00" : p.Contribution.Value.ToString("C"); }),
        new Func<SummaryForecast, string>(p => { return p.TotalForecast == null ? "$0.00" : p.TotalForecast.Value.ToString("C"); }),
    };

    private void LoadSortExpressions()
    { 
        //_sortAccessors.Add("branch", t => t.Branch.FundCenterNameEnglish);
        //_sortAccessors.Add("sector", t => t.Sector.FundCenterNameEnglish);
        //_sortAccessors.Add("division", t => t.Division.FundCenterNameEnglish);
    }



    private void SetFormEdit(SummaryForecast project)
    {
        _summaryForecast = project;
        _isNew = false;
        StateHasChanged();
    }

    private async Task DeleteRecord(SummaryForecast forecast)
    {
        if (forecast.Fund == "1001")
        {
            bool? result = await DialogService.ShowMessageBox(
                "Error",
                "This Fund cannot be deleted",
                yesText: "Ok");

        }
        else
        {
            var summaryForecast = Context.SummaryForecasts.Where(f => f == forecast).SingleOrDefault();
            if (summaryForecast is not null)
            {
                summaryForecast.IsDeleted = true;
                await Context.TrackSaveChangesAsync(AuditingService);
            }
            _summaryForecast = null;
            _isNew = false;
            LoadData(_searchFilter);
            StateHasChanged();
        }
    }

    private void CreateNewProject()
    {        
        _summaryForecast = new SummaryForecast() { LastUpdatedDT = DateTime.Now, CreatedDT = DateTime.Now, CreatedUserId = _user.Mail, FundCenter = _fundCenters[0] };
        _isNew = true;
        StateHasChanged();
    }

    private async Task HandleValidSubmit()
    {

        if (_summaryForecast != null && IsValidSubmission())
        {
            if (_summaryForecast.ForecastID == 0)
            {
                _summaryForecast = Context.SummaryForecasts.Add(_summaryForecast).Entity;
            }
            _summaryForecast.LastUpdatedDT = DateTime.Now;
            _summaryForecast.KeyActivity = _summaryForecast.KAValues?.Id ?? null; 
            await Context.TrackSaveChangesAsync(AuditingService);
            LoadData(_searchFilter); ;
            _summaryForecast = null;
            _isNew = false;
        }
        else
        {
            bool? result = await DialogService.ShowMessageBox(
                "Warning",
                "This Fund already exists, please update the existing record",
                yesText: "Ok");
        }

        StateHasChanged();
    }

    private bool IsValidSubmission()
    {
        var doesFundExist = Context.SummaryForecasts.Any(sf => sf.Fund == _summaryForecast.Fund && sf.FundCenter.FundCenterID.ToString() == fundcenterId);
        return !_isNew || !doesFundExist;
    
    }


    private async Task<SummaryForecast> ClearForm()
    {
        _summaryForecast = null;
        StateHasChanged();
        return await Task.FromResult((SummaryForecast)null);
    }

    private void OnConfigure(MudBlazor.Forms.IModelFormContext context)
    {
        context.RegisterOptionValueProperty<SummaryForecast, DropDownContainer>(l => l.KAValues, p => p?.EnglishText ?? "-", () => Finance_Constants.Key_Activities);                
    }


    private async void HandleFilterChange(string selection)
    {
        _searchFilter = selection;
        LoadData(_searchFilter);
        await InvokeAsync(StateHasChanged);
    }

    private void OnChange(ModelFormChangeArgs args)
    {
        OnConfigure(args.Context);
    }

    public void Dispose() 
    { 
        Context.Dispose(); 
    }
}
