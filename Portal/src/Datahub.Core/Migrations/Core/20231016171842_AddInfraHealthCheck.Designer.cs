// <auto-generated />
using System;
using Datahub.Core.Model.Datahub;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Datahub.Core.Migrations.Core
{
    [DbContext(typeof(DatahubProjectDBContext))]
    [Migration("20231016171842_AddInfraHealthCheck")]
    partial class AddInfraHealthCheck
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Datahub.Core.Model.Achievements.Achievement", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<string>("ConcatenatedRules")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<int>("Points")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Achivements", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "DHA-001",
                            ConcatenatedRules = "Utils.MatchMetric(\"user_login\", currentMetric)",
                            Description = "Logged in to DataHub",
                            Name = "Collaboration Connoisseur",
                            Points = 1
                        },
                        new
                        {
                            Id = "DHA-002",
                            ConcatenatedRules = "Utils.MatchMetric(\"user_sent_invite\", currentMetric)",
                            Description = "Invite a user to your workspace",
                            Name = "Collaboration Commander",
                            Points = 1
                        },
                        new
                        {
                            Id = "DHA-003",
                            ConcatenatedRules = "Utils.MatchMetric(\"user_joined_project\", currentMetric)",
                            Description = "Join a workspace",
                            Name = "Workspace Warrior",
                            Points = 1
                        },
                        new
                        {
                            Id = "DHA-004",
                            ConcatenatedRules = "Utils.MatchMetric(\"user_left_project\", currentMetric)",
                            Description = "Leave a workspace",
                            Name = "Workspace Wanderlust",
                            Points = 1
                        },
                        new
                        {
                            Id = "DHA-005",
                            ConcatenatedRules = "Utils.MatchMetric(\"user_daily_login\", currentMetric)",
                            Description = "Login on multiple days",
                            Name = "Consistent Contributor",
                            Points = 1
                        },
                        new
                        {
                            Id = "STR-000",
                            ConcatenatedRules = "Utils.OwnsAchievement(\"STR-001\", achivements)\nUtils.OwnsAchievement(\"STR-003\", achivements)\nUtils.OwnsAchievement(\"STR-004\", achivements)\nUtils.OwnsAchievement(\"STR-005\", achivements)\nUtils.OwnsAchievement(\"STR-006\", achivements)",
                            Description = "Unlock all the 2.0 Storage Explorer achievements",
                            Name = "Storage Savant",
                            Points = 1
                        },
                        new
                        {
                            Id = "STR-001",
                            ConcatenatedRules = "Utils.MatchMetric(\"user_upload_file\", currentMetric)",
                            Description = "Upload a file using the workspace Storage Explorer",
                            Name = "Unstoppable Uploader",
                            Points = 1
                        },
                        new
                        {
                            Id = "STR-002",
                            ConcatenatedRules = "Utils.MatchMetric(\"user_share_file\", currentMetric)",
                            Description = "Share a file using the workspace Storage Explorer",
                            Name = "Storage Socialite",
                            Points = 1
                        },
                        new
                        {
                            Id = "STR-003",
                            ConcatenatedRules = "Utils.MatchMetric(\"user_download_file\", currentMetric)",
                            Description = "Download a file using the workspace Storage Explorer",
                            Name = "File Fetcher",
                            Points = 1
                        },
                        new
                        {
                            Id = "STR-004",
                            ConcatenatedRules = "Utils.MatchMetric(\"user_delete_file\", currentMetric)",
                            Description = "Delete a file from the workspace with the Storage Explorer",
                            Name = "Daredevil Deleter",
                            Points = 1
                        },
                        new
                        {
                            Id = "STR-005",
                            ConcatenatedRules = "Utils.MatchMetric(\"user_create_folder\", currentMetric)",
                            Description = "Create a folder in the workspace's Storage Explorer",
                            Name = "Folder Fashionista",
                            Points = 1
                        },
                        new
                        {
                            Id = "STR-006",
                            ConcatenatedRules = "Utils.MatchMetric(\"user_delete_folder\", currentMetric)",
                            Description = "Delete a folder in the workspace's Storage Explorer",
                            Name = "Folder Farewell",
                            Points = 1
                        },
                        new
                        {
                            Id = "EXP-000",
                            ConcatenatedRules = "Utils.OwnsAchievement(\"EXP-001\", achivements)\nUtils.OwnsAchievement(\"EXP-002\", achivements)\nUtils.OwnsAchievement(\"EXP-003\", achivements)\nUtils.OwnsAchievement(\"EXP-004\", achivements)\nUtils.OwnsAchievement(\"EXP-005\", achivements)\nUtils.OwnsAchievement(\"EXP-006\", achivements)\nUtils.OwnsAchievement(\"EXP-007\", achivements)\nUtils.OwnsAchievement(\"EXP-008\", achivements)\nUtils.OwnsAchievement(\"EXP-009\", achivements)",
                            Description = "Unlock all the 2.0 Exploration achievements",
                            Name = "Explorer Extraordinaire",
                            Points = 1
                        },
                        new
                        {
                            Id = "EXP-001",
                            ConcatenatedRules = "Utils.MatchUrl(\"\\\\/w\\\\/([0-9a-zA-Z]+)?\\\\/filelist$\", currentMetric)",
                            Description = "Navigate to the Storage Explorer page of a workspace",
                            Name = "Storage Safari",
                            Points = 1
                        },
                        new
                        {
                            Id = "EXP-002",
                            ConcatenatedRules = "Utils.MatchMetric(\"user_click_databricks_link\", currentMetric)",
                            Description = "Navigate to the Databricks page of a workspace",
                            Name = "Databricks Discovery",
                            Points = 1
                        },
                        new
                        {
                            Id = "EXP-003",
                            ConcatenatedRules = "Utils.MatchUrl(\"\\\\/resources$\", currentMetric)",
                            Description = "View the resources section of DataHub",
                            Name = "Resource Ranger",
                            Points = 1
                        },
                        new
                        {
                            Id = "EXP-004",
                            ConcatenatedRules = "Utils.MatchMetric(\"user_view_project_not_member_of\", currentMetric)",
                            Description = "View a workspace you are not a member of",
                            Name = "Workspace Wanderer",
                            Points = 1
                        },
                        new
                        {
                            Id = "EXP-005",
                            ConcatenatedRules = "Utils.MatchMetric(\"user_view_project\", currentMetric)",
                            Description = "Visit one of your own workspaces",
                            Name = "Workspace Wayfarer",
                            Points = 1
                        },
                        new
                        {
                            Id = "EXP-006",
                            ConcatenatedRules = "Utils.MatchMetric(\"user_click_recent_link\", currentMetric)",
                            Description = "Use a recent link to get to the same page again",
                            Name = "Link Legend",
                            Points = 1
                        },
                        new
                        {
                            Id = "EXP-007",
                            ConcatenatedRules = "Utils.MatchMetric(\"user_click_toggle_culture\", currentMetric)",
                            Description = "Switch languages in the portal",
                            Name = "Prolific Polyglot",
                            Points = 1
                        },
                        new
                        {
                            Id = "EXP-008",
                            ConcatenatedRules = "Utils.MatchUrl(\"\\\\/profile$\", currentMetric)",
                            Description = "View your own profile page",
                            Name = "Profile Peruser",
                            Points = 1
                        },
                        new
                        {
                            Id = "EXP-009",
                            ConcatenatedRules = "Utils.MatchMetric(\"user_view_other_profile\", currentMetric)",
                            Description = "View another person's profile",
                            Name = "Profile Prowler",
                            Points = 1
                        });
                });

            modelBuilder.Entity("Datahub.Core.Model.Achievements.PortalUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("BannerPictureUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<DateTime?>("FirstLoginDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("GraphGuid")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<bool>("HideAchievements")
                        .HasColumnType("bit");

                    b.Property<string>("Language")
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<DateTime?>("LastLoginDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("ProfilePictureUrl")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("GraphGuid")
                        .IsUnique();

                    b.ToTable("PortalUsers", (string)null);
                });

            modelBuilder.Entity("Datahub.Core.Model.Achievements.TelemetryEvent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("EventDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("EventName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PortalUserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PortalUserId");

                    b.ToTable("TelemetryEvents", (string)null);
                });

            modelBuilder.Entity("Datahub.Core.Model.Achievements.UserAchievement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AchievementId")
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.Property<int>("PortalUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UnlockedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AchievementId");

                    b.HasIndex("PortalUserId");

                    b.ToTable("UserAchievements", (string)null);
                });

            modelBuilder.Entity("Datahub.Core.Model.Announcements.Announcement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("BodyEn")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BodyFr")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatedById")
                        .HasColumnType("int");

                    b.Property<DateTime?>("EndDateTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("ForceHidden")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("PreviewEn")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PreviewFr")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("StartDateTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UpdatedById")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("UpdatedById");

                    b.ToTable("Announcements", (string)null);
                });

            modelBuilder.Entity("Datahub.Core.Model.Catalog.CatalogObject", b =>
                {
                    b.Property<int>("ObjectType")
                        .HasColumnType("int");

                    b.Property<string>("ObjectId")
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<string>("Desc_English")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Desc_French")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name_English")
                        .HasMaxLength(160)
                        .HasColumnType("nvarchar(160)");

                    b.Property<string>("Name_French")
                        .HasMaxLength(160)
                        .HasColumnType("nvarchar(160)");

                    b.HasKey("ObjectType", "ObjectId");

                    b.ToTable("CatalogObjects", (string)null);
                });

            modelBuilder.Entity("Datahub.Core.Model.CloudStorage.ProjectCloudStorage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ConnectionData")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<bool>("Enabled")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasMaxLength(16)
                        .HasColumnType("nvarchar(16)");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.Property<string>("Provider")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(16)
                        .HasColumnType("nvarchar(16)")
                        .HasDefaultValue("Azure");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("Project_Cloud_Storages", (string)null);
                });

            modelBuilder.Entity("Datahub.Core.Model.Datahub.Client_Engagement", b =>
                {
                    b.Property<int>("Engagement_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Engagement_ID"));

                    b.Property<DateTime?>("Actual_Release_Date")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Created_DT")
                        .HasColumnType("datetime2");

                    b.Property<string>("Created_UserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Engagement_Name")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<DateTime?>("Engagement_Start_Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Engagment_Lead")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("Engagment_Owners")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<DateTime?>("Final_Release_Date")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("Final_Updates_EndDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Is_Engagement_Active")
                        .HasColumnType("bit");

                    b.Property<DateTime>("Last_Updated_DT")
                        .HasColumnType("datetime2");

                    b.Property<string>("Last_Updated_UserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Phase1_Development_ActualEndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("Phase1_Development_EndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("Phase1_Testing_ActualEndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("Phase1_Testing_EndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("Phase2_Development_ActualEndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("Phase2_Development_EndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("Phase2_Testing_ActualEndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("Phase2_Testing_EndDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("Project_ID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Requirements_Gathering_ActualEndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("Requirements_Gathering_EndDate")
                        .HasColumnType("datetime2");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Engagement_ID");

                    b.HasIndex("Project_ID");

                    b.ToTable("Client_Engagements");
                });

            modelBuilder.Entity("Datahub.Core.Model.Datahub.ExternalPowerBiReport", b =>
                {
                    b.Property<int>("ExternalPowerBiReport_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ExternalPowerBiReport_ID"));

                    b.Property<DateTime>("End_Date")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Is_Created")
                        .HasColumnType("bit");

                    b.Property<Guid>("Report_ID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("RequestingUser")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Token")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("ValidationSalt")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Validation_Code")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ExternalPowerBiReport_ID");

                    b.ToTable("ExternalPowerBiReports");
                });

            modelBuilder.Entity("Datahub.Core.Model.Datahub.Organization_Level", b =>
                {
                    b.Property<int>("SectorAndBranchS_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SectorAndBranchS_ID"));

                    b.Property<string>("Full_Acronym_E")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<string>("Full_Acronym_F")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<string>("Org_Acronym_E")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<string>("Org_Acronym_F")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<string>("Org_Level")
                        .HasMaxLength(1)
                        .HasColumnType("nvarchar(1)");

                    b.Property<string>("Org_Name_E")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<string>("Org_Name_F")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<int>("Organization_ID")
                        .HasColumnType("int");

                    b.Property<int?>("Superior_OrgId")
                        .HasColumnType("int");

                    b.HasKey("SectorAndBranchS_ID");

                    b.ToTable("Organization_Levels");
                });

            modelBuilder.Entity("Datahub.Core.Model.Datahub.PBI_License_Request", b =>
                {
                    b.Property<int>("Request_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Request_ID"));

                    b.Property<string>("Contact_Email")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Contact_Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("Desktop_Usage_Flag")
                        .HasColumnType("bit");

                    b.Property<bool>("Premium_License_Flag")
                        .HasColumnType("bit");

                    b.Property<int>("Project_ID")
                        .HasColumnType("int");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("User_ID")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Request_ID");

                    b.HasIndex("Project_ID")
                        .IsUnique();

                    b.ToTable("PowerBI_License_Requests");
                });

            modelBuilder.Entity("Datahub.Core.Model.Datahub.PBI_User_License_Request", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("LicenseType")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<int>("RequestID")
                        .HasColumnType("int");

                    b.Property<string>("UserEmail")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("ID");

                    b.HasIndex("RequestID");

                    b.ToTable("PowerBI_License_User_Requests");
                });

            modelBuilder.Entity("Datahub.Core.Model.Datahub.PowerBi_DataSet", b =>
                {
                    b.Property<Guid>("DataSet_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DataSet_Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("Workspace_Id")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("DataSet_ID");

                    b.HasIndex("Workspace_Id");

                    b.ToTable("PowerBi_DataSets");
                });

            modelBuilder.Entity("Datahub.Core.Model.Datahub.PowerBi_Report", b =>
                {
                    b.Property<Guid>("Report_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("InCatalog")
                        .HasColumnType("bit");

                    b.Property<string>("Report_Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("Workspace_Id")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Report_ID");

                    b.HasIndex("Workspace_Id");

                    b.ToTable("PowerBi_Reports");
                });

            modelBuilder.Entity("Datahub.Core.Model.Datahub.PowerBi_Workspace", b =>
                {
                    b.Property<Guid>("Workspace_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("Project_Id")
                        .HasColumnType("int");

                    b.Property<bool>("Sandbox_Flag")
                        .HasColumnType("bit");

                    b.Property<string>("Workspace_Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Workspace_ID");

                    b.HasIndex("Project_Id");

                    b.ToTable("PowerBi_Workspaces");
                });

            modelBuilder.Entity("Datahub.Core.Model.Datahub.PublicDataFile", b =>
                {
                    b.Property<long>("PublicDataFile_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("PublicDataFile_ID"));

                    b.Property<DateTime?>("ApprovedDate_DT")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("File_ID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Filename_TXT")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("FolderPath_TXT")
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<string>("ProjectCode_CD")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<DateTime?>("PublicationDate_DT")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("RequestedDate_DT")
                        .HasColumnType("datetime2");

                    b.Property<string>("RequestingUser_ID")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("SubmittedDate_DT")
                        .HasColumnType("datetime2");

                    b.HasKey("PublicDataFile_ID");

                    b.HasIndex("File_ID")
                        .IsUnique();

                    b.ToTable("PublicDataFiles");
                });

            modelBuilder.Entity("Datahub.Core.Model.Datahub.SharedDataFile", b =>
                {
                    b.Property<long>("SharedDataFile_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("SharedDataFile_ID"));

                    b.Property<DateTime?>("ApprovedDate_DT")
                        .HasColumnType("datetime2");

                    b.Property<string>("ApprovingUser_ID")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("ExpirationDate_DT")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("File_ID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Filename_TXT")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FolderPath_TXT")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsOpenDataRequest_FLAG")
                        .HasColumnType("bit");

                    b.Property<bool>("MetadataCompleted_FLAG")
                        .HasColumnType("bit");

                    b.Property<string>("ProjectCode_CD")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("PublicationDate_DT")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("RequestedDate_DT")
                        .HasColumnType("datetime2");

                    b.Property<string>("RequestingUser_ID")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("SubmittedDate_DT")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("UnpublishDate_DT")
                        .HasColumnType("datetime2");

                    b.HasKey("SharedDataFile_ID");

                    b.HasIndex("File_ID")
                        .IsUnique();

                    b.ToTable("SharedDataFiles");

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("Datahub.Core.Model.Datahub.SpatialObjectShare", b =>
                {
                    b.Property<string>("GeoObjectShare_ID")
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<int>("ApprovalForm_ID")
                        .HasColumnType("int");

                    b.Property<string>("Approval_Document_URL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("Email_Contact_TXT")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Json_TXT")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Publication_ID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ShareStatus")
                        .HasColumnType("int");

                    b.HasKey("GeoObjectShare_ID");

                    b.ToTable("SpatialObjectShares", (string)null);
                });

            modelBuilder.Entity("Datahub.Core.Model.Datahub.SystemNotification", b =>
                {
                    b.Property<long>("Notification_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Notification_ID"));

                    b.Property<string>("ActionLink_Key")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ActionLink_URL")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<DateTime>("Generated_TS")
                        .HasColumnType("datetime2");

                    b.Property<string>("NotificationTextEn_TXT")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NotificationTextFr_TXT")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Read_FLAG")
                        .HasColumnType("bit");

                    b.Property<string>("ReceivingUser_ID")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Notification_ID");

                    b.ToTable("SystemNotifications");
                });

            modelBuilder.Entity("Datahub.Core.Model.Datahub.WebForm", b =>
                {
                    b.Property<int>("WebForm_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("WebForm_ID"));

                    b.Property<string>("Description_DESC")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Project_ID")
                        .HasColumnType("int");

                    b.Property<string>("Title_DESC")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("WebForm_ID");

                    b.HasIndex("Project_ID");

                    b.ToTable("WebForms");
                });

            modelBuilder.Entity("Datahub.Core.Model.Datahub.WebForm_DBCodes", b =>
                {
                    b.Property<string>("DBCode")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("ClassWord_DEF")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClassWord_DESC")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("DBCode");

                    b.ToTable("DBCodes");
                });

            modelBuilder.Entity("Datahub.Core.Model.Datahub.WebForm_Field", b =>
                {
                    b.Property<int>("FieldID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FieldID"));

                    b.Property<string>("Choices_TXT")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Date_Updated_DT")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description_DESC")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Extension_CD")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)")
                        .HasDefaultValue("NONE");

                    b.Property<string>("Field_DESC")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("Mandatory_FLAG")
                        .HasColumnType("bit");

                    b.Property<int?>("Max_Length_NUM")
                        .HasColumnType("int");

                    b.Property<string>("Notes_TXT")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Section_DESC")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Type_CD")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)")
                        .HasDefaultValue("Text");

                    b.Property<int>("WebForm_ID")
                        .HasColumnType("int");

                    b.HasKey("FieldID");

                    b.HasIndex("WebForm_ID");

                    b.ToTable("Fields");
                });

            modelBuilder.Entity("Datahub.Core.Model.Documentation.DocumentationResource", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Hits")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("DocumentationResources", (string)null);
                });

            modelBuilder.Entity("Datahub.Core.Model.Health.InfrastructureHealthCheck", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Group")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<DateTime>("HealthCheckTimeUtc")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<int>("ResourceType")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Url")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.ToTable("InfrastructureHealthChecks", (string)null);
                });

            modelBuilder.Entity("Datahub.Core.Model.MiscStoredObject", b =>
                {
                    b.Property<Guid>("GeneratedId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Id")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("JsonContent")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TypeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("GeneratedId");

                    b.HasAlternateKey("TypeName", "Id");

                    b.ToTable("MiscStoredObjects");
                });

            modelBuilder.Entity("Datahub.Core.Model.Onboarding.OnboardingApp", b =>
                {
                    b.Property<int>("Application_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Application_ID"));

                    b.Property<string>("Additional_Contact_Email_EMAIL")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Additional_Contact_Name")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Client_Branch")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("Client_Contact_Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Client_Division")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("Client_Email")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Client_Sector")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("Data_Security_Level")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Last_Updated_DT")
                        .HasColumnType("datetime2");

                    b.Property<string>("Last_Updated_UserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("NotificationsSent")
                        .HasColumnType("bit");

                    b.Property<string>("Onboarding_Timeline")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Product_Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ProjectCreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Project_Engagement_Category")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Project_Engagement_Category_Other")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Project_Goal")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Project_Summary_Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Questions_for_the_DataHub_Team")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Application_ID");

                    b.ToTable("OnboardingApps");
                });

            modelBuilder.Entity("Datahub.Core.Model.Onboarding.ProjectCreationDetails", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatedById")
                        .HasColumnType("int");

                    b.Property<string>("InterestedFeatures")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ProjectId");

                    b.ToTable("ProjectCreationDetails", (string)null);
                });

            modelBuilder.Entity("Datahub.Core.Model.Onboarding.SelfRegistrationDetails", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.HasKey("Id");

                    b.ToTable("SelfRegistrationDetails", (string)null);
                });

            modelBuilder.Entity("Datahub.Core.Model.Projects.Datahub_Project", b =>
                {
                    b.Property<int>("Project_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Project_ID"));

                    b.Property<int?>("BranchId")
                        .HasColumnType("int");

                    b.Property<string>("Branch_Name")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Comments_NT")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Contact_List")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DB_Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("DB_Server")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("DB_Type")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Data_Sensitivity")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Databricks_URL")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<DateTime?>("Deleted_DT")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DivisionId")
                        .HasColumnType("int");

                    b.Property<string>("Division_Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GC_Docs_URL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GitRepo_URL")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<DateTime>("Initial_Meeting_DT")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Is_Featured")
                        .HasColumnType("bit");

                    b.Property<bool>("Is_Private")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("Last_Contact_DT")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Last_Updated_DT")
                        .HasColumnType("datetime2");

                    b.Property<string>("Last_Updated_UserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("MetadataAdded")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("Next_Meeting_DT")
                        .HasColumnType("datetime2");

                    b.Property<int?>("Number_Of_Users_Involved")
                        .HasColumnType("int");

                    b.Property<int>("OnboardingApplicationId")
                        .HasColumnType("int");

                    b.Property<string>("PowerBI_URL")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<string>("Project_Acronym_CD")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Project_Admin")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("Project_Budget")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Project_Category")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Project_Goal")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Project_Icon")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Project_Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Project_Name_Fr")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Project_Phase")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Project_Status")
                        .HasColumnType("int");

                    b.Property<string>("Project_Status_Desc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Project_Summary_Desc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Project_Summary_Desc_Fr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SectorId")
                        .HasColumnType("int");

                    b.Property<string>("Sector_Name")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<string>("Stage_Desc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("Version")
                        .HasMaxLength(16)
                        .HasColumnType("nvarchar(16)");

                    b.Property<bool?>("WebAppEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("WebApp_URL")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("WebForms_URL")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.HasKey("Project_ID");

                    b.HasIndex("BranchId");

                    b.HasIndex("DivisionId");

                    b.HasIndex("Project_Acronym_CD")
                        .IsUnique();

                    b.HasIndex("SectorId");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("Datahub.Core.Model.Projects.Datahub_ProjectApiUser", b =>
                {
                    b.Property<Guid>("ProjectApiUser_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Client_Name_TXT")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.Property<string>("Email_Contact_TXT")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<bool>("Enabled")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("Expiration_DT")
                        .HasColumnType("datetime2");

                    b.Property<string>("Project_Acronym_CD")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("ProjectApiUser_ID");

                    b.ToTable("Project_ApiUsers");
                });

            modelBuilder.Entity("Datahub.Core.Model.Projects.Datahub_ProjectComment", b =>
                {
                    b.Property<int>("Comment_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Comment_ID"));

                    b.Property<DateTime>("Comment_Date_DT")
                        .HasColumnType("datetime2");

                    b.Property<string>("Comment_NT")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Created_DT")
                        .HasColumnType("datetime2");

                    b.Property<string>("Created_UserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Last_Updated_DT")
                        .HasColumnType("datetime2");

                    b.Property<string>("Last_Updated_UserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Project_ID")
                        .HasColumnType("int");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Comment_ID");

                    b.HasIndex("Project_ID");

                    b.ToTable("Project_Comments");
                });

            modelBuilder.Entity("Datahub.Core.Model.Projects.Datahub_ProjectServiceRequests", b =>
                {
                    b.Property<int>("ServiceRequests_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ServiceRequests_ID"));

                    b.Property<DateTime?>("Is_Completed")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("Notification_Sent")
                        .HasColumnType("datetime2");

                    b.Property<int?>("Project_ID")
                        .HasColumnType("int");

                    b.Property<DateTime>("ServiceRequests_Date_DT")
                        .HasColumnType("datetime2");

                    b.Property<string>("ServiceType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("User_ID")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("User_Name")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("ServiceRequests_ID");

                    b.HasIndex("Project_ID");

                    b.ToTable("Project_Requests");
                });

            modelBuilder.Entity("Datahub.Core.Model.Projects.Datahub_Project_Costs", b =>
                {
                    b.Property<int>("ProjectCosts_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProjectCosts_ID"));

                    b.Property<double>("CadCost")
                        .HasColumnType("float");

                    b.Property<string>("CloudProvider")
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("Project_ID")
                        .HasColumnType("int");

                    b.Property<string>("ServiceName")
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.HasKey("ProjectCosts_ID");

                    b.HasIndex("Project_ID", "Date");

                    b.ToTable("Project_Costs");
                });

            modelBuilder.Entity("Datahub.Core.Model.Projects.Datahub_Project_Pipeline_Lnk", b =>
                {
                    b.Property<int>("Project_ID")
                        .HasColumnType("int");

                    b.Property<string>("Process_Nm")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Project_ID", "Process_Nm");

                    b.ToTable("Project_Pipeline_Links");
                });

            modelBuilder.Entity("Datahub.Core.Model.Projects.Datahub_Project_User", b =>
                {
                    b.Property<int>("ProjectUser_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProjectUser_ID"));

                    b.Property<int?>("ApprovedPortalUserId")
                        .HasColumnType("int");

                    b.Property<string>("ApprovedUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Approved_DT")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDataApprover")
                        .HasColumnType("bit");

                    b.Property<int?>("PortalUserId")
                        .HasColumnType("int");

                    b.Property<int>("Project_ID")
                        .HasColumnType("int");

                    b.Property<int?>("RoleId")
                        .HasColumnType("int");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("User_ID")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("User_Name")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("ProjectUser_ID");

                    b.HasIndex("ApprovedPortalUserId");

                    b.HasIndex("PortalUserId");

                    b.HasIndex("Project_ID");

                    b.HasIndex("RoleId");

                    b.ToTable("Project_Users", (string)null);
                });

            modelBuilder.Entity("Datahub.Core.Model.Projects.Datahub_Project_User_Request", b =>
                {
                    b.Property<int>("ProjectUserRequest_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProjectUserRequest_ID"));

                    b.Property<string>("ApprovedUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Approved_DT")
                        .HasColumnType("datetime2");

                    b.Property<int?>("Project_ID")
                        .HasColumnType("int");

                    b.Property<DateTime>("Requested_DT")
                        .HasColumnType("datetime2");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("User_ID")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("ProjectUserRequest_ID");

                    b.HasIndex("Project_ID");

                    b.ToTable("Project_Users_Requests");
                });

            modelBuilder.Entity("Datahub.Core.Model.Projects.Project_Credits", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double>("Current")
                        .HasColumnType("float");

                    b.Property<string>("CurrentPerDay")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CurrentPerService")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastNotified")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastUpdate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("PercNotified")
                        .HasColumnType("int");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.Property<double>("YesterdayCredits")
                        .HasColumnType("float");

                    b.Property<string>("YesterdayPerService")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId")
                        .IsUnique();

                    b.ToTable("Project_Credits", (string)null);
                });

            modelBuilder.Entity("Datahub.Core.Model.Projects.Project_Resources2", b =>
                {
                    b.Property<Guid>("ResourceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ClassName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("InputJsonContent")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("JsonContent")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.Property<string>("ResourceType")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("TimeCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("TimeRequested")
                        .HasColumnType("datetime2");

                    b.HasKey("ResourceId");

                    b.HasIndex("ProjectId");

                    b.ToTable("Project_Resources2");
                });

            modelBuilder.Entity("Datahub.Core.Model.Projects.Project_Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.HasKey("Id");

                    b.ToTable("Project_Roles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Revoke the user's access to the project's private resources",
                            Name = "Remove User"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Head of the business unit and bears business responsibility for successful implementation and availability",
                            Name = "Workspace Lead"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Management authority within the project with direct supervision over the project resources and deliverables",
                            Name = "Admin"
                        },
                        new
                        {
                            Id = 4,
                            Description = "Responsible for contributing to the overall project objectives and deliverables to ensure success",
                            Name = "Collaborator"
                        },
                        new
                        {
                            Id = 5,
                            Description = "Able to view the workspace and its contents but not able to contribute or modify anything",
                            Name = "Guest"
                        });
                });

            modelBuilder.Entity("Datahub.Core.Model.Projects.Project_Storage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double>("AverageCapacity")
                        .HasColumnType("float");

                    b.Property<string>("CloudProvider")
                        .HasMaxLength(16)
                        .HasColumnType("nvarchar(16)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId", "Date");

                    b.ToTable("Project_Storage_Avgs", (string)null);
                });

            modelBuilder.Entity("Datahub.Core.Model.Projects.Project_Whitelist", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AdminLastUpdated_ID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AdminLastUpdated_UserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("AllowDatabricks")
                        .HasColumnType("bit");

                    b.Property<bool>("AllowStorage")
                        .HasColumnType("bit");

                    b.Property<bool>("AllowVMs")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId")
                        .IsUnique();

                    b.ToTable("Project_Whitelists");
                });

            modelBuilder.Entity("Datahub.Core.Model.Repositories.ProjectRepository", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Branch")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<string>("HeadCommitId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("bit");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.Property<string>("Provider")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.Property<string>("RepositoryUrl")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("Project_Repositories", (string)null);
                });

            modelBuilder.Entity("Datahub.Core.Model.UserTracking.UserRecentLink", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("DataProject")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DatabricksURL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExternalUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LinkType")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PBIReportId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PBIWorkspaceId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PowerBIURL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ResourceArticleId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ResourceArticleTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("Variant")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WebFormsURL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("accessedTime")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserRecentLink", (string)null);
                });

            modelBuilder.Entity("Datahub.Core.Model.UserTracking.UserSettings", b =>
                {
                    b.Property<string>("UserId")
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<DateTime?>("AcceptedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Language")
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("UserSettings", (string)null);
                });

            modelBuilder.Entity("Datahub.Core.Model.Datahub.OpenDataSharedFile", b =>
                {
                    b.HasBaseType("Datahub.Core.Model.Datahub.SharedDataFile");

                    b.Property<bool>("ApprovalFormEdited_FLAG")
                        .HasColumnType("bit");

                    b.Property<bool>("ApprovalFormRead_FLAG")
                        .HasColumnType("bit");

                    b.Property<int?>("ApprovalForm_ID")
                        .HasColumnType("int");

                    b.Property<int?>("FileStorage_CD")
                        .HasColumnType("int");

                    b.Property<string>("FileUrl_TXT")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SignedApprovalForm_URL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UploadError_TXT")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UploadStatus_CD")
                        .HasColumnType("int");

                    b.ToTable("OpenDataSharedFile");
                });

            modelBuilder.Entity("Datahub.Core.Model.Achievements.TelemetryEvent", b =>
                {
                    b.HasOne("Datahub.Core.Model.Achievements.PortalUser", "PortalUser")
                        .WithMany("TelemetryEvents")
                        .HasForeignKey("PortalUserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("PortalUser");
                });

            modelBuilder.Entity("Datahub.Core.Model.Achievements.UserAchievement", b =>
                {
                    b.HasOne("Datahub.Core.Model.Achievements.Achievement", "Achievement")
                        .WithMany("UserAchievements")
                        .HasForeignKey("AchievementId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Datahub.Core.Model.Achievements.PortalUser", "PortalUser")
                        .WithMany("Achievements")
                        .HasForeignKey("PortalUserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Achievement");

                    b.Navigation("PortalUser");
                });

            modelBuilder.Entity("Datahub.Core.Model.Announcements.Announcement", b =>
                {
                    b.HasOne("Datahub.Core.Model.Achievements.PortalUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Datahub.Core.Model.Achievements.PortalUser", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById");

                    b.Navigation("CreatedBy");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("Datahub.Core.Model.CloudStorage.ProjectCloudStorage", b =>
                {
                    b.HasOne("Datahub.Core.Model.Projects.Datahub_Project", "Project")
                        .WithMany("CloudStorages")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("Datahub.Core.Model.Datahub.Client_Engagement", b =>
                {
                    b.HasOne("Datahub.Core.Model.Projects.Datahub_Project", "Project")
                        .WithMany("Client_Engagements")
                        .HasForeignKey("Project_ID");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("Datahub.Core.Model.Datahub.PBI_License_Request", b =>
                {
                    b.HasOne("Datahub.Core.Model.Projects.Datahub_Project", "Project")
                        .WithOne("PBI_License_Request")
                        .HasForeignKey("Datahub.Core.Model.Datahub.PBI_License_Request", "Project_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("Datahub.Core.Model.Datahub.PBI_User_License_Request", b =>
                {
                    b.HasOne("Datahub.Core.Model.Datahub.PBI_License_Request", "LicenseRequest")
                        .WithMany("User_License_Requests")
                        .HasForeignKey("RequestID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LicenseRequest");
                });

            modelBuilder.Entity("Datahub.Core.Model.Datahub.PowerBi_DataSet", b =>
                {
                    b.HasOne("Datahub.Core.Model.Datahub.PowerBi_Workspace", "Workspace")
                        .WithMany("Datasets")
                        .HasForeignKey("Workspace_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Workspace");
                });

            modelBuilder.Entity("Datahub.Core.Model.Datahub.PowerBi_Report", b =>
                {
                    b.HasOne("Datahub.Core.Model.Datahub.PowerBi_Workspace", "Workspace")
                        .WithMany("Reports")
                        .HasForeignKey("Workspace_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Workspace");
                });

            modelBuilder.Entity("Datahub.Core.Model.Datahub.PowerBi_Workspace", b =>
                {
                    b.HasOne("Datahub.Core.Model.Projects.Datahub_Project", "Project")
                        .WithMany("PowerBi_Workspaces")
                        .HasForeignKey("Project_Id");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("Datahub.Core.Model.Datahub.WebForm", b =>
                {
                    b.HasOne("Datahub.Core.Model.Projects.Datahub_Project", "Project")
                        .WithMany("WebForms")
                        .HasForeignKey("Project_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("Datahub.Core.Model.Datahub.WebForm_Field", b =>
                {
                    b.HasOne("Datahub.Core.Model.Datahub.WebForm", "WebForm")
                        .WithMany("Fields")
                        .HasForeignKey("WebForm_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("WebForm");
                });

            modelBuilder.Entity("Datahub.Core.Model.Onboarding.ProjectCreationDetails", b =>
                {
                    b.HasOne("Datahub.Core.Model.Achievements.PortalUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Datahub.Core.Model.Projects.Datahub_Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("Datahub.Core.Model.Projects.Datahub_Project", b =>
                {
                    b.HasOne("Datahub.Core.Model.Datahub.Organization_Level", "Branch")
                        .WithMany("Branches")
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Datahub.Core.Model.Datahub.Organization_Level", "Division")
                        .WithMany("Divisions")
                        .HasForeignKey("DivisionId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Datahub.Core.Model.Datahub.Organization_Level", "Sector")
                        .WithMany("Sectors")
                        .HasForeignKey("SectorId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Branch");

                    b.Navigation("Division");

                    b.Navigation("Sector");
                });

            modelBuilder.Entity("Datahub.Core.Model.Projects.Datahub_ProjectComment", b =>
                {
                    b.HasOne("Datahub.Core.Model.Projects.Datahub_Project", "Project")
                        .WithMany("Comments")
                        .HasForeignKey("Project_ID");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("Datahub.Core.Model.Projects.Datahub_ProjectServiceRequests", b =>
                {
                    b.HasOne("Datahub.Core.Model.Projects.Datahub_Project", "Project")
                        .WithMany("ServiceRequests")
                        .HasForeignKey("Project_ID");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("Datahub.Core.Model.Projects.Datahub_Project_Pipeline_Lnk", b =>
                {
                    b.HasOne("Datahub.Core.Model.Projects.Datahub_Project", "Project")
                        .WithMany("Pipelines")
                        .HasForeignKey("Project_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("Datahub.Core.Model.Projects.Datahub_Project_User", b =>
                {
                    b.HasOne("Datahub.Core.Model.Achievements.PortalUser", "ApprovedPortalUser")
                        .WithMany()
                        .HasForeignKey("ApprovedPortalUserId");

                    b.HasOne("Datahub.Core.Model.Achievements.PortalUser", "PortalUser")
                        .WithMany()
                        .HasForeignKey("PortalUserId");

                    b.HasOne("Datahub.Core.Model.Projects.Datahub_Project", "Project")
                        .WithMany("Users")
                        .HasForeignKey("Project_ID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Datahub.Core.Model.Projects.Project_Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId");

                    b.Navigation("ApprovedPortalUser");

                    b.Navigation("PortalUser");

                    b.Navigation("Project");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Datahub.Core.Model.Projects.Datahub_Project_User_Request", b =>
                {
                    b.HasOne("Datahub.Core.Model.Projects.Datahub_Project", "Project")
                        .WithMany()
                        .HasForeignKey("Project_ID");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("Datahub.Core.Model.Projects.Project_Credits", b =>
                {
                    b.HasOne("Datahub.Core.Model.Projects.Datahub_Project", "Project")
                        .WithOne("Credits")
                        .HasForeignKey("Datahub.Core.Model.Projects.Project_Credits", "ProjectId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("Datahub.Core.Model.Projects.Project_Resources2", b =>
                {
                    b.HasOne("Datahub.Core.Model.Projects.Datahub_Project", "Project")
                        .WithMany("Resources")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("Datahub.Core.Model.Projects.Project_Whitelist", b =>
                {
                    b.HasOne("Datahub.Core.Model.Projects.Datahub_Project", "Project")
                        .WithOne("Whitelist")
                        .HasForeignKey("Datahub.Core.Model.Projects.Project_Whitelist", "ProjectId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("Datahub.Core.Model.Repositories.ProjectRepository", b =>
                {
                    b.HasOne("Datahub.Core.Model.Projects.Datahub_Project", "Project")
                        .WithMany("Repositories")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("Datahub.Core.Model.UserTracking.UserRecentLink", b =>
                {
                    b.HasOne("Datahub.Core.Model.Achievements.PortalUser", "User")
                        .WithMany("RecentLinks")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Datahub.Core.Model.Datahub.OpenDataSharedFile", b =>
                {
                    b.HasOne("Datahub.Core.Model.Datahub.SharedDataFile", null)
                        .WithOne()
                        .HasForeignKey("Datahub.Core.Model.Datahub.OpenDataSharedFile", "SharedDataFile_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Datahub.Core.Model.Achievements.Achievement", b =>
                {
                    b.Navigation("UserAchievements");
                });

            modelBuilder.Entity("Datahub.Core.Model.Achievements.PortalUser", b =>
                {
                    b.Navigation("Achievements");

                    b.Navigation("RecentLinks");

                    b.Navigation("TelemetryEvents");
                });

            modelBuilder.Entity("Datahub.Core.Model.Datahub.Organization_Level", b =>
                {
                    b.Navigation("Branches");

                    b.Navigation("Divisions");

                    b.Navigation("Sectors");
                });

            modelBuilder.Entity("Datahub.Core.Model.Datahub.PBI_License_Request", b =>
                {
                    b.Navigation("User_License_Requests");
                });

            modelBuilder.Entity("Datahub.Core.Model.Datahub.PowerBi_Workspace", b =>
                {
                    b.Navigation("Datasets");

                    b.Navigation("Reports");
                });

            modelBuilder.Entity("Datahub.Core.Model.Datahub.WebForm", b =>
                {
                    b.Navigation("Fields");
                });

            modelBuilder.Entity("Datahub.Core.Model.Projects.Datahub_Project", b =>
                {
                    b.Navigation("Client_Engagements");

                    b.Navigation("CloudStorages");

                    b.Navigation("Comments");

                    b.Navigation("Credits");

                    b.Navigation("PBI_License_Request");

                    b.Navigation("Pipelines");

                    b.Navigation("PowerBi_Workspaces");

                    b.Navigation("Repositories");

                    b.Navigation("Resources");

                    b.Navigation("ServiceRequests");

                    b.Navigation("Users");

                    b.Navigation("WebForms");

                    b.Navigation("Whitelist");
                });
#pragma warning restore 612, 618
        }
    }
}
