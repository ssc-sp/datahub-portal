@using Markdig
@inject IJSRuntime _jsRuntime;

@if (Content != null)
{
    <div @ref="_elementReference" @attributes=@InputAttributes class="markdown-content">
        <MudMarkdown 
            Value=@FinalContent 
            OverrideLinkUrl=@OverrideLinkUrl 
            OverrideHeaderTypo=@SubstituteHeaderTypo />
    </div>
}

@code {
    private const string MARKDOWN_CONTAINER_CLASS = "markdown-container";

    [Parameter]
    public string Content { get; set; }

    [Parameter]
    public Func<string, string> LinkRewriter { get; set; }

    [Parameter]
    public List<(string, string)> Substitutions { get; set; }

    [Parameter(CaptureUnmatchedValues = true)]
    public Dictionary<string, object> InputAttributes { get; set; }

    private ElementReference _elementReference;

    private string _finalContent;
    private bool _needsRefresh = true;

    private string FinalContent
    {
        get
        {
            if (_needsRefresh)
            {
                if (Substitutions?.Count > 0)
                {
                    _finalContent = Substitutions.Aggregate(Content, (current, s) => current.Replace(s.Item1, s.Item2));
                }
                else
                {
                    _finalContent = Content;
                }
                _needsRefresh = false;
            }

            return _finalContent;
        }
    }

    private string OverrideLinkUrl(Markdig.Syntax.Inlines.LinkInline linkElement) => LinkRewriter(linkElement.Url);

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);

        if (firstRender && Content != null)
        {
            await StyleCodeblocks();
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        _needsRefresh = true;
        await InvokeAsync(StateHasChanged);

        if (InputAttributes == null)
        {
            InputAttributes = new()
            {
                {"class", MARKDOWN_CONTAINER_CLASS}
            };
        }
        else
        {
            var existingClass = InputAttributes.GetValueOrDefault("class") ?? string.Empty;
            InputAttributes["class"] = $"{MARKDOWN_CONTAINER_CLASS} {existingClass}";
        }

        await base.OnParametersSetAsync();
    }

    private Typo SubstituteHeaderTypo(Typo typo)
    {
        return typo switch
        {
            Typo.h1 => Typo.h3,
            Typo.h2 => Typo.h4,
            Typo.h3 => Typo.h5,
            Typo.h4 => Typo.h6,
            _ => typo
        };
    }

    public async Task StyleCodeblocks()
    {
        var module = await _jsRuntime.InvokeAsync<IJSObjectReference>("import",
            "./_content/Datahub.Core/Components/DHMarkdown.razor.js");
        await module.InvokeVoidAsync("styleCodeblocks", _elementReference);
    }

}