@using Markdig
@inject IJSRuntime _jsRuntime;

@if (Content != null)
{
    <span @ref="_elementReference" class="markdown-container">
        <MudMarkdown 
            Value=@Content 
            OverrideLinkUrl=@OverrideLinkUrl 
            OverrideHeaderTypo=@SubstituteHeaderTypo />
    </span>
}

@code {

    [Parameter]
    public string Content { get; set; }

    [Parameter]
    public Func<string, string> LinkRewriter { get; set; }

    [Parameter(CaptureUnmatchedValues = true)]
    public Dictionary<string, object> InputAttributes { get; set; }

    private ElementReference _elementReference;

    private string OverrideLinkUrl(Markdig.Syntax.Inlines.LinkInline linkElement) => LinkRewriter(linkElement.Url);

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);

        if (firstRender && Content != null)
        {
            await StyleCodeblocks();
        }
    }

    private Typo SubstituteHeaderTypo(Typo typo)
    {
        return typo switch
        {
            Typo.h1 => Typo.h3,
            Typo.h2 => Typo.h4,
            Typo.h3 => Typo.h5,
            Typo.h4 => Typo.h6,
            _ => typo
        };
    }

    public async Task StyleCodeblocks()
    {
        var module = await _jsRuntime.InvokeAsync<IJSObjectReference>("import",
            "./_content/Datahub.Core/Components/DHMarkdown.razor.js");
        await module.InvokeVoidAsync("styleCodeblocks", _elementReference);
    }

}