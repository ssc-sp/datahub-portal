@inject IStringLocalizer DataLocalizer
@using Datahub.Core.Views.Modals
@using Microsoft.EntityFrameworkCore
@using Datahub.Core.Data
@typeparam T
@typeparam U where U : DbContext
@inject UIControlsService UI
@inherits HtmlElement
@inject IDialogService DialogService
@inject IDatahubAuditingService AuditingService

@using System.Reflection
@using Microsoft.EntityFrameworkCore.ChangeTracking
@using MudBlazor.Forms
@using System.Text.RegularExpressions
@using System.Linq.Expressions
@inject NavigationManager NavigationManager

@if(Metadata is null || !Metadata.IsMudLoaded())
{
    <Spinner></Spinner>
}
else
{


 <MudCard>
     <MudCardContent>
            @if (!string.IsNullOrWhiteSpace(Metadata.Header))
            {
                <MudText Typo="Typo.h4">@DataLocalizer[Metadata.Header]</MudText>
            }
            
            @if (!string.IsNullOrWhiteSpace(Metadata.HeaderSubText))
            {
                <div style="margin-top: 1rem; margin-bottom: 0.5rem">
                    <MudText Typo="Typo.body2">@DataLocalizer[Metadata.HeaderSubText]</MudText>
                </div>
            }

            <AuthorizeView Roles="@Metadata.TableRoles">
                @if (Metadata.TabbedDataSets is null || !Metadata.TabbedDataSets.Any())
            {
                <FormDataTable
                    T="@T"
                    Metadata="@Metadata"
                    DataSet="@Metadata.DataSet"
                    DeleteRecord="DeleteRow"
                    HandleFilterChange="OnSearch"
                    SetFormEditRecord="SetFormEdit" 
                    SortAccessors="SortAccessors"
                />                               
            }
            else
            {            
                    <MudTabs Elevation="2" Rounded="true" ApplyEffectsToContainer="true" PanelClass="pa-6">
                    @foreach (var dataset in Metadata.TabbedDataSets)
                    {
                        var header = $"{Localizer[dataset.Key]} ({dataset.Value.Count()})";
                        <MudTabPanel Text="@header">
                            <FormDataTable
                                T="@T"
                                Metadata="@Metadata"
                                DataSet="@dataset.Value"
                                DeleteRecord="DeleteRow"
                                HandleFilterChange="OnSearch"
                                SetFormEditRecord="SetFormEdit" 
                                SortAccessors="SortAccessors"
                           />               
                        </MudTabPanel>
                    }
                    </MudTabs>                    
            }
            </AuthorizeView>

            @if (Metadata.IsAddEnabled)
            {
                <AeFlex id="buttonBar">
                    <div class="icon-container" style="margin-top: 10px; margin-left: 5px;">
                    <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="CreateNewRecord">@_addButton</MudButton>
                    </div>        
                </AeFlex>
            }
            @if (!string.IsNullOrWhiteSpace(Metadata.TableDisclaimer))
            {
                <AeFlex>
                    <div style="margin-left: 5px;">
                        <AeTypography Variant="p no-margin"><b>@Metadata.TableDisclaimer</b></AeTypography>
                    </div>
                </AeFlex>
            }
        </MudCardContent>
</MudCard>

@if (SelectedRecord != null)
{
    @if (Metadata.MarkDownContent?.Any() ?? false)
    {
        <MudCard>
            <MudCardContent>
                @foreach (var content in Metadata.MarkDownContent)
                {
                    <AeMarkdown Content="@($"{content}")"></AeMarkdown>
                }
            </MudCardContent>
        </MudCard>
    }



    <MudCard style="margin-top: 1rem">
            @if (Metadata.FormButtons is not null)
            {
                <MudCardHeader>
                        @foreach (var button in Metadata.FormButtons)
                        {
                            @button;
                        }                
                </MudCardHeader>
            }
        <MudCardContent>               
            <MudModelForm Model="SelectedRecord"
                         T="@T"
                         OnValidSubmit="HandleFormSubmit"
                         OnInvalidSubmit="HandleFormInvalidSubmit"
                         OnCancel="ClearForm"
                         OnConfigure="OnConfigure"
                         CancelLabel="Cancel"
                         SubmitLabel="@Metadata.SaveButtonText"
                         OnChange="OnChange"
                         LabelForPropertyFunc="@GetDataLabel"
                         LabelsOnTop="true"
                         LocalizerFunction="@GetDataLabel"
                         IsSubmitEnabled="Metadata.IsSubmitEnabled"
                         AreFieldsNullable="true"/>
        </MudCardContent>
        @if (Metadata.NavigateUrls is not null)
        {
            <MudCardActions>
                @foreach (var navigationUrl in Metadata.NavigateUrls)
                {
                    <MudButton style="margin-right: 0.2rem" Variant="Variant.Filled" Color="Color.Primary" OnClick="@(() => NavigationManager.NavigateTo(@navigationUrl.Invoke(SelectedRecord).Item2))">@navigationUrl.Invoke(SelectedRecord).Item1</MudButton>
                }                            
            </MudCardActions>
        }
    </MudCard>

    @if (Metadata.MarkDownContentFooter?.Any() ?? false)
    {
        <MudCard>
            <MudCardContent>
                @foreach (var content in Metadata.MarkDownContentFooter)
                {
                    <AeMarkdown Content="@($"{content}")"></AeMarkdown>
                }
            </MudCardContent>
        </MudCard>
    }

}
}
@code {

    [Parameter]
    public FormMetadata<T> Metadata { get; set; }
    [Parameter]
    public EventCallback<EditContext> HandleSubmit { get; set; }
    [Parameter]
    public EventCallback<EditContext> HandleInvalidSubmit { get; set; }
    [Parameter]
    public EventCallback<MudBlazor.Forms.IModelFormContext> OnConfigureForms { get; set; }
    [Parameter]
    public EventCallback<MudBlazor.Forms.ModelFormChangeArgs> OnChangeForms { get; set; }
    [Parameter]
    public EventCallback CreateNewRecord { get; set; }
    [Parameter]
    public T SelectedRecord { get; set; }
    [Parameter]
    public EventCallback<T> SetFormEditRecord { get; set; }
    [Parameter]
    public EventCallback<T> DeleteRecord { get; set; }
    [Parameter]
    public Action<string> HandleFilterChange { get; set; }
    [Parameter]
    public U Context { get; set; }
    [Parameter]
    public bool DisableFirstSort { get; set; }
    [Parameter]
    public Dictionary<string, Func<T, string>> SortAccessors { get; set; }    

    
    
    //end Mud
    private static readonly Regex sWhitespace = new Regex(@"\s+");
    private string _addButton => Localizer["Add New"];


    
    public string ReplaceWhitespace(string input, string replacement)
    {
        return sWhitespace.Replace(input, replacement);
    }

    private void DeleteRow(T selectedRecord)
    { 
        DeleteRecord.InvokeAsync(selectedRecord);        
    }

    private async Task SetFormEdit(T selectedRecord)
    {

        if (Context.ChangeTracker.HasChanges())
        {
            bool? result = await DialogService.ShowMessageBox(
                "Warning",
                "Would you like to save the current record?",
                yesText: "Ok", noText: "Cancel");
            await OnConfirmSave(result);
        }
        await ClearForm();
        await SetFormEditRecord.InvokeAsync(selectedRecord);

    }

    private void OnSearch(string text)
    {
        HandleFilterChange.Invoke(text);        
    }

    private async Task OnConfirmSave(bool? isConfirmed)
    {
        var changedEntries = Context.ChangeTracker.Entries();
        if (isConfirmed is true)
        {

            foreach (var entry in changedEntries.Where(c => c.State == EntityState.Modified))
            {
                entry.Property("Last_Updated_DT").CurrentValue = DateTime.Now;
                entry.Property("Last_Updated_UserId").CurrentValue = Metadata.UserId;                
            }
            await Context.TrackSaveChangesAsync(AuditingService);

        }
        else
        {
            ResetRecordChanges(changedEntries);                  
        }
        await UI.ToggleModal();                
    }

    private void ResetRecordChanges(IEnumerable<EntityEntry> entityEntries)
    { 
        foreach (var entry in entityEntries)
        {
            foreach (var property in entry.OriginalValues.Properties)
            {
                var propertyName = property.Name;
                entry.Property(propertyName).CurrentValue = entry.Property(propertyName).OriginalValue;
                entry.State = EntityState.Unchanged;
            }
        }
    }



    protected override void OnAfterRender(bool firstRender)
    {
        // You must re-render after the components are initialized in order for the 
        // component reference to not be null
        if(firstRender){
            StateHasChanged();
        }
    }

    private async Task OnConfigure(MudBlazor.Forms.IModelFormContext context)
    {        
        if (context != null)
        {
            await OnConfigureForms.InvokeAsync(context);            
        }        
    }

    private async Task OnChange(MudBlazor.Forms.ModelFormChangeArgs args)
    {        
        if (args != null)
        {
            await OnChangeForms.InvokeAsync(args);            
        }        
    }


    private async Task<T> ClearForm()
    {
        SelectedRecord = default(T);
        var changedEntries = Context.ChangeTracker.Entries();
        ResetRecordChanges(changedEntries);
        StateHasChanged();    
        return await Task.FromResult(default(T));
    }

    private string GetDataLabel(string propName)
    {
        if (!string.IsNullOrEmpty(propName))
            return DataLocalizer[propName];

        return string.Empty;
    }

    private async Task HandleFormSubmit(EditContext editContext)
    {
        await HandleSubmit.InvokeAsync(editContext);
    }

    private async Task HandleFormInvalidSubmit(EditContext editContext)
    {
        await HandleInvalidSubmit.InvokeAsync(editContext);
    }

}
