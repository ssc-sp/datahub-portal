@*DHPageAlert.razor*@
@using System.Web
@using System.Globalization
@using Datahub.Core.Services.UserManagement;
@inject CultureService _cultureService
@inject NavigationManager _navigationManager
@inject IJSRuntime _jsInterop
@inject ILogger<DHPageAlert> _logger
@inject IConfiguration configuration
@inject IHttpClientFactory _httpClientFactory

@if (_contentFound)
{
    <PageAlert Title="@Localizer[Title]" Key=@Key>
        <DHMarkdown Content="@_markdownContent" LinkRewriter="@RewriteLink"/>
    </PageAlert>
}

@code {

    [Parameter]
    public string Title { get; set; }

    [Parameter]
    public string Key { get; set; }

    [Parameter]
    public string WikiLinkEN { get; set; }

    [Parameter]
    public string WikiLinkFR { get; set; }

    private const string DefaultPage = "Home";
    private string _markdownContent = string.Empty;
    private string _baseUrl = "/resources";
    private bool _contentFound = false;

    private string RewriteLink(string link)
    {
        if (link.StartsWith("http"))
            return link;
        return _baseUrl + "/" + HttpUtility.UrlEncode(link);
    }

    protected override async Task OnParametersSetAsync()
    {
        var pageAlertEnabled = configuration.GetValue<bool>("PageAlertsEnabled", true);
        if (pageAlertEnabled)
        {
            var link = _cultureService.IsFrench ? WikiLinkFR : WikiLinkEN;
            var content = await LoadPage(link ?? DefaultPage);
            _markdownContent = content ?? Localizer[$"{link} cannot be found"];
            _contentFound = content != null;
        } else
        {
            _contentFound = false;
        }
    }

    private async Task<string> LoadPage(string name)
    {
        if (name.StartsWith("/")) 
            name = name[1..];

        var wikiRoot = configuration["WikiURL"];
        var fullUrl = $"{wikiRoot}{name}.md";

        var client = _httpClientFactory.CreateClient();
        try
        {
            return await client.GetStringAsync(fullUrl);
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, $"Cannot load page '{name}' from Wiki", fullUrl);
            return null;
        }
    }
}
