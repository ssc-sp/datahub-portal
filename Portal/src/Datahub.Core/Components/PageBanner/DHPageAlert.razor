@*DHPageAlert.razor*@
@using System.Web
@using Datahub.Core.Services.UserManagement;
@using Datahub.Markdown;
@inject CultureService _cultureService
@inject UserSettingsService _userSettingsService
@inject ILogger<DHPageAlert> _logger
@inject IConfiguration _configuration
@inject IHttpClientFactory _httpClientFactory
@inject IDialogService _dialogService

@code {

    [Parameter]
    public string Title { get; set; }

    [Parameter]
    public string Key { get; set; }

    [Parameter]
    public string WikiLinkEN { get; set; }

    [Parameter]
    public string WikiLinkFR { get; set; }

        private const string DefaultPage = "Home";
    private string _markdownContent = string.Empty;
    private string _baseUrl = "/resources";
    private bool _contentFound = false;

    private string RewriteLink(string link)
    {
        if (link.StartsWith("http"))
            return link;
        return _baseUrl + "/" + HttpUtility.UrlEncode(link);
    }

    protected override async Task OnInitializedAsync()
    {
        var hideAlerts = await _userSettingsService.GetHideAlerts();
        if (!hideAlerts)
        {
            var link = _cultureService.IsFrench ? WikiLinkFR : WikiLinkEN;
            var content = await LoadPage(link ?? DefaultPage);
            var hiddenAlerts = await _userSettingsService.GetHiddenAlerts();
            
            _markdownContent = content ?? Localizer[$"{link} cannot be found"];
            _contentFound = content != null;
            if (_contentFound && !hiddenAlerts.Contains(Key))
            {
                await OpenDialog();
            }
            
        }
        else
        {
            _contentFound = false;
        }
    }

    private async Task<string> LoadPage(string name)
    {
        if (name.StartsWith("/"))
            name = name[1..];

        var wikiRoot = _configuration["WikiURL"];
        var fullUrl = $"{wikiRoot}{name}.md";

        var client = _httpClientFactory.CreateClient();
        try
        {
            var output = await client.GetStringAsync(fullUrl);
            return MarkdownHelper.RemoveFrontMatter(output);
        }
        catch (Exception ex)
        {
            _logger.LogWarning(ex, $"Cannot load page '{name}' from Wiki", fullUrl);
            return null;
        }
    }

    private async Task OpenDialog()
    {
        var parameters = new DialogParameters
        {
            { "Title", Title },
            { "Key", Key },
            { "Content", _markdownContent },
            { "RewriteLink", (string s) => RewriteLink(s) }
        };

        var options = new DialogOptions
        {
            CloseButton = true,
            MaxWidth = MaxWidth.Medium,
            FullWidth = true
        }; 

        var dialog = await _dialogService.ShowAsync<DHPageAlertDialog>(Localizer["Page alert"], parameters, options);
        var result = await dialog.Result;
        
        if (result.Data is string s1 && s1 == "close")
        {
            await _userSettingsService.AddHiddenAlert(Key);
        }
        if (result.Data is string s2 && s2 == "hide")
        {
            await _userSettingsService.SetHideAlerts(true);
        }
    }

}