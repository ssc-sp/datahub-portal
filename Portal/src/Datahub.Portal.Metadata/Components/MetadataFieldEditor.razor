@*MetadataFieldEditor.razor*@
@using Datahub.Metadata.Model

<MudStack>
    @if (Preview)
    {
        <MudTextField Value=@(!FieldDefinition.HasChoices ? BoundValue : ChoiceDisplay)
                      Label=@FieldDefinition.Name
                      HelperText=@FieldDefinition.Description
                      DisableUnderLine="true"
                      ReadOnly="true"                       
                      Variant="Variant.Filled"
                      Margin="Margin.Dense" />
    }
    else
    {
        var fieldChoices = GetChoices();
        if (fieldChoices.Count == 0)
        {
            if (IsKeywordField())
            {
                <KeywordInput FieldValue="FieldValue" 
                              FieldDefinition=@FieldDefinition
                              English="@IsEnglishField()"
                              Subject="@Subject"
                              FieldPair=@FieldPair
                              OnFieldChanged="OnFieldChanged" />
            }
            else
            {
                if (FieldDefinition.IsDateField)
                {
                    <MudDatePicker @bind-Date="BoundDate" 
                                   Label=@FieldDefinition.Name
                                   Required=@Required
                                   HelperText=@FieldDefinition.Description 
                                   Variant="Variant.Outlined"
                                   DateFormat="yyyy-MM-dd"
                                   Margin="Margin.Dense" />
                }
                else
                {
                    var canTranslate = CanAcceptTranslation();
                    <MudTextField @bind-Value="BoundValue"
                                  DebounceInterval="250"  
                                  Label=@FieldDefinition.Name
                                  HelperText=@FieldDefinition.Description
                                  Clearable="!canTranslate"
                                  Required=@Required
                                  Adornment=@(canTranslate ? Adornment.End : Adornment.None)
                                  AdornmentIcon=@Icons.Filled.GTranslate
                                  AdornmentAriaLabel=@(canTranslate ? GetTranslationHint() : "")
                                  OnAdornmentClick=@HandleTranslateField
                                  RequiredError=@(FieldDefinition.Description ?? Localizer["Required"])
                                  Variant="Variant.Outlined"
                                  Margin="Margin.Dense" />
                }
            }
        }
        else
        {
            if (!FieldDefinition.MultiSelect_FLAG)
            {
                var oneChoice = FieldDefinition.Choices.Count == 1;
                var allowEmptyOption = !oneChoice && string.IsNullOrEmpty(FieldDefinition.Default_Value_TXT);

                <MudSelect T="string"
                           Label=@FieldDefinition.Name
                           @bind-Value=@BoundValue
                           Required=@Required
                           Variant="Variant.Outlined"
                           HelperText=@FieldDefinition.Description
                           AnchorOrigin="Origin.BottomCenter"
                           AdornmentIcon=@Icons.Filled.ArrowDropDown
                           Margin="Margin.Dense">

                    @if (allowEmptyOption)
                    {
                        <MudSelectItem T="string" />
                    }

                    @foreach (var choice in fieldChoices)
                    {
                        <MudSelectItem T="string" Value=@choice.Value_TXT>@choice.Label</MudSelectItem>
                    }
                </MudSelect>
            }
            else
            {
                <MultiSelectList FieldDefinition="FieldDefinition" FieldValue="FieldValue" OnFieldChanged="OnFieldChanged" />
            }
        }
    }
</MudStack>

@code {

    [Inject]
    public TranslationService _translationService { get; set; }

    [Parameter]
    public bool Required { get; set; }

    [Parameter]
    public bool Preview { get; set; }

    [Parameter]
    public ObjectFieldValue FieldValue { get; set; }

    [Parameter]
    public FieldDefinition FieldDefinition { get; set; }

    [Parameter]
    public string FieldLabel { get; set; }

    [Parameter]
    public string Subject { get; set; }

    [Parameter]
    public TranslatedFieldPair FieldPair { get; set; }

    [Parameter]
    public EventCallback<ObjectFieldValue> OnFieldChanged { get; set; }

    [Parameter]
    public string CascadingValue { get; set; }

    private string _cascadingValue;

    protected override void OnInitialized()
    {
        _cascadingValue = CascadingValue;
    }

    protected override async Task OnParametersSetAsync()
    {
        if (_cascadingValue != CascadingValue)
        {
            _cascadingValue = CascadingValue;
            if (!string.IsNullOrEmpty(FieldValue.Value_TXT))
            {
                FieldValue.Value_TXT = string.Empty;
                await OnFieldChanged.InvokeAsync(FieldValue);
            }
        }
    }

    private string BoundValue
    {
        get => FieldValue.Value_TXT;
        set
        {
            if (value != FieldValue.Value_TXT)
            {
                FieldValue.Value_TXT = value;
                OnFieldChanged.InvokeAsync(FieldValue);
                StateHasChanged();
            }
        }
    }

    private DateTime? BoundDate 
    {
        get
        {
            return DateTime.TryParse(FieldValue.Value_TXT, out DateTime date) ? date : DateTime.Today;
        }
        set 
        {
            var txtDate = value?.ToShortDateString() ?? "";
            FieldValue.Value_TXT = txtDate;
            OnFieldChanged.InvokeAsync(FieldValue);
        }
    }

    private string ChoiceDisplay => !FieldDefinition.MultiSelect_FLAG ? GetChoiceLabel(FieldValue.Value_TXT) : GetMultiChoiceLabels(FieldValue.Value_TXT);

    private string GetChoiceLabel(string name)
    {
        return FieldDefinition.Choices.FirstOrDefault(c => c.Value_TXT == name)?.Label;
    }

    private string GetMultiChoiceLabels(string values)
    {
        var labels = (values ?? string.Empty).Split('|').Select(GetChoiceLabel);
        return string.Join(", ", labels); 
    }

    private bool IsKeywordField()
    {
        return FieldDefinition.Field_Name_TXT.StartsWith("keywords_");
    }

    private bool IsEnglishField()
    {
        return FieldDefinition.Field_Name_TXT.EndsWith("_en");
    }

    private bool CanAcceptTranslation()
    {
        if (Preview || IsKeywordField())
            return false;

        return FieldPair?.GetPaired(FieldValue) is not null && string.IsNullOrEmpty(FieldValue.Value_TXT);
    }

    private bool TranslatePairDisabled()
    {
        var otherField = FieldPair?.GetPaired(FieldValue);
        return string.IsNullOrEmpty(otherField?.Value_TXT);
    }

    private string GetTranslationHint()
    {
        var otherField = FieldPair?.GetPaired(FieldValue);
        var message = Localizer["Suggest translation for:"];
        return $"{message} \"{otherField?.Value_TXT}\"";
    }

    private async void HandleTranslateField()
    {
        try
        {
            var pairedText = FieldPair?.GetPaired(FieldValue)?.Value_TXT;
            if (!string.IsNullOrEmpty(pairedText))
            {
                var translation = IsEnglishField() 
                    ? await _translationService.GetEnglishTranslation(pairedText)
                    : await _translationService.GetFrenchTranslation(pairedText);

                if (!string.IsNullOrEmpty(translation))
                {
                    BoundValue = translation;
                }
            }
        }
        catch (Exception)
        {
        }
    }

    private List<FieldChoice> GetChoices()
    {
        return FieldDefinition.Choices.Where(c => c.Cascading_Value_TXT == "*" || c.Cascading_Value_TXT == CascadingValue).ToList();
    }
}