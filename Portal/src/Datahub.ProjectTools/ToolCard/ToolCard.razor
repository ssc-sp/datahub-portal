@using MudBlazor.Utilities
@using Foundatio


<MudPaper Class="@_cardCss" Style="@_cardStyle">
    <MudStack Justify="Justify.SpaceBetween">
        <MudStack>
            <MudStack Row AlignItems="AlignItems.Baseline">
                @if (Logo != null)
                {
                    @Logo
                }
                else
                {
                    <MudIcon Icon="fa-solid fa-tools" Size="Size.Large"/>
                }
                <MudText Class="mb-3" Typo="Typo.h5">@Title</MudText>
            </MudStack>
            <MudElement Class="mb-2">
                @if (!string.IsNullOrWhiteSpace(Subtitle))
                {
                    <MudText Class="mb-2" Typo="Typo.h6">@Subtitle</MudText>
                }
                <MudText Typo="Typo.body2">@Description</MudText>
                @if (!string.IsNullOrWhiteSpace(ReadMorePath))
                {
                    <MudButton Class="my-1 ml-n1" Href="@ReadMorePath" Size="Size.Small" Variant="Variant.Text" EndIcon="@Icons.Filled.KeyboardDoubleArrowRight">
                        @Localizer["Learn More"]
                    </MudButton>
                }
            </MudElement>
        </MudStack>
        <MudStack>
            <MudElement>
                @if (ToolActionsList != null)
                {
                    <MudStack AlignItems="AlignItems.Start" Justify="Justify.FlexEnd" Class="flex-1 my-2">
                        @ToolActionsList
                    </MudStack>
                }
                @if (Tags?.Count > 0)
                {
                    <MudElement Class="d-inline-flex flex-wrap mt-2">
                        @foreach (var tag in Tags)
                        {
                            <MudChip Text="@tag" Color="Color.Default" Variant="Variant.Outlined" Size="Size.Small"/>
                        }
                    </MudElement>
                }
            </MudElement>
        </MudStack>
    </MudStack>
</MudPaper>


@code {

    [Parameter]
    public bool Loading { get; set; }

    [Parameter]
    public RenderFragment? Logo { get; set; }

    [Parameter]
    public RenderFragment? ToolActionsList { get; set; }

    [Parameter]
    public string? Title { get; set; }

    [Parameter]
    public string? Subtitle { get; set; }

    [Parameter]
    public string? Description { get; set; }
    
    [Parameter]
    public string? ReadMorePath { get; set; }


    private string? _descriptionStyle;
    private string? _cardContentStyle;
    private string? _cardCss;
    private string? _cardStyle;

    [Parameter]
    public List<string>? Tags { get; set; }


    protected override void OnInitialized()
    {
        _cardCss = new CssBuilder()
            .AddClass("pa-6")
            .AddClass("d-flex")
            .Build();

        _cardStyle = new StyleBuilder()
            .AddStyle("flex-basis", "400px")
            .AddStyle("flex-grow", "1")
            .AddStyle("max-width", "calc(50% - 8px)")
            .Build();

        _descriptionStyle = new StyleBuilder()
            .Build();

        _cardContentStyle = new StyleBuilder()
            .AddStyle("min-height", "140px")
            .Build();
    }

}