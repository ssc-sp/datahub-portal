@page "/powerbi/{projectAcronym}"
@using Datahub.PowerBI.Services
@using Datahub.Core.Model.Datahub
@using Datahub.Application.Services.UserManagement
@inject IPowerBiDataService PowerBiDataService
@inject IUserInformationService UserInfoService
@inject IMSGraphService MsGraphService
@inject UIControlsService UiControls

<div style="padding-left: 2rem;padding-right: 2rem">

    <AeCard>
        <ChildContent>
            <AeTypography Variant="h1">@Localizer["PowerBiReportsFor", projectAcronym]</AeTypography>
            <AeTypography Variant="p">@Localizer["PowerBiReportListIntro"]</AeTypography>
            <AeTypography Variant="p">@Localizer["PowerBiReportListSandbox"]</AeTypography>
        </ChildContent>
    </AeCard>
    <AeCard>
                
        <ChildContent>
            @if (_isLoading)
            {
                <Spinner />
            }
            else if (_powerBiReports.Count < 1)
            {
                <AeTypography Variant="p">@Localizer["No_Reports_Available"]</AeTypography>
            }
            else
            {
                <AePaginatedTable
                    Accessors=@accessors
                    Renderers=@renderers
                    Dataset=@_powerBiReports
                    Headers=@(LocalizeHeaders(headers))
                    @ref=@_reportTable
                    Page=@_currentPage
                    PageSize="20"
                    GridTemplateColumns="9fr 9fr 4fr 6fr"
                    @key=@_powerBiReports/>
                        
                <AePagination Pageable=@_reportTable OnPageClick=@OnPageClick> 
                    <LeftIcon><i class='fad fa-chevron-double-left'></i></LeftIcon> 
                    <RightIcon><i class='fad fa-chevron-double-right'></i></RightIcon>
                </AePagination>
            }
        </ChildContent>
        <Footer>
            <label>
                <input type="checkbox" checked=@IncludeSandbox @oninput=@IncludeSandboxChanged />
                @Localizer["Include_Sandbox_Workspaces"]
            </label>
        </Footer>
    </AeCard>        
    
</div>


@code {

    [Parameter]
    public string projectAcronym { get; set; }

    private List<PowerBiReport> _powerBiReports = new();
    private int _currentPage = 0;
    private IPageableComponent _reportTable;

    private string currentUserEmail;

    private bool IncludeSandbox { get; set; } = false;

    private bool _isLoading = false;

    private void OnPageClick(int pageIndex)
    {
        _currentPage = pageIndex;
    }

    private List<string> headers = new()
    {
        "Power BI Workspace",
        "PowerBiReport",
        "CatalogEntry",
        "External_Access"
    };

    private List<Func<PowerBiReport, string>> accessors = new()
    {
        r => r.Workspace?.WorkspaceName ?? string.Empty,
        r => r.ReportName,
        r => r.InCatalog.ToString(),
        null
    };

    private List<Func<PowerBiReport, RenderFragment>> renderers = new();


    private List<string> LocalizeHeaders(List<string> input) => input.Select(s => Localizer[s].ToString()).ToList();

    protected override async Task OnInitializedAsync()
    {
        var currentUser = await UserInfoService.GetCurrentGraphUserAsync();
        currentUserEmail = currentUser.Mail;

        renderers = new()
        {
            null,
            ReportLinkFragment,
            CatalogEntryFragment,
            ExternalReport
        };

        if (projectAcronym != null)
        {
            await LoadReports();
        }
    }

    private async Task IncludeSandboxChanged(ChangeEventArgs e)
    {
        var value = e.Value as bool?;
        if (value.HasValue)
        {
            IncludeSandbox = value.Value;
            await LoadReports();
        }
    }

    private async Task LoadReports()
    {
        _isLoading = true;
        StateHasChanged();
        _powerBiReports = await PowerBiDataService.GetReportsForProjectWithExternalReportInfo(projectAcronym, IncludeSandbox);

        _isLoading = false;
        StateHasChanged();
    }

    protected override void OnAfterRender(bool firstRender)
    {
        // You must re-render after the components are initialized in order for the
        // component reference to not be null
        if (firstRender)
        {
            StateHasChanged();
        }
    }



    public async Task CloseDialog(bool reload)
    {
        var refreshTask = reload ? RefreshTable() : Task.CompletedTask;
        UiControls.HideDialog();
        await refreshTask;
    }

    public async Task RefreshTable()
    {
        _powerBiReports = await PowerBiDataService.GetReportsForProjectWithExternalReportInfo(projectAcronym, IncludeSandbox);
    }

    private void OpenMetadataEditor(PowerBiReport r)
    {
        RenderFragment reportEditor = @<Datahub.PowerBI.Pages.PowerBI.PowerBiReportMetadataEditor 
            PowerBiReportId=@r.ReportID 
            ProjectAcronym=@projectAcronym 
            OnCloseDialog=@CloseDialog />;
        UiControls.ShowDialog(r.ReportName, @<RenderFragmentModal Fragment=reportEditor />);
    }

    private RenderFragment ExternalReport(PowerBiReport r) => @<Datahub.PowerBI.Pages.Project.PowerBiReports.ExternalReportRequest Report=@(r) RefreshTable=RefreshTable CurrentUserEmail=@currentUserEmail/>;

    private RenderFragment ReportLinkFragment(PowerBiReport r) =>
    @<MudText>
        <DHLink 
                LinkType=@DatahubLinkType.PowerBI
                DataProject=@(r.Workspace.Project?.ProjectAcronymCD) 
                PBIWorkspaceId=@(r.WorkspaceId.ToString())
                PBIReportId=@(r.ReportID.ToString())
                Name=@(r.ReportName)>
            @r.ReportName
        </DHLink>
    </MudText>;

    private RenderFragment InCatalogIcon = @<MudIcon Color=@Color.Success Icon=@Icons.Material.Filled.Check />;
    private RenderFragment NotInCatalogIcon = @<MudIcon Color=@Color.Error Icon=@Icons.Material.Filled.Close />;

    private RenderFragment CatalogEntryFragment(PowerBiReport r) =>
    @<MudStack Row AlignItems=@AlignItems.Center >
        @(r.InCatalog? InCatalogIcon: NotInCatalogIcon)
        <MudTooltip Text="@Localizer["Edit"]">
            <MudIconButton Icon="@Icons.Material.Filled.Edit" OnClick="@(() => OpenMetadataEditor(r))" />
        </MudTooltip>
        <Datahub.PowerBI.Pages.PowerBI.InternalPublishedPowerBIReportLinks ReportID=@r.ReportID.ToString() />
    </MudStack>;


}
