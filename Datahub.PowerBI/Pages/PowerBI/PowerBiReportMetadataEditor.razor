@using Datahub.Metadata.Model
@using Datahub.Portal.Metadata.Components;
@using Datahub.PowerBI.Data;
@inject IPowerBiDataService _powerBiDataService
@inject TranslationService _translationService
@inject IMetadataBrokerService _metadataService
@inject IDbContextFactory<DatahubProjectDBContext> _projectDbFactory

@if (_report == null)
{
    <Spinner />
}
else
{
    <MudStack>
        <MudCheckBox @bind-Checked=@_includeInCatalog>@Localizer["Catalog"]</MudCheckBox>

        <MudSelect T=@CatalogObjectLanguage
                   Disabled=@NotIncludedCurrentItemInCatalog
                   Label=@Localizer[$"Language"]
                   @bind-Value=@_catalogObjectLanguage
                   Variant="Variant.Outlined"
                   AnchorOrigin="Origin.BottomCenter"
                   AdornmentIcon=@Icons.Filled.ArrowDropDown
                   Margin="Margin.Dense">

            <MudSelectItem T=@CatalogObjectLanguage Value=@CatalogObjectLanguage.Bilingual>
                @Localizer["Bilingual"]
            </MudSelectItem>
            
            <MudSelectItem T=@CatalogObjectLanguage Value=@CatalogObjectLanguage.English>
                @Localizer["English"]
            </MudSelectItem>
            
            <MudSelectItem T=@CatalogObjectLanguage Value=@CatalogObjectLanguage.French>
                @Localizer["French"]
            </MudSelectItem>
        </MudSelect>

        @if (_siblingReports.Count > 0)
        {
            <MudSelect 
                T="string" 
                Disabled=@NotIncludedCurrentItemInCatalog 
                Label=@Localizer[$"Grouped with"]
                @bind-Value="@GroupWithId" Variant="Variant.Outlined"
                AnchorOrigin="Origin.BottomCenter"
                AdornmentIcon=@Icons.Filled.ArrowDropDown
                Margin="Margin.Dense">

                <MudSelectItem T="string"></MudSelectItem>
                @foreach (var report in _siblingReports)
                {
                    <MudSelectItem T="string" Value="@report.Report_ID.ToString()">
                        @report.Report_Name
                    </MudSelectItem>
                }
            </MudSelect> 
        }
    </MudStack>

    @*metadata*@
    <MudStack Class="mt-4 mb-4">
        <MudText Typo="Typo.h6">@Localizer[$"{LOCALIZATION_PREFIX}.Metadata"]</MudText>

        <ObjectMetadataEditor 
            @ref=@_reportMetadata
            ObjectId=@PowerBiReportId.ToString()
            Location="PowerBI"
            ProfileName="catalog"
            ObjectType=@Metadata.Model.MetadataObjectType.PowerBIReport
            UpdateCatalog=@_includeInCatalog
            ValidateRequired
            Name=@_report.Report_Name
            HideSaveButton
            CatalogLanguage=@_catalogObjectLanguage
            OnValuesChanged=@(() => StateHasChanged())
            DefaultMetadataId=@ProjectAcronym
            ProjectId=@_projectId
            OnNewMetadataCreated=@AutoFillNewMetadataFields
            OnExistingMetadataLoaded=@DetectIfCurrentItemIsInCatalog />

        <MudStack Row>
            <MudButton OnClick=@SaveReport Disabled=@SaveReportDisabled Variant="Variant.Outlined" Color="Color.Primary">
                @if (_isSavingReport)
                {
                    <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                    <MudText Class="ms-2">@Localizer[$"BUTTONS.Save"]</MudText>
                }
                else
                {
                    <MudText>@Localizer[$"BUTTONS.Save"]</MudText>
                }
            </MudButton>

            <MudButton OnClick=@CancelEditing Variant="Variant.Outlined" Color="Color.Default">
                <MudText>@Localizer[$"BUTTONS.Cancel"]</MudText>
            </MudButton>
        </MudStack>
    </MudStack>
}

@code {

    private static string LOCALIZATION_PREFIX = $"{PowerBiManagementConstants.POWERBI_MANAGEMENT_LOCALIZATION_ROOT_KEY}.POWER_BI_ADMIN";

    [Parameter]
    public Guid PowerBiReportId { get; set; }

    [Parameter]
    public string ProjectAcronym { get; set; }

    [Parameter]
    public EventCallback<bool> OnCloseDialog { get; set; }

    private PowerBi_Report _report;
    private List<PowerBi_Report> _siblingReports;
    private string _groupWithId;

    private string GroupWithId
    {
        get
        {
            return _groupWithId;
        }
        set
        {
            _groupWithId = value;
            if (!string.IsNullOrEmpty(value))
            {
                _ = _reportMetadata.CopyMetadataFrom(value);
            }
        }
    }

    private ObjectMetadataEditor _reportMetadata;
    private int _projectId;

    private bool _isSavingReport;
    private bool SaveReportDisabled => _isSavingReport || (_reportMetadata?.SaveDisabled ?? false);
    private SuccessIndicator _saveReportInd;

    private bool _includeInCatalog = true;
    private CatalogObjectLanguage _catalogObjectLanguage;

    private bool NotIncludedCurrentItemInCatalog => !_includeInCatalog;


    private async Task AutoFillNewMetadataFields()
    {
        if (_reportMetadata == null)
        {
            return;
        }

        var currentTitle = _report.Report_Name;
        if (string.IsNullOrEmpty(currentTitle))
        {
            return;
        }

        var titleFr = await _translationService.GetFrenchTranslation(currentTitle);

        _reportMetadata.SetValue(PowerBiManagementConstants.TITLE_EN_METADATA_FIELD, currentTitle);
        _reportMetadata.SetValue(PowerBiManagementConstants.TITLE_FR_METADATA_FIELD, titleFr);

        var currentProjectId = _report.Workspace.Project_Id;
        if (currentProjectId.HasValue)
        {
            var projectAdmins = "TODO";
            //var projectAdmins = GetProjectAdmins(currentProjectId.Value);
            _reportMetadata.SetValue(PowerBiManagementConstants.CONTACT_INFO_METADATA_FIELD, projectAdmins);
        }

        await Task.CompletedTask;
    }

    private async Task DetectIfCurrentItemIsInCatalog()
    {
        if (_reportMetadata == null)
        {
            // reset boolean to default, just in case
            _includeInCatalog = true;
            return;
        }

        _includeInCatalog = await _metadataService.IsObjectCatalogued(_reportMetadata.ObjectId);
    }

    private async Task SaveReport()
    {
        if (_report == null)
        {
            await Task.CompletedTask;
            return;
        }

        _isSavingReport = true;
        StateHasChanged();

        var success = await _reportMetadata.SaveChanges();

        if (success)
        {
            if (_includeInCatalog)
            {
                // group the report
                if (!string.IsNullOrEmpty(_groupWithId))
                {
                    var group = new List<string> { PowerBiReportId.ToString(), _groupWithId };
                    await _metadataService.GroupCatalogObjects(group);
                }
            }
            else
            {
                // todo: ungroup the report
                await _metadataService.DeleteFromCatalog(_reportMetadata.ObjectId);
            }
            // update the in catalog flag
            await _powerBiDataService.UpdateReportCatalogStatus(PowerBiReportId, _includeInCatalog);
        }

        if (success)
        {
            await _saveReportInd.SignalSuccess();
            await CloseItemBeingEdited(true);
        }
        else
        {
            await _saveReportInd.SignalFailure();
        }
    }

    private async Task CancelEditing() => await CloseItemBeingEdited(false);

    private async Task CloseItemBeingEdited(bool isSaved)
    {
        if (OnCloseDialog.HasDelegate)
        {
            await OnCloseDialog.InvokeAsync(isSaved);
        }
    }

    private async Task<List<PowerBi_Report>> GetReportsForGrouping(PowerBi_Report report)
    {
        var siblings = await _powerBiDataService.GetWorkspaceReports(report.Workspace_Id);
        return siblings.Where(r => r.InCatalog && r.Report_ID != report.Report_ID).ToList();
    }

    private async Task<string> GetGroupedWith(PowerBi_Report report)
    {
        var reportId = report.Report_ID.ToString().ToLower();
        var group = await _metadataService.GetObjectCatalogGroup(reportId);
        return group.FirstOrDefault(id => !id.Equals(reportId, StringComparison.OrdinalIgnoreCase));
    }


    protected override async Task OnParametersSetAsync()
    {
        _report = await _powerBiDataService.GetReportById(PowerBiReportId, true);
        _siblingReports = await GetReportsForGrouping(_report);
        _groupWithId = await GetGroupedWith(_report);
        _catalogObjectLanguage = await _metadataService.GetCatalogObjectLanguage(PowerBiReportId.ToString()) ?? CatalogObjectLanguage.Bilingual;
    }

    protected override async Task OnInitializedAsync()
    {
        var ctx = await _projectDbFactory.CreateDbContextAsync();
        var project = await ctx.Projects.FirstOrDefaultAsync(p => p.Project_Acronym_CD == ProjectAcronym);
        _projectId = project?.Project_ID ?? 0;
    }

}
