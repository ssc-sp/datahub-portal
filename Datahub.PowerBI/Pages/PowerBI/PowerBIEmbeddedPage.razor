@page "/powerbi-report/{GroupId}/{ReportId}"
@page "/powerbi-report/{ReportId}"

@using Microsoft.Rest
@using Microsoft.Identity.Web

@inject IJSRuntime _jsRuntime
@inject PowerBiServiceApi _powerBiServiceApi
@inject MicrosoftIdentityConsentAndConditionalAccessHandler _consentHandler
@inject IPowerBiDataService _powerBiDataService

@if (!string.IsNullOrEmpty(reportTitle))
{
    <AeTypography Variant="h1">@reportTitle</AeTypography>
}

@if (ErrorLoadingReport)
{
    <EmbeddedReportAccessError ReportIdGuid=@ReportIdGuid />
}
else
{
    <div @ref="@PowerBIElement" style="width:100%;height:600px;max-width: 2000px" />
}

@if (!string.IsNullOrEmpty(projectAcronym))
{
    <div>
        <DHLink DataProject=@projectAcronym>@Localizer[$"{LOCALIZATION_PREFIX}.ReturnToX", @projectAcronym]</DHLink>
    </div>
}

@code {
    private const string LOCALIZATION_PREFIX = "POWER_BI_REPORT";

    [Parameter]
    public string ReportId {  get;  set; }

    [Parameter]
    public string GroupId {  get;  set; }

    [Parameter]
    [SupplyParameterFromQuery]
    public bool ReadOnly { get; set; }

    private Guid ReportIdGuid;

    private ElementReference PowerBIElement;

    private Report report;
    private string reportToken;

    private bool ErrorLoadingReport = false;

    private PowerBi_Report dbReport = null;

    private PowerBi_Workspace dbWorkspace => dbReport?.Workspace;
    private Datahub_Project project => dbWorkspace?.Project;
    private string projectAcronym => project?.Project_Acronym_CD;
    private string reportTitle => dbReport?.Report_Name;

    protected override async Task OnInitializedAsync()
    {
        if (!Guid.TryParse(ReportId, out ReportIdGuid))
        {
            // it's invalid and will fail later
            // maybe do something here
        }

        try
        {
            if (GroupId is null)
            {
                report = await _powerBiServiceApi.GetReport(ReportId);                
            }
            else
            {
                report = await _powerBiServiceApi.GetReport(ReportId, GroupId);                
            }

            reportToken = await _powerBiServiceApi.GetAccessTokenAsync();

        } 
        catch (MicrosoftIdentityWebChallengeUserException e)
        {
            // user isn't logged into Power BI -> redirect to Microsoft
            _consentHandler.HandleException(e);
        }
        catch (HttpOperationException)
        {
            // couldn't load the report - missing or unauthorized
            ErrorLoadingReport = true;
        }
        catch (Exception)
        {
            // some other exception, crash and log like normal
            throw;
        }

        dbReport = await _powerBiDataService.GetReportById(ReportIdGuid, true);

        var pbiSettings = new PowerBISettings();
        if (ReadOnly)
        {
            pbiSettings.bars.actionBar.visible = false;
            pbiSettings.navContentPaneEnabled = false;            
        }

        if (report != null)
        {
            await _jsRuntime.InvokeAsync<object>(
                "ShowMyPowerBI.showReport",
                PowerBIElement, reportToken, report.EmbedUrl,
                report.Id.ToString(), pbiSettings);
        }
    }
    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            // ??
        }
    }

    private const string AuthorityFormat = "https://login.microsoftonline.com/{0}/v2.0";
    private const string MSGraphScope = "https://analysis.windows.net/powerbi/api/.default";
}
