@page "/powerbi-consent/{ReportId}/{ExternalReportId}"
@inject IDbContextFactory<DatahubProjectDBContext> DbFactoryProject
@inject IJSRuntime JSRuntime
@inject IConfiguration _configuration
@inject IEmailNotificationService EmailService
@inject IPowerBiDataService PowerBiDataService
@inject PowerBiServiceApi PowerBiServiceApi
@inject IStringLocalizer<PowerBIConsent> DataLocalizer
@inject NavigationManager NavigationManager
@inject PowerBiServiceApi PowerBiServiceApi
@using Datahub.PowerBI.Data;
@using Microsoft.Identity.Web
@using System.Security.Cryptography;
@using Microsoft.AspNetCore.Cryptography.KeyDerivation;
@inject MicrosoftIdentityConsentAndConditionalAccessHandler ConsentHandler
@inject ILogger<PowerBIConsent> _logger

<h3>Admin Power BI Consent Page</h3>
@if (report != null)
{

        <h4>Data Set Id: @report.DatasetId</h4>
        <h4>Name: @report.Name</h4>
        <h4>Type: @report.ReportType</h4>
        <h4>Description: @report.Description</h4>

        <AeButton @onclick="async () => await OnCreateUrl()">Create External Link (valid for @_tokenDurationDays days)</AeButton>

        <h4>@reportToken</h4>
  
        <div @ref="@PowerBIElement" style="width:100%;height:600px;max-width: 2000px">@_errorMessage</div>
    
}
@code {
    [Parameter]
    public string ReportId { get;  set; }

    [Parameter]
    public string ExternalReportId { get;  set; }

    [Parameter]
    [SupplyParameterFromQuery]
    public bool ReadOnly { get; set; }

    private ElementReference PowerBIElement;

    private Report report;
    private string reportToken;

    private string _errorMessage;
    private int _tokenDurationDays;

    protected override void OnInitialized()
    {
        base.OnInitialized();
        _tokenDurationDays = _configuration.GetSection("PowerBI")?.GetValue<int>("ExternalDaysToken", 90) ?? 90;
    }

    private async Task OnCreateUrl()
    {
        using var context = DbFactoryProject.CreateDbContext();
        var extreport = context.ExternalPowerBiReports.Where(r => r.ExternalPowerBiReport_ID.ToString() == ExternalReportId).FirstOrDefault();

        //reportToken = await PowerBiServiceApi.GetAccessTokenAsync();
        EmbedToken token = null;
        try
        {
            token = await PowerBiServiceApi.GetEmbedTokenAsync(24 * _tokenDurationDays * 60, report.DatasetId, new Guid(ReportId));
        } catch (Exception ex)
        {
            _logger.LogError(ex, "Error generating token");
            _errorMessage = $"Error generating token: {ex.Message}";
        }
        if (token != null)
        {
            reportToken = token.Token;

            ExternalPowerBiReport exreport = new();

            Guid validationcode = Guid.NewGuid();
            var salt = RandomNumberGenerator.GetBytes(128 / 8);

            string hashed = Convert.ToBase64String(KeyDerivation.Pbkdf2(
                password: validationcode.ToString(),
                salt: salt,
                prf: KeyDerivationPrf.HMACSHA256,
                iterationCount: 100000,
                numBytesRequested: 256 / 8));

            exreport.ExternalPowerBiReport_ID = Convert.ToInt32(ExternalReportId);
            exreport.Token = token.Token;
            exreport.Url = report.EmbedUrl;
            exreport.End_Date = DateTime.Now.AddDays(_tokenDurationDays);
            exreport.Is_Created = true;
            exreport.RequestingUser = extreport.RequestingUser;
            exreport.Report_ID = extreport.Report_ID;
            exreport.Validation_Code = hashed;
            exreport.ValidationSalt = salt;
            exreport.UnhashedValidationCode = validationcode.ToString();
            await PowerBiDataService.UpdateExternalPowerBiRecord(exreport);

            var emailParams = GetEmailParameters(exreport);
            await EmailService.SendPowerBiExternalUrlEmail(emailParams);

            using var context2 = DbFactoryProject.CreateDbContext();
            var extreportdb = context2.ExternalPowerBiReports.Where(r => r.Report_ID.ToString() == ReportId).FirstOrDefault();

            if (extreportdb is not null)
            {
                var pbiSettings = new PowerBISettings();

                if (ReadOnly)
                {
                    pbiSettings.bars.actionBar.visible = false;
                    pbiSettings.navContentPaneEnabled = false;
                }

                await JSRuntime.InvokeAsync<object>(
                    "ShowMyPowerBI.showReportEmbed",
                    PowerBIElement, extreportdb.Token, extreportdb.Url,
                extreportdb.Report_ID.ToString(), pbiSettings);
            }
        }
    }
    
    private PowerBiExternalReportParameters GetEmailParameters(ExternalPowerBiReport report)
    {
        PowerBiExternalReportParameters param = new();
        param.AppUrl = $"/powerbi-report/embed/{report.Report_ID.ToString()}";
        param.App = report;
       
        return param;
    }
    protected override async Task OnInitializedAsync()
    {
        try
        {
            report = await PowerBiServiceApi.GetReport(ReportId);                
           
        } 
        catch (Exception ex)
        {
            HandleError(ex);
        }
    }

    private void HandleError(Exception ex)
    {
        _errorMessage = $"Internal error loading report {ReportId}.";
        try
        {
            ConsentHandler.HandleException(ex);        
        }
        catch (Exception)
        {
            // >>
        }
    }

    protected override Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // >>
        }
        return Task.CompletedTask;
    }

    private const string AuthorityFormat = "https://login.microsoftonline.com/{0}/v2.0";
    private const string MSGraphScope = "https://analysis.windows.net/powerbi/api/.default";
}
