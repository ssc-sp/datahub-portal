@page "/admin/powerbi"
@page "/admin/powerbi/{ProjectAcronym}"
@page "/admin/powerbi/report/{ReportId}"
@page "/admin/powerbi/dataset/{DatasetId}"
@page "/admin/powerbi/workspace/{WorkspaceId}"
@page "/admin/powerbi/{ProjectAcronym}/report/{ReportId}"
@page "/admin/powerbi/{ProjectAcronym}/dataset/{DatasetId}"
@page "/admin/powerbi/{ProjectAcronym}/workspace/{WorkspaceId}"

@inject IPowerBiDataService _powerBiDataService
@inject PowerBiServiceApi _powerBiServiceApi
@inject Microsoft.Identity.Web.MicrosoftIdentityConsentAndConditionalAccessHandler _consentHandler
@inject IDbContextFactory<DatahubProjectDBContext> _contextFactory
@inject IMSGraphService _msGraphService
@inject TranslationService _translationService
@inject IMetadataBrokerService _metadataService
@inject UIControlsService UI

@* TODO create binding variables for security classifications rather than binding to the metadta editor property directly *@

<style>
    .ae.card {
        margin-bottom: 1rem;
    }

    .powerbi-admin-container {
        display: grid;
        grid-template-columns: [mainbody] 1fr [rightside] 400px;
        grid-template-rows: auto 1fr;
        grid-template-areas:
            "main import"
            "main admins"
            "main .";
        gap: 1rem;
    }
    
    .powerbi-admin-container .main-body {
        grid-area: main;
    }

    .powerbi-admin-container .import-list {
        grid-area: import;
    }

    .powerbi-admin-container .admin-list {
        grid-area: admins;
    }
</style>

<div style="padding-left: 2rem;padding-right: 2rem">

    <AeTypography Variant="h1">@Localizer[$"{LOCALIZATION_PREFIX}.Title"]</AeTypography>

    <div class="powerbi-admin-container">
        <div class="main-body">
            <AeCard>
                <Header>
                    <AeTypography Variant="h3">@Localizer[$"{LOCALIZATION_PREFIX}.ManagementTitle"]</AeTypography>
                </Header>
                <ChildContent>

                    <AeCollapse>
                        <AeCollapseSection DefaultOpen>
                            <Header>
                                <AeTypography Variant="h5">@Localizer[$"{LOCALIZATION_PREFIX}.InstructionsTitle"]</AeTypography>
                            </Header>
                            <ChildContent>
                                <AeTypography Variant="p">@Localizer[$"{LOCALIZATION_PREFIX}.InstructionsP1"]</AeTypography>
                                <AeTypography Variant="p">@Localizer[$"{LOCALIZATION_PREFIX}.InstructionsP2"]</AeTypography>
                                @if (IsAdminView)
                                {
                                    <AeTypography Variant="p">@Localizer[$"{LOCALIZATION_PREFIX}.InstructionsAdmin"]</AeTypography>
                                }
                            </ChildContent>
                        </AeCollapseSection>
                    </AeCollapse>

                    @if (IsLoadingWorkspaceTreeItems)
                    {
                    <Spinner />
                    }
                    else
                    {
                    <PowerBiManagementTree DataProjects=@AvailableProjects Workspaces=@ManagedWorkspaces OnItemClicked=@OpenItemEditor />
                    }

                    @if (WorkspaceBeingEdited != null)
                    {
                        <AeCard>
                            <Header>
                                <AeTypography Variant="h3">@Localizer[$"{LOCALIZATION_PREFIX}.Workspace"]: @WorkspaceBeingEdited.DbWorkspaceName</AeTypography>
                            </Header>
                            <ChildContent>
                                <div>
                                    @if (!WorkspaceBeingEdited.IsInPowerBi)
                                    {
                                        <PowerBIItemNotFoundWarning OnDeleteClicked=@PromptToDelete />
                                    }
                                    <div style="margin-bottom: 16px;">
                                        <label>
                                            <AeFlex Vertical>
                                                <AeTypography><strong><span>@Localizer[$"{LOCALIZATION_PREFIX}.Project"]</span></strong></AeTypography>
                                                <select @bind=@WorkspaceBeingEdited.ProjectId class="ae input">
                                                    <option value="-1">@Localizer[$"{LOCALIZATION_PREFIX}.Unassigned"]</option>
                                                    @foreach (var project in AvailableProjects)
                                                    {
                                                        <option value=@project.Project_ID>@project.ProjectName</option>
                                                    }
                                                </select>
                                            </AeFlex>
                                        </label>
                                    </div>
                                    <label>
                                        <input type="checkbox" @bind=@WorkspaceBeingEdited.SandboxFlag />
                                        <AeTypography style="display: inline-block;"><strong><span>@Localizer[$"{LOCALIZATION_PREFIX}.Sandbox"]</span></strong></AeTypography>
                                    </label>
                                    <div>
                                        <AeButton OnClickEvent=@UpdateWorkspaceProjectAssignment 
                                            Disabled=@UpdateWorkspaceProjectAssignmentDisabled>@Localizer[$"{LOCALIZATION_PREFIX}.UpdateAssignment"]</AeButton>
                                        <AeButton OnClickEvent=@WorkspaceBeingEdited.RevertProjectAssignment 
                                            Disabled=@UpdateWorkspaceProjectAssignmentDisabled class="light">@Localizer["BUTTONS.Revert"]</AeButton>
                                        <SuccessIndicator @bind-IsLoading=@IsSavingWorkspace />
                                    </div>
                                </div>
                                <AeTypography Variant="h4">@Localizer[$"{LOCALIZATION_PREFIX}.Metadata"]</AeTypography>
                                <ObjectMetadataEditor 
                                    ObjectId=@WorkspaceBeingEdited.WorkspaceId.ToString()
                                    Location="PowerBI"
                                    ProfileName="catalog"
                                    ObjectType=@Metadata.Model.MetadataObjectType.PowerBIWorkspace
                                    UpdateCatalog=@IncludeCurrentItemInCatalog
                                    ValidateRequired
                                    Name=@WorkspaceBeingEdited.DbWorkspaceName
                                    HideSaveButton
                                    OnValuesChanged=@(() => StateHasChanged())
                                    @ref=@_workspaceMetadata
                                    DefaultMetadataId=@GetProjectMetadataUid(WorkspaceBeingEdited.ProjectId)
                                    ProjectId=WorkspaceBeingEdited.ProjectId
                                    OnNewMetadataCreated=@AutoFillNewMetadataFields
                                    OnExistingMetadataLoaded=@DetectIfCurrentItemIsInCatalog
                                />
                                <div>
                                    <label>
                                        <input type="checkbox" @bind=@IncludeCurrentItemInCatalog />
                                        <AeTypography style="display: inline-block;"><strong><span>@Localizer[$"{LOCALIZATION_PREFIX}.IncludeInCatalog"]</span></strong></AeTypography>
                                    </label>
                                </div>
                                <div>
                                    <AeButton OnClickEvent=@SaveWorkspace Disabled=@SaveWorkspaceDisabled>@Localizer[$"BUTTONS.Save"]</AeButton>
                                    <AeButton class="light" OnClickEvent=@CloseItemBeingEdited>@Localizer[$"BUTTONS.Cancel"]</AeButton>
                                    <SuccessIndicator @bind-IsLoading=@IsSavingWorkspace @ref=@_saveWorkspaceInd />
                                </div>
                            </ChildContent>
                        </AeCard>
                    }

                    @if (DatasetBeingEdited != null)
                    {
                        <AeCard>
                            <Header>
                                <AeTypography Variant="h3">@Localizer[$"{LOCALIZATION_PREFIX}.Dataset"]: @DatasetBeingEdited.DbDatasetName</AeTypography>
                            </Header>
                            <ChildContent>
                                @if (!DatasetBeingEdited.IsInPowerBi)
                                {
                                    <PowerBIItemNotFoundWarning OnDeleteClicked=@PromptToDelete />
                                }

                                @if (!DatasetBeingEdited.IsLinkedToProject)
                                {
                                    <AeTypography Variant="p" class="warning">@Localizer[$"{LOCALIZATION_PREFIX}.UnassignedWarning"]</AeTypography>
                                }
                                <AeTypography Variant="h4">@Localizer[$"{LOCALIZATION_PREFIX}.Metadata"]</AeTypography>

                                
                                <ObjectMetadataEditor 
                                    ObjectId=@DatasetBeingEdited.DatasetId.ToString()
                                    Location="PowerBI"
                                    ProfileName="catalog"
                                    ObjectType=@Metadata.Model.MetadataObjectType.PowerBIDataset
                                    UpdateCatalog=@IncludeCurrentItemInCatalog
                                    Name=@DatasetBeingEdited.DbDatasetName
                                    HideSaveButton
                                    ValidateRequired
                                    OnValuesChanged=@(() => StateHasChanged())
                                    DefaultMetadataId=@GetProjectMetadataUid(DatasetBeingEdited.ProjectId)
                                    ProjectId=DatasetBeingEdited.ProjectId
                                    @ref=@_datasetMetadata
                                    OnNewMetadataCreated=@AutoFillNewMetadataFields
                                    OnExistingMetadataLoaded=@DetectIfCurrentItemIsInCatalog
                                />
                                <div>
                                    <label>
                                        <input type="checkbox" @bind=@IncludeCurrentItemInCatalog />
                                        <AeTypography style="display: inline-block;"><strong><span>@Localizer[$"{LOCALIZATION_PREFIX}.IncludeInCatalog"]</span></strong></AeTypography>
                                    </label>
                                </div>
                                <div>
                                    <AeButton OnClickEvent=@SaveDataset Disabled=@SaveDatasetDisabled>@Localizer[$"BUTTONS.Save"]</AeButton>
                                    <AeButton class="light" OnClickEvent=@CloseItemBeingEdited>@Localizer[$"BUTTONS.Cancel"]</AeButton>
                                    <SuccessIndicator @bind-IsLoading=@IsSavingDataset @ref=@_saveDatasetInd />
                                </div>
                            </ChildContent>
                        </AeCard>
                    }

                    @if (ReportBeingEdited != null)
                    {
                        <AeCard>
                            <Header>
                                <AeTypography Variant="h3">@Localizer[$"{LOCALIZATION_PREFIX}.Report"]: @ReportBeingEdited.DbReportName</AeTypography>
                            </Header>
                            <ChildContent>
                                @if (!ReportBeingEdited.IsInPowerBi)
                                {
                                    <PowerBIItemNotFoundWarning OnDeleteClicked=@PromptToDelete />
                                }

                                @if (!ReportBeingEdited.IsLinkedToProject)
                                {
                                    <AeTypography Variant="p" class="warning">@Localizer[$"{LOCALIZATION_PREFIX}.UnassignedWarning"]</AeTypography>
                                }

                                <MudText Typo=@Typo.body1>
                                    @Localizer[$"{LOCALIZATION_PREFIX}.ManageAccessLabel"]
                                    <MudButton 
                                        Href=@GetPowerBiWorkspaceUrl(ReportBeingEdited.AnyWorkspaceId) 
                                        Target="_blank" 
                                        Variant=@Variant.Outlined
                                        StartIcon=@Icons.Filled.Launch>@Localizer[$"{LOCALIZATION_PREFIX}.PowerBIButton"]</MudButton>
                                </MudText>

                                @*catalog*@
                                <MudStack Class="mt-4">
                                    <MudText Typo="Typo.h6">@Localizer[$"Catalog"]</MudText>

                                    <div>
                                        <label>
                                            <input type="checkbox" @bind=@IncludeCurrentItemInCatalog />
                                            <AeTypography style="display: inline-block;"><strong><span>@Localizer[$"{LOCALIZATION_PREFIX}.IncludeInCatalog"]</span></strong></AeTypography>
                                        </label>
                                    </div>

                                    <div style="margin-top: 0.5rem; width: 100%">
                                        <AeTypography><strong><span>@Localizer[$"Language"]</span></strong></AeTypography>
                                        <select class="ae input" @bind="_catalogObjectLanguage" disabled=@NotIncludedCurrentItemInCatalog>
                                            <option value=@CatalogObjectLanguage.Bilingual>@Localizer["Bilingual"]</option>
                                            <option value=@CatalogObjectLanguage.English>@Localizer["English"]</option> 
                                            <option value=@CatalogObjectLanguage.French>@Localizer["French"]</option> 
                                        </select>
                                    </div>                                

                                    @if (ReportBeingEdited.SiblingReports.Count > 0)
                                    {
                                        <div style="margin-top: 0.5rem; width: 100%">
                                            <AeFlex Vertical>
                                                <AeTypography><strong><span>@Localizer[$"Grouped with"]</span></strong></AeTypography>
                                                <select @bind="@GroupWithId" class="ae input" disabled=@NotIncludedCurrentItemInCatalog>
                                                    <option value=""></option>
                                                    @foreach(var report in ReportBeingEdited.SiblingReports)
                                                    {
                                                        <option value="@report.Report_ID.ToString()">@report.Report_Name</option>
                                                    }
                                                </select>
                                            </AeFlex>
                                        </div>
                                    }
                                </MudStack>

                                @*metadata*@
                                <MudStack Class="mt-4">
                                    <MudText Typo="Typo.h6">@Localizer[$"{LOCALIZATION_PREFIX}.Metadata"]</MudText>

                                    <ObjectMetadataEditor 
                                        @ref=@_reportMetadata
                                        ObjectId=@ReportBeingEdited.ReportId.ToString()
                                        Location="PowerBI"
                                        ProfileName="catalog"
                                        ObjectType=@Metadata.Model.MetadataObjectType.PowerBIReport
                                        UpdateCatalog=@IncludeCurrentItemInCatalog
                                        Name=@ReportBeingEdited.DbReportName
                                        HideSaveButton
                                        ValidateRequired
                                        CatalogLanguage=@_catalogObjectLanguage
                                        OnValuesChanged=@(() => StateHasChanged())
                                        DefaultMetadataId=@GetProjectMetadataUid(ReportBeingEdited.ProjectId)
                                        ProjectId=ReportBeingEdited.ProjectId
                                        OnNewMetadataCreated=@AutoFillNewMetadataFields
                                        OnExistingMetadataLoaded=@DetectIfCurrentItemIsInCatalog
                                    />

                                    <div style="margin-top: 1rem;">
                                        <AeButton OnClickEvent=@SaveReport Disabled=@SaveReportDisabled>@Localizer[$"BUTTONS.Save"]</AeButton>
                                        <AeButton class="light" OnClickEvent=@CloseItemBeingEdited>@Localizer[$"BUTTONS.Cancel"]</AeButton>
                                        <SuccessIndicator @bind-IsLoading=@IsSavingReport @ref=@_saveReportInd />
                                    </div>
                                </MudStack>
                            </ChildContent>
                        </AeCard>
                    }
                </ChildContent>
            </AeCard>
        </div>
        <div class="import-list">
            <AeCard>
                <Header>
                    <AeTypography Variant="h3">@Localizer[$"{LOCALIZATION_PREFIX}.ImportUpdateTitle"]</AeTypography>
                </Header>
                <ChildContent>
                    @if (WorkspacesToBeUpdated != null && WorkspacesToBeUpdated.Count > 0)
                    {
                        <AeTypography Variant="p">@Localizer[$"{LOCALIZATION_PREFIX}.ChangesExist"]</AeTypography>
                        <AeCollapse>
                            <AeCollapseSection>
                                <Header>
                                    <AeTypography Variant="h4">@Localizer[$"{LOCALIZATION_PREFIX}.Details"]</AeTypography>
                                </Header>
                                <ChildContent>
                                    <ul>
                                        @foreach(var w in WorkspacesToBeUpdated)
                                        {
                                            <li>
                                                <span>@w.PbiWorkspaceName</span>
                                                @if (w.ChildrenNeedUpdate)
                                                {
                                                    <span>&nbsp; @CountChildrenToUpdate(w)</span>
                                                }
                                            </li>
                                        }
                                    </ul>
                                </ChildContent>
                            </AeCollapseSection>
                        </AeCollapse>
                        <div>
                            <AeButton OnClickEvent=@ImportPowerBiItems Disabled=@ImportDisabled>@Localizer[$"{LOCALIZATION_PREFIX}.SynchronizeButton"]</AeButton>
                            <SuccessIndicator @bind-IsLoading=@IsImportingPowerBiItems @ref=@_bulkImportInd />
                        </div>
                    }
                    else
                    {
                        <AeTypography Variant="p">@Localizer[$"{LOCALIZATION_PREFIX}.NothingToImport"]</AeTypography>
                    }
                </ChildContent>
            </AeCard>
        </div>
        <div class="admin-list">
            <AuthorizeView Roles=@RoleConstants.DATAHUB_ROLE_ADMIN>
                <Authorized>
                    <AeCard>
                        <Header>
                            <AeTypography Variant="h3">Global Power BI Administrators</AeTypography>
                        </Header>
                        <ChildContent>
                            @if(_globalPowerBiAdminEmails.Count > 0)
                            {
                                <ul>
                                    @foreach(var email in _globalPowerBiAdminEmails)
                                    {
                                        <li>
                                            @if (_editingGlobalPowerBiAdmins)
                                            {
                                                <span @onclick=@(() => RemoveGlobalPowerBiAdmin(email))><i class="fad fa-times-circle"></i></span>
                                            }
                                            <span>@email</span>
                                        </li>
                                    }
                                </ul>
                            }
                            else
                            {
                                <AeTypography Variant="p">There are currently no global Power BI admins registered.</AeTypography>
                            }
                            <div>
                                @if (_editingGlobalPowerBiAdmins)
                                {
                                    <AeFlex Vertical>
                                        <div>
                                            <input type="text" @bind-value=@_userSearchFilter @bind-value:event="oninput" @onkeyup=@SearchUsers />
                                            @if (_isSearchingUsers)
                                            {
                                                <Spinner Small />
                                            }
                                        </div>
                                        @if (_userSearchResults.Count > 0)
                                        {
                                            <ul>
                                                @foreach (var user in _userSearchResults.Values.OrderBy(u => u.DisplayName))
                                                {
                                                    <li>
                                                        <span @onclick=@(() => AddGlobalPowerBiAdmin(user))>@user.DisplayName - @user.Mail.ToLowerInvariant()</span>
                                                    </li>
                                                }
                                            </ul>
                                        }
                                        <div>
                                            <AeButton OnClickEvent=@SaveGlobalPowerBiAdmins >@Localizer[$"BUTTONS.Save"]</AeButton>
                                            <AeButton OnClickEvent=@CancelEditingGlobalPowerBiAdmins class="light">@Localizer[$"BUTTONS.Cancel"]</AeButton>
                                            <SuccessIndicator />
                                        </div>
                                    </AeFlex>
                                }
                                else
                                {
                                    <AeButton OnClickEvent=@(() => _editingGlobalPowerBiAdmins = true)>@Localizer[$"BUTTONS.Edit"]</AeButton>
                                }
                            </div>
                        </ChildContent>
                    </AeCard>

                </Authorized>
            </AuthorizeView>
        </div>
    </div>

    
</div>

@code {
    private static readonly string LOCALIZATION_PREFIX = $"{PowerBiManagementConstants.POWERBI_MANAGEMENT_LOCALIZATION_ROOT_KEY}.POWER_BI_ADMIN";

    [Parameter]
    public string ProjectAcronym { get; set; }

    [Parameter]
    public string ReportId { get; set; }

    [Parameter]
    public string DatasetId { get; set; }

    [Parameter]
    public string WorkspaceId { get; set; }

    private bool IsAdminView => string.IsNullOrEmpty(ProjectAcronym);

    private List<PowerBiAdminWorkspaceTreeItem> AllWorkspaceTreeItems { get; set; } = new();
    private List<PowerBiAdminWorkspaceTreeItem> WorkspacesToBeUpdated => AllWorkspaceTreeItems.Where(w => w.NeedsUpdate).ToList();
    private List<PowerBiAdminWorkspaceTreeItem> RemovedWorkspaces => AllWorkspaceTreeItems.Where(w => !w.IsInPowerBi).ToList();
    private List<PowerBiAdminWorkspaceTreeItem> ManagedWorkspaces => AllWorkspaceTreeItems.Where(w => w.IsInDb).ToList();

    private Dictionary<Guid, Microsoft.PowerBI.Api.Models.Group> PowerBiWorkspacesById = new();
    private Dictionary<Guid, Microsoft.PowerBI.Api.Models.Dataset> PowerBiDatasetsById = new();
    private Dictionary<Guid, Microsoft.PowerBI.Api.Models.Report> PowerBiReportsById = new();

    private bool IsLoadingWorkspaceTreeItems { get; set; } = false;
    private bool IsImportingPowerBiItems { get; set; } = false;

    private bool ImportDisabled => IsImportingPowerBiItems || IsLoadingWorkspaceTreeItems;

    private SuccessIndicator _bulkImportInd;

    private List<Datahub_Project> AvailableProjects { get; set; } = new();

    private string _tempLastClickedItem { get; set; }
    private string _tempLastClickedType { get; set; }

    private PowerBiAdminWorkspaceTreeItem WorkspaceBeingEdited { get; set; }
    private PowerBiAdminDatasetTreeItem DatasetBeingEdited { get; set; }
    private PowerBiAdminReportTreeItem ReportBeingEdited { get; set; }
    private string _groupWithId;
    private CatalogObjectLanguage _catalogObjectLanguage;

    private string GroupWithId
    {
        get
        {
            return _groupWithId;
        }
        set
        {
            _groupWithId = value;
            if (!string.IsNullOrEmpty(value))
            {
                _ = _reportMetadata.CopyMetadataFrom(value);
            }
        }
    }

    private bool IncludeCurrentItemInCatalog { get; set; } = true;
    private bool NotIncludedCurrentItemInCatalog => !IncludeCurrentItemInCatalog;

    private ObjectMetadataEditor _workspaceMetadata;
    private bool IsSavingWorkspace { get; set; } = false;
    private bool SaveWorkspaceDisabled => IsSavingWorkspace || (_workspaceMetadata?.SaveDisabled ?? false);
    private SuccessIndicator _saveWorkspaceInd;
    private bool UpdateWorkspaceProjectAssignmentDisabled => IsSavingWorkspace || IsLoadingWorkspaceTreeItems || !WorkspaceBeingEdited.ProjectAssignmentChanged;

    private ObjectMetadataEditor _reportMetadata;
    private bool IsSavingReport { get; set; } = false;
    private bool SaveReportDisabled => IsSavingReport || (_reportMetadata?.SaveDisabled ?? false);
    private SuccessIndicator _saveReportInd;

    private ObjectMetadataEditor _datasetMetadata;
    private bool IsSavingDataset { get; set; } = false;
    private bool SaveDatasetDisabled => IsSavingDataset || (_datasetMetadata?.SaveDisabled ?? false);
    private SuccessIndicator _saveDatasetInd;

    private ISet<string> _globalPowerBiAdminEmails = new HashSet<string>();
    private bool _editingGlobalPowerBiAdmins = false;
    private string _userSearchFilter = string.Empty;
    private Dictionary<string, GraphUser> _userSearchResults = new();
    private QueryThrottler<string> _userSearchThrottler;
    private bool _isSearchingUsers = false;

    private string GetProjectMetadataUid(int projectId) => AvailableProjects.FirstOrDefault(p => p.Project_ID == projectId)?.Project_Acronym_CD;
    private string GetProjectAdmins(int projectId) => AvailableProjects.FirstOrDefault(p => p.Project_ID == projectId)?.Project_Admin;

    private string GetPowerBiWorkspaceUrl(Guid workspaceId) => $"https://app.powerbi.com/groups/{workspaceId.ToString()}";

    private string CountChildrenToUpdate(PowerBiAdminWorkspaceTreeItem workspace)
    {
        var numReports = workspace.Reports.Count(r => r.NeedsUpdate);
        var numDatasets = workspace.Datasets.Count(r => r.NeedsUpdate);

        if (numReports > 0 && numDatasets > 0)
        {
            return Localizer[$"{LOCALIZATION_PREFIX}.NumDatasetsReports", numDatasets, numReports];
            //return $"(Datasets: {numDatasets}, Reports: {numReports})";
        }
        else if (numReports > 0)
        {
            return Localizer[$"{LOCALIZATION_PREFIX}.NumReports", numReports];
            //return $"(Reports: {numReports})";
        }
        else if (numDatasets > 0)
        {
            return Localizer[$"{LOCALIZATION_PREFIX}.NumDatasets", numDatasets];
            //return $"(Datasets: {numDatasets})";
        }
        else
        {
            //this shouldn't happen; the method is only called when workspace has at least one child that needs to be updated
            return string.Empty;
        }
    }

    private async Task LoadWorkspaceTreeItems()
    {
        await CloseItemBeingEdited();
        IsLoadingWorkspaceTreeItems = true;
        StateHasChanged();

        var pbiWorkspaces = await _powerBiServiceApi.GetWorkspaces();
        var dbWorkspacesList = await _powerBiDataService.GetAllWorkspaces();

        PowerBiWorkspacesById = pbiWorkspaces.ToDictionary(w => w.Id);
        var dbWorkspaceDict = dbWorkspacesList.ToDictionary(w => w.Workspace_ID);

        var allWorkspaceIds = pbiWorkspaces.Select(w => w.Id)
            .Concat(dbWorkspacesList.Select(w => w.Workspace_ID))
            .Distinct();

        var treeItems = allWorkspaceIds.Select(id =>
        {
            var dbWorkspace = dbWorkspaceDict.GetValueOrDefault(id);
            var pbiWorkspace = PowerBiWorkspacesById.GetValueOrDefault(id);
            return new PowerBiAdminWorkspaceTreeItem(pbiWorkspace, dbWorkspace);
        });

        var workspaceTreeItemsDict = treeItems.ToDictionary(i => i.WorkspaceId);

        var datasetItems = await LoadDatasetTreeItems();
        var reportItems = await LoadReportTreeItems();

        AllWorkspaceTreeItems = treeItems.ToList();
        foreach (var t in AllWorkspaceTreeItems)
        {
            var wId = t.WorkspaceId;
            t.Datasets.AddRange(datasetItems.Where(d => d.AnyWorkspaceId == wId));
            t.Reports.AddRange(reportItems.Where(r => r.AnyWorkspaceId == wId));
        }

        IsLoadingWorkspaceTreeItems = false;
        StateHasChanged();
    }

    private async Task<List<PowerBiAdminDatasetTreeItem>> LoadDatasetTreeItems()
    {
        var pbiDatasets = await _powerBiServiceApi.GetWorkspaceDatasetsAsync();
        PowerBiDatasetsById = pbiDatasets.ToDictionary(d => Guid.Parse(d.Dataset.Id), d => d.Dataset);
        var pbiDatasetIds = PowerBiDatasetsById.Keys.ToHashSet();
        var dbDatasets = await _powerBiDataService.GetAllDatasets();
        var dbDatasetDict = dbDatasets.ToDictionary(d => d.DataSet_ID);

        var results = pbiDatasets.Select(d =>
        {
            var datasetGuid = Guid.Parse(d.Dataset.Id);
            var dbDataset = dbDatasetDict.GetValueOrDefault(datasetGuid);
            return new PowerBiAdminDatasetTreeItem(d.Dataset, dbDataset, d.WorkspaceId);
        })
        .Concat(dbDatasets
            .Where(d => !pbiDatasetIds.Contains(d.DataSet_ID))
            .Select(d => new PowerBiAdminDatasetTreeItem(null, d, null)))
        .ToList();

        return results;
    }

    private async Task<List<PowerBiAdminReportTreeItem>> LoadReportTreeItems()
    {
        var pbiReports = await _powerBiServiceApi.GetWorkspaceReportsAsync();
        PowerBiReportsById = pbiReports.ToDictionary(t => t.Report.Id, t => t.Report);
        var pbiReportIds = PowerBiReportsById.Keys.ToHashSet();
        var dbReports = await _powerBiDataService.GetAllReports();
        var dbReportDict = dbReports.ToDictionary(d => d.Report_ID);

        var results = pbiReports.Select(d =>
        {
            var reportGuid = d.Report.Id;
            var dbReport = dbReportDict.GetValueOrDefault(reportGuid);
            return new PowerBiAdminReportTreeItem(d.Report, dbReport, d.WorkspaceId);
        })
        .Concat(dbReports
            .Where(r => !pbiReportIds.Contains(r.Report_ID))
            .Select(r => new PowerBiAdminReportTreeItem(null, r, null)))
        .ToList();

        return results;
    }

    private async Task CloseItemBeingEdited()
    {
        //TODO check for changes, popup dialog
        WorkspaceBeingEdited = null;
        DatasetBeingEdited = null;
        ReportBeingEdited = null;

        IncludeCurrentItemInCatalog = true;

        await Task.CompletedTask;
    }

    private async Task OpenItemEditor(PowerBiAdminTreeItem item)
    {
        await CloseItemBeingEdited();

        if (item.ItemType == PowerBiAdminTreeItemType.Workspace)
        {
            var workspace = await _powerBiDataService.GetWorkspaceById(item.Id);
            var pbiWorkspace = PowerBiWorkspacesById.GetValueOrDefault(item.Id);
            if (workspace != null) {
                WorkspaceBeingEdited = new(pbiWorkspace, workspace);
            }
        }
        else if (item.ItemType == PowerBiAdminTreeItemType.Dataset)
        {
            var dataset = await _powerBiDataService.GetDatasetById(item.Id);
            var pbiDataset = PowerBiDatasetsById.GetValueOrDefault(item.Id);
            if (dataset != null) {
                DatasetBeingEdited = new(pbiDataset, dataset, null);
                DatasetBeingEdited.ProjectId = item.ProjectId;
            }
        }
        else if (item.ItemType == PowerBiAdminTreeItemType.Report)
        {
            var report = await _powerBiDataService.GetReportById(item.Id);
            var pbiReport = PowerBiReportsById.GetValueOrDefault(item.Id);
            if (report != null) 
            {
                ReportBeingEdited = new(pbiReport, report, null);
                ReportBeingEdited.ProjectId = item.ProjectId;
                ReportBeingEdited.SiblingReports = await GetReportsForGrouping(report);
                IncludeCurrentItemInCatalog = report.InCatalog;
                _groupWithId = await GetGroupedWidth(report);
                _catalogObjectLanguage = await _metadataService.GetCatalogObjectLanguage(report.Report_ID.ToString()) ?? CatalogObjectLanguage.Bilingual;
            }
        }

        _tempLastClickedItem = item.Label;
        _tempLastClickedType = item.ItemType.ToString();
        StateHasChanged();
        await Task.CompletedTask;
    }

    private async Task<List<PowerBi_Report>> GetReportsForGrouping(PowerBi_Report report)
    {
        var siblings = await _powerBiDataService.GetWorkspaceReports(report.Workspace_Id);
        return siblings.Where(r => r.InCatalog && r.Report_ID != report.Report_ID).ToList();
    }

    private async Task<string> GetGroupedWidth(PowerBi_Report report)
    {
        var reportId = report.Report_ID.ToString().ToLower();
        var group = await _metadataService.GetObjectCatalogGroup(reportId);
        return group.FirstOrDefault(id => !id.Equals(reportId, StringComparison.OrdinalIgnoreCase));
    }

    private PowerBiAdminTreeItemType? DetermineCurrentlyOpenEditorType()
    {
        if (ReportBeingEdited != null)
        {
            return PowerBiAdminTreeItemType.Report;
        }
        else if (DatasetBeingEdited != null)
        {
            return PowerBiAdminTreeItemType.Dataset;
        }
        else if (WorkspaceBeingEdited != null)
        {
            return PowerBiAdminTreeItemType.Workspace;
        }

        return default;
    }

    private async Task PromptToDelete()
    {
        var currentlyOpenType = DetermineCurrentlyOpenEditorType();

        var which = currentlyOpenType switch
        {
            PowerBiAdminTreeItemType.Workspace => Localizer[$"{LOCALIZATION_PREFIX}.Workspace"],
            PowerBiAdminTreeItemType.Dataset => Localizer[$"{LOCALIZATION_PREFIX}.Dataset"],
            PowerBiAdminTreeItemType.Report => Localizer[$"{LOCALIZATION_PREFIX}.Report"],
            _ => string.Empty
        };

        var promptTitle = Localizer[$"{LOCALIZATION_PREFIX}.DeleteX", which];

        var itemsToDelete = new List<string>() { Localizer[$"{LOCALIZATION_PREFIX}.DeletePromptIntro"] };
        switch (currentlyOpenType)
        {
            case PowerBiAdminTreeItemType.Workspace:
                var workspaceId = WorkspaceBeingEdited.WorkspaceId;
                var workspace = await _powerBiDataService.GetWorkspaceById(workspaceId, true);
                itemsToDelete.Add(string.Format("{0}: {1}", Localizer[$"{LOCALIZATION_PREFIX}.Workspace"], workspace.Workspace_Name));
                itemsToDelete.AddRange(workspace.Reports.Select(r => string.Format("{0}: {1}", Localizer[$"{LOCALIZATION_PREFIX}.Report"], r.Report_Name)));
                itemsToDelete.AddRange(workspace.Datasets.Select(d => string.Format("{0}: {1}", Localizer[$"{LOCALIZATION_PREFIX}.Dataset"], d.DataSet_Name)));
                break;
            case PowerBiAdminTreeItemType.Report:
                var reportId = ReportBeingEdited.ReportId;
                var datasetxId = ReportBeingEdited.DatasetId;
                var report = await _powerBiDataService.GetReportById(reportId);
                var datasetx = datasetxId.HasValue? await _powerBiDataService.GetDatasetById(datasetxId.Value) : await Task.FromResult(default(PowerBi_DataSet));
                itemsToDelete.Add(string.Format("{0}: {1}", Localizer[$"{LOCALIZATION_PREFIX}.Report"], report.Report_Name));
                if (datasetx != null)
                {
                    itemsToDelete.Add(string.Format("{0}: {1}", Localizer[$"{LOCALIZATION_PREFIX}.Dataset"], datasetx.DataSet_Name));
                }
                break;
            case PowerBiAdminTreeItemType.Dataset:
                var datasetId = DatasetBeingEdited.DatasetId;
                var dataset = await _powerBiDataService.GetDatasetById(datasetId);
                itemsToDelete.Add(string.Format("{0}: {1}", Localizer[$"{LOCALIZATION_PREFIX}.Dataset"], dataset.DataSet_Name));
                break;
            default:
                break;
        }

        RenderFragment promptDialog = 
    @<UserChoiceModal 
            HeaderText=@promptTitle
            ChoiceTextList=@itemsToDelete
            OnDecision=@HandleDelete
            ConfirmText=@Localizer["COMMON.Yes"]
            CancelText=@Localizer["COMMON.No"]
                />
    ;

        await UI.ToggleModal(promptDialog);
    }

    private async Task HandleDelete(bool confirm)
    {
        if (confirm)
        {
            var currentlyOpen = DetermineCurrentlyOpenEditorType();
            switch (currentlyOpen)
            {
                case PowerBiAdminTreeItemType.Workspace:
                    await DeleteWorkspace();
                    break;
                case PowerBiAdminTreeItemType.Report:
                    await DeleteReport();
                    break;
                case PowerBiAdminTreeItemType.Dataset:
                    await DeleteDataset();
                    break;
                default:
                    break;
            }

            await Task.WhenAny(CloseItemBeingEdited(), LoadWorkspaceTreeItems());
        }

        await UI.ToggleModal();
    }

    private async Task DeleteReport()
    {
        var reportId = ReportBeingEdited?.ReportId;
        var datasetId = ReportBeingEdited?.DatasetId;

        if (reportId.HasValue)
        {
            await _powerBiDataService.DeleteReport(reportId.Value, datasetId);
            await _metadataService.DeleteFromCatalog(reportId?.ToString());
            await _metadataService.DeleteFromCatalog(datasetId?.ToString());
        }
    }

    private async Task DeleteDataset()
    {
        var datasetId = DatasetBeingEdited?.DatasetId;

        if (datasetId.HasValue)
        {
            await _powerBiDataService.DeleteDataset(datasetId.Value);
            await _metadataService.DeleteFromCatalog(datasetId.ToString());
        }
    }

    private async Task DeleteWorkspace()
    {
        var workspaceId = WorkspaceBeingEdited?.WorkspaceId;

        if (workspaceId.HasValue)
        {
            var workspace = await _powerBiDataService.GetWorkspaceById(workspaceId.Value, true);

            var catalogItemIds = workspace.Datasets
                .Select(d => d.DataSet_ID)
                .Concat(workspace.Reports.Select(r => r.Report_ID))
                .Append(workspace.Workspace_ID)
                .Select(g => g.ToString());

            await _powerBiDataService.DeleteWorkspace(workspaceId.Value);
            await _metadataService.DeleteMultipleFromCatalog(catalogItemIds);
        }
    }


    private async Task<bool> DoUpdateWorkspaceProjectAssignment()
    {
        var wsDef = WorkspaceBeingEdited.Definition;
        return await _powerBiDataService.AddOrUpdateCataloguedWorkspace(wsDef);
    }

    private async Task UpdateWorkspaceProjectAssignment()
    {
        IsSavingWorkspace = true;
        await InvokeAsync(StateHasChanged);

        await DoUpdateWorkspaceProjectAssignment();

        var workspace = WorkspaceBeingEdited;

        var workspaceTreeTask = LoadWorkspaceTreeItems();

        WorkspaceBeingEdited = null;
        IsSavingWorkspace = false;
        await InvokeAsync(StateHasChanged);

        var dbWorkspace = await _powerBiDataService.GetWorkspaceById(workspace.WorkspaceId);
        var pbiWorkspace = PowerBiWorkspacesById.GetValueOrDefault(workspace.WorkspaceId);
        WorkspaceBeingEdited = new(pbiWorkspace, dbWorkspace);

        await InvokeAsync(StateHasChanged);
        await workspaceTreeTask;
    }

    private async Task SaveWorkspace()
    {
        if (WorkspaceBeingEdited == null)
        {
            await Task.CompletedTask;
            return;
        }

        IsSavingWorkspace = true;
        StateHasChanged();

        var success = await DoUpdateWorkspaceProjectAssignment();

        success &= await _workspaceMetadata.SaveChanges();

        if (success && !IncludeCurrentItemInCatalog)
        {
            await _metadataService.DeleteFromCatalog(_workspaceMetadata.ObjectId);
        }

        if (success)
        {
            await _saveWorkspaceInd.SignalSuccess();
            await LoadWorkspaceTreeItems();
        }
        else
        {
            await _saveWorkspaceInd.SignalFailure();
        }
    }

    private async Task SaveReport()
    {
        if (ReportBeingEdited == null)
        {
            await Task.CompletedTask;
            return;
        }

        IsSavingReport = true;
        StateHasChanged();

        var success = await _reportMetadata.SaveChanges();

        if (success)
        {
            if (IncludeCurrentItemInCatalog)
            {
                // group the report
                if (!string.IsNullOrEmpty(_groupWithId))
                {
                    var group = new List<string> { ReportBeingEdited.ReportId.ToString(), _groupWithId };
                    await _metadataService.GroupCatalogObjects(group);
                }
            }
            else
            {
                // todo: ungroup the report
                await _metadataService.DeleteFromCatalog(_reportMetadata.ObjectId);
            }
            // update the in catalog flag
            await _powerBiDataService.UpdateReportCatalogStatus(ReportBeingEdited.ReportId, IncludeCurrentItemInCatalog);
        }

        if (success)
        {
            await _saveReportInd.SignalSuccess();
            await CloseItemBeingEdited();
        }
        else
        {
            await _saveReportInd.SignalFailure();
        }
    }

    private async Task SaveDataset()
    {
        if (DatasetBeingEdited == null)
        {
            await Task.CompletedTask;
            return;
        }

        IsSavingDataset = true;
        StateHasChanged();

        var success = await _datasetMetadata.SaveChanges();

        if (success && !IncludeCurrentItemInCatalog)
        {
            await _metadataService.DeleteFromCatalog(_datasetMetadata.ObjectId);
        }

        if (success)
        {
            await _saveDatasetInd.SignalSuccess();
            await CloseItemBeingEdited();
        }
        else
        {
            await _saveDatasetInd.SignalFailure();
        }
    }

    private ObjectMetadataEditor GetCurrentlyActiveMetadataEditor()
    {
        if (WorkspaceBeingEdited != null)
        {
            return _workspaceMetadata;
        }
        else if (ReportBeingEdited != null)
        {
            return _reportMetadata;
        }
        else if (DatasetBeingEdited != null)
        {
            return _datasetMetadata;
        }
        else
        {
            return default;
        }
    }

    private string GetCurrentPowerBiObjectName()
    {
        if (WorkspaceBeingEdited != null)
        {
            return WorkspaceBeingEdited.DbWorkspaceName ?? WorkspaceBeingEdited.PbiWorkspaceName;
        }
        else if (ReportBeingEdited != null)
        {
            return ReportBeingEdited.DbReportName ?? ReportBeingEdited.PbiReportName;
        }
        else if (DatasetBeingEdited != null)
        {
            return DatasetBeingEdited.DbDatasetName ?? DatasetBeingEdited.PbiDatasetName;
        }
        else
        {
            return default;
        }
    }

    private int? GetCurrentPowerBiObjectProjectId() => WorkspaceBeingEdited?.ProjectId ?? DatasetBeingEdited?.ProjectId ?? ReportBeingEdited?.ProjectId;

    private async Task AutoFillNewMetadataFields()
    {
        var metadataEditor = GetCurrentlyActiveMetadataEditor();
        if (metadataEditor == null) 
        {
            return;
        }

        var currentTitle = GetCurrentPowerBiObjectName();
        if (string.IsNullOrEmpty(currentTitle))
        {
            return;
        }

        var titleFr = await _translationService.GetFrenchTranslation(currentTitle);

        metadataEditor.SetValue(PowerBiManagementConstants.TITLE_EN_METADATA_FIELD, currentTitle);
        metadataEditor.SetValue(PowerBiManagementConstants.TITLE_FR_METADATA_FIELD, titleFr);

        var currentProjectId = GetCurrentPowerBiObjectProjectId();
        if (currentProjectId.HasValue)
        {
            metadataEditor.SetValue(PowerBiManagementConstants.CONTACT_INFO_METADATA_FIELD, GetProjectAdmins(currentProjectId.Value));
        }

        await Task.CompletedTask;
    }

    private async Task DetectIfCurrentItemIsInCatalog()
    {
        var metadataEditor = GetCurrentlyActiveMetadataEditor();
        if (metadataEditor == null)
        {
            // reset boolean to default, just in case
            IncludeCurrentItemInCatalog = true;
            return;
        }

        IncludeCurrentItemInCatalog = await _metadataService.IsObjectCatalogued(metadataEditor.ObjectId);
    }

    private async Task ImportPowerBiItems()
    {
        IsImportingPowerBiItems = true;
        StateHasChanged();

        // each workspace item
        // get the def if needs update
        // get reportdefs if they need update
        // get dataset defs if they need update

        var workspacesToAdd = new List<PowerBi_WorkspaceDefinition>();
        var datasetsToAdd = new List<PowerBi_DataSetDefinition>();
        var reportsToAdd = new List<PowerBi_ReportDefinition>();

        foreach (var w in WorkspacesToBeUpdated)
        {
            if (w.NeedsUpdate)
            {
                workspacesToAdd.Add(w.Definition);
            }

            reportsToAdd.AddRange(w.Reports.Where(r => r.NeedsUpdate).Select(r => r.Definition));
            datasetsToAdd.AddRange(w.Datasets.Where(d => d.NeedsUpdate).Select(d => d.Definition));
        }

        var success = await _powerBiDataService.BulkAddOrUpdatePowerBiItems(workspacesToAdd, datasetsToAdd, reportsToAdd);

        if (success)
        {
            await _bulkImportInd.SignalSuccess();
            await LoadWorkspaceTreeItems();
        }
        else
        {
            await _bulkImportInd.SignalFailure();
        }
    }

    private async Task LoadProjects()
    {
        using var ctx = await _contextFactory.CreateDbContextAsync();

        // TODO restrict based on user's access?

        if (!string.IsNullOrEmpty(ProjectAcronym))
        {
            AvailableProjects = await ctx.Projects.Where(p => p.Project_Acronym_CD.ToLower() == ProjectAcronym.ToLower()).ToListAsync();
        }
        else
        {
            AvailableProjects = await ctx.Projects.ToListAsync();
        }

        AvailableProjects = AvailableProjects.OrderBy(p => p.ProjectName).ToList();
    }

    private async Task LoadGlobalPowerBiAdmins()
    {
        var list = await _powerBiDataService.GetGlobalPowerBiAdmins();
        _globalPowerBiAdminEmails = list?.ToHashSet() ?? new HashSet<string>();
        StateHasChanged();
    }

    private async Task SearchUsers(KeyboardEventArgs args)
    {
        await _userSearchThrottler.SetQuery(_userSearchFilter);
    }

    private async Task InvokeSearchUsers(string searchFilter)
    {
        if (searchFilter.Length >= 3)
        {
            await InvokeAsync(() => DoSearchUsers(searchFilter));
        }
    }

    private async Task DoSearchUsers(string searchFilter)
    {
        _isSearchingUsers = true;
        StateHasChanged();

        _userSearchResults = await _msGraphService.GetUsersListAsync(_userSearchFilter, CancellationToken.None);
        _isSearchingUsers = false;
        StateHasChanged();
    }

    private void AddGlobalPowerBiAdmin(GraphUser user)
    {
        _globalPowerBiAdminEmails.Add(user.Mail.ToLowerInvariant());
        _userSearchFilter = string.Empty;
        _userSearchResults.Clear();
    }

    private void RemoveGlobalPowerBiAdmin(string email)
    {
        _globalPowerBiAdminEmails.Remove(email);
    }

    private async Task SaveGlobalPowerBiAdmins()
    {
        await _powerBiDataService.SetGlobalPowerBiAdmins(_globalPowerBiAdminEmails);
        await CancelEditingGlobalPowerBiAdmins();
    }

    private async Task CancelEditingGlobalPowerBiAdmins()
    {
        _editingGlobalPowerBiAdmins = false;
        await LoadGlobalPowerBiAdmins();
    }

    private async Task OpenDeepLink()
    {
        if (Guid.TryParse(ReportId, out var reportGuid))
        {
            var reportItem = new PowerBiAdminTreeItem(string.Empty, PowerBiAdminTreeItemType.Report, reportGuid);
            await OpenItemEditor(reportItem);
        }
        else if (Guid.TryParse(WorkspaceId, out var workspaceGuid))
        {
            var workspaceItem = new PowerBiAdminTreeItem(string.Empty, PowerBiAdminTreeItemType.Workspace, workspaceGuid);
            await OpenItemEditor(workspaceItem);
        }
        else if (Guid.TryParse(DatasetId, out var datasetGuid))
        {
            var datasetItem = new PowerBiAdminTreeItem(string.Empty, PowerBiAdminTreeItemType.Dataset, datasetGuid);
            await OpenItemEditor(datasetItem);
        }
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            _userSearchThrottler = new(TimeSpan.FromSeconds(0.3), InvokeSearchUsers);
            await LoadWorkspaceTreeItems();
            await OpenDeepLink();
            await Task.WhenAll(LoadProjects(), LoadGlobalPowerBiAdmins());
        }
        catch (Exception ex)
        {
            _consentHandler.HandleException(ex);
        }
    }
}
