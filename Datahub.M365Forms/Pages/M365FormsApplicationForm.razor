@page "/m365form/applications"
@inject IStringLocalizer Localizer
@inject IEmailNotificationService EmailService
@implements IDisposable
@inject ServiceAuthManager ServiceAuthManager
@inject IDbContextFactory<M365FormsDBContext> DbFactory
@inject IUserInformationService UserInformationService
@inject NavigationManager NavigationManager
@inject IJSRuntime JsInterop
@inject UIControlsService UI
@inject IDatahubAuditingService AuditingService
@inject NavigationManager NavigationManager

@using Datahub.Core.Data
@using Datahub.Core.Model.Onboarding
@using Datahub.Core.Services
@using Datahub.Portal.Data
@using Datahub.Portal.Data.M365Forms
@using Elemental.Components
@using Microsoft.EntityFrameworkCore
@using Microsoft.Extensions.Localization
@using Microsoft.JSInterop
@using System.Globalization

@if (_isLoaded)
{
<Datahub.Core.Components.FormTemplate 
        T="M365FormsApplication" 
        U="M365FormsDBContext"
        Context="Context"
        Metadata="@_formMetadata" 
        HandleSubmit="HandleValidSubmit"
        OnChangeForms="OnChange"
        OnConfigureForms="OnConfigure"
        CreateNewRecord="CreateNewApplication"
        SelectedRecord="@m365FormApplication"
        SetFormEditRecord="SetFormEdit"
        />
}
@code {

    [Parameter]
    [SupplyParameterFromQuery]
    public bool New { get; set; }

    private const string PROJECTACRONYM = "DHPGLIST";
    private FormMetadata<M365FormsApplication> _formMetadata;
    private bool _onchange;
    private List<M365FormsApplication> _m365FormsApplications;
    private M365FormsApplication m365FormApplication;
    private M365FormsDBContext Context;
    private List<string> MarkDownContent = new();
    private Microsoft.Graph.User _user;
    private List<Func<M365FormsApplication, string>> AccessorFunctions = new List<Func<M365FormsApplication, string>>();
    private bool _isLoaded;

    private bool _isFrench;

    private string Localize(string input) => input == null ? null : Localizer[input];

    protected override async Task OnInitializedAsync()
    {
        // load projects
        Context = DbFactory.CreateDbContext();
        _user = await UserInformationService.GetUserAsync();
        _formMetadata = new();

        _isFrench = CultureInfo.CurrentCulture.Name.StartsWith("fr", StringComparison.InvariantCulture);

        AccessorFunctions = new List<Func<M365FormsApplication, string>>
        {
            p => { return Localizer[p.Name_of_Team]; },
            p => { return Localizer[p.Description_of_Team ?? string.Empty]; },
            p => { return Localizer[p.Team_Purpose ?? string.Empty]; },
            p => { return p.Business_Owner; },
        };


        var footerfile = _isFrench ? "FormFooterFr.md" : "FormFooter.md";
        LoadApps();
        _formMetadata.Header = Localizer["M365 Team Request Form"];
        _formMetadata.TableRoles = RoleConstants.DATAHUB_ROLE_ADMIN;
        _formMetadata.DataSet = _m365FormsApplications;
        _formMetadata.AccessorFunctions = AccessorFunctions;
        _formMetadata.Headers = headers;
        _formMetadata.GridTemplateColumns = "3fr 4fr 3fr 3fr";
        _formMetadata.IsSubmitEnabled = true;
        _formMetadata.MarkDownContent = new List<string>();
        _formMetadata.MarkDownContentFooter = File.ReadAllLines($@"Pages\Forms\M365Forms\{footerfile}").ToList();

        if (New)
            CreateNewApplication();    

        _isLoaded = true;
        StateHasChanged();
    }

    
    private List<string> headers => new List<string>
    {
        Localizer["Name_of_Team"], Localizer["Description_of_Team"], Localizer["Team_Purpose"], Localizer["Business_Owner"]        
    };

    private async Task HandleValidSubmit()
    {
        if (m365FormApplication != null)
        {
            if (m365FormApplication.Application_ID == 0)
            {
                m365FormApplication = Context.M365FormsApplications.Add(m365FormApplication).Entity;
            }
            m365FormApplication.Last_Updated_DT = DateTime.Now;
            m365FormApplication.Last_Updated_UserId = _user.Id;
            @*emailparams
           OnboardingParameters onboardingParameters = new() { App = _onboardingApplication, AdminEmailAddresses =  ServiceAuthManager.GetProjectAdminsEmails(PROJECTACRONYM)};

            await EmailService.SendOnboardingConfirmations(onboardingParameters);
            _onboardingApplication.NotificationsSent = true;
*@
            await Context.TrackSaveChangesAsync(AuditingService);
            NavigationManager.NavigateTo("/m365forms/confirmation");
        }
    }

    private void LoadApps()
    {
        _m365FormsApplications = Context.M365FormsApplications.ToList();
        _formMetadata.DataSet = _m365FormsApplications;
    }

    private void OnConfigure(IModelFormContext context)
    {
        if (!_onchange)
        {        
            //context.RegisterOptionValueProperty<M365FormsApplication>(p => p.Team_Purpose, () => Onboarding_Constants.CATEGORY);        
            //    context.RegisterOptionValueProperty<M365FormsApplication>(p => p.Data_Security_Level, () => Onboarding_Constants.SECURITYLEVEL);
        }

        ToggleVisibility(context);
    }

    private void ToggleVisibility(IModelFormContext context)
    {
        //context.SetVisible<M365FormsApplication>(p => p.Project_Engagement_Category_Other, _onboardingApplication.Project_Engagement_Category == "Other");
        _onchange = false;
    }

    private void OnChange(ModelFormChangeArgs args)
    {
        //HandleTranslationFields();
        _onchange = true;
        OnConfigure(args.Context);
    }

    private void CreateNewApplication()
    {
        m365FormApplication = new M365FormsApplication() { Last_Updated_DT = DateTime.Now };
        //var user = await UserInformationService.GetUserAsync();        
        _formMetadata.IsSubmitEnabled = true;
        StateHasChanged();
    }

    private void SetFormEdit(M365FormsApplication application)
    {
        m365FormApplication = application;

        if (m365FormApplication.NotificationsSent)
            _formMetadata.IsSubmitEnabled = false;

        StateHasChanged();
    }

    public void Dispose() { Context.Dispose(); }
}
