@inherits LayoutComponentBase
@using Microsoft.Identity.Web

@inject IMSGraphService _msGraphService
@inject IMyDataService _apiService
@inject NavigationManager _navigationManager
@inject UserLocationManagerService _userLocationManagerService
@inject IDatahubAuditingService _auditingService
@inject IUserCircuitCounterService _userCircuitCounterService
@inject MicrosoftIdentityConsentAndConditionalAccessHandler _consentHandler
@inject IConfiguration _configuration
@inject IUserInformationService _userInformationService

<PageTitle>@Localizer[_configuration["Title"]]</PageTitle>

<ErrorBoundary @ref="_errorBoundary">
    <ChildContent>
            @Body
    </ChildContent>
    <ErrorContent Context="ex">
        @if (HandleException(@ex)) 
        {
            <Error CorrelationId=@_correlationId />
        }
        else
        {
            @Body
        }

    </ErrorContent>
</ErrorBoundary>

@code
{

    private ErrorBoundary _errorBoundary;
    private string _correlationId;
    private Exception _lastException;
    private bool? _isSessionEnabled;

    protected override void OnParametersSet()
    {
        _errorBoundary?.Recover();
    }

    protected override async Task OnInitializedAsync()
    {
        var user = await _userInformationService.GetAuthenticatedUser(true);
        if (!user.Identity?.IsAuthenticated ?? true)
        {
            var scopes = _configuration["Graph:Scopes"]
                .Split(',');
            _consentHandler.ChallengeUser(scopes);
            return;
        }
        
        try 
        {
            _isSessionEnabled = await _userCircuitCounterService.IsSessionEnabled();
        } 
        catch (Exception ex)
        {
            _consentHandler.HandleException(ex);
        }
        await _apiService.SetupUserFolders();
    }

    private bool IsValidException(Exception ex)
    {
        return !(ex is ObjectDisposedException);
    }

    private bool HandleException(Exception ex)
    {
        if (!IsValidException(ex))
            return false;
        if (ex != _lastException)
        {
            _lastException = ex;
            _ = AuditExceptionAsync(ex);
        }
        return true;
    }

    private async Task AuditExceptionAsync(Exception ex)
    {
        try
        {
            var correlationId = Guid.NewGuid().ToString();
            await _auditingService.TrackException(ex, (nameof(correlationId), correlationId));
            _correlationId = correlationId;
            await InvokeAsync(StateHasChanged);
        }
        catch (Exception)
        {
        }
    }
}
