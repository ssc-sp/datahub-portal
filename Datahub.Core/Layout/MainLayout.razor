@inherits LayoutComponentBase

@using Microsoft.Identity.Web

@inject MyDataService _apiService
@inject IDatahubAuditingService _auditingService
@inject IUserCircuitCounterService _userCircuitCounterService
@inject MicrosoftIdentityConsentAndConditionalAccessHandler _consentHandler
@inject IConfiguration _configuration

<MudThemeProvider Theme="_theme"/>
<MudDialogProvider/>
<MudSnackbarProvider/>

<PageTitle>@Localizer[_configuration["Title"]]</PageTitle>

<AuthorizeView>
    <Authorized>
        <MudLayout>
            <MudAppBar Elevation="0">
                <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Dark" Edge="Edge.Start" OnClick="@((e) => DrawerToggle())" />
                <Topbar/>
            </MudAppBar>
            <MudDrawer @bind-Open="_drawerOpen" Elevation="0" ClipMode="DrawerClipMode.Always" Variant="DrawerVariant.Mini">
                <Sidebar/>
            </MudDrawer>
            <MudMainContent>
                <div class="application-wrapper">
                    <div class="main-layout">
                        <div class="ui-control">
                            <div class="main-page">
                                <ErrorBoundary @ref="_errorBoundary">
                                    <ChildContent>
                                        @if (_isSessionEnabled == true)
                                        {
                                            @Body
                                        }
                                        @if (_isSessionEnabled == false)
                                        {
                                            <TooManyTabs/>
                                        }
                                    </ChildContent>
                                    <ErrorContent Context="ex">
                                        @if (HandleException(@ex))
                                        {
                                            <Error CorrelationId=@_correlationId/>
                                        }
                                        else
                                        {
                                            @Body
                                        }

                                    </ErrorContent>
                                </ErrorBoundary>
                            </div>
                            <RightSidebar/>
                            <Modal/>
                        </div>
                    </div>
                </div>
            </MudMainContent>
        </MudLayout>
    </Authorized>
    <NotAuthorized>
        <div>@Localizer["ERROR-PAGE.ConnectionLost-Label"]</div>
    </NotAuthorized>
</AuthorizeView>

@code
{
    [CascadingParameter]
    private Task<AuthenticationState> _authenticationStateTask { get; set; }

    private ErrorBoundary _errorBoundary;
    private string _correlationId;
    private Exception _lastException;
    private bool? _isSessionEnabled;

    private MudTheme _theme;
    bool _drawerOpen = true;

    void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }

    protected override void OnParametersSet()
    {
        _errorBoundary?.Recover();
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();
        _theme = new MudTheme()
        {
            Palette =
            {
                AppbarBackground = Colors.Shades.White
            }
        };
    }

    protected override async Task OnInitializedAsync()
    {
        var authState = await _authenticationStateTask;
        var user = authState.User;

        if (!user.Identity?.IsAuthenticated ?? true)
        {
            var scopes = _configuration["Graph:Scopes"]
                .Split(',');
            _consentHandler.ChallengeUser(scopes);
            return;
        }

        try
        {
            _isSessionEnabled = await _userCircuitCounterService.IsSessionEnabled();
        }
        catch (Exception ex)
        {
            _consentHandler.HandleException(ex);
        }
        await _apiService.SetupUserFolders();
    }

    private bool IsValidException(Exception ex)
    {
        return !(ex is ObjectDisposedException);
    }

    private bool HandleException(Exception ex)
    {
        if (!IsValidException(ex))
            return false;
        if (ex != _lastException)
        {
            _lastException = ex;
            _ = AuditExceptionAsync(ex);
        }
        return true;
    }

    private async Task AuditExceptionAsync(Exception ex)
    {
        try
        {
            var correlationId = Guid.NewGuid().ToString();
            await _auditingService.TrackException(ex, (nameof(correlationId), correlationId));
            _correlationId = correlationId;
            await InvokeAsync(StateHasChanged);
        }
        catch (Exception)
        {
        }
    }
}