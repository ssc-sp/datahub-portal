@*Sidebar.razor*@
@using Datahub.Core.Data
@using Datahub.Core.Utils
@using Datahub.Portal.Services
@inject ServiceAuthManager ServiceAuthManager
@inject IUserInformationService UserInformationService
@inject IConfiguration Configuration

<div id="sidebar">
    <div class="sidebar-sticky">
        <div class="logo">
            <img src="_content/Datahub.Core/img/datahub-logo-v2.png"/>
        </div>
        <div class="links">
            @foreach (var (href, icon, label, enabled) in GetLinks())
            {
                @if (enabled)
                {
                    <NavLink class="@icon.Color" href="@href" Match="NavLinkMatch.Prefix" ActiveClass="active">
                        <i class="@icon.Name"></i>
                        @Localizer[label]
                    </NavLink>
                }
            }
            @foreach (var link in GetAuthorizedLinks())
            {
                <AuthorizeView Roles="@string.Join(',', link.Roles)">
                    <NavLink class="@link.Icon.Color" href="@link.Href" Match="NavLinkMatch.Prefix" ActiveClass="active">
                        <i class="@link.Icon.Name"></i>
                        @Localizer[@link.Label]
                    </NavLink>
                </AuthorizeView>
            }
        </div>
    </div>
</div>

@code {
    private bool _userHasInitiatives;

    protected override async Task OnInitializedAsync()
    {
        _userHasInitiatives = !(await UserInformationService.IsUserWithoutInitiatives());
    }
    private List<(string Href, Icon Icon, string Label, bool enabled)> GetLinks()
    {
        return new()
        {
            ("/home", Icon.HOME, "SIDEBAR.Home", true),
            ($"/{UrlPathSegment.PROJECTS}", Icon.PROJECT, "SIDEBAR.DataProjects", true),
            ("/resources", Icon.RESOURCES, "SIDEBAR.Resources", _userHasInitiatives),
            ("/tools", Icon.TOOLS, "SIDEBAR.Tools", true),
            ("/discovery", Icon.CATALOG, "SIDEBAR.Catalog", (IsFeatureEnabled("DataCatalog") && _userHasInitiatives))
            //("/data", Icon.STORAGE, "SIDEBAR.Storage"),
            //("/datasets", Icon.DATASETS, "SIDEBAR.Datasets"),
            //("/powerbi", Icon.POWERBI, "SIDEBAR.PowerBI"),      
        };
    }

    private List<(string Href, Icon Icon, string Label, List<string> Roles)> GetAuthorizedLinks()
    {

        var projects = ServiceAuthManager.GetAdminProjectRoles();
        if (projects.Any())
        {
            return new()
            {
                ("/administration", Icon.ADMIN, "SIDEBAR.Admin", projects),
            };
        }
        else
        {
            return new();
        }
    }

    private bool IsFeatureEnabled(string name)
    {
        return Configuration[name] == "enabled";
    }
}