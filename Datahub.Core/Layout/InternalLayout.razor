@inherits LayoutComponentBase
@using Microsoft.Identity.Web

@inject IMSGraphService _msGraphService
@inject IMyDataService _apiService
@inject NavigationManager _navigationManager
@inject UserLocationManagerService _userLocationManagerService
@inject IDatahubAuditingService _auditingService
@inject IUserCircuitCounterService _userCircuitCounterService
@inject MicrosoftIdentityConsentAndConditionalAccessHandler _consentHandler
@inject IConfiguration _configuration
@inject IUserInformationService _userInformationService

<MudThemeProvider />
<MudDialogProvider />
<MudSnackbarProvider />


<PageTitle>@Localizer[_configuration["Title"]]</PageTitle>

<AuthorizeView>
    <Authorized>
        <div class="application-wrapper">
            <InternalSidebar />
            <CascadingValue Value="@_userLanguage" Name="UserLanguage">
                <div class="main-layout">
                    <TopbarLite />
                    <div class="ui-control" style="background-color:white">
                        <div class="main-page">
                            <ErrorBoundary @ref="_errorBoundary">
                                <ChildContent>
                                    @if (_isSessionEnabled == true)
                                    {
                                        @Body
                                    }
                                    @if (_isSessionEnabled == false)
                                    {
                                        <TooManyTabs />
                                    }
                                </ChildContent>
                                <ErrorContent Context="ex">
                                    @if (HandleException(@ex))
                                    {
                                        <Error CorrelationId=@_correlationId />
                                    }
                                    else
                                    {
                                        @Body
                                    }

                                </ErrorContent>
                            </ErrorBoundary>
                        </div>
                    </div>
                </div>
            </CascadingValue>
        </div>
    </Authorized>
    <NotAuthorized>
        <div>@Localizer["ERROR-PAGE.ConnectionLost-Label"]</div>
    </NotAuthorized>
</AuthorizeView>

@code
{
    private string _currentLanguage = "en";
    private void SetLanguage(string language)
    {
        _currentLanguage = language;

        StateHasChanged();
    }

    private (Func<string> currentLanguage, Action<string> setLanguage) _userLanguage;
    private ErrorBoundary _errorBoundary;
    private string _correlationId;
    private Exception _lastException;
    private bool? _isSessionEnabled;

    protected override void OnParametersSet()
    {
        _errorBoundary?.Recover();
    }

    protected override async Task OnInitializedAsync()
    {
        var user = await _userInformationService.GetAuthenticatedUser(true);
        _userLanguage = (() => _currentLanguage, (s) => SetLanguage(s));
        if (!user.Identity?.IsAuthenticated ?? true)
        {
            var scopes = _configuration["Graph:Scopes"]
                .Split(',');
            _consentHandler.ChallengeUser(scopes);
            return;
        }

        try
        {
            _isSessionEnabled = await _userCircuitCounterService.IsSessionEnabled();
        }
        catch (Exception ex)
        {
            _consentHandler.HandleException(ex);
        }
        await _apiService.SetupUserFolders();
    }

    private bool IsValidException(Exception ex)
    {
        return !(ex is ObjectDisposedException);
    }

    private bool HandleException(Exception ex)
    {
        if (!IsValidException(ex))
            return false;
        if (ex != _lastException)
        {
            _lastException = ex;
            _ = AuditExceptionAsync(ex);
        }
        return true;
    }

    private async Task AuditExceptionAsync(Exception ex)
    {
        try
        {
            var correlationId = Guid.NewGuid().ToString();
            await _auditingService.TrackException(ex, (nameof(correlationId), correlationId));
            _correlationId = correlationId;
            await InvokeAsync(StateHasChanged);
        }
        catch (Exception)
        {
        }
    }
}
