@inject IUserInformationService UserInformationService
@using Microsoft.Extensions.Configuration
@inject IConfiguration Configuration
@inject IApiService ApiService
@inject UIControlsService UISvc
@inject IJSRuntime JSRuntime
@inject NavigationManager navigationManager

@if (!Hide)
{
    <div class="@ClassName">
        <div id="escapearea" class="modal-background"></div>
        <div class="modal-content">
            <h4 class="nrcan-typography h4 modal-header">@Localizer["ERROR-PAGE.SomethingWentWrong-Label"]</h4>

            <div class="modal-body" style="overflow: auto; max-height: 400px;">
                <h3>@Localizer["ERROR-PAGE.TechnicalDetails-Label"]</h3>
                
                <p>@GetGeneralErrorText()</p>

                <environment include="Development">
                    @if (ApiService.LastException != null)
                    {
                        <div class="alert-danger">
                            @GenerateExceptionMessage(ApiService.LastException)
                        </div>
                    }
                </environment>
            </div>

            <div class="modal-footer">
                <a href="#" type="button" class="submitbutton finish" @onclick="() => Reload()">@Localizer["Ok"]</a>
            </div>
        </div>
    </div>
}

@code
{
    [Parameter]
    public bool Hide { get; set; } = true;

    private string ClassName
    {
        get
        {
            return $"page-modal modal-content-large {(Hide ? "hidden" : "")}";
        }
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();

        UISvc.OnErrorModalShow += Show;
    }

    public void Reload()
    {
        // This is when WE CATCH an excepton and handle it
        ApiService.LastException = null;
        Hide = true;
        navigationManager.NavigateTo("/");
    }

    public RenderFragment GenerateExceptionMessage(Exception ex, int level = 1)
    {
        RenderFragment displaFragment = b =>
        {
            b.OpenElement(level, "p");
            b.OpenElement(level + 1, "b");
            b.AddContent(level + 2, Localizer["ERROR-PAGE.Message-Label"]);
            b.CloseElement();
            b.CloseElement();

            b.OpenElement(level, "p");
            b.AddContent(level + 1, ex.Message);
            b.CloseElement();

            b.OpenElement(level, "p");
            b.OpenElement(level + 1, "b");
            b.AddContent(level + 2, Localizer["ERROR-PAGE.StackTrace-Label"]);
            b.CloseElement();
            b.CloseElement();

            b.OpenElement(level, "ul");
            ex.StackTrace.Split("\r\n").ToList().ForEach(line =>
            {
                b.OpenElement(level + 1, "li");
                b.AddContent(level + 2, $"{line}");
                b.CloseElement();
            });
            b.CloseElement();

            if (ex.InnerException != null)
            {
                b.OpenElement(level, "p");
                b.OpenElement(level + 1, "b");
                b.AddContent(level + 2, Localizer["ERROR-PAGE.InnerException-Label"]);
                b.CloseElement();
                b.CloseElement();

                b.OpenElement(level, "ul");
                b.AddAttribute(level, "style", "list-style-type: none;");
                b.AddContent(level + 1, GenerateExceptionMessage(ex.InnerException, level + 2));
                b.CloseElement();
            }
        };

        return displaFragment;
    }

    private string GetGeneralErrorText()
    {
        var errorLabel = Localizer["ERROR-PAGE.ErrorExplanation-Text"].ToString();
        var placeholder = "<>";
        var correlationId = GetCorrelationId(ApiService.LastException, placeholder);
        return errorLabel.Replace(placeholder, correlationId);
    }

    static string GetCorrelationId(Exception ex, string defaultValue)
    {
        var key = "correlationid";
        if (ex?.Data?.Contains(key) == true)
        {
            return ex.Data[key] as string;
        }
        return defaultValue;
    }

    public void Show()
    {
        Hide = false;
        StateHasChanged();
    }
}