@using Datahub.Achievements
@using Blazored.LocalStorage
@using Datahub.Achievements.Models

@inject AchievementService _achievementsService
@inject ISnackbar _snackbar
@inject NavigationManager _navigationManager
@inject ILocalStorageService _localStorage;

@implements IDisposable

@code {
    
    protected override void OnInitialized()
    {
        base.OnInitialized();
        
        _navigationManager.LocationChanged += OnLocationChanged;
        _achievementsService.AchievementEarned += OnAchievementEarned;
        _snackbar.Configuration.PositionClass = Defaults.Classes.Position.TopCenter;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        
        if (firstRender)
        {
            await _achievementsService.AddOrIncrementTelemetryEvent(DatahubUserTelemetry.TelemetryEvents.UserLogin, 1);
        }
    }

    private void OnAchievementEarned(object sender, AchievementEarnedEventArgs e)
    {
        _snackbar.Add(e.Achievement!.Name, Severity.Normal, config => { config.Icon = e.Achievement!.Icon; });
    }

    private void OnLocationChanged(object sender, LocationChangedEventArgs e)
    {
        var relativeUrl = new Uri(e.Location).PathAndQuery;
        
        InvokeAsync(async () =>
        {
            await _achievementsService.AddOrIncrementTelemetryEvent(relativeUrl, 1);
            StateHasChanged();
        });
    }
    
    void IDisposable.Dispose()
    {
        _navigationManager.LocationChanged -= OnLocationChanged;
        _achievementsService.AchievementEarned -= OnAchievementEarned;
    }
}