@inject UIControlsService UI

<div class="modal-content">
    <div class="modal-background" @onclick="() => OnDecision.InvokeAsync(false)"></div>

    <h4 class="nrcan-typography h4 modal-header">@HeaderText</h4>

    @foreach (var text in ChoiceTextList)
    {
        <div class="modal-body">@text</div>
    }

    @if (isProcessing)
    {
        <Spinner />
    }
    <div class="modal-footer">
        <button class="submitbutton finish" disabled="@isProcessing" @onclick="() => Processing(true)">@ConfirmText</button>
        <button class="submitbutton cancel" disabled="@isProcessing" @onclick="() => Processing(false)">@CancelText</button>
    </div>
</div>

@code{
    [Parameter]
    public EventCallback<bool> OnDecision { get; set; }

    [Parameter]
    public List<string> ChoiceTextList { get; set; }

    [Parameter]
    public string HeaderText { get; set; }

    [Parameter]
    public string ConfirmText { get; set; }

    [Parameter]
    public string CancelText { get; set; } 

    public bool isProcessing { get; set; } = false;

    protected override void OnInitialized()
    {
        ConfirmText = string.IsNullOrEmpty(ConfirmText) ? Localizer["BUTTONS.Confirm"] : ConfirmText;
        CancelText = string.IsNullOrEmpty(CancelText) ? Localizer["BUTTONS.Cancel"] : CancelText;
    }

    public async Task Processing(bool response)
    {
        isProcessing = true;
        await InvokeAsync(StateHasChanged);
        try
        {
            await OnDecision.InvokeAsync(response);        
        }
        finally
        {
            isProcessing = false;
        }
        await InvokeAsync(StateHasChanged);
    }  
}