@*Breadcrumbs.razor*@
@implements IDisposable
@inherits LayoutComponentBase
@using MudBlazor
@using System.Globalization

<MudBreadcrumbs Items="@_items" MaxItems="7" Separator=">"/>

@code {

    [Inject]
    private NavigationManager _navigationManager { get; set; }

    [Parameter]
    public List<BreadcrumbItem> _items { get; set; }

    private TextInfo _textInfo = CultureInfo.CurrentCulture.TextInfo;
    private string _lang = CultureInfo.CurrentCulture.TwoLetterISOLanguageName;

    protected override void OnInitialized()
    {
        _navigationManager.LocationChanged += OnLocationChanged;
        var relativePath = _navigationManager.ToBaseRelativePath(_navigationManager.Uri);

        // Set new breadcrumb items on each invocation
        SetBreadcrumbs(relativePath);

        base.OnInitialized();
    }

    private void OnLocationChanged(object sender, LocationChangedEventArgs e)
    {
        var relativePath = _navigationManager.ToBaseRelativePath(e.Location);
        SetBreadcrumbs(relativePath);
    }

    private void SetBreadcrumbs(string path)
    {
        var pathItems = path.Split('/');

        // Always initialize with GoC and Home as base breadcrumb
        _items = new List<BreadcrumbItem>
        {
    // Government of Canada Base Path
            //new(
            //    href: $"https://www.canada.ca/{_lang}.html",
            //    text: "Canada.ca"
            //    ),
            new(
                href: "/home",
                disabled: "home" == pathItems.Last(),
                text: @Localizer["Home"]
                )
        };

        // keep track of previous crumbs to avoid appending /home
        var prev = "";
        foreach (var crumb in pathItems)
        {
            if (crumb == "home") continue;
            var crumbText = _textInfo.ToTitleCase(System.Web.HttpUtility.UrlDecode(crumb));
            _items.Add(new BreadcrumbItem(
                href: $"{prev}/{crumb}",
                disabled: crumb == pathItems.Last(),
                text: @Localizer[crumbText]
                ));
            prev += $"/{crumb}";
        }
        StateHasChanged();
    }

    void IDisposable.Dispose()
    {
        _navigationManager.LocationChanged -= OnLocationChanged;
    }

}
