@using Datahub.Core.Data
@inject ServiceAuthManager _serviceAuthManager
@inject IUserInformationService _userInformationService
@inject NavigationManager _navigationManager

@if (_isDataHubAdmin)
{
    <MudStack Row>
        <MudSwitch 
            T="bool"
            Color="Color.Primary"
            Checked="@_isViewAsGuest"
            CheckedChanged="ToggleGuestMode">@Localizer["Enable Guest View"]</MudSwitch>
        <MudSwitch T="bool"
               Color="Color.Primary"
               Checked="@_isViewAsVisitor"
               CheckedChanged="ToggleVisitorMode">@Localizer["Enable Visitor View"]</MudSwitch>
    </MudStack>

}

@code {

    [CascadingParameter]
    private Task<AuthenticationState> AuthenticationStateTask { get; set; }

    private bool _isViewAsGuest;
    private bool _isViewAsVisitor = false;

    private bool _isDataHubAdmin = false;

    private string _tooltipText => _isViewAsGuest ? Localizer["View portal as admin"] : Localizer["View portal as guest"];

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        _isViewAsGuest = await _userInformationService.IsViewingAsGuest();

        var userClaims = (await AuthenticationStateTask).User;
        _isDataHubAdmin = userClaims.IsInRole(RoleConstants.DATAHUB_ROLE_ADMIN);
    }

    private async Task ToggleGuestMode(bool newValue)
    {
        await _userInformationService.SetViewingAsGuest(newValue);
        _navigationManager.NavigateTo(_navigationManager.Uri, true);
    }

    private async Task ToggleVisitorMode(bool newValue)
    {
        _isViewAsVisitor = newValue;
        _isViewAsGuest = false;
        await _userInformationService.SetViewingAsGuest(false);
        await _userInformationService.SetViewingAsVisitor(newValue);
        _navigationManager.NavigateTo(_navigationManager.Uri, true);
    }

}