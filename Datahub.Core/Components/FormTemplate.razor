@inject IStringLocalizer DataLocalizer
@using Datahub.Core.Views.Modals
@using Microsoft.EntityFrameworkCore
@using Datahub.Core.Data
@typeparam T
@typeparam U where U : DbContext
@inject UIControlsService UI
@inherits HtmlElement
@inject IDatahubAuditingService AuditingService
@using System.Reflection

@if(Metadata is null || !Metadata.IsLoaded())
{
    <Spinner></Spinner>
}
else
{



<AeCard class="facardForms" CardPosition="AeCard.CardStyle.Horizontal">
    <AeTypography Variant="h3">@DataLocalizer[Metadata.Header]</AeTypography>

            
        <AuthorizeView Roles="@Metadata.TableRoles">
            

            @if ((Metadata.DataSet.Any() && Metadata.FilterProperties != null) || _selectedFilter != "All")
            {
                <AeFlex id="filterBar">            
                    @foreach (var filter in Metadata.FilterProperties)
                    {   
                        var validDisplayValues = filter.Choices.DynamicInvoke() as List<string>;
                        var filterLabel = $"{filter.Label.DynamicInvoke() as string}: {_selectedFilter}";                    
                        var filterClass = "filterDropdown";
                        <AeDropdown Items="validDisplayValues" OnChange="HandleFilterChanges" Label="@filterLabel" class="@filterClass"/>                
                    }

                </AeFlex>
            }


            @if (Metadata.DataSet.Any())
            {
                <AePaginatedTable 
                    T="@T"
                    Accessors="Metadata.AccessorFunctions.ToList()"
                    Dataset="Metadata.DataSet"
                    ColorAccessor="getColor"
                    Headers="Metadata.Headers.ToList()"
                    GridTemplateColumns="@Metadata.GridTemplateColumns"
                    MaxHeight="400"
                    OnRowClick="@SetFormEdit" 
                    Page="@_lastClicked"
                    PageSize="10"
                    DisableFirstSort="DisableFirstSort"
                    @ref=_myTable
                    />

                <AePagination 
                Pageable="@_myTable" 
                OnPageClick="OnPageClick"> 
                <LeftIcon><i class='fad fa-chevron-double-left'></i></LeftIcon> 
                <RightIcon><i class='fad fa-chevron-double-right'></i></RightIcon>
                </AePagination> 
            }
        </AuthorizeView>
        <AeFlex id="buttonBar">
        <div class="icon-container" style="margin-bottom: 10px; margin-left: 5px;">
            <FAButton Text="@_addButton" Icon="far fa-plus-square" onclick="CreateNewRecord" />
        </div>
    </AeFlex>
</AeCard>

@if (SelectedRecord != null)
{
    @if (Metadata.MarkDownContent?.Any() ?? false)
    {
        <AeCard class="facardForms" CardPosition="AeCard.CardStyle.Horizontal">
            @foreach (var content in Metadata.MarkDownContent)
            {
                <AeMarkdown Content="@($"{content}")"></AeMarkdown>
            }
        </AeCard>
    }
    <AeCard class="facardForms" CardPosition="AeCard.CardStyle.Horizontal">
    <AeModelForm Model="SelectedRecord"
                 T="@T"
                 OnValidSubmit="HandleFormSubmit"
                 OnInvalidSubmit="HandleFormInvalidSubmit"
                 OnCancel="ClearForm"
                 OnConfigure="OnConfigure"
                 CancelLabel="Cancel"
                 SubmitLabel="@Metadata.SaveButtonText"
                 OnChange="OnChange"
                 LabelForPropertyFunc="@GetDataLabel"
                 LabelsOnTop="true"
                 LocalizerFunction="@GetDataLabel"
                 IsSubmitEnabled="Metadata.IsSubmitEnabled" />
    </AeCard>

    @if (Metadata.MarkDownContentFooter?.Any() ?? false)
    {
        <AeCard class="facardForms" CardPosition="AeCard.CardStyle.Horizontal">
            @foreach (var content in Metadata.MarkDownContentFooter)
            {
                <AeMarkdown Content="@($"{content}")"></AeMarkdown>
            }
        </AeCard>
    }

}
}
@code {

    [Parameter]
    public FormMetadata<T> Metadata { get; set; }
    [Parameter]
    public EventCallback<EditContext> HandleSubmit { get; set; }
    [Parameter]
    public EventCallback<EditContext> HandleInvalidSubmit { get; set; }
    [Parameter]
    public EventCallback<IModelFormContext> OnConfigureForms { get; set; }
    [Parameter]
    public EventCallback<ModelFormChangeArgs> OnChangeForms { get; set; }
    [Parameter]
    public EventCallback CreateNewRecord { get; set; }
    [Parameter]
    public T SelectedRecord { get; set; }
    [Parameter]
    public EventCallback<T> SetFormEditRecord { get; set; }
    [Parameter]
    public Action<string> HandleFilterChange { get; set; }
    [Parameter]
    public U Context { get; set; }
    [Parameter]
    public bool DisableFirstSort { get; set; }


    private int _lastClicked = 0;
    private IPageableComponent _myTable;


    private string _selectedFilter = "All";
    private string _addButton => Localizer["Add New"];
    
    private void HandleFilterChanges(string selectedValue)
    {
        _selectedFilter = selectedValue;
        HandleFilterChange.Invoke(selectedValue);
    }

    private void OnPageClick(int pageIndex)
    {
        _lastClicked = pageIndex;
    }

    private async Task SetFormEdit(T selectedRecord)
    {
        //if (Context.ChangeTracker.HasChanges())
        //{
        //    var messages = new List<string>() { "Would you like to save the current record?" };
        //    await UI.ToggleModal(
        //    @<UserChoiceModal HeaderText="Save Data" ChoiceTextList=@messages OnDecision="(a) => OnConfirmSave(a, application)" ConfirmText="Yes" CancelText="No" />
        //)

        if (Context.ChangeTracker.HasChanges())
        {
            var messages = new List<string>() { "Would you like to save the current record?" };
            await UI.ToggleModal(
    @<UserChoiceModal HeaderText="Save Data" ChoiceTextList=@messages OnDecision="(a) => OnConfirmSave(a, selectedRecord)" ConfirmText="Yes" CancelText="No" />
    );
        }
        await ClearForm();
        await SetFormEditRecord.InvokeAsync(selectedRecord);

    }

    private async void OnConfirmSave(bool isConfirmed, dynamic item)
    {
        var changedEntries = Context.ChangeTracker.Entries();
        if (isConfirmed)
        {

            foreach (var entry in changedEntries)
            {
                entry.Property("Last_Updated_DT").CurrentValue = DateTime.Now;
                entry.Property("Last_Updated_UserId").CurrentValue = Metadata.UserId;                
            }
            await Context.TrackSaveChangesAsync(AuditingService);

        }
        else
        {
            foreach (var entry in changedEntries)
            {
                foreach (var property in entry.OriginalValues.Properties)  
                {
                    var propertyName = property.Name;
                    entry.Property(propertyName).CurrentValue = entry.Property(propertyName).OriginalValue;
                    entry.State = EntityState.Unchanged;
                }
            }                          
        }
        await UI.ToggleModal();                
    }

    protected override void OnAfterRender(bool firstRender)
    {
        // You must re-render after the components are initialized in order for the 
        // component reference to not be null
        if(firstRender){
            StateHasChanged();
        }
    }

    private async Task OnConfigure(IModelFormContext context)
    {        
        if (context != null)
        {
            await OnConfigureForms.InvokeAsync(context);            
        }        
    }

    private async Task OnChange(ModelFormChangeArgs args)
    {        
        if (args != null)
        {
            await OnChangeForms.InvokeAsync(args);            
        }        
    }

    private async Task<T> ClearForm()
    {
        SelectedRecord = default(T);
        StateHasChanged();    
        return await Task.FromResult(default(T));
    }

    private string GetDataLabel(string propName)
    {
        if (!string.IsNullOrEmpty(propName))
            return DataLocalizer[propName];

        return string.Empty;
    }

    private async Task HandleFormSubmit(EditContext editContext)
    {
        await HandleSubmit.InvokeAsync(editContext);
    }

    private async Task HandleFormInvalidSubmit(EditContext editContext)
    {
        await HandleInvalidSubmit.InvokeAsync(editContext);
    }

}
