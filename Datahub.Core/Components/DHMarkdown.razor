@using Markdig
@inject IJSRuntime _jsRuntime;

@if (Content != null)
{
    <span @ref="_elementReference" class="markdown-container">
        @*<AeMarkdown
            @attributes="@InputAttributes"
            Content="@Content"
            LinkRewriter="@LinkRewriter"/>*@
        <MudMarkdown Value=@Content OverrideLinkUrl=@OverrideLinkUrl />
    </span>
}

@code {

    [Parameter]
    public string Content { get; set; }

    [Parameter]
    public Func<string, string> LinkRewriter { get; set; }

    [Parameter(CaptureUnmatchedValues = true)]
    public Dictionary<string, object> InputAttributes { get; set; }

    private ElementReference _elementReference;

    private MarkdownPipeline _pipeline;

    private MarkupString RenderedContent => (MarkupString)RenderHTML();

    private string OverrideLinkUrl(Markdig.Syntax.Inlines.LinkInline linkElement) => LinkRewriter(linkElement.Url);

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);

        if (firstRender && Content != null)
        {
            await StyleCodeblocks();
        }
    }

    public async Task StyleCodeblocks()
    {
        var module = await _jsRuntime.InvokeAsync<IJSObjectReference>("import",
            "./_content/Datahub.Core/Components/DHMarkdown.razor.js");
        await module.InvokeVoidAsync("styleCodeblocks", _elementReference);
    }

    protected override void OnInitialized()
    {
        var builder = new MarkdownPipelineBuilder()
            .UseAdvancedExtensions();
        builder.Extensions.AddIfNotAlready<Datahub.Core.Components.Markdown.MudMDStyleExtension>();
        _pipeline = builder.Build();
    }

    private string RenderHTML()
    {
        var contentToRender = Content ?? string.Empty;

        using var writer = new System.IO.StringWriter();
        var renderer = new Markdig.Renderers.HtmlRenderer(writer);
        renderer.LinkRewriter += LinkRewriter;
        _pipeline.Setup(renderer);
        var doc = Markdig.Markdown.Parse(contentToRender, _pipeline);
        renderer.Render(doc);
        writer.Flush();
        return writer.ToString();
    }
}