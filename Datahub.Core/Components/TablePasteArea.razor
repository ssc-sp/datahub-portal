
<PasteAwareComponent OnContentPasted="FillTable">
    @if (_excelContent.Any() == false)
        {
        <div class="ae table">
            <p>CRTL + V clipboard into this box</p>
        </div>
        }
        else
        {
            <AeTable Accessors="pasteAccessors"
                Dataset="_excelContent" 
                SimpleTable="true">                
            </AeTable>
            
            <AeFlex id="buttonBar">
                <div class="icon-container" style="margin-bottom: 10px; margin-left: 5px;">
                    <FAButton Text="Import" onclick="e => ImportRecords()" />
                </div>
                <div class="icon-container" style="margin-bottom: 10px; margin-left: 5px;">
                    <FAButton Text="Cancel Import" onclick="e => CancelImport()" />
                </div>
            </AeFlex>
        }
    </PasteAwareComponent>

@code {

    [Parameter]
    public EventCallback<List<String[]>> ExcelContent { get; set; }
    [Parameter]
    public EventCallback CancelPaste { get; set; }

    private List<string[]> _excelContent = new List<string[]>();
    private String _parserType = "text";
    private List<Func<String[], string>> pasteAccessors = new List<Func<String[], string>>();
    private List<string> pasteHeaders = new List<string>();


    private Task ImportRecords()
    {
        var content = new List<string[]>(_excelContent);
        _excelContent.Clear();
        return ExcelContent.InvokeAsync(content);
    }

    private void CancelImport()
    {
        _excelContent.Clear();
        StateHasChanged();
    }

    private void PopulateAccessors()
    {
        var totalColumns = _excelContent[0].Length;
        for (int i = 0; i < totalColumns; i++)
        {
            var headerNumber = i+1;
            int j = i;
            pasteHeaders.Add($"Header{headerNumber}");
            var func = new Func<String[], string>(p => { return p[j]; });
            pasteAccessors.Add(func);
        }
    }

    private async Task FillTable(IEnumerable<IDictionary<String, String>> content)
    {
        pasteAccessors.Clear();
        pasteHeaders.Clear();
        _excelContent.Clear();
        if (content == null || content.Count() != 1)
        {
            return;
        }

        var clipboardContent = content.ElementAt(0);
        IExcelContentParser parser = null;
        switch (_parserType)
        {
            case "text":
                parser = new ExcelTextContentParser();
                break;
            case "html":
                parser = new ExcelHtmlContentParser();
                break;
            default:
                break;
        }

        foreach (var item in clipboardContent)
        {
            if (parser.CanParse(item.Key) == false)
            {
                continue;
            }

            var parsedList = await parser.GetRows(item.Value);            
            _excelContent = parsedList.ToList();
            PopulateAccessors();
        }
    }
}
