@using Datahub.Core.Data
@inject IApiService ApiService
@inject NavigationManager NavigationManager
@inject IMSGraphService MSGraphService
@inject IUserInformationService UserInformationService
@using Microsoft.Identity.Web
@inject MicrosoftIdentityConsentAndConditionalAccessHandler ConsentHandler
@inject IExternalSearchService ExternalSearchService

<AeSearchInput id="topSearch" Placeholder="@Localizer.GetString("Search...")" OnInputChangeWithLastKey="(v, e) => HandleSearch(v, e)" ClearIconFAClass="null"/>

<Popup Show="isSearching || hasResults" class="search-popup" OnCloseClick="CloseSearch">
    <ChildContent>
        <div class="search-list-container">
            @if (hasResults)
            {
                if (ApiService.SearchDataFolder.AllFiles.Count == 0)
                {
                    <div class="grid-item">
                        <div class="textcontent large-text">@Localizer["No results found"]</div>
                    </div>
                }
                @foreach(FileMetaData file in ApiService.SearchDataFolder.AllFiles)
                {
                    <div class="search-grid-row" @ondblclick="() => DownloadFile(file)">
                        <div class="grid-item icons">
                            @if (!string.IsNullOrWhiteSpace(isDownloadingFileId) && isDownloadingFileId == file.fileid)
                            {
                                <Spinner Small="true" />
                            }
                            else
                            {
                                <i class="@GetFileTypeIcon(file)"></i>
                            }
                        </div>
                        <div class="grid-item">
                            <div class="textcontent large-text">@file.filename</div>
                            <div class="break"></div>
                            <div class="textcontent small-text"><GraphUserInformation UserId="@file.ownedby" IsUserNameRequested="true" PostText="@($"{Localizer["created this on"]} {displayDate(file.createdts)}")"></GraphUserInformation></div>
                        </div>
                        <div class="grid-item">
                            <div class="textcontent" style="justify-content: flex-end;">
                                @displayDate(file.lastmodifiedts)
                            </div>
                        </div>
                    </div>
                }

                if (isSearchingAdditional || hasAdditionalResults)
                {
                    <hr />
                    if (hasAdditionalResults)
                    {
                        <p class="additional-results">
                            <span>@Localizer["Additional results available on search page:"] </span>
                            <span>
                                @if (hasFGPResults) { <span class="additional-result-label">@Localizer["FGP"]</span> }
                                @if (hasOpenDataResults) { <span class="additional-result-label">@Localizer["Open Data"]</span> }
                            </span>
                        </p>
                    }

                    if (isSearchingAdditional)
                    {
                        <Spinner Small="true" />
                    }
                }
            }
            else
            {
                <Spinner Small="true" />
            }
        </div>
    </ChildContent>
    <Footer>
        <button class="submitbutton cancel" type="submit" @onclick="() => CloseSearch()">@Localizer["Close"]</button>
        <button class="submitbutton finish" type="submit" @onclick="() => GotoSearchPage()">@Localizer["Goto search page"]</button>
    </Footer>
</Popup>
   
@code
{
    // Have we searched already since init control.
    // If so any change to search text will cause a search to occur
    public bool searchedAlready { get; set; }
    public string searchText { get; set; }

    public bool hasResults { get; set; }

    public bool isSearching { get; set; }
    public string isDownloadingFileId { get; set; }

    private bool isSearchingFGP { get; set; }
    private bool hasFGPResults { get; set; }

    private bool isSearchingOpenData { get; set; }
    private bool hasOpenDataResults { get; set; }

    private bool hasAdditionalResults { get => hasFGPResults || hasOpenDataResults; }
    private bool isSearchingAdditional { get => isSearchingFGP || isSearchingOpenData; }

    private Microsoft.Graph.User _currentUser;

    protected string GetFileTypeIcon(FileMetaData file)
    {
        return $"{DatahubTools.GetFileTypeIcon(file.fileformat)} fa-2x";        
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        try
        {
            _currentUser = await UserInformationService.GetUserAsync();
        }
        catch (Exception ex)
        {
            ConsentHandler.HandleException(ex);
        }
    }

    private void CloseSearch()
    {
        isSearching = false;
        hasResults = false;
        searchedAlready = false;
        ApiService.SearchDataFolder.Clear();

        StateHasChanged();
    }

    public async Task DownloadFile(FileMetaData file)
    {
        isDownloadingFileId = file.fileid;
        StateHasChanged();

        await ApiService.DownloadFile(file, null);

        isDownloadingFileId = "";
        StateHasChanged();
    }

    public string displayDate(DateTime date)
    {
        if (date.Year == DateTime.Now.Year)
        {
            return date.ToString("MMM d");
        }

        return date.ToString("M/d/yy");
    }

    public void GotoSearchPage()
    {
        isSearching = false;
        hasResults = false;
        StateHasChanged();
        NavigationManager.NavigateTo($"/search/{searchText}");
    }

    private async Task SearchFGP(string keyword)
    {
        hasFGPResults = false;
        isSearchingFGP = true;
        StateHasChanged();

        var result = await ExternalSearchService.SearchFGPByKeyword(searchText);
        hasFGPResults = result.Count > 0;
        isSearchingFGP = false;
        StateHasChanged();
    }

    private async Task SearchOpenDate(string keyword)
    {
        hasOpenDataResults = false;
        isSearchingOpenData = true;
        StateHasChanged();

        var result = await ExternalSearchService.SearchOpenDataByKeyword(searchText);
        hasOpenDataResults = result.Results.Count > 0;
        isSearchingOpenData = false;
        StateHasChanged();
    }

    private async void HandleSearch(string newValue, KeyboardEventArgs ev)
    {
        searchText = newValue;
        if (ev?.Code == "Enter" || searchedAlready || (!string.IsNullOrWhiteSpace(newValue) && newValue.Length >= 4))
        {
            // Clear previous results
            ApiService.SearchDataFolder.Clear();
            isSearching = true;
            hasResults = false;
            StateHasChanged();

            string filter = $"search.ismatch('{newValue}*', 'filename', 'full', 'any') and ownedby eq '{_currentUser.Id}'";
            var fgpTask = SearchFGP(searchText);
            var openDataTask = SearchOpenDate(searchText);
            await ApiService.SearchIndex(ApiService.SearchDataFolder, filter, _currentUser);
            isSearching = false;
            hasResults = true;
            searchedAlready = true;
            StateHasChanged();
        }
    }
}
