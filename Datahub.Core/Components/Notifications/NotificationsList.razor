@inject TimeZoneService _timezoneService
@inject ISystemNotificationService _systemNotificationService
@inject IUserInformationService _userInfoService
@inject NavigationManager _navigationManager

@implements IDisposable

@using Microsoft.AspNetCore.Components
@using Datahub.Core.EFCore
@using MudBlazor.Utilities
@using System.Globalization

@if (_notifications == null)
{
    <MudSkeleton/>
    <MudSkeleton SkeletonType="SkeletonType.Rectangle" Width="300px" Height="110px"/>
    return;
}

<MudExpansionPanels DisableBorders Elevation="0">
    @foreach (var notification in _notifications)
    {
        var time = GetLocalTime(notification).Result;
        <MudExpansionPanel Text="@time">
            <MudCard Outlined>
                <MudCardHeader>
                    <CardHeaderActions>
                        <MudToggleIconButton
                            Toggled="notification.Read_FLAG"/>
                    </CardHeaderActions>
                </MudCardHeader>
                <MudCardContent>
                    <MudText>
                        @(UserLanguageIsFrench ? notification.NotificationTextFr_TXT : notification.NotificationTextEn_TXT)
                    </MudText>
                </MudCardContent>

                @if (!string.IsNullOrEmpty(notification.ActionLink_URL))
                {
                    <MudCardActions>
                        <MudButton OnClick="@(async () => await GoToActionLink(notification))" Variant="Variant.Text" Color="Color.Primary">
                            @Localizer[notification.ActionLink_Key ?? $"{LocalizationPrefix}.DefaultActionLinkText"]
                        </MudButton>
                    </MudCardActions>
                }
            </MudCard>
        </MudExpansionPanel>
    }
</MudExpansionPanels>
@* *@
@* *@
@* @foreach (var n in _notifications) *@
@*     { *@
@*         <AeCard class=@GetNotificationCardCssClass(n)> *@
@*             <ChildContent> *@
@*                 <div class="notification-header"> *@
@*                     <span class="notification-timestamp">@(GetLocalTime(n))</span> *@
@*                     <span class="notification-readmarker" *@
@*                           title="@(n.Read_FLAG ? @Localizer[$"{LocalizationPrefix}.MarkUnread"] : @Localizer[$"{LocalizationPrefix}.MarkRead"])"> *@
@*                         <i class="@(GetUnreadCssClass(n))" @onclick=@(() => ToggleUnread(n))></i> *@
@*                     </span> *@
@*                 </div> *@
@*                 @if (!n.Read_FLAG) *@
@*                 { *@
@*                     <p>@(UserLanguageIsFrench ? n.NotificationTextFr_TXT : n.NotificationTextEn_TXT)</p> *@
@*                     @if (!string.IsNullOrEmpty(n.ActionLink_URL)) *@
@*                     { *@
@*                         <AeButton OnClickEvent=@(async () => await GoToActionLink(n))> *@
@*                             @Localizer[n.ActionLink_Key ?? $"{LocalizationPrefix}.DefaultActionLinkText"] *@
@*                         </AeButton> *@
@*                     } *@
@*                 } *@
@*             </ChildContent> *@
@*         </AeCard> *@
@*     } *@
@* </div> *@
@* <div class="notification-buttonbar"> *@
@*     @if (ShowPreviousPageButton) *@
@*     { *@
@*         <AeButton Disabled=@IsLoading class="newer-button" OnClickEvent=@PrevPage>@Localizer[$"{LocalizationPrefix}.Newer"]</AeButton> *@
@*     } *@
@*     @if (ShowLatestPageButton) *@
@*     { *@
@*         <AeButton Disabled=@IsLoading class="latest-button" OnClickEvent=@FirstPage>@Localizer[$"{LocalizationPrefix}.BackToLatest"]</AeButton> *@
@*     } *@
@*     @if (ShowNextPageButton) *@
@*     { *@
@*         <AeButton Disabled=@IsLoading class="older-button" OnClickEvent=@NextPage>@Localizer[$"{LocalizationPrefix}.Older"]</AeButton> *@
@*     } *@
@*     &nbsp; *@
@* </div> *@
@* <div> *@
@*     <label> *@
@*         <input type="checkbox" @bind=@UnreadOnly @onclick=@ToggleShowUnreadOnly disabled=@IsLoading/> *@
@*         @Localizer[$"{LocalizationPrefix}.ShowUnreadOnly"] *@
@*     </label> *@
@* </div> *@

@code {
    private static readonly string LocalizationPrefix = "SYSTEM-NOTIFICATION";
    private List<SystemNotification> _notifications;
    private bool _isLoading { get; set; }
    private int UnreadNotificationCount { get; set; }
    private bool HasUnreadNotifications => UnreadNotificationCount > 0;

    private string CurrentUserId;

    private bool UnreadOnly { get; set; }


    private bool UserLanguageIsFrench => CultureInfo.CurrentUICulture.TwoLetterISOLanguageName.ToLowerInvariant() == "fr";

    private int PageSize { get; set; } = 1;
    private int CurrentPage { get; set; }
    private int TotalNotificationCount { get; set; }
    private int MaxPage => (TotalNotificationCount - 1) / PageSize;

    private bool ShowLatestPageButton => CurrentPage > 0;
    private bool ShowPreviousPageButton => CurrentPage > 1;
    private bool ShowNextPageButton => CurrentPage < MaxPage;

    protected override async Task OnInitializedAsync()
    {
        PageSize = _systemNotificationService.GetNotificationPageSize();
        if (PageSize < 1)
        {
            PageSize = ISystemNotificationService.DEFAULT_PAGE_SIZE;
        }

    // prepare the timezone service so timestamps get rendered properly right away
        await _timezoneService.GetLocalDateTime(DateTime.UtcNow);
        CurrentUserId = await _userInfoService.GetUserIdString();

        await RefreshNotifications();
        _systemNotificationService.Notify += OnNotify;
    }

}