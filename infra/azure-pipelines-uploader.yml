# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- develop

variables:
  target_os: win-x64
  version.MajorMinor: 2.0
  version.Revision: $[counter(variables['version.MajorMinor'], 0)]
  releaseVersion: $(version.MajorMinor).$(version.Revision).0
  appName: fsdh-uploader
  releaseTag: $(appName)-$(releaseVersion)
  system.debug: False

jobs:
- job: job_package_msix
  displayName: 'Agent job: MSIX Package'
  pool:
    vmImage: windows-latest
  steps:
  - script: |
        echo FSDH - Building Desktop Uploader
        echo "System token: $(System.AccessToken)"

  - checkout: self
    clean: true
    lfs: true
    fetchTags: false
    persistCredentials: True
  - task: PowerShell@2
    displayName: 'Modify manifest'
    inputs:
        targetType: 'inline'
        script: |
            cd Desktop/Desktop.Uploader

            [IO.Directory]::SetCurrentDirectory((Convert-Path (Get-Location -PSProvider FileSystem)))
            $filetxt = [IO.File]::ReadAllText(".\Platforms\Windows\Package.appxmanifest") 
            $filetxt = $filetxt.replace('0.0.0.0',"$(releaseVersion)")
            $filetxt
            Set-Content -Path ".\Platforms\Windows\Package.appxmanifest" -Value $filetxt

  - task: Bash@3
    displayName: Install .NET MAUI
    inputs:
        targetType: 'inline'
        script: |
            dotnet --version
            dotnet nuget locals all --clear
            dotnet workload install maui --source https://aka.ms/dotnet7/nuget/index.json --source https://api.nuget.org/v3/index.json
            dotnet workload install android ios maccatalyst tvos macos maui wasm-tools maui-maccatalyst --source https://aka.ms/dotnet7/nuget/index.json --source https://api.nuget.org/v3/index.json
            dotnet workload list

    # https://docs.microsoft.com/en-us/dotnet/maui/windows/deployment/overview
  - task: PowerShell@2
    displayName: 'dotnet publish Windows MSIX to $(Build.ArtifactStagingDirectory)'
    inputs:
        targetType: 'inline'
        script: |
            cd $(Build.SourcesDirectory)/Desktop/Desktop.Uploader
            dotnet publish -c Release -o $(Build.ArtifactStagingDirectory)

  - task: PowerShell@2
    displayName: 'Locate and move MSIX'
    inputs:
        targetType: 'inline'
        script: |
            $msixPack = Get-ChildItem -Recurse -Include Desktop.Uploader*.msix -Path "$(Build.Repository.LocalPath)/*"
            Write-Host "Packaged MSIX File: $msixPack"
            Copy-Item $msixPack -Destination $(Build.ArtifactStagingDirectory)/
            $msixFinal= Get-ChildItem -Recurse -Include *.msix -Path "$(Build.ArtifactStagingDirectory)/*"
            Write-Host "##vso[task.setvariable variable=MSIX_FILE;]$msixFinal"

  - task: DotNetCoreCLI@2
    displayName: 'Install Azure SignTool'
    inputs:
        command: custom
        custom: tool
        arguments: 'install --global AzureSignTool'

  - task: AzureKeyVault@2
    displayName: "Get devops client ID and secret"
    inputs:
        azureSubscription: $(az_subscription)
        KeyVaultName: $(kv_name)
        SecretsFilter: 'devops-client-id, devops-client-secret'
        RunAsPreJob: True
  
  - task: PowerShell@2
    displayName: 'Sign the package'
    inputs:
        targetType: 'inline'
        script: |
            & write-host "cid=$(devops-client-id), cst=$(devops-client-secret), file=$(MSIX_FILE)"
            & AzureSignTool sign -kvu ${env:cert_kv_url} -kvc ${env:cert_name} -kvi $(devops-client-id) -kvs "$(devops-client-secret)" -kvt ${env:cert_kv_tenant} -v "$(MSIX_FILE)"

  - task: PublishPipelineArtifact@1
    inputs:
        targetPath: '$(Build.ArtifactStagingDirectory)' 
        artifactName: 'fsdh-desktop-uploader'

  - task: PowerShell@2
    displayName: 'Create Github tag'
    env:
        MY_ACCESS_TOKEN: $(System.AccessToken)
    inputs:
        targetType: 'inline'
        script: |
            git config --global user.name "AzureDevOps Agent"
            git tag $(releaseTag) --force
            git push origin $(releaseTag) --force
            Get-ChildItem $(Build.ArtifactStagingDirectory)/*.msix

  - task: PowerShell@2
    displayName: 'Create .appinstaller'
    inputs:
        targetType: 'inline'
        script: |
          cd $(Build.ArtifactStagingDirectory)/
          $installer = "<?xml version=""1.0"" encoding=""utf-8""?>
          <AppInstaller xmlns=""http://schemas.microsoft.com/appx/appinstaller/2018"" Version=""$(releaseVersion)"" Uri=""https://github.com/ssc-sp/datahub-portal/releases/download/$(releaseTag)/$(appName).appinstaller"" >
              <MainPackage Name=""$appName"" Publisher=""CN=Shared Services Canada, O=Shared Services Canada, L=Ottawa, S=Ontario, C=CA"" Version=""$(releaseVersion)"" ProcessorArchitecture=""x64"" Uri=""https://github.com/ssc-sp/datahub-portal/releases/download/$(releaseTag)/Desktop.Uploader_$(releaseVersion)_x64.msix"" />       
          <UpdateSettings> 
              <OnLaunch HoursBetweenUpdateChecks=""0"" ShowPrompt=""true""/>
              <ForceUpdateFromAnyVersion>true</ForceUpdateFromAnyVersion>
          </UpdateSettings>
          </AppInstaller>"
          New-Item "$(appName).appinstaller" -ItemType File
          Set-Content "$(appName).appinstaller" -Value $installer
  - task: GitHubRelease@1
    displayName: 'Upload to Github Release'
    inputs:
        gitHubConnection: "github-ssc-sp"
        repositoryName: '$(Build.Repository.Name)'
        tagSource: gitTag
        tagPattern: '$(releaseTag)'
        assets: |
          '$(Build.ArtifactStagingDirectory)/*.msix'
          '$(Build.ArtifactStagingDirectory)/*.appinstaller'
        isPreRelease: true
